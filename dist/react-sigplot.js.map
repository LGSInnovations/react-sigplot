{"version":3,"sources":["webpack://react-sigplot/webpack/universalModuleDefinition","webpack://react-sigplot/webpack/bootstrap","webpack://react-sigplot/./node_modules/prop-types/index.js","webpack://react-sigplot/./node_modules/react/index.js","webpack://react-sigplot/./node_modules/sigplot/js/sigplot.js","webpack://react-sigplot/./node_modules/sigplot/js/common.js","webpack://react-sigplot/./src/sigplot.js","webpack://react-sigplot/./src/layer.js","webpack://react-sigplot/./src/arraylayer.js","webpack://react-sigplot/./src/pipelayer.js","webpack://react-sigplot/./src/hreflayer.js","webpack://react-sigplot/./src/bluelayer.js","webpack://react-sigplot/./src/websocketlayer.js","webpack://react-sigplot/./src/plugin.js","webpack://react-sigplot/./src/index.js","webpack://react-sigplot/./node_modules/sigplot/js/m.js","webpack://react-sigplot/./node_modules/sigplot/js/mx.js","webpack://react-sigplot/./node_modules/sigplot/js/bluefile.js","webpack://react-sigplot/./node_modules/tinycolor2/tinycolor.js","webpack://react-sigplot/./node_modules/object-assign/index.js","webpack://react-sigplot/(webpack)/buildin/global.js","webpack://react-sigplot/./node_modules/react/cjs/react.production.min.js","webpack://react-sigplot/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://react-sigplot/./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://react-sigplot/./node_modules/spin/spin.js","webpack://react-sigplot/./node_modules/process/browser.js","webpack://react-sigplot/./node_modules/sigplot/js/matfile.js","webpack://react-sigplot/./node_modules/loglevel/lib/loglevel.js","webpack://react-sigplot/./node_modules/sigplot/js/ColorMap.js","webpack://react-sigplot/./node_modules/sigplot/js/CanvasInput.js","webpack://react-sigplot/./node_modules/sigplot/js/mx.dommenu.js","webpack://react-sigplot/./node_modules/sigplot/js/sigplot.layer1d.js","webpack://react-sigplot/./node_modules/sigplot/js/sigplot.layer2d.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Spinner","common","bluefile","matfile","mx","Layer1D","Layer2D","sigplot","element","options","this","Plot","version","KEYPRESS_HELP","SPINNER_OPTS","lines","length","width","radius","corners","rotate","color","speed","trail","shadow","hwaccel","className","zIndex","top","left","browserIsCompatible","hascanvas","document","createElement","hasarraybuf","_Mx","open","plot","Mx","_Gx","GX","parent","mouseOnCanvas","Gx","xlab","ylab","useDomMenu","unit_lookup","xmin","undefined","xmax","address","havexmin","havexmax","cmode","RangeError","toUpperCase","line","ylabel","ymin","ymax","haveymin","haveymax","zmin","zmax","havezmin","havezmax","colors","setbgfg","bg","fg","xi","invertbgfg","forcelab","all","expand","xlabel","segment","plab","phunits","xdiv","ydiv","xcompression","xcmp","rasterSmoothing","smoothing","origin","yinv","pmt","bufmax","sections","nsec","anno_type","xfmt","yfmt","index","imode","slice","xdata","note","hold","always_show_marker","vstype","inputs","basefile","lyr","alert","basemode","change_settings","dbmin","dbscale","Math","max","log10","min","pow","level","xstart","xdelta","xmult","ymult","autox","autoy","autoz","autol","scale_base","get_data","stk","panxmin","panxmax","panymin","panymax","panxpad","panypad","xran","yran","pad","font_family","font_width","font_scaled","set_font","ncolors","cmap","xc","setup_cmap","xcnt","cntrls","default_rubberbox_mode","rubberbox_mode","default_rubberbox_action","rubberbox_action","default_rightclick_rubberbox_mode","rightclick_rubberbox_mode","default_rightclick_rubberbox_action","rightclick_rubberbox_action","cross","grid","nogrid","fillStyle","gridBackground","gridStyle","wheelZoom","wheelZoomPercent","legend","no_legend_button","legendBtnLocation","pan","nopan","nomenu","modmode","modlayer","modsource","modified","mod","nmark","iabsc","specs","nospecs","scroll_time_interval","autohide_readout","autohide_panbars","x_scrollbar_location","show_x_axis","noxaxis","show_y_axis","noyaxis","show_readout","noreadout","hide_note","xmrk","ymrk","nodragdrop","addEventListener","evt","preventDefault","files","dataTransfer","load_files","initialized","plot_init","mimicListeners","other","listeners","zoom","unzoom","xpan","ypan","_refresh","onmousemove","e","rect","target","getBoundingClientRect","xpos","offsetX","pageX","scrollX","ypos","pageY","scrollY","offsetY","re","pixel_to_real","retx","x","rety","y","widget","display_specs","createEvent","initEvent","dispatchEvent","warpbox","cross_xpos","rubberline","b","cross_ypos","draw_crosshairs","p_cuts","hcb","y_cut_press_on","x_cut_press_on","draw_p_cuts","throttledOnMouseMove","throttle","onmouseout","event","draw_panbars","prompt","input","enableBlur","onmouseover","disableBlur","onmousedown","type","refresh","ifevent","which","rect_x","rect_y","rect_width","rect_height","inPan","inPanRegion","command","scrollbar","position","scrollbar_x","scrollbar_y","onScrollbar","removeEventListener","menu","title","finalize","items","text","handler","middleClickScrollMenuAction","SB_EXPAND","SB_SHRINK","SB_FULL","sigplot_scrollScaleMenu","repeatPan","stillPanning","clearInterval","repeatPanning","setTimeout","setInterval","lButtonPressed","height","lg_colorbar","mouse_x","mouse_y","top_x1","cbb_top_x1","top_y1","cbb_top_y1","coordsInTriangle","cbb_width","cbb_height","cur_cmap","get_layer","img","current_map","Mc","colormap","pos","bot_x1","cbb_bot_x1","bot_y1","cbb_bot_y1","zoom_style","opacity","return_value","select_style","fill_color","hi","rubberbox","rubberbox_cb","sigplot_mainmenu","ontouchstart","targetTouches","touchClear","touches","clearTimeout","touchEvent","bound","touch_distance","ontouchmove","k","touchStart","new_xpos","new_ypos","delta_xpos","delta_ypos","xscl","ydelta","yscl","cur_distance","scaling","throttledOnTouchMove","ontouchend","console","log","panning","action","widget_callback","docMouseUp","mouseup","inCenter","inCenterRegion","th","text_h","tw","text_w","trunc","inPanCenterRegion","mtagevt","clientX","clientY","w","h","shift","shiftKey","redraw","stopPropagation","cancelBubble","emit_hidemenu","hideMenuEvt","mouseclick","mousedblclick","dragMouseDownHandler","axis","screenX","screenY","dragMouseMoveHandler","scrollAction","flag","rangeOut","range","SB_DRAG","scaleFactor","trange","mouseOffset","realOffset","drag_updateRange","smin","srange","redrawScrollbar","updateViewbox","drag_scrollbar","err","throttledDragOnMouseMove","dragMouseUpHandler","onresize","checkresize","wheelHandler","throttledPan","wheelscroll_mode_natural","deltaY","SB_WHEELDOWN","SB_WHEELUP","step","page","scroll","XW_COMMAND","throttledZoom","zoomperc","percent_zoom","addWheelListener","nokeypress","onkeypress","keyCode","getKeyCode","ctrlKey","altKey","metaKey","redraw_warpbox","xCut","xyKeys","x_pop_now","sigplot_show_x","yCut","y_pop_now","sigplot_show_y","msg","get_z","toString","message","sigplot_show_z","xunits","yunits","sec2tod","timecode","sigplot_show_timecode","fullscreen","invert","show_marker","setKeypressHandler","add_plugin","plugin","zorder","Number","MAX_VALUE","init","canvas","plugins","push","impl","sort","a","remove_plugin","dispose","parentNode","removeElement","splice","addListener","what","callback","removeListener","settings","changemode","newphunits","newplab","phscale","PI","dscl","changephunits","xcut_now","ycut_now","reread","oldLayerData","origHCB","HCB","deoverlay","overlay_bluefile","j","symbol","cleanup","reload","data","hdrmod","rsync","xbnds","rescale","headermod","sync","display","hdrmod_clone","JSON","parse","stringify","overlay_array","overrides","layerOptions","debug","initialize","overlay_pipe","pipe","overlay_websocket","wsurl","ws","WebSocket","binaryType","layer_n","onopen","onmessage","ArrayBuffer","createArray","warning","newHdr","overlay_href","href","onload","self","split","forEach","hr","overlay_href_single","trim","show_spinner","handleHeader","endsWith","overlay_matfile","hide_spinner","MatFileReader","BlueFileReader","read_http","error","spinner","xwfg","spin","stop","add_layer","layer","mfile","file_name","dview","basefiles","layers","layerType","overlay","user_data","resize","preferred_origin","draw_layer","form_plotnote","hdr","f","read","remove_layer","fileName","delete_layer","pixel_zoom","x1","y1","x2","y2","continuous","r1","r2","xperc","yperc","xadj","abs","yadj","ul","lr","xtmp","ytmp","zstk","inContinuousZoom","inZoom","levels","pop","mimic","mask","unmimic","xzoom","yzoom","that","keys","ctx","getContext","plotData","valid","drawImage","draw_plugins","draw_marker","refresh_after_ctr","render","refresh_after","cb","enable_listeners","onmouseup","onkeydown","onkeyup","disable_listeners","addColorMaps","colormaps","cut_stash","x_cut_data","xframe","row","round","ystart","lps","start","finish","buf","old_drawmode","drawmode","old_autol","cx","UNITS","xcut_layer","mxmn","vmxmn","smax","y_cut_data","ycut_layer","pthk","ytimecode","pl","pr","pt","lbtn","pyl","prev_Mx_r","prev_Mx_b","x_box_w","x_box_h","y_box_h","y_box_w","clear_window","drawaxis_flags","noxtlab","noxtics","noxplab","noytics","noytlab","noyplab","xtimecode","drawaxis","shadowbox","noaxisbox","draw_layers","ln","ix","iy","yc","xs","ys","thk","ic","legendPos","maxLabelWidth","labelOffset","labelLength","measureText","strokeStyle","fillRect","strokeRect","floor","sign","thick","L_dashed","draw_line","on","off","draw_symbol","legend_colorbar","layerheight","sigplot_legend_menu","draw_legend","draw_accessories","cxm","cam","xptr","yptr","aretx","arety","zoff","pxscl","pyscl","format","pb","px1","px2","py1","py2","panmode","iysec","isec","lineSmoothing","x_box_x","x_box_y","y_box_x","y_box_y","p_cuts_xpos","p_cuts_ypos","xcut","ycut","ylabel_stash","element1","element2","Array","isArray","custom_cmap","ls","CONTROLS_MENU","checked","CXMODE_MENU","SCALING_MENU","style","setupPrompt","floatValidator","finalValue","parseFloat","GRID_MENU","SETTINGS_MENU","isValid","intValidator","maxXDIV","reason","maxYDIV","COLORMAP_MENU","colormap_handler","item","menuitem","traceoptionsmenu","ii","hexValidator","sym","rad","thickness","MAINMENU","tracemenu","deoverlaymenu","result","active_canvas","toDataURL","link","download","Date","getTime","body","appendChild","click","removeChild","DASHED","COLORS","SOLID","TOGGLE","SYMBOLS","LINE_TYPE","THICKNESS","OPACITY","LEGEND_TRACE","triggerEvent","xo","yo","xl","yl","takeAction","rwh","wpxl","hpxl","plugin_index","clearRect","plotnote","join","draw_pcut_x","plot_width","draw_box","beginPath","lineWidth","z","zrt","zpx","xrt","xpx","xnew","ynew","moveTo","lineTo","stroke","draw_pcut_y","plot_height","yrt","ypx","draw","ybufn","ybuf","yframe","zbuf","pix","real_to_pixel","clipped","clipped_x","clipped_y","arc","textBaseline","textAlign","font","format_g","fillText","newmode","oldmode","out","ps","pe","need_y_scrollbar","need_x_scrollbar","mouseEvent","scrollbarState","sbx","SCROLLBAR","sby","SIGPLOT_PAN","substring","XW_UPDATE","promptText","onSuccess","inputValue","disableListeners","enableListeners","realOnSuccess","dretx","drety","xval","yval","sec2tspec","chara","charb","substr","LEGACY_RENDER","colorbar_height","button_width","button_height","button_x","button_y","fill","button_y_2","colorbar","xxmin","xxmax","load","noxmin","noxmax","npts","prep","size","dpts","ret","tri_x1","tri_y1","tri_x2","tri_y2","tri_x3","tri_y3","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","inv_denom","u","v","coord","outside_right_border","above_top_border","below_bottom_border","between_top_and_bottom","between_left_and_right","has_bottom_scrollbar","s1","sw","scrollReal2PixOut","scroll_real2pix","direction","scale","newMin","newMax","process","global","end","Uint8Array","resultArray","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","cancelAnimFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCanelAnimationFrame","timeoutID","dashOn","setLineDash","mozDash","webkitLineDash","dashOff","charCode","attachEvent","String","search","this_len","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","obj","buffer","byteOffset","dv","DataView","maxlength","byteLength","getFloat64","subarray","begin","info","warn","arguments","BYTES_PER_ELEMENT","constructor","Uint16Array","Uint32Array","cls","_addEventListener","support","prefix","_addWheelListener","elem","eventName","useCapture","originalEvent","srcElement","deltaMode","deltaX","delatZ","returnValue","wheelDelta","wheelDeltaX","detail","onmousewheel","Proxy","navigator","product","g","TypeError","set","apply","construct","q","unshift","getOwnPropertyNames","getOwnPropertyDescriptor","setPrototypeOf","getPrototypeOf","__proto__","seal","revocable","proxy","revoke","update","dst","src","prop","val","SigPlot","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","state","Component","setState","nextProps","_this$props","newHeight","newWidth","newOptions","_this2","_this$props2","styles","propChildren","children","React","Children","map","child","cloneElement","react_default","_objectSpread","ref","PropTypes","instanceOf","node","number","string","Layer","context","arrayOf","ArrayLayer","currentData","currentOptions","currentLayerOptions","nextData","nextOptions","nextLayerOptions","PipeLayer","HrefLayer","hreflayer_classCallCheck","hreflayer_possibleConstructorReturn","hreflayer_getPrototypeOf","onloadWrapper","hreflayer_assertThisInitialized","oldHref","oldOptions","newHref","newOnload","func","BlueLayer","WebsocketLayer","oldWsurl","newWsurl","newOverrides","Plugin","pluginOptions","__webpack_exports__","sigplot_SigPlot","loglevel","userAgent","match","PointArray","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","60","61","62","63","red","green","blue","reverse","PIPESIZE","unitInput","first","second","comparer1","comparer2","BlueHeader","field","subsize","enabled_streaming_pcut","in_byte","out_byte","pipesize","setData","data_free","force1000","bpe","ape","grab","bufview","nget","ngot","filad","sidx","eidx","head","tail","onwritelisteners","pavail","grabx","offset","navail","addPipeWriteListener","onwrite","indexOf","units_name","units","trim_name","pathfilename","label","mult","mult_prefix","touchA","touchB","xd","yd","sqrt","VECTOR","MV","MS","nbpt","view","pad2","ctype","lo_thresh","vlog10","vlogscale","cvmag2logscale","vsmul","mul","count","vec","imax","imin","vmov","sstride","dest","dstride","vfill","inpval","vabs","cvmag","cxvec","cvmag2","cvpha","im","atan2","cvphad","a1","a2","sec","trim_trailing_zeros","tod","j1950","UTC","j1949","midnightToday","getFullYear","getMonth","getDate","millisecs","getHours","getMinutes","getSeconds","days","ceil","secMilli","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toPrecision","dloc","zloc","sec2tod_j1970","j1970toj1950","j1950toj1970","delay","previousCall","time","padamt","tinycolor","ColorMap","CanvasInput","WARPBOX","MX","clientWidth","clientHeight","wid_canvas","STKSTRUCT","event_cb","rmode","linewidth","button_release","button_press","state_mask","pixel","_renderCanvas","_syncRender","in_fill_range","ele","range_begin","range_end","right","isLeft","p_x","p_y","e_x1","e_y1","e_x2","e_y2","update_winding_number","wn","DomMenu","XW_INIT","XW_DRAW","XW_EVENT","SB_STEPINC","SB_STEPDEC","SB_PAGEINC","SB_PAGEDEC","L_ArrowLeft","L_ArrowRight","L_ArrowUp","L_ArrowDown","GBorder","L_RModeOff","L_RModeOn","L_PixelSymbol","L_CircleSymbol","L_SquareSymbol","L_PlusSymbol","L_XSymbol","L_TriangleSymbol","L_ITriangleSymbol","L_HLineSymbol","L_VLineSymbol","tmin","dragoutline","initial_pause","repeat_pause","swmin","soff","arrow","mxevent","repeat_count","oncontextmenu","_ctx","alt_style","def_style","onWidgetLayer","erase_window","old_warpbox","offsetParent","offsetLeft","offsetTop","onCanvas","current_active","withWidgetLayer","_animationFrameHandle","mixcolor","color1","color2","perc1to2","c1","toRgb","c2","mix","toHexString","linear_gradient","step_size","lingrad","createLinearGradient","addColorStop","equals","xwbg","xwts","xwbs","xwms","xwlo","clr","settheme","theme","close","sb","xe","ye","qs","qe","stat","sblocal","scroll_loc","scroll_vals","sv","op","btn","rr","d2","tri","cnt","fillColor","strokeColor","fill_rectangle","draw_rectangle","tempTri","fill_poly","start_poly","closePath","draw_poly","draw_symbols","pixx","pixy","npix","istart","trace","xpoint","ypoint","skip","symb","dashed","stk4","yymin","noclip","clip","dx","dy","bufsize","ib","lvisible","vertsym","horzsym","sn","highlight","xend","rxs","rxe","cn","mid_x","mid_y","ie","visible","lx","ly","tL","tE","clipt","draw_lines","fillMin","fillMax","fill_trace","x_start","x_end","xstart_pixel_value","xend_pixel_value","pi_start","pi_end","pixx_new","pixy_new","this_point","this_point_y","draw_mode","isNaN","to_rgb","getColor","current_color","newcolor","save","restore","inorigin","outorigin","instk","outstk","diff","sum","end1","end2","absmax","kengr","onsubmit","errorTimeout","inputValid","pxIndex","fontIndex","fontSize","fontFamily","canvasInput","backgroundColor","fontColor","borderWidth","borderRadius","padding","boxShadow","innerShadow","renderOnReturn","tabToClear","subHandlerCreator","messageX","messageY","newValue","redrawPrompt","xssPrompt","xcc","ycc","yPos","inputXPos","widgetbox","inputYPos","redrawPromptCreator","focus","strict","isFinite","parseInt","test","render_message_box","textColor","center","linel","beg","cur","brk","endinreturn","replace","winlines","lastline","draw_round_box","fill_opacity","quadraticCurveTo","oldAlpha","globalAlpha","Uint8ClampedArray","dctx","imgd","getImageData","putImageData","ctx_wid","font_size","textline","yend","tics","dmin","dmax","ndiv","dtic","dtic1","nsig","df","sig","nseg","ddf","dft","flags","stk1","iscl","isct","iscr","iscb","exactbox","xTIC","yTIC","_xmult","_ymult","xticlabels","yticlabels","ontop","Function","fact","fmul","itext","jtext","inside","last_xlbl","endtic","ylbl","xlbl_maxlen","sp","xlbl","format_f","trimlabel","itexti","yonright","sep","inrect","MENU_CONSTANTS","sidelab","toplab","n_show","_menu_redraw","animationFrameHandle","avail_space","menu_item_height","n_items","yb","xss","yss","i_begin","queue","i_end","menu_counter","selected","_menu_takeaction","newmenu","_menu_callback","drag_x","drag_y","remove","_menu_dismiss","next_item","inp","fromCharCode","keypresses","matches","denom","num","accept","lineColor","pc2px","perc","lbl","res","scaleImage","sx","sy","sh","imgctx","createImageData","ibuf","buf8","width_scaling","height_scaling","xx","yy","jj","xb","inx","iny","inw","inh","xt","yt","getcolor","iz","zf","zf1","display_warpbox","leading_nonzero","decloc","exp","eloc","dz","toFixed","legacy_shadowbox","shape","bw","sigplot_shadowbox","alpha","chevron","x_offset","y_offset","eventXPos","eventYPos","ts2","ts1","p1","op1","iretx","irety","setRange","cidx","renderImage","imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","shift_image_rows","update_image_row","didx","create_image","nxc","put_image","nx","ny","nex","ney","draw_image","view_xmin","view_xmax","view_ymin","view_ymax","rx","ry","iw","ih","BitArray","u8","getBit","idx","setBit","array","len","sub","ARRAY_BUFFER_ENDIANNESS","Error","endianness","_SPA","S","C","V","Q","M","X","T","U","_BPS","P","A","O","B","I","L","F","D","_XM_TO_TYPEDARRAY","_XM_TO_DATAVIEW","dataView","littleEndian","highIndex","lowIndex","MAX_INT","high","getInt32","rv","pow2","Infinity","_applySupportsTypedArray","uintbuf","ab2str","str","parseURL","url","source","protocol","host","hostname","port","query","params","seg","file","pathname","hash","path","relative","segments","ext_header_type","dvhdr","headrep","datarep","littleEndianHdr","littleEndianData","ext_start","ext_size","getUint32","data_start","data_size","ds","de","ext_header","unpack_keywords","data_end","spa","bps","bpa","lbuf","lkey","lextra","ltag","tag","ldata","itag","idata","keywords","dic_index","dict_keywords","getInt16","getInt8","dictTypes","TypedArray","concat","readheader","theFile","reader","FileReader","blob","webkitSlice","onloadend","rawhdr","readAsArrayBuffer","raw","oReq","XMLHttpRequest","responseType","overrideMimeType","oEvent","readyState","status","arrayBuffer","response","fileUrl","responseText","oncomplete","blocksize","bufView","worker","charCodeAt","text2buffer","onerror","send","__WEBPACK_AMD_DEFINE_RESULT__","trimLeft","trimRight","tinyCounter","mathRound","mathMin","mathMax","mathRandom","random","opts","rgb","ok","toLowerCase","named","names","matchers","exec","rgba","hsl","hsla","hsv","hsva","hex8","parseIntFromHex","convertHexToDecimal","hex6","hex4","hex3","stringInputToObject","isValidCSSUnit","bound01","convertToPercentage","hsvToRgb","hue2rgb","hslToRgb","boundAlpha","inputToRGB","_originalInput","_r","_g","_b","_a","_roundA","_format","_gradientType","gradientType","_ok","_tc_id","rgbToHsl","rgbToHsv","rgbToHex","allow3Char","hex","charAt","rgbaToArgbHex","convertDecimalToHex","desaturate","amount","toHsl","clamp01","saturate","greyscale","lighten","brighten","darken","hue","complement","triad","tetrad","splitcomplement","analogous","results","slices","part","monochromatic","toHsv","modification","isDark","getBrightness","isLight","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","setAlpha","toHsvString","toHslString","toHex","toHex8","allow4Char","rgbaToHex","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","clone","_applyModification","fn","args","_applyCombination","fromRatio","newColor","rgb1","rgb2","readability","isReadable","wcag2","wcag2Parms","parms","validateWCAG2Parms","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","flipped","flip","isOnePointZero","processPercent","isPercentage","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","getOwnPropertySymbols","propIsEnumerable","propertyIsEnumerable","assign","test1","test2","test3","letter","shouldUseNative","from","symbols","to","toObject","for","aa","ba","iterator","encodeURIComponent","framesToPop","ca","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","E","refs","updater","G","isReactComponent","forceUpdate","H","isPureReactComponent","current","J","K","__self","__source","defaultProps","$$typeof","_owner","N","keyPrefix","R","next","done","=",":","escape","ea","fa","da","W","toArray","only","createRef","PureComponent","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","forwardRef","lazy","_ctor","_status","_result","memo","compare","useCallback","useContext","useEffect","useImperativeHandle","useDebugValue","useLayoutEffect","useMemo","useReducer","useRef","useState","Fragment","StrictMode","Suspense","createFactory","isValidElement","unstable_ConcurrentMode","unstable_Profiler","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentDispatcher","ReactCurrentOwner","Y","default","Z","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","location","propFullName","secret","getShim","isRequired","ReactPropTypes","bool","any","elementType","objectOf","oneOf","oneOfType","exact","checkPropTypes","useCssAnimations","prefixes","animations","createEl","el","ins","sheet","getElementsByTagName","styleSheet","addAnimation","pre","insertRule","vendor","pp","css","merge","def","defaults","fps","ep","tp","mid","insertBefore","firstChild","offsetWidth","offsetHeight","setAttribute","ostep","astep","anim","timeout","background","transformOrigin","transform","animation","childNodes","vml","attr","behavior","adj","addRule","grp","coordsize","coordorigin","margin","filter","rotation","arcsize","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","noop","nextTick","browser","env","argv","versions","once","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","versionNames","256","dataTypeNames","getDataWithType","typeName","output","getUint16","getFloat32","getInt64","MatHeader","headerStr","headerTextBegin","endianCharsBegin","headerList","platform","createdOn","subsystemOffset","subsysOffsetBegin","versionOffsetBegin","versionName","dataType","firstDataTypeOffsetBegin","dataTypeName","arraySize","numBytesOffsetBegin","currIndex","numBytesOffsetEnd","typeNum","typeSize","dimTypeNum","dimTypeName","dimTypeSize","rows","arrayNameTypeNum","nameSize","small","arrayNameTypeName","arrayValSize","arrayBuff","startByte","outArr","getArray","__WEBPACK_AMD_DEFINE_FACTORY__","definition","undefinedType","logMethods","bindMethod","methodName","method","replaceLoggingMethods","loggerName","methodFactory","defaultMethodFactory","realMethod","Logger","defaultLevel","currentLevel","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","TRACE","DEBUG","INFO","WARN","ERROR","SILENT","getLevel","setLevel","persist","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","enableAll","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","logger","_log","noConflict","getLoggers","varArgs","nextSource","nextKey","writable","configurable","_low","_high","_fscale","colorindex","colorBlockIndex","_parseColors","col1","col2","colorsInBlock","factorStep","_addColor","interpolate","front","_rgbToHex","_hexToRgb","_checkColorStops","colorsWithNoStops","stopSize","currentPos","_componentToHex","low","factor","_canvas","_x","_y","_extraX","extraX","_extraY","extraY","_fontSize","_fontFamily","_fontColor","_placeHolderColor","placeHolderColor","_fontWeight","fontWeight","_fontStyle","fontStyle","_readonly","readonly","_maxlength","_width","_height","_padding","_borderWidth","_borderColor","borderColor","_borderRadius","_backgroundImage","backgroundImage","_boxShadow","_innerShadow","_selectionColor","selectionColor","_placeHolder","placeHolder","_value","_onsubmit","_onkeydown","_onkeyup","_onfocus","onfocus","_onblur","onblur","_cursor","_cursorPos","_hasFocus","_selection","_wasOver","_renderOnReturn","_disableBlur","_tabToClear","_calcWH","outerW","outerH","_renderCtx","_shadowCanvas","_shadowCtx","backgroundGradient","_backgroundColor","mousemoveCanvasListener","mousemove","mousedownCanvasListener","mousedown","mouseupCanvasListener","mouseupWindowListener","_mouseDown","blur","keydownWindowListener","keydown","keyupWindowListener","pasteWindowListener","clipboardData","getData","startText","endText","_inputsIndex","_updateCanvasWH","doReturn","shadowL","shadowR","shadowT","shadowB","shadowW","shadowH","_selectionUpdated","_clipText","_cursorInterval","nav","isChromeMobile","isMobile","orientation","isShift","_clearSelection","_mapCodeToKey","mouse","_mousePos","_endSelection","_overInput","_clickPos","isOver","cursor","_selectionStart","curPos","isSelection","renderCanvas","br","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","_roundedRect","_drawTextBox","paddingBorder","selectOffset","_textWidth","selectWidth","cursorOffset","textX","textY","isOffsetX","isOffsetY","isBlur","isColor","shadowCtx","scw","sch","Image","fillPer","oldW","oldH","xLeft","xRight","yTop","yBottom","totalW","elm","defaultView","getComputedStyle","paddingLeft","paddingTop","borderLeft","borderTop","htmlTop","htmlLeft","blockedKeys","56","57","59","107","173","189","186","187","188","190","191","192","219","220","221","222","itemClass","_container","_menu","classList","add","_menuId","getMilliseconds","_items","setCSS","createMenu","originalFinalize","_movingOffsetX","_movingOffsetY","_moving","_moveMenu","innerText","append","list","li","_createMenuItem","contains","_handleKeyEvents","_active","_setActive","onclick","_clearActive","textContent","id","xbuf","xsub","ysub","pointbufsize","buf_type","xbufn","framesize","tle","tl","_onpipewrite","axis_change","n1","n2","dbuf","qmin","qmax","fac","traceoptions","pts","pnt","add_highlight","min_nan","max_nan","remove_highlight","get_highlights","clear_highlights","mixc","num_rows","layer_name_override","layerOption","lpb","frame","ylength","zpoint","start_write","stop_write","cut_off","tmp","zidx","timestamp","xsize","nny","noff"],"mappings":"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","file":"react-sigplot.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-sigplot\"] = factory();\n\telse\n\t\troot[\"react-sigplot\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * @license\n * File: sigplot.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jslint nomen: true, browser: true, devel: true */\n\n/* global module */\n/* global require */\n\n(function() {\n\n    var version = \"version-PLACEHOLDER\";\n\n    var Spinner = require(\"spin\");\n    var common = require(\"./common\");\n    var bluefile = require(\"./bluefile\");\n    var matfile = require(\"./matfile\");\n    var m = require(\"./m\");\n    var mx = require(\"./mx\");\n    var Layer1D = require(\"./sigplot.layer1d\");\n    var Layer2D = require(\"./sigplot.layer2d\");\n\n    function sigplot(element, options) {\n        if (!(this instanceof sigplot)) {\n            return new sigplot.Plot(element, options);\n        }\n    }\n\n    sigplot.bluefile = bluefile;\n    sigplot.matfile = matfile;\n    sigplot.m = m;\n    sigplot.mx = mx;\n    sigplot.Layer1D = Layer1D;\n    sigplot.Layer2D = Layer2D;\n    sigplot.version = version;\n\n    /**\n     * Text of the keypress help dialog.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var KEYPRESS_HELP = \"Keypress Table:\\n\" +\n        \"--------------\\n\" +\n        \"?       - Main help box.\\n\" +\n        \"A       - Toggle display x,y readouts:\\n\" +\n        \"          (absc) -> (index) -> (1/absc) -> (time).\\n\" +\n        \"B       - Toggle LM Drag Mode:\\n\" +\n        \"          (box) -> (horizontal) -> (vertical).\\n\" +\n        \"C       - Toggle controls.\\n\" +\n        \"K       - Show Marker.\\n\" +\n        \"L       - Toggle legend.\\n\" +\n        \"M       - Pops up main menu\\n\" +\n        \"R       - Toggle display specs (x/y readout)\\n\" +\n        \"S       - Toggle display specs and axes.\\n\" +\n        \"T       - Popup box with timecode value at mouse.\\n\" +\n        \"X       - In 1D mode, popup box with X value at mouse.\\n\" +\n        \"        - In 2D mode, toggle x-cut display.\\n\" +\n        \"Y       - In 1D mode, popup box with Y value at mouse.\\n\" +\n        \"        - In 2D mode, toggle y-cut display.\\n\" +\n        \"P       - In 2D mode, displays p-cuts along side and bottom.\\n\" +\n        \"F       - Toggle fullscreen.\\n\" +\n        \"Cntrl+I - Invert colors.\";\n\n    /**\n     * Text of the main help dialog.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var MAIN_HELP = \"To zoom, press and drag the left mouse (LM) over the region of interest and release. \" +\n        \"To unzoom, press right mouse (RM).  Press the middle mouse (MM) button or press the 'M' key to open the main menu.\" +\n        \"View the function of all keypresses by selecting 'Keypress Info' from the main menu.\";\n\n    /**\n     * Options used when displaying the spinner.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var SPINNER_OPTS = {\n        lines: 13, // The number of lines to draw\n        length: 7, // The length of each line\n        width: 4, // The line thickness\n        radius: 10, // The radius of the inner circle\n        corners: 1, // Corner roundness (0..1)\n        rotate: 0, // The rotation offset\n        color: '#FFF', // #rgb or #rrggbb\n        speed: 1, // Rounds per second\n        trail: 60, // Afterglow percentage\n        shadow: false, // Whether to render a shadow\n        hwaccel: false, // Whether to use hardware acceleration\n        className: 'spinner', // The CSS class to assign to the spinner\n        zIndex: 2e9, // The z-index (defaults to 2000000000)\n        top: 'auto', // Top position relative to parent in px\n        left: 'auto' // Left position relative to parent in px\n    };\n\n    /**\n     * Attempts basic checks to determine if the browser is compatible with\n     * sigplot.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    sigplot.browserIsCompatible = function browserIsCompatible() {\n        // We need a Canvas\n        var test_canvas = document.createElement('canvas');\n        var hascanvas = (test_canvas.getContext) ? true : false;\n\n        // We need ArrayBuffer\n        var hasarraybuf = (\"ArrayBuffer\" in window);\n\n        // File and FileReader are optional...and only\n        // required if the user wants to plot local files\n        return (hascanvas && hasarraybuf);\n    };\n\n\n\n    /**\n     * Construct and render a plot.\n     *\n     * @memberOf sigplot\n     * @constructor\n     *\n     * @example plot = new sigplot.Plot(document.getElementById('plot'), {[options]});\n     *\n     * @param element\n     *            a 'div' DOM element\n     * @param [options]\n     *            Key-value pairs whose values alter the behavior of the plot.\n     *\n     * @param {String}\n     *            options.cmode the plot rendering mode \"IN\" = Index, \"AB\" =\n     *            Abscissa (both of these, along with \"__\" can be added as prefixes to the other modes),\n     *            \"MA\", \"Magnitude\" = Magnitude, \"PH\", \"Phase\" = Phase, \"RE\", \"Real\" = Real,\n     *            \"IM\",\"Imaginary\" = Imaginary, \"LO\", \"D1\", \"10*log10\" = 10*log, \"L2\" or \"D2\"\n     *            , \"20*log10\" = 20*log, \"RI\", \"Real/Imag\", \"Imag/Real\",\"IR\" = Real vs. Imaginary\n     *\n     * @param {String}\n     *            options.phunits the phase units \"D\" = Degrees, \"R\" = Radians,\n     *            \"C\" = Cycles\n     *\n     * @param {Boolean}\n     *            options.cross display cross hairs on the plot\n     *\n     * @param {Boolean}\n     *            options.nogrid hide the background grid\n     *\n     * @param {Boolean}\n     *            options.legend set to false to hide the legend\n     *\n     * @param {Boolean}\n     *            options.no_legend_button set to true to hide the legend button\n     *\n     * @param {Boolean}\n     *            options.nopan disable panning on the plot\n     *\n     * @param {Boolean}\n     *            options.nomenu disable the middle-click menu\n     *\n     * @param {Boolean}\n     *            options.nospec hide all plot specification displays\n     *\n     * @param {Boolean}\n     *            options.noxaxis hide the x-axis\n     *\n     * @param {Boolean}\n     *            options.noyaxis hide the y-axis\n     *\n     * @param {Boolean}\n     *            options.noreadout hide the plot readout area\n     *\n     * @param {Boolean}\n     *            options.nodragdrop prevent file drag drop\n     *\n     * @param {Number}\n     *            options.scroll_time_interval set the time interval for scrolling\n     *\n     * @param {Boolean}\n     *            options.index use the data-index in the X axis\n     *\n     * @param {Number}\n     *            options.autox auto-scaling settings for X axis !!!!CHANGED\n     *\n     * @param {Number}\n     *            options.xmin the minimum range to display on the X axis\n     *\n     * @param {Number}\n     *            options.xmax the maximum range to display on the X axis\n     *\n     * @param {Number}\n     *            options.xlab the units that X-axis uses (see m.UNITS)\n     *\n     * @param {Object}\n     *            options.xlabel function or string for custom X-axis label\n     *\n     * @param {Number}\n     *            options.xdiv the number of divisions on the X axis\n     *\n     * @param {Number}\n     *            options.xcnt configure the mtag mouse controls 0 = Off, 1\n     *            (default) = LM Click, 2 = Continuous\n     *\n     * @param {String}\n     *            options.rubberbox_mode controls the behavior of the rubberbox\n     *            \"zoom\" (default) = zoom to the selected area \"box\" = trigger\n     *            an mtag action on the selected area\n     *\n     * @param {String}\n     *            options.rightclick_rubberbox_mode controls the behavior of the rubberbox\n     *            \"zoom\" = zoom to the selected area \"box\" = trigger\n     *            an mtag action on the selected area.  By default is null to disable\n     *            right-click boxes\n     *\n     * @param {Number}\n     *            options.line the line type to draw 0 = None, 1 = Verticals, 2 =\n     *            Horizontals, 3 (default) = Connecting\n     *\n     * @param {Number}\n     *            options.autoy auto-scaling settings for Y axis !!!! CHANGED\n     *            0 = Fix , 1 = Auto Min , 2 = Auto Max, 3 = Full Auto\n     *\n     * @param {Number}\n     *            options.ylab the units that Y-axis uses (see m.UNITS)\n     *\n     * @param {Object}\n     *            options.ylabel function or string for custom Y-axis label\n     *\n     * @param {Number}\n     *            options.ymin the minimum range to display on the Y axis\n     *\n     * @param {Number}\n     *            options.ymax the maximum range to display on the Y axis\n     *\n     * @param {Number}\n     *            options.ydiv the number of divisions on the Y axis\n     *\n     * @param {Number}\n     *            options.zmin the minimum range to display on the Z axis\n     *\n     * @param {Number}\n     *            options.zmax the maximum range to display on the Z axis\n     *\n     * @param {Boolean}\n     *            options.yinv invert the y-axis\n     *\n     * @param {String}\n     *            options.colors.fg the foreground color as a CSS color\n     *\n     * @param {String}\n     *            options.colors.bg the background color as a CSS color\n     *\n     * @param {Boolean}\n     *            options.xi invert the foreground/background colors\n     *\n     * @param {Boolean}\n     *            options.all show all of the data on the plot instead of just\n     *            one buffer\n     *\n     * @param {Boolean}\n     *            options.expand auto-scale the plot based on all the data (when\n     *            combined with the all option)\n     *\n     * @param {Number}\n     *            options.origin 1 = x1:xmin, x2:xmax, y1:ymax, y2:ymin\n     *            (default), 2 = x1:xmax, x2:xmin, y1:ymax, y2:ymin (x\n     *            inverted), 3 = x1:xmax, x2:xmin, y1:ymin, y2:ymax (x & y\n     *            inverted), 4 = x1:xmin, x2:xmax, y1:ymin, y2:ymax (y inverted)\n     *\n     * @param {Number}\n     *            options.bufmax the buffer size to use\n     *\n     * @param {Boolean}\n     *            options.nokeypress disable key press actions\n     *\n     * @param options.font_family\n     *            the font family to use for text rendered on the plot.  Monospace\n     *            font will generally work best.\n     *\n     * @param {Boolean}\n     *            options.font_scaled mimic the MIDAS plotting behaviour where the\n     *            plot font-size is scaled relative to the width of the\n     *\n     * @param {Boolean}\n     *            options.font_width sets the font width (default=8); if scaled_font\n     *            is set to true, then the font width will be the minimum of font_width\n     *            or plot width/64.\n     *\n     * @param {Number}\n     *            options.panxpad\n     *            Pad the x-axis panning with this amount.  If a string in the form of\n     *            \"XX%\" the padding will be a percentage.\n     *\n     * @param {Number}\n     *            options.panypad\n     *            Pad the y-axis panning with this amount.  If a string in the form of\n     *            \"XX%\" the padding will be a percentage.\n     *\n     * @returns {Plot}\n     */\n    var Plot = function(element, options) {\n        if (!sigplot.browserIsCompatible()) {\n            throw \"Browser is not compatible\";\n        }\n        // Register with the Mx structure - Step #4\n        this._Mx = mx.open(element);\n        var Mx = this._Mx;\n\n        this._Gx = new GX();\n        this._Gx.parent = element;\n\n        // Variable which stores state of mouse position relative to the canvas\n        this.mouseOnCanvas = false;\n\n        if (!options) {\n            options = {};\n        }\n\n        plot_init(this, options);\n\n        this.mimicListeners = {\n            other: null,\n            listeners: {\n                zoom: null,\n                unzoom: null,\n                xpan: null,\n                ypan: null\n            }\n        };\n\n        this._refresh(); // Draw immediately\n\n        this.onmousemove = (function(plot) {\n            return function(e) {\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n\n                var rect = e.target.getBoundingClientRect();\n                var xpos = (e.offsetX === undefined) ? (e.pageX - rect.left - window.scrollX) : e.offsetX;\n                var ypos = (e.offsetX === undefined) ? (e.pageY - rect.top - window.scrollY) : e.offsetY;\n\n                // var xpos = (e.offsetX === undefined) ? e.layerX : e.offsetX;\n                // var ypos = (e.offsetY === undefined) ? e.layerY : e.offsetY;\n                var re = pixel_to_real(plot, xpos, ypos);\n                Gx.retx = re.x;\n                Gx.rety = re.y;\n\n                if (Mx.widget) {\n                    return;\n                }\n                display_specs(plot);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mmove', true, true);\n                evt.xpos = xpos;\n                evt.ypos = ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                var executeDefault = mx.dispatchEvent(Mx, evt);\n                if (!executeDefault) {\n                    return;\n                }\n\n                // The crosshair logic in websigplot is different\n                // because we need to clear the previous position\n                // of the line (via XOR) and then draw the new line\n                //\n                // The Mx.xpos and Mx.ypos may have already been\n                // updated to their new location so we need to store\n                // the crosshair position in the Gx structure\n                if (Gx.cross) {\n                    if (Mx.warpbox) {\n                        // during zoom operations undraw the crosshairs\n                        if (Gx.cross_xpos !== undefined) {\n                            mx.rubberline(Mx, Gx.cross_xpos, Mx.t,\n                                Gx.cross_xpos, Mx.b);\n                        }\n                        if (Gx.cross_ypos !== undefined) {\n                            mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r,\n                                Gx.cross_ypos);\n                        }\n                        Gx.cross_xpos = undefined;\n                        Gx.cross_ypos = undefined;\n                    } else {\n                        if (plot.mouseOnCanvas) {\n                            draw_crosshairs(plot);\n                            if (Gx.p_cuts && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                                if (!Gx.y_cut_press_on && !Gx.x_cut_press_on) {\n                                    draw_p_cuts(plot);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (Gx.cntrls === 2) {\n                    var evt = document.createEvent('Event');\n                    evt.initEvent('mtag', true, true);\n                    evt.x = Gx.retx;\n                    evt.y = Gx.rety;\n                    evt.xpos = xpos;\n                    evt.ypos = ypos;\n                    mx.dispatchEvent(Mx, evt);\n                }\n            };\n        }(this));\n\n        this.throttledOnMouseMove = m.throttle(this._Gx.scroll_time_interval,\n            this.onmousemove);\n\n        mx.addEventListener(Mx, \"mousemove\", this.throttledOnMouseMove, false);\n\n        this.onmouseout = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n                if (plot.mouseOnCanvas) {\n                    plot.mouseOnCanvas = false;\n\n                    if (Gx.autohide_readout) {\n                        display_specs(plot);\n                    }\n                    if (Gx.autohide_panbars) {\n                        draw_panbars(plot);\n                    }\n                    if (Mx.prompt) {\n                        Mx.prompt.input.enableBlur();\n                    }\n                }\n            };\n        }(this));\n        mx.addEventListener(Mx, \"mouseout\", this.onmouseout, false);\n\n        this.onmouseover = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n                plot.mouseOnCanvas = true;\n                if (Gx.autohide_panbars) {\n                    draw_panbars(plot);\n                }\n                if (Mx.prompt) {\n                    Mx.prompt.input.disableBlur();\n                }\n            };\n        }(this));\n        mx.addEventListener(Mx, \"mouseover\", this.onmouseover, false);\n\n        this.onmousedown = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // mouse down on the canvas should never do a browser default action\n\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n\n                if (Mx.widget && (Mx.widget.type === \"ONESHOT\")) {\n                    Mx.widget = null;\n                    plot.refresh();\n                }\n\n                // Update Mx event fields\n                mx.ifevent(Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mdown', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which;\n                var executeDefault = mx.dispatchEvent(Mx, evt);\n                if (!executeDefault) {\n                    return false;\n                }\n\n                // Check if event occured in the pan region\n                var inPan = inPanRegion(plot);\n\n                // Event processing\n                if (inPan.inPanRegion) { // Mouse position lies in a pan\n                    // region\n                    event.preventDefault();\n                    if (inPan.command !== ' ') {\n                        var scrollbar = null;\n                        var position = null;\n                        if (inPan.command === \"XPAN\") {\n                            scrollbar = Mx.scrollbar_x;\n                        } else if (inPan.command === \"YPAN\") {\n                            scrollbar = Mx.scrollbar_y;\n                        }\n\n                        if (event.which === 2) {\n                            position = {\n                                x: Mx.xpos,\n                                y: Mx.ypos\n                            };\n                            if ((scrollbar !== undefined) && (onScrollbar(position, scrollbar))) {\n                                // Only show menu if on the scrollbar itself\n                                sigplot_scrollScaleMenu(plot, inPan.command);\n                            }\n                        } else {\n                            if (inPan.command !== ' ') {\n                                position = {\n                                    x: Mx.xpos,\n                                    y: Mx.ypos\n                                };\n                                if (!onScrollbar(position, scrollbar) && event.which === 1) { // Left-clicking\n                                    // not on a\n                                    // scrollbar -\n                                    // handle\n                                    // typical pan\n                                    pan(plot, inPan.command, 0, event); // Execute\n                                    // the\n                                    // first\n                                    // pan\n                                    var repeatPan = function() {\n                                        if (!onScrollbar({\n                                                \"x\": Mx.xpos,\n                                                \"y\": Mx.ypos\n                                            }, scrollbar)) {\n                                            pan(plot, inPan.command, 0, event);\n                                            // execute\n                                            // a\n                                            // pan\n                                            // on\n                                            // every\n                                            // interval\n                                        } else {\n                                            // stop\n                                            // panning\n                                            // once you\n                                            // hit the\n                                            // scrollbar\n                                            if (Gx.stillPanning) {\n                                                window.clearInterval(Gx.stillPanning);\n                                                Gx.repeatPanning = undefined;\n                                            }\n                                        }\n                                    };\n\n                                    // Make scrolling smooth, the longer initial prevents\n                                    // a single click from counting twice\n                                    Gx.stillPanning = window.setTimeout(\n\n                                        function() {\n                                            Gx.repeatPanning = window.setInterval(repeatPan, 50);\n                                        }, 250);\n                                }\n                            }\n                        }\n                    }\n                } else { // Mouse not in a pan region, handle other cases\n                    if (event.which === 1 || event.which === 3) {\n                        var lButtonPressed = false;\n                        if (Gx.legendBtnLocation) {\n                            lButtonPressed = coordsInRectangle(Mx.xpos,\n                                Mx.ypos, Gx.legendBtnLocation.x,\n                                Gx.legendBtnLocation.y,\n                                Gx.legendBtnLocation.width,\n                                Gx.legendBtnLocation.height);\n                        }\n\n                        // If we have a large colorbar, we also have buttons:\n                        if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                            if (event.which === 1 || event.which === 3) {\n                                var mouse_x = Mx.xpos;\n                                var mouse_y = Mx.ypos;\n\n                                // Find vertex positions of top and bottom buttons\n                                var top_x1 = Gx.cbb_top_x1;\n                                var top_y1 = Gx.cbb_top_y1;\n                                var top_x2 = top_x1 + Gx.cbb_width;\n                                var top_y2 = top_y1;\n                                var top_x3 = top_x1 + (1 / 2) * Gx.cbb_width;\n                                var top_y3 = top_y1 - Gx.cbb_height;\n\n                                var topButtonPressed = coordsInTriangle(mouse_x, mouse_y, top_x1, top_y1, top_x2, top_y2, top_x3, top_y3);\n                                //console.log(\"Top \", topButtonPressed);\n\n                                if (topButtonPressed) {\n                                    var cur_cmap = Gx.cmap;\n                                    plot.get_layer(0).img = undefined;\n                                    var current_map = m.Mc.colormap[cur_cmap];\n\n                                    for (var i = 0; i < current_map.colors.length; i++) {\n                                        current_map.colors[i].pos += 5.0;\n                                    }\n                                    mx.colormap(Mx, current_map.colors, 16);\n                                    //Gx.zoff += (1/10)*(Gx.zmax - Gx.zmin);\n                                    plot.refresh();\n                                }\n\n                                // bottom\n                                var bot_x1 = Gx.cbb_bot_x1;\n                                var bot_y1 = Gx.cbb_bot_y1;\n                                var bot_x2 = bot_x1 + Gx.cbb_width;\n                                var bot_y2 = bot_y1;\n                                var bot_x3 = bot_x1 + (1 / 2) * Gx.cbb_width;\n                                var bot_y3 = bot_y1 + Gx.cbb_height;\n\n                                var botButtonPressed = coordsInTriangle(mouse_x, mouse_y, bot_x1, bot_y1, bot_x2, bot_y2, bot_x3, bot_y3);\n\n                                if (botButtonPressed) {\n                                    //Gx.zoff -= (1/10)*(Gx.zmax - Gx.zmin);\n                                    var cur_cmap = Gx.cmap;\n                                    var current_map = m.Mc.colormap[cur_cmap];\n                                    plot.get_layer(0).img = undefined;\n                                    for (var i = 0; i < current_map.colors.length; i++) {\n                                        current_map.colors[i].pos -= 5.0;\n                                    }\n                                    mx.colormap(Mx, current_map.colors, 16);\n                                    plot.refresh();\n                                }\n\n                            }\n\n                        }\n\n                        if (lButtonPressed) {\n                            plot.change_settings({\n                                legend: !Gx.legend\n                            }); // toggle the legend\n                        } else {\n                            display_specs(plot);\n\n                            // Styles for rubberbox\n                            var zoom_style = {\n                                opacity: 0,\n                                return_value: \"zoom\"\n                            };\n\n                            var select_style = {\n                                opacity: 0.4,\n                                fill_color: Mx.hi,\n                                return_value: \"select\"\n                            };\n\n                            if (event.which === 1) {\n                                if (Gx.default_rubberbox_action === \"zoom\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rubberbox_mode, zoom_style,\n                                        select_style);\n                                } else if (Gx.default_rubberbox_action === \"select\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rubberbox_mode,\n                                        select_style, zoom_style);\n                                } // otherwise rubber-box is considered disabled\n                            } else if (event.which === 3) {\n                                if (Gx.default_rightclick_rubberbox_action === \"zoom\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rightclick_rubberbox_mode, zoom_style,\n                                        select_style);\n                                } else if (Gx.default_rightclick_rubberbox_action === \"select\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rightclick_rubberbox_mode,\n                                        select_style, zoom_style);\n                                } // otherwise right-click rubber-box is considered disabled\n                            }\n                        }\n                    } else if (event.which === 2) {\n                        if (!Gx.nomenu) {\n                            sigplot_mainmenu(plot);\n                        }\n                    }\n                }\n                return false;\n            };\n        }(this));\n        mx.addEventListener(Mx, \"mousedown\", this.onmousedown, false);\n\n        // Putting a finger on the screen and moving it, simulates\n        // pan.\n        this.ontouchstart = (function(plot) {\n            return function(event) {\n                event.preventDefault();\n\n                // See how many fingers are on the screen\n                // 1 finger == pan and/or unzoom\n                if (event.targetTouches.length === 1) {\n\n                    // See if this is a double-tap\n                    if (Mx.touchClear && Mx.touches) {\n                        // Double tap unzooms to L=0 and fully expands the plot\n                        window.clearTimeout(Mx.touchClear);\n                        plot.unzoom();\n                        middleClickScrollMenuAction(plot, mx.SB_FULL, \"XPAN\");\n                        middleClickScrollMenuAction(plot, mx.SB_FULL, \"YPAN\");\n                    } else {\n                        // Normal touch prepares for panning\n                        var touchEvent = event.targetTouches[0];\n                        // Determine the touch position, relative to the canvas\n                        var rect = touchEvent.target.getBoundingClientRect();\n                        var position = {\n                            x: (touchEvent.pageX - rect.left - window.scrollX),\n                            y: (touchEvent.pageY - rect.top - window.scrollY)\n                        };\n\n                        // Update the Mx coordinates\n                        Mx.xpos = m.bound(position.x, 0, Mx.width);\n                        Mx.ypos = m.bound(position.y, 0, Mx.height);\n\n                        // See if the finger lies on the pan-bars\n                        var inPan = inPanRegion(plot, position);\n                        if (!inPan.inPanRegion) {\n                            Mx.touches = event.targetTouches;\n                        } // TODO support touch 'pan' on the panbars\n                    }\n                } else if (event.targetTouches.length === 2) {\n                    Mx.touch_distance = m.touch_distance(event.targetTouches[0], event.targetTouches[1]);\n                }\n            };\n        }(this));\n\n        mx.addEventListener(Mx, \"touchstart\", this.ontouchstart, false);\n\n        this.ontouchmove = (function(plot) {\n            return function(event) {\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n                var k = Mx.level;\n\n                event.preventDefault();\n                if (event.targetTouches.length === 1) {\n                    // Determine the touch event position\n                    var touchStart = Mx.touches[0];\n                    var rect = touchStart.target.getBoundingClientRect();\n                    var startPosition = {\n                        x: (touchStart.pageX - rect.left - window.scrollX),\n                        y: (touchStart.pageY - rect.top - window.scrollY)\n                    };\n\n                    var touchEvent = event.targetTouches[0];\n                    var rect = touchEvent.target.getBoundingClientRect();\n                    var position = {\n                        x: (touchEvent.pageX - rect.left - window.scrollX),\n                        y: (touchEvent.pageY - rect.top - window.scrollY)\n                    };\n\n                    var new_xpos = m.bound(position.x, 0, Mx.width);\n                    var new_ypos = m.bound(position.y, 0, Mx.height);\n                    var delta_xpos = new_xpos - Mx.xpos;\n                    var delta_ypos = new_ypos - Mx.ypos;\n                    Mx.xpos = new_xpos;\n                    Mx.ypos = new_ypos;\n\n                    var inPan = inPanRegion(plot, position);\n                    // If we are in the pan region, don't take any action\n                    if (inPan.inPanRegion) {\n                        return;\n                    }\n\n                    // Pan proportionally to the movement of the touch\n                    var xdelta = (Mx.stk[k].xscl * delta_xpos);\n                    var ydelta = (Mx.stk[k].yscl * delta_ypos);\n\n                    if (Mx.origin === 1) {\n                        // regular x, regular y\n                        xdelta *= -1;\n                    } else if (Mx.origin === 2) {\n                        // inverted x, regular y\n                        ydelta *= -1;\n                    } else if (Mx.origin === 3) {\n                        // inverted x, inverted y\n                        ydelta *= -1;\n                    } else if (Mx.origin === 4) {\n                        // regular x, inverted y\n                        xdelta *= -1;\n                        ydelta *= -1;\n                    }\n\n                    var xmin = Mx.stk[k].xmin + xdelta;\n                    var xmax = Mx.stk[k].xmax + xdelta;\n                    var ymin = Mx.stk[k].ymin + ydelta;\n                    var ymax = Mx.stk[k].ymax + ydelta;\n\n                    if ((xmin >= Gx.xmin) && (xmax <= Gx.xmax)) {\n                        Mx.stk[k].xmin = xmin;\n                        Mx.stk[k].xmax = xmax;\n                    }\n\n                    if ((ymin >= Gx.ymin) && (ymax <= Gx.ymax)) {\n                        Mx.stk[k].ymin = ymin;\n                        Mx.stk[k].ymax = ymax;\n                    }\n\n                    if (Gx.cmode === Gx.basemode && Mx.level === 1) {\n                        Gx.xmin = Math.min(Gx.xmin, xmin);\n                        Gx.xmax = Math.max(Gx.xmax, xmax);\n                        Gx.ymin = Math.min(Gx.ymin, ymin);\n                        Gx.ymax = Math.max(Gx.ymax, ymax);\n                    }\n                    plot.refresh();\n                } else if (event.targetTouches.length === 2) {\n                    var cur_distance = m.touch_distance(event.targetTouches[0], event.targetTouches[1]);\n                    var scaling = (1 - (Mx.touch_distance / cur_distance)) * 0.05;\n\n                    var xran = Mx.stk[k].xmax - Mx.stk[k].xmin;\n                    var yran = Mx.stk[k].ymax - Mx.stk[k].ymin;\n\n                    var xmin = Mx.stk[k].xmin + (scaling * xran);\n                    var xmax = Mx.stk[k].xmax - (scaling * xran);\n                    var ymin = Mx.stk[k].ymin + (scaling * yran);\n                    var ymax = Mx.stk[k].ymax - (scaling * yran);\n\n                    Mx.stk[k].xmin = Math.max(Gx.xmin, xmin);\n                    Mx.stk[k].xmax = Math.min(Gx.xmax, xmax);\n                    Mx.stk[k].ymin = Math.max(Gx.ymin, ymin);\n                    Mx.stk[k].ymax = Math.min(Gx.ymax, ymax);\n\n                    plot.refresh();\n                }\n            };\n        }(this));\n\n        this.throttledOnTouchMove = m.throttle(\n            this._Gx.scroll_time_interval,\n            this.ontouchmove);\n\n        mx.addEventListener(Mx, \"touchmove\", this.throttledOnTouchMove, false);\n\n        this.ontouchend = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                event.preventDefault();\n                console.log(\"on touch end \", event.targetTouches.length);\n                Gx.panning = undefined;\n                plot._Mx.scrollbar_x.action = 0;\n                plot._Mx.scrollbar_y.action = 0;\n                Mx.touch_distance = undefined;\n\n                mx.widget_callback(Mx, event);\n                // Only clear the touches after a slight delay so we can\n                // detect double-tap\n                Mx.touchClear = window.setTimeout(\n\n                    function() {\n                        Mx.touches = undefined;\n                        Mx.touchClear = undefined;\n                    }, 100);\n            };\n        }(this));\n\n        mx.addEventListener(Mx, \"touchend\", this.ontouchend, false);\n\n        this.docMouseUp = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n\n                if (event.which === 1) {\n                    // in general, you shouldn't put anything in here\n                    // ...instead it should go into rubberbox_cb\n                    Gx.panning = undefined;\n                    plot._Mx.scrollbar_x.action = 0; // TODO Is this\n                    // necessary?\n                    plot._Mx.scrollbar_y.action = 0;\n                } //else if (event.which === 2) {\n                // nothing\n                //} else if (event.which === 3) {\n                // nothing\n                //}\n                if (Gx.stillPanning) {\n                    window.clearTimeout(Gx.stillPanning);\n                    Gx.stillPanning = undefined;\n                }\n                if (Gx.repeatPanning) { // Clear the panning interval on any\n                    // mouse up in the document\n                    window.clearInterval(Gx.repeatPanning);\n                    Gx.repeatPanning = undefined;\n                }\n                return false;\n            };\n        }(this));\n        document.addEventListener(\"mouseup\", this.docMouseUp, false);\n\n        this.mouseup = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // mouse up on the canvas should never do a browser default action\n\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                // Update Mx event fields\n                mx.ifevent(plot._Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mup', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which;\n                var executeDefault = mx.dispatchEvent(Mx, evt);\n\n                if (executeDefault) {\n                    if (Mx.warpbox || Mx.widget || Mx.prompt) {\n                        // If any of these are true, the mouseup is going\n                        // to be handled by them...but this is a fragile approach\n                        // because it relies upon implicit ordering of event dispatch\n                        // for mouseup events.  It should be improved/refactored at some point\n                        return;\n                    }\n\n                    // Normal mouse up handling\n                    if (event.which === 1) {\n                        // If we are in the pan region, perform the pan\n                        // otherwise emit an mtag\n                        var inCenter = inPanCenterRegion(plot);\n                        if (inCenter.inCenterRegion) {\n                            if (inCenter.command !== ' ') {\n                                pan(plot, inCenter.command, 0, event); // pan\n                            }\n                        } else if (Gx.cntrls === 1) {\n                            // Update the mark\n                            Gx.xmrk = Gx.retx;\n                            Gx.ymrk = Gx.rety;\n\n                            var mtagevt = document.createEvent('Event');\n                            mtagevt.initEvent('mtag', true, true);\n                            mtagevt.x = Gx.xmrk;\n                            mtagevt.y = Gx.ymrk;\n                            mtagevt.xpos = event.x || event.clientX;\n                            mtagevt.ypos = event.y || event.clientY;\n                            mtagevt.w = undefined;\n                            mtagevt.h = undefined;\n                            mtagevt.shift = event.shiftKey;\n                            mx.dispatchEvent(Mx, mtagevt);\n\n                            // Refresh to draw the new marker position\n                            //if (Gx.always_show_marker || Gx.show_marker) {\n                            plot.redraw();\n                            //}\n                        }\n                    } else if (event.which === 2) {\n                        if (Gx.nomenu) {\n                            // Send an event so that a custom menu can be displayed\n                            // if desired\n                            var evt = document.createEvent('Event');\n                            evt.initEvent('showmenu', true, true);\n                            evt.x = event.x || event.clientX;\n                            evt.y = event.y || event.clientY;\n                            var executeDefault = mx.dispatchEvent(Mx, evt);\n\n                            if (executeDefault) {\n                                if (event.stopPropagation) {\n                                    event.stopPropagation();\n                                }\n                                event.cancelBubble = true;\n                                mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n                                var emit_hidemenu = function() {\n                                    try {\n                                        var hideMenuEvt = document.createEvent('Event');\n                                        hideMenuEvt.initEvent('hidemenu', true, true);\n                                        if (mx.dispatchEvent(Mx, hideMenuEvt)) {\n                                            mx.addEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n                                        }\n                                    } finally {\n                                        document.removeEventListener(\"mouseup\", emit_hidemenu, false);\n                                    }\n                                };\n                                document.addEventListener(\"mouseup\", emit_hidemenu, false);\n                            }\n                        }\n                    } else if (event.which === 3) { // unzoom only happens on\n                        // right-clicks on plot\n                        // unzoom/expand\n                        event.preventDefault();\n\n                        plot.unzoom(1);\n                        plot.refresh();\n                    }\n                }\n\n            };\n        }(this));\n\n        mx.addEventListener(Mx, \"mouseup\", this.mouseup, false);\n\n        this.mouseclick = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // alway prevent any default browser actions on the plot\n\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                // Update Mx event fields\n                mx.ifevent(plot._Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mclick', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which; // not always available on all browser\n                if (mx.dispatchEvent(Mx, evt)) {\n                    // currently there isn't a default for mouseclick to cancel\n                }\n                return false;\n            };\n        }(this));\n        mx.addEventListener(Mx, \"click\", this.mouseclick, false);\n\n        this.mousedblclick = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // alway prevent any default browser actions on the plot\n\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                // Update Mx event fields\n                mx.ifevent(plot._Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mdblclick', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which; // not always available on all browser\n                if (mx.dispatchEvent(Mx, evt)) {\n                    // currently there isn't a default for mouseclick to cancel\n                }\n                return false;\n            };\n        }(this));\n        mx.addEventListener(Mx, \"dblclick\", this.mousedblclick, false);\n\n        // PANBAR DRAGGING mouse event handlers:\n        this.dragMouseDownHandler = (function(plot) {\n            return function(event) {\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n\n                // Check if event occured in the pan region\n                var inPan = inPanRegion(plot);\n\n                // Event processing\n                if (inPan.inPanRegion) { // Mouse position lies in a pan\n                    // region\n                    event.preventDefault();\n                    if (inPan.command !== ' ') {\n                        var scrollbar;\n                        if (inPan.command === \"XPAN\") {\n                            scrollbar = Mx.scrollbar_x;\n                        } else if (inPan.command === \"YPAN\") {\n                            scrollbar = Mx.scrollbar_y;\n                        }\n\n                        var position = {\n                            x: Mx.xpos,\n                            y: Mx.ypos\n                        };\n                        if (scrollbar !== undefined && onScrollbar(position, scrollbar) && event.which === 1) { // On scrollbar, set up\n                            // a DRAG\n                            Gx.panning = {\n                                axis: inPan.command,\n                                xpos: event.screenX, // Use screen-relative\n                                // values here instead\n                                // of div/page-relative\n                                // values\n                                ypos: event.screenY,\n                                xmin: Mx.stk[Mx.level].xmin,\n                                xmax: Mx.stk[Mx.level].xmax,\n                                ymin: Mx.stk[Mx.level].ymin,\n                                ymax: Mx.stk[Mx.level].ymax\n                            };\n                        }\n                    }\n                }\n            };\n        }(this));\n        window.addEventListener(\"mousedown\", this.dragMouseDownHandler, false);\n\n        this.dragMouseMoveHandler = (function(plot) {\n            return function(e) {\n                var Gx = plot._Gx;\n\n                if (Gx.panning !== undefined) { // execute a scrollbar DRAG\n                    try {\n                        drag_scrollbar(plot, Gx.panning.axis, e);\n                    } catch (err) {\n                        console.log(\"Error: \" + err); // TODO Eventually come\n                        // up with better error\n                        // handling here\n                    }\n                }\n            };\n        }(this));\n\n        this.throttledDragOnMouseMove = m.throttle(this._Gx.scroll_time_interval,\n            this.dragMouseMoveHandler);\n\n        window.addEventListener(\"mousemove\", this.throttledDragOnMouseMove,\n            false);\n\n        this.dragMouseUpHandler = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n\n                if (event.which === 1) {\n                    Gx.panning = undefined; // Panbar dragging completed - clear\n                    // the state variable\n                }\n            };\n        }(this));\n        window.addEventListener(\"mouseup\", this.dragMouseUpHandler, false);\n\n        // TODO this may need to be throttled or debounced\n        this.onresize = (function(plot) {\n            return function(event) {\n                if (mx.checkresize(plot._Mx)) {\n                    plot.refresh();\n                }\n            };\n        }(this));\n\n        // Mouse Wheel logic\n        this.wheelHandler = (function(plot) {\n\n            var Mx = plot._Mx;\n            var Gx = plot._Gx;\n\n            var throttledPan = m.throttle(100, function(inPan) {\n                // Mouse wheel\n                // event over a\n                // panning\n                // region\n\n                var scrollbar;\n                if (inPan.command === \"XPAN\") {\n                    scrollbar = Mx.scrollbar_x;\n                } else if (inPan.command === \"YPAN\") {\n                    scrollbar = Mx.scrollbar_y;\n                }\n\n                // For now, vertical mouse scrolling is the only action that\n                // will trigger a pan\n                // Later, we can add horizontal mouse scrolling if we choose\n                if (Gx.wheelscroll_mode_natural) { // Original Sig-Plot\n                    // orientation\n                    scrollbar.action = (event.deltaY < 0 ? mx.SB_WHEELDOWN : mx.SB_WHEELUP);\n                } else { // Inverted/\"un-natural\" orientation\n                    scrollbar.action = (event.deltaY < 0 ? mx.SB_WHEELUP : mx.SB_WHEELDOWN);\n                }\n\n                scrollbar.step = 0.1 * scrollbar.srange;\n                scrollbar.page = 9 * scrollbar.step;\n\n                // Execute wheel action on the scrollbar\n                mx.scroll(Mx, scrollbar, mx.XW_COMMAND, undefined,\n                    scrollbar);\n\n                // Update the viewbox\n                updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange, inPan.command.slice(0, 1));\n            });\n\n            var throttledZoom = m.throttle(100, function() {\n                var zoomperc = Gx.wheelZoomPercent || 0.2;\n                if (Gx.wheelscroll_mode_natural) {\n                    if (event.deltaY > 0) {\n                        zoomperc = -1 * zoomperc;\n                    }\n                } else { // Inverted/\"un-natural\" orientation\n                    if (event.deltaY < 0) {\n                        zoomperc = -1 * zoomperc;\n                    }\n                }\n\n                if (Gx.wheelZoom === \"x\") {\n                    plot.percent_zoom(zoomperc, 1, true);\n                } else if (Gx.wheelZoom === \"y\") {\n                    plot.percent_zoom(1, zoomperc, true);\n                } else {\n                    plot.percent_zoom(zoomperc, zoomperc, true);\n                }\n            });\n\n            return function(event) {\n                // Update Mx event fields\n                mx.ifevent(Mx, event);\n\n                // Check if event occured in the pan region\n                var inPan = inPanRegion(plot);\n\n                // Event processing\n                if (plot.mouseOnCanvas) {\n                    event.preventDefault();\n\n                    if (inPan.inPanRegion) {\n                        throttledPan(inPan);\n                    } else if (Gx.wheelZoom) {\n                        throttledZoom();\n                    }\n                }\n            };\n        }(this));\n\n        window.addWheelListener(window, this.wheelHandler, false);\n\n        window.addEventListener(\"resize\", this.onresize, false);\n\n        // If multiple plots are in the same window, then it\n        // may be desired to disable keypress behavior and implement\n        // it at a higher-level...by default keypress behavior\n        // is enabled and only works if the mouse if over the plot\n        if (!options.nokeypress) {\n            this.onkeypress = (function(plot) {\n                return function(event) {\n                    var Mx = plot._Mx;\n                    var Gx = plot._Gx;\n                    if (plot.mouseOnCanvas) {\n\n                        if (Mx.widget && (Mx.widget.type === \"MENU\")) {\n                            return; // The menu absorbs the keypress\n                        }\n\n                        if (Mx.widget && (Mx.widget.type === \"ONESHOT\")) {\n                            Mx.widget = null;\n                            plot.refresh();\n                            return;\n                        }\n\n                        var keyCode = common.getKeyCode(event);\n\n                        // Since the mouse is in the plot area, send a keypress event\n                        var evt = document.createEvent('Event');\n                        evt.initEvent('plotkeypress', true, true);\n                        evt.keyCode = keyCode;\n                        evt.shiftKey = event.shiftKey;\n                        evt.ctrlKey = event.ctrlKey;\n                        evt.altKey = event.altKey;\n                        evt.metaKey = event.metaKey;\n                        var executeDefault = mx.dispatchEvent(Mx, evt);\n                        if (!executeDefault) {\n                            return;\n                        }\n\n                        // Only respond to keypresses if the mouse is\n                        // in the plot area....\n\n                        if (keyCode === 97) { // 'a'\n                            Gx.iabsc = (Gx.iabsc + 1) % 4;\n                            // It's kinda up in the air if changing the 'specs'\n                            // area should also change the plotting mode itself...\n                            // on one hand, if you have multiple layers with different\n                            // xdeta's then switching the specs area to index mode will\n                            // give you only the index of the baselayer...on the other hand\n                            // the use may only want to change the readout and not the x-axis\n                            // or the plot...for now this is commented out to behave in the same\n                            // manner as SIGPLOT.\n                            //plot.change_settings({\n                            //\tindex : Gx.iabsc === 1\n                            //});\n                            display_specs(plot);\n                        } else if (keyCode === 108) { // 'l'\n                            plot.change_settings({\n                                legend: !Gx.legend\n                            }); // toggle the legend\n                        } else if (keyCode === 103) { // 'g'\n                            plot.change_settings({\n                                grid: !Gx.grid\n                            }); // toggle the grid\n                        } else if ((keyCode === 98) || (keyCode === 2)) { // 'b' and CTRL-'b'\n                            if (Mx.warpbox) {\n                                if (Mx.warpbox.mode === \"box\") {\n                                    Mx.warpbox.mode = \"horizontal\";\n                                } else if (Mx.warpbox.mode === \"horizontal\") {\n                                    Mx.warpbox.mode = \"vertical\";\n                                } else {\n                                    Mx.warpbox.mode = \"box\";\n                                }\n                                mx.redraw_warpbox(Mx);\n                            }\n                        } else if (keyCode === 99) { // 'c'\n                            plot.change_settings({\n                                xcnt: -1 * Gx.cntrls\n                            });\n                        } else if (keyCode === 114) { // 'r'\n                            plot.change_settings({\n                                show_readout: !Gx.show_readout\n                            });\n                        } else if (keyCode === 115) { // 's'\n                            plot.change_settings({\n                                specs: !Gx.specs\n                            });\n                        } else if (keyCode === 112) { // 'p'\n                            plot.change_settings({\n                                p_cuts: !Gx.p_cuts\n                            });\n                        } else if (keyCode === 120) { // 'x'\n                            if (Gx.x_cut_press_on) {\n                                // leave xCut\n                                plot.xCut();\n                            } else if (Gx.xyKeys === \"pop-up\") {\n                                if (!Gx.x_pop_now) {\n                                    sigplot_show_x(plot);\n                                    Gx.x_pop_now = true;\n                                } else {\n                                    Gx.x_pop_now = false;\n                                }\n                            } else if ((Gx.lyr[0].hcb[\"class\"] === 1) && (Gx.xyKeys === \"automatic\")) {\n                                if (!Gx.x_pop_now) {\n                                    sigplot_show_x(plot);\n                                    Gx.x_pop_now = true;\n                                } else {\n                                    Gx.x_pop_now = false;\n                                }\n                            } else if ((Gx.xyKeys !== \"disable\") && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                                // show xCut if xyKeys aren't disabled and the first layer is \n                                // type 2000 and y-cut isn't currently enabled (we already checked\n                                // that x_cut above)\n                                if (!Gx.y_cut_press_on) {\n                                    plot.xCut(pixel_to_real(plot, 0, Mx.ypos).y);\n                                }\n                            }\n                        } else if (keyCode === 121) { // 'y'\n                            if (Gx.y_cut_press_on) {\n                                plot.yCut();\n                            } else if (Gx.xyKeys === \"pop-up\") {\n                                if (!Gx.y_pop_now) {\n                                    sigplot_show_y(plot);\n                                    Gx.y_pop_now = true;\n                                } else {\n                                    Gx.y_pop_now = false;\n                                }\n                            } else if ((Gx.lyr[0].hcb[\"class\"] === 1) && (Gx.xyKeys === \"automatic\")) {\n                                if (!Gx.y_pop_now) {\n                                    sigplot_show_y(plot);\n                                    Gx.y_pop_now = true;\n                                } else {\n                                    Gx.y_pop_now = false;\n                                }\n                            } else if ((Gx.xyKeys !== \"disable\") && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                                // show xCut if xyKeys aren't disabled and the first layer is \n                                // type 2000 and y-cut isn't currently enabled (we already checked\n                                // that y_cut above)\n                                if (!Gx.x_cut_press_on) {\n                                    plot.yCut(pixel_to_real(plot, Mx.xpos, 0).x);\n                                }\n                            }\n                        } else if (keyCode === 122) { // 'z'\n                            sigplot_show_z(plot);\n                        } else if (keyCode === 116) { // 't'\n                            sigplot_show_timecode(plot);\n                        } else if (keyCode === 109) { // 'm'\n                            if (!Gx.nomenu) {\n                                var evt = document.createEvent('Event');\n                                evt.initEvent('showmenu', true, true);\n                                evt.x = Mx.x;\n                                evt.y = Mx.y;\n                                var executeDefault = mx.dispatchEvent(Mx, evt);\n                                if (executeDefault) {\n                                    sigplot_mainmenu(plot);\n                                }\n                            }\n                        } else if (keyCode === 63) { // '?'\n                            mx.message(Mx, MAIN_HELP);\n                        } else if (keyCode === 102) { // 'f'\n                            mx.fullscreen(Mx);\n                            plot.refresh();\n                        } else if ((keyCode === 9) && (event.ctrlKey)) { // ctrl-i\n                            plot.change_settings({\n                                invert: null\n                            });\n                        } else if (keyCode === 107) { // 'k' show marker\n                            Gx.show_marker = !Gx.show_marker;\n                            plot.redraw();\n\n                        }\n                    }\n                };\n            }(this));\n\n            common.setKeypressHandler(this.onkeypress);\n        }\n\n        return this;\n    };\n\n    // Public methods\n\n    Plot.prototype = {\n        /** @lends Plot **/\n\n        /**\n         * Add a plugin to the plot\n         *\n         * @param plugin\n         *            the plugin object\n         *\n         * @param zorder\n         *            the zorder for the plugin to render, all plugins render as\n         *            overlays on top of the plot\n         */\n        add_plugin: function(plugin, zorder) {\n            if (zorder === undefined) {\n                zorder = Number.MAX_VALUE;\n            }\n            if (zorder <= 0) {\n                throw \"Invalid plugin zorder\";\n            }\n\n\n            plugin.init(this);\n\n            var canvas = document.createElement('canvas');\n            canvas.width = this._Mx.canvas.width;\n            canvas.height = this._Mx.canvas.height;\n\n            this._Gx.plugins.push({\n                impl: plugin,\n                zorder: zorder,\n                canvas: canvas\n            });\n\n            this._Gx.plugins.sort(function(a, b) {\n                return (a.zorder - b.zorder);\n            });\n\n\n            this.refresh();\n        },\n\n        /**\n         * Removes a plugin from the plot\n         *\n         * @param plugin\n         *            the plugin object\n         */\n        remove_plugin: function(plugin) {\n            var i = this._Gx.plugins.length;\n            while (i--) {\n                if (this._Gx.plugins[i].impl === plugin) {\n                    if (plugin.dispose) {\n                        plugin.dispose();\n                    }\n                    if (this._Gx.plugins[i].canvas.parentNode) {\n                        this._Gx.plugins[i].canvas.parentNode.removeElement(this._Gx.plugins[i].canvas);\n                    }\n                    this._Gx.plugins.splice(i, 1);\n                }\n            }\n            this._Gx.plugins.sort(function(a, b) {\n                return (a.zorder - b.zorder);\n            });\n\n            this.refresh();\n        },\n\n        /**\n         * Adds a listener to plot events.\n         *\n         * @example plot.addListener(what, function(event) {});\n         *\n         * @param what\n         *            the name of the event to listen to.  \"file_deoverlayed\" is\n         *            emitted when a file is deoverlayed (the name of the deoverlayed\n         *            file can be found in evt.filename), \"file_overlayed\" is emitted\n         *            when a file is overlayed (the name of the overlayed file can\n         *            be found in evt.filename), \"hidemenu\"\tis emitted when the\n         *            menu should be hidden (a selection is made or a mouse click\n         *            occurs away from the menu), \"mdown\"\tis emitted when the mouse\n         *            down event occurs (the evt has parts evt.xpos (the mouse x-position\n         *            relative to the canvas), evt.ypos (the mouse y-position relative\n         *            to the canvas), evt.x (the mouse x-position relative to the data),\n         *            evt.y (the mouse y-position relative to the data) and evt.which\n         *            (returns which mouse button was pressed for the event)) \"mmove\"\n         *            is emitted when a mouse move event occurs (the evt has parts\n         *            evt.xpos (the mouse x-position relative to the canvas), evt.ypos\n         *            (the mouse y-position relative to the canvas), evt.x (the mouse\n         *            x-position relative to the data), evt.y (the mouse y-position\n         *            relative to the data) and evt.which (returns which mouse button\n         *            was pressed for the event)), \"mtag\"\tis emitted when a mouse \"tag\"\n         *            event occurs (the evt of an mtag has different parts depending\n         *            on what triggered it. It will always contain evt.xpos (the mouse\n         *            x-position relative to the canvas), evt.ypos (the mouse y-position\n         *            relative to the canvas), evt.x (the mouse x-position relative\n         *            to the data), and evt.y (the mouse y-position relative to the data).\n         *            If the rubberboxes are enabled, evt.h and evt.w will contain\n         *            the width and height of the box. evt.shift will contain info\n         *            about the shift key if it is pressed), \"mmove\" is emitted when\n         *            a mouse move event has occurred, \"mdown\" is emitted when\n         *            a mouse down event has occurred (the evt has parts evt.xpos\n         *            (the mouse x-position relative to the canvas), evt.ypos (the\n         *            mouse y-position relative to the canvas), evt.x (the mouse\n         *            x-position relative to the data), evt.y (the mouse y-position\n         *            relative to the data) and evt.which (returns which mouse button\n         *            was pressed for the event)), \"mup\" is emitted when a mouse up\n         *            event occurs. (the evt has parts evt.xpos (the mouse x-position\n         *            relative to the canvas), evt.ypos (the mouse y-position relative\n         *            to the canvas), evt.x (the mouse x-position relative to the data),\n         *            evt.y (the mouse y-position relative to the data) and evt.which\n         *            (returns which mouse button was pressed for the event)),\n         *            \"reread\" is emitted when a reread has been performed, \"sigplotexit\"\n         *            is emitted when an exit plot event occurs, and \"showmenu\"\tis\n         *            emitted when the menu should be shown (the evt.x and evt.y\n         *            contain the coordinates on the plot where the menu will be displayed.\n         *\n         * @param [function]\n         *            callback the function that will be called when the event is heard\n         */\n        addListener: function(what, callback) {\n            var Mx = this._Mx;\n            mx.addEventListener(Mx, what, callback, false);\n        },\n\n        /**\n         * Removes a listener to plot events.\n         *\n         * @param what\n         *            the event that was listned to\n         * @param callback\n         */\n        removeListener: function(what, callback) {\n            var Mx = this._Mx;\n            mx.removeEventListener(Mx, what, callback, false);\n        },\n\n        /**\n         * Change one or more plot settings. For boolean types, passing null\n         * will toggle the setting.\n         *\n         * @example plot.change_settings({[settings]});\n         *\n         * @param settings\n         *            Key-value pairs whose values are the settings to change\n         *\n         * @param {Boolean}\n         *            settings.grid change grid visibility\n         *\n         * @param {Boolean}\n         *            settings.index change index setting\n         *\n         * @param {Boolean}\n         *            settings.all change the plot to show all data\n         *\n         * @param {Boolean}\n         *            settings.show_x_axis true displays the x axis\n         *\n         * @param {Boolean}\n         *            settings.show_y_axis true displays the y axis\n         *\n         * @param {Boolean}\n         *            settings.show_readout true displays the readout\n         *\n         * @param {Boolean}\n         *            settings.specs turns on and off specs\n         *\n         * @param {String}\n         *            settings.xcnt \"leftmouse\", \"continuous\", \"disable\",\n         *            \"enable\"\n         *\n         * @param {Boolean}\n         *            settings.legend true displays the legend\n         *\n         * @param {Boolean}\n         *            settings.pan true will display scrollbars and enable panning\n         *\n         * @param {Boolean}\n         *            settings.cross true displays cross hairs\n         *\n         * @param {String}\n         *            settings.rubberbox_action controls action of rubberbox.\n         *            \"zoom\" (default) = zoom to the selected area, \"select\" =\n         *            select the selected area, and \"null\" = disabled, no action\n         *\n         * @param {String}\n         *            settings.rubberbox_mode controls the behavior of the rubberbox.\n         *            \"zoom\" = zoom to the selected area, \"box\" = trigger an mtag\n         *            action on the selected area\n         *\n         * @param {String}\n         *            settings.rightclick_rubberbox_action controls action of\n         *            rubberbox on rightclick. \"zoom\" = zoom to the selected area,\n         *            \"select\" = select the selected area, and \"null\" (the default)\n         *            = disabled, no action\n         *\n         * @param {String}\n         *            settings.rightclick_rubberbox_mode controls the behavior of\n         *            the rubberbox on rightclck. \"zoom\" = zoom to the selected area,\n         *            \"box\" = trigger an mtag action on the selected area. By default\n         *            is null to disable right-click boxes\n         *\n         * @param {String}\n         *            settings.wheelscroll_mode_natural true indicates natural\n         *            mode, where scrolling the mousewheel forward will pan down\n         *            and backwards will pan up\n         *\n         * @param {String}\n         *            settings.cmode !!!! CHANGED\n         *\n         * @param {String}\n         *            settings.phunits The phase units \"D\" = Degrees, \"R\" = Radians,\n         *            \"C\" = Cycles\n         *\n         * @ param {Boolean}\n         *            settings.lg_colorbar true displays the large colorbar\n         *\n         * @param {Boolean}\n         *            settings.p_cuts true displays p_cuts on a 2D plot\n         */\n\n        change_settings: function(settings) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            for (var i = 0; i < Gx.lyr.length; i++) {\n                Gx.lyr[i].change_settings(settings);\n            }\n\n            if (settings.xyKeys !== undefined) {\n                if (settings.xyKeys === null) {\n                    Gx.xyKeys = \"automatic\";\n                } else {\n                    Gx.xyKeys = settings.xyKeys;\n                }\n            }\n\n            if (settings.grid !== undefined) {\n                if (settings.grid === null) {\n                    Gx.grid = !Gx.grid;\n                } else {\n                    Gx.grid = settings.grid;\n                }\n            }\n\n            if (settings.gridBackground !== undefined) {\n                Gx.gridBackground = settings.gridBackground;\n            }\n\n            if (settings.gridStyle !== undefined) {\n                Gx.gridStyle = settings.gridStyle;\n            }\n\n            if (settings.wheelZoom !== undefined) {\n                Gx.wheelZoom = settings.wheelZoom;\n            }\n\n            if (settings.wheelZoomPercent !== undefined) {\n                Gx.wheelZoomPercent = settings.wheelZoomPercent;\n            }\n\n            if (settings.autol !== undefined) {\n                Gx.autol = settings.autol;\n            }\n\n            if ((settings.index !== undefined) && (settings.index !== Gx.index)) {\n                if (settings.index === null) {\n                    Gx.index = !Gx.index;\n                } else {\n                    Gx.index = settings.index;\n                }\n\n                // the original sigplot.for fails\n                // to do this so that the specs area\n                // has the correct setting.\n                if ((Gx.index) && (Gx.iabsc !== 1)) {\n                    Gx.iabsc = 1;\n                } else if ((!Gx.index) && (Gx.iabsc === 1)) {\n                    Gx.iabsc = 0;\n                }\n\n                var xmin;\n                var xmax;\n                scale_base(this, {\n                    get_data: false\n                }, xmin, xmax);\n\n                // like sigplot, undo all zoom levels\n                this.unzoom();\n            }\n\n            if (settings.all !== undefined) {\n                if (settings.all === null) {\n                    Gx.all = !Gx.all;\n                } else {\n                    Gx.all = settings.all;\n                }\n            }\n\n            if (settings.show_x_axis !== undefined) {\n                if (settings.show_x_axis === null) {\n                    Gx.show_x_axis = !Gx.show_x_axis;\n                } else {\n                    Gx.show_x_axis = settings.show_x_axis;\n                }\n                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);\n            }\n\n            if (settings.show_y_axis !== undefined) {\n                if (settings.show_y_axis === null) {\n                    Gx.show_y_axis = !Gx.show_y_axis;\n                } else {\n                    Gx.show_y_axis = settings.show_y_axis;\n                }\n                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);\n            }\n\n            if (settings.show_readout !== undefined) {\n                if (settings.show_readout === null) {\n                    Gx.show_readout = !Gx.show_readout;\n                } else {\n                    Gx.show_readout = settings.show_readout;\n                }\n                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);\n            }\n\n            if (settings.specs !== undefined) {\n                if (settings.specs === null) {\n                    Gx.specs = !Gx.specs;\n                } else {\n                    Gx.specs = settings.specs;\n                }\n                if (Gx.specs) {\n                    Gx.show_x_axis = true;\n                    Gx.show_y_axis = true;\n                    Gx.show_readout = true;\n                } else {\n                    Gx.show_x_axis = false;\n                    Gx.show_y_axis = false;\n                    Gx.show_readout = false;\n                }\n            }\n\n            if (settings.xcnt !== undefined) {\n                if (settings.xcnt === \"leftmouse\") {\n                    Gx.cntrls = 1;\n                } else if (settings.xcnt === \"continuous\") {\n                    Gx.cntrls = 2;\n                } else if ((settings.xcnt === \"disable\") && (Gx.cntrls > 0)) {\n                    Gx.cntrls = -1 * Gx.cntrls;\n                } else if ((settings.xcnt === \"enable\") && (Gx.cntrls < 0)) {\n                    Gx.cntrls = -1 * Gx.cntrls;\n                } else {\n                    Gx.cntrls = settings.xcnt;\n                }\n            }\n\n            if (settings.legend !== undefined) {\n                if (settings.legend === null) {\n                    Gx.legend = !Gx.legend;\n                } else {\n                    Gx.legend = settings.legend;\n                }\n            }\n\n            if (settings.pan !== undefined) {\n                if (settings.pan === null) {\n                    Gx.pan = !Gx.pan;\n                } else {\n                    Gx.pan = settings.pan;\n                }\n            }\n\n            if (settings.cross !== undefined) {\n                if (settings.cross === null) { // catch null or undefined here\n                    Gx.cross = !Gx.cross;\n                } else {\n                    Gx.cross = settings.cross;\n                }\n                if (!Gx.cross) {\n                    if (Gx.cross_xpos !== undefined) {\n                        mx.rubberline(Mx, Gx.cross_xpos, Mx.t, Gx.cross_xpos,\n                            Mx.b);\n                    }\n                    if (Gx.cross_ypos !== undefined) {\n                        mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r,\n                            Gx.cross_ypos);\n                    }\n                    Gx.cross_xpos = undefined;\n                    Gx.cross_ypos = undefined;\n                } else {\n                    Gx.cross_xpos = undefined;\n                    Gx.cross_ypos = undefined;\n                    if ((!Mx.warpbox) && (this.mouseOnCanvas)) {\n                        draw_crosshairs(this);\n                    }\n                }\n            }\n\n            var cmode;\n            var address = settings.cmode === undefined ? \"\" : settings.cmode;\n            if (typeof address === \"string\") {\n                address = address + \"\";\n                cmode = address.toUpperCase();\n            } else {\n                cmode = address;\n            }\n\n            if (settings.cmode !== undefined) {\n                if ((cmode === \"MA\") || (cmode === \"INMA\") || (cmode === \"ABMA\") ||\n                    (cmode === \"__MA\") || (cmode === \"MAGNITUDE\") || (cmode === 1)) {\n                    cmode = 1;\n                }\n                if ((cmode === \"PH\") || (cmode === \"INPH\") || (cmode === \"ABPH\") ||\n                    (cmode === \"__PH\") || (cmode === \"PHASE\") || (cmode === 2)) {\n                    cmode = 2;\n                }\n                if ((cmode === \"RE\") || (cmode === \"INRE\") || (cmode === \"ABRE\") ||\n                    (cmode === \"__RE\") || (cmode === \"REAL\") || (cmode === 3)) {\n                    cmode = 3;\n                }\n                if ((cmode === \"IM\") || (cmode === \"INIM\") || (cmode === \"ABIM\") ||\n                    (cmode === \"__IM\") || (cmode === \"IMAGINARY\") || (cmode === 4)) {\n                    cmode = 4;\n                }\n                if ((cmode === \"LO\") || (cmode === \"D1\") || (cmode === \"INLO\") || (cmode === \"IND1\") ||\n                    (cmode === \"ABIM\") || (cmode === \"ABD1\") || (cmode === \"__LO\") ||\n                    (cmode === \"__D1\") || (cmode === \"10*LOG10\") || (cmode === 6)) {\n                    cmode = 6;\n                }\n                if ((cmode === \"L2\") || (cmode === \"D2\") || (cmode === \"INL2\") || (cmode === \"IND2\") ||\n                    (cmode === \"ABLO\") || (cmode === \"ABD2\") || (cmode === \"__L2\") ||\n                    (cmode === \"__D2\") || (cmode === \"20*LOG10\") || (cmode === 7)) {\n                    cmode = 7;\n                }\n                if ((cmode === \"RI\") || (cmode === \"IR\") || (cmode === \"INRI\") || (cmode === \"INIR\") ||\n                    (cmode === \"ABRI\") || (cmode === \"ABIR\") || (cmode === \"__RI\") ||\n                    (cmode === \"__IR\") || (cmode === \"IMAG/REAL\") || (cmode === \"REAL/IMAG\") || (cmode === 5)) {\n                    if (Gx.index) {\n                        alert(\"Imag/Real mode not permitted in INDEX mode\");\n                    } else {\n                        cmode = 5;\n                    }\n                }\n\n                changemode(this, cmode);\n            }\n\n            if (settings.phunits !== undefined) {\n                changephunits(this, settings.phunits);\n            }\n\n            if (settings.rubberbox_action !== undefined) {\n                Gx.default_rubberbox_action = settings.rubberbox_action;\n            }\n\n            if (settings.rubberbox_mode !== undefined) {\n                Gx.default_rubberbox_mode = settings.rubberbox_mode;\n            }\n\n            if (settings.rightclick_rubberbox_action !== undefined) {\n                Gx.default_rightclick_rubberbox_action = settings.rightclick_rubberbox_action;\n            }\n\n            if (settings.rightclick_rubberbox_mode !== undefined) {\n                Gx.default_rightclick_rubberbox_mode = settings.rightclick_rubberbox_mode;\n            }\n\n            if (settings.wheelscroll_mode_natural !== undefined) {\n                Gx.wheelscroll_mode_natural = settings.wheelscroll_mode_natural;\n            }\n\n            if (settings.colors !== undefined) {\n                if (!settings.colors.fg) {\n                    settings.colors.fg = Mx.fg;\n                }\n                if (!settings.colors.bg) {\n                    settings.colors.bg = Mx.bg;\n                }\n                mx.setbgfg(Mx, settings.colors.bg, settings.colors.fg, Mx.xi);\n            }\n\n            if (settings.cmap !== undefined) {\n                if (settings.cmap === null) {\n                    // default\n                    if (Gx.cmode === 2) {\n                        Gx.cmap = 2; // wheel\n                    } else {\n                        Gx.cmap = 1; // ramp\n                    }\n                } else {\n                    Gx.cmap = settings.cmap; // TODO support string lookup\n                }\n\n                setup_cmap(this, Gx.cmap);\n            }\n\n            if (settings.yinv !== undefined) {\n                if (settings.yinv) {\n                    Mx.origin = 4;\n                } else {\n                    Mx.origin = 1;\n                }\n            }\n\n            if (settings.rasterSmoothing !== undefined) {\n                if (settings.rasterSmoothing === null) {\n                    Gx.rasterSmoothing = !Gx.rasterSmoothing;\n                } else {\n                    Gx.rasterSmoothing = settings.rasterSmoothing;\n                }\n            }\n\n            if (settings.fillStyle !== undefined) {\n                Gx.fillStyle = settings.fillStyle;\n            }\n\n            if (settings.invert !== undefined) {\n                if (settings.invert === null) {\n                    mx.invertbgfg(Mx);\n                } else if (settings.invert === true) {\n                    mx.setbgfg(this, \"white\", \"black\");\n                } else {\n                    mx.setbgfg(this, \"black\", \"white\");\n                }\n            }\n\n            if (settings.nomenu !== undefined) {\n                if (settings.nomenu === null) {\n                    Gx.nomenu = !Gx.nomenu;\n                } else {\n                    Gx.nomenu = settings.nomenu;\n                }\n            }\n\n            if (settings.ymax !== undefined) {\n                if (settings.ymax === null) {\n                    Gx.autoy = Gx.autoy | 2;\n                    Gx.panymax = undefined;\n                    scale_base(this, {});\n                    Gx.ymax = Gx.panymax;\n                } else {\n                    // autoy must be set correctly before calling updateViewbox\n                    Gx.autoy = Gx.autoy & 0xD;\n                    Gx.ymax = settings.ymax;\n                    updateViewbox(this, Mx.stk[0].ymin, settings.ymax, \"Y\");\n                    this.redraw();\n                }\n            }\n\n            if (settings.ymin !== undefined) {\n                if (settings.ymin === null) {\n                    Gx.autoy = Gx.autoy | 1;\n                    Gx.panymin = undefined;\n                    scale_base(this, {});\n                    Gx.ymin = Gx.panymin;\n                } else {\n                    // autoy must be set correctly before calling updateViewbox\n                    Gx.autoy = Gx.autoy & 0xE;\n                    Gx.ymin = settings.ymin;\n                    updateViewbox(this, settings.ymin, Mx.stk[0].ymax, \"Y\");\n                    this.redraw();\n                }\n            }\n\n            // Check autoy setting after checking ymin/ymax\n            // so that explicitly setting autoy will override\n            // implicit settings via ymin/ymax\n            if (settings.autoy !== undefined) {\n                Gx.autoy = settings.autoy;\n                if (((Gx.autoy & 1) !== 0)) {\n                    Gx.ymin = undefined;\n                }\n                if (((Gx.autoy & 2) !== 0)) {\n                    Gx.ymax = undefined;\n                }\n            }\n\n            if (settings.xmin !== undefined) {\n                updateViewbox(this, settings.xmin, Mx.stk[0].xmax, \"X\");\n                Gx.autox = (Gx.autox & 2);\n                this.redraw();\n            }\n\n            if (settings.xmax !== undefined) {\n                updateViewbox(this, Mx.stk[0].xmin, settings.xmax, \"X\");\n                Gx.autox = (Gx.autox & 1);\n                this.redraw();\n            }\n\n            if (settings.zmin !== undefined) {\n                Gx.zmin = settings.zmin;\n                Gx.autoz = (Gx.autoz & 2);\n            }\n\n            if (settings.zmax !== undefined) {\n                Gx.zmax = settings.zmax;\n                Gx.autoz = (Gx.autoz & 1);\n            }\n\n            if (settings.autoz !== undefined) {\n                Gx.autoz = settings.autoz;\n                if (((Gx.autoz & 1) !== 0)) {\n                    Gx.zmin = undefined;\n                }\n                if (((Gx.autoz & 2) !== 0)) {\n                    Gx.zmax = undefined;\n                }\n            }\n\n            if (settings.note !== undefined) {\n                Gx.note = settings.note;\n            }\n\n            if (settings.lg_colorbar !== undefined) {\n                // Change the plot area and then draw the large colorbar\n                Gx.lg_colorbar = !Gx.lg_colorbar;\n            }\n\n            if (settings.p_cuts !== undefined) {\n                // Change the plot area and then draw the p_cuts dipslay\n                if (settings.p_cuts === null) {\n                    Gx.p_cuts = !Gx.p_cuts;\n                } else {\n                    Gx.p_cuts = settings.p_cuts;\n                }\n            }\n\n            //this is a setting that is true if we are drawing an xcut\n            if (settings.xcut_now !== undefined) {\n                Gx.xcut_now = !Gx.xcut_now;\n            }\n\n            //this is a setting that is true if we are drawing a ycut\n            if (settings.ycut_now !== undefined) {\n                Gx.ycut_now = !Gx.ycut_now;\n            }\n\n            this.refresh();\n            if (settings.pan !== undefined) { // refactor - new code to handle\n                // disappearing specs\n                display_specs(this);\n            }\n        },\n\n        /**\n         * Reread all files and refresh the plot.\n         */\n        reread: function() {\n            var Gx = this._Gx;\n            var oldLayerData = [];\n            for (var k = 0; k < Gx.lyr.length; k++) { // make a copy of layer\n                // data before\n                // destroying Gx.lyr\n                // with the deoverlay\n                oldLayerData[k] = Gx.lyr[k];\n            }\n\n            var origHCB = Gx.HCB.slice();\n            this.deoverlay();\n            for (var i = 0; i < origHCB.length; i++) {\n                this.overlay_bluefile(origHCB[i]);\n            }\n\n            // propagate old layer attributes to re-read layers\n            for (var j = 0; j < Gx.lyr.length; j++) {\n                // TODO Assumes indices of old Gx.lyr and new Gx.lyr will match\n                // up correctly - should we instead use hcb and name to identify\n                Gx.lyr[j].symbol = oldLayerData[j].symbol;\n                Gx.lyr[j].radius = oldLayerData[j].radius;\n                // TODO re-copy other things like line type???\n            }\n            this.refresh();\n\n            // Notify listeners that a reread was performed\n            var evt = document.createEvent('Event');\n            evt.initEvent('reread', true, true);\n            mx.dispatchEvent(this._Mx, evt);\n        },\n\n        /**\n         * Placeholder for cleanup logic.\n         */\n        cleanup: function() {\n            // TODO not sure what we really want to do here yet\n        },\n\n        /**\n         * Reload data without adjusting other aspects about a plot\n         *\n         * @param {Number} n\n         *            the layer to push data into\n         * @param {Number[]} data\n         *            data to push\n         * @param {Object} hdrmod\n         *            optional changes to the file header\n         */\n        reload: function(n, data, hdrmod, rsync) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            if ((n < 0) || (n >= Gx.lyr.length)) {\n                return;\n            }\n\n            if (Gx.lyr[n].reload === undefined) {\n                return;\n            }\n\n            var xbnds = Gx.lyr[n].reload(data, hdrmod);\n\n            if (Mx.level === 0) {\n                // Unlike push(), always call scale_base\n                // when reload is invoked\n                scale_base(this, {\n                    get_data: false\n                }, xbnds.xmin, xbnds.xmax);\n            }\n\n            if (rsync) {\n                this._refresh();\n            } else {\n                this.refresh();\n            }\n\n        },\n\n        rescale: function() {\n            var Mx = this._Mx;\n\n            if (Mx.level === 0) {\n                scale_base(this, {\n                    get_data: false\n                }, undefined, undefined);\n            }\n\n            this.refresh();\n        },\n\n        /**\n         * Change the file header\n         *\n         * @param {Number} n\n         *            the layer to push header changes to\n         * @param {Object} hdrmod\n         *            changes to the file header\n         */\n        headermod: function(n, hdrmod) {\n            this.change_settings(hdrmod);\n            this.push(n, [], hdrmod);\n        },\n\n        /**\n         * Push data into a layer that was created with overlay_pipe\n         *\n         * @example plot.push(n, data);\n         *\n         * @param {Number} n\n         *            the layer to push data into\n         * @param {Number[]} data\n         *            data to push\n         * @param {Object} hdrmod\n         *            optional changes to the file header\n         * @param {boolean} [sync=false]\n         *            optional dispatch onpipewrite syncronously\n         * @param {boolean} [rsync=false]\n         *            optional dispatch refresh syncronously\n         */\n        push: function(n, data, hdrmod, sync, rsync) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            if ((n < 0) || (n >= Gx.lyr.length)) {\n                return;\n            }\n\n            if (Gx.lyr[n].push === undefined) {\n                return;\n            }\n\n            if (Gx.lyr[n].display === false) {\n                return;\n            }\n\n            var hdrmod_clone = hdrmod;\n\n            // quick deep copy of the header so we can\n            // add some necessary fields if this is\n            // a header-only push\n            if (hdrmod) {\n                var hdrmod_clone = JSON.parse(JSON.stringify(hdrmod));\n\n                // if it's a header-only push, the data should\n                // be an empty array\n                if (data.length === 0) {\n                    hdrmod_clone.xmin = Mx.stk[n].xmin;\n                    hdrmod_clone.xmax = Mx.stk[n].xmax;\n                    hdrmod_clone.ymin = Mx.stk[n].ymin;\n                    hdrmod_clone.ymax = Mx.stk[n].ymax;\n                }\n            }\n\n            var rescale = Gx.lyr[n].push(data, hdrmod_clone, sync);\n\n            if ((Mx.level === 0) && rescale) {\n                scale_base(this, {\n                    get_data: false\n                });\n            }\n\n            if (rsync) {\n                this._refresh();\n            } else {\n                this.refresh();\n            }\n        },\n\n        /**\n         * Create a plot layer with an array overlay\n         *\n         * @example plot.overlay_array(data, {[overrides]}, {[layerOptions]});\n         *\n         * @param data\n         *            data the data that you will be plotting\n         *\n         * @param [overrides]\n         *            Key-value pairs whose values alter plot settings\n         *\n         * @param {Number}\n         *            overrides.type 1000 = one dimensional, 2000 = two dimensional.\n         *            this is a convention of X-midas\n         *\n         * @param {Number}\n         *            overrides.subsize the subsize for data being read in by the plot\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framsize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n\n        overlay_array: function(data, overrides, layerOptions) {\n            m.log.debug(\"Overlay array\");\n            var hcb = m.initialize(data, overrides);\n            return this.overlay_bluefile(hcb, layerOptions);\n        },\n\n        /**\n         * Create a plot layer to hold data\n         *\n         * @example plot.overlay_pipe({[overrides]},{[layerOptions]});\n         *\n         * @param [overrides]\n         *            Key-value pairs whose values alter plot settings\n         *\n         * @param {Number}\n         *            overrides.type 1000 = one dimensional, 2000 = two dimensional.\n         *            this is a convention of X-midas\n         *\n         * @param {Number}\n         *            overrides.subsize the subsize for data being read in by the plot\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framsize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n\n        overlay_pipe: function(overrides, layerOptions) {\n            m.log.debug(\"Overlay pipe\");\n            if (!overrides) {\n                overrides = {};\n            }\n            overrides.pipe = true;\n            var hcb = m.initialize(null, overrides);\n            //console.log(\"pipe filename: \"+hcb.file_name);\n            return this.overlay_bluefile(hcb, layerOptions);\n        },\n\n        /**\n         * Create a plot layer to hold data\n         *\n         * @example plot.overlay_websocket({wsurl, {[overrides]}, {[layerOptions]}});\n         * @param {url:port_destination}\n         *            wsurl the url and port destination for the websocket being used\n         * @param [overrides]\n         *            Key-value pairs whose values alter plot settings\n         *\n         * @param {Number}\n         *            overrides.type 1000 = one dimensional, 2000 = two dimensional.\n         *            this is a convention of X-midas\n         *\n         * @param {Number}\n         *            overrides.subsize the subsize for data being read in by the plot\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framsize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n\n        overlay_websocket: function(wsurl, overrides, layerOptions) {\n            m.log.debug(\"Overlay websocket: \" + wsurl);\n            var ws = new WebSocket(wsurl, \"plot-data\");\n            ws.binaryType = \"arraybuffer\";\n\n            var plot = this;\n            if (!overrides) {\n                overrides = {};\n            }\n            overrides.pipe = true;\n            var hcb = m.initialize(null, overrides);\n            hcb.ws = ws;\n\n            var layer_n = this.overlay_bluefile(hcb, layerOptions);\n\n            ws.onopen = function(evt) {};\n\n            ws.onmessage = (function(theSocket) {\n                return function(evt) {\n                    if (evt.data instanceof ArrayBuffer) {\n                        var data = hcb.createArray(evt.data);\n                        plot.push(layer_n, data);\n                    } else if (typeof evt.data === \"string\") {\n                        var Gx = plot._Gx;\n                        var hdr = Gx.lyr[layer_n].hcb;\n                        if (!hdr) {\n                            m.log.warning(\"Couldn't find header for layer \" + layer_n);\n                        }\n\n                        var newHdr = JSON.parse(evt.data);\n                        plot.push(layer_n, [], newHdr);\n                    }\n                };\n            })(ws);\n\n            return layer_n;\n        },\n\n\n        /**\n         * Create a plot layer from an HREF that points to a BLUEFILE or MATFILE\n         *\n         * @example plot.overlay_href(href, function() {}, {[layeroptions]});\n         *\n         * @param {String}\n         *            href or |-delimited hrefs the url to the bluefile or matfile\n         * @param [onload]\n         *            callback to be called when the file has been loaded\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framesize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n        overlay_href: function(href, onload, layerOptions) {\n            var self = this;\n            href.split('|').forEach(function(hr) {\n                self.overlay_href_single(hr.trim(), onload, layerOptions);\n            });\n        },\n\n        /**\n         * Create a plot layer from an HREF that points to a BLUEFILE or MATFILE\n         *\n         * @example plot.overlay_href_single(href, function() {}, {[layeroptions]});\n         *\n         * @param {String}\n         *            href the url to the bluefile or matfile\n         * @param [onload]\n         *            callback to be called when the file has been loaded\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framesize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n        overlay_href_single: function(href, onload, layerOptions) {\n            m.log.debug(\"Overlay href: \" + href);\n            try {\n                this.show_spinner();\n\n                var handleHeader = (function(plot, onload) {\n                    return function(hcb) {\n                        try {\n                            if (!hcb) {\n                                alert(\"Failed to load data\");\n                            } else {\n                                var i;\n                                if (href.endsWith(\".mat\")) {\n                                    i = plot.overlay_matfile(hcb, layerOptions);\n                                } else {\n                                    i = plot.overlay_bluefile(hcb, layerOptions);\n                                }\n                                if (onload) {\n                                    onload(hcb, i);\n                                }\n                            }\n                        } finally {\n                            plot.hide_spinner();\n                        }\n                    };\n                }(this, onload));\n\n                var reader;\n                if (href.endsWith(\".mat\")) {\n                    reader = new matfile.MatFileReader();\n                } else {\n                    reader = new bluefile.BlueFileReader();\n                }\n                reader.read_http(href, handleHeader);\n            } catch (error) {\n                console.error(error);\n                alert(\"Failed to load data\");\n                this.hide_spinner();\n            }\n        },\n\n        show_spinner: function() {\n            if (!this._Gx.spinner) {\n                SPINNER_OPTS.color = this._Mx.xwfg;\n                this._Gx.spinner = new Spinner(SPINNER_OPTS).spin(this._Gx.parent);\n            }\n        },\n\n        hide_spinner: function() {\n            if (this._Gx.spinner) {\n                this._Gx.spinner.stop();\n            }\n            this._Gx.spinner = undefined;\n        },\n\n        add_layer: function(layer) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            // Notify listeners that a file was overlayed\n            var evt = document.createEvent('Event');\n            evt.initEvent('lyradd', true, true);\n            evt.name = layer.name; // the name of the layer\n            evt.layer = layer;\n            var executeDefault = mx.dispatchEvent(Mx, evt);\n            if (executeDefault) {\n                Gx.lyr.push(layer);\n                layer.index = Gx.lyr.length - 1; // the new index of the layer\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Get a layer of the plot\n         *\n         * @example plot.get_layer(n);\n         *\n         * @param {Number}\n         *              n the index of the layer\n         *\n         * @returns data_layer\n         *\n         */\n\n        get_layer: function(n) {\n            var Gx = this._Gx;\n            if ((n >= 0) && (n < Gx.lyr.length)) {\n                return Gx.lyr[n];\n            } else {\n                return null;\n            }\n        },\n\n        overlay_matfile: function(mfile, layerOptions) {\n            m.log.debug(\"Overlay matfile: \" + mfile.file_name);\n            return this.overlay_array(mfile.dview);\n        },\n\n        /**\n         * Create a plot layer backed by a bluefile header\n         *\n         * @param hcb\n         *            {BlueHeader} an opened BlueHeader file\n         * @returns the index of the new layer\n         */\n        overlay_bluefile: function(hcb, layerOptions) {\n            m.log.debug(\"Overlay bluefile: \" + hcb.file_name);\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            var size = 0;\n\n            layerOptions = layerOptions || {};\n\n            var basefiles = (Gx.HCB.length === 0);\n\n            Gx.HCB.push(hcb);\n\n            if (Gx.HCB.length === 1) {\n                basefile(this, true);\n            }\n\n            var layers = null;\n\n            if (layerOptions.layerType === undefined) {\n                if (hcb[\"class\"] === 1) {\n                    layers = Layer1D.overlay(this, hcb, layerOptions);\n                } else if (hcb[\"class\"] === 2) {\n                    layers = Layer2D.overlay(this, hcb, layerOptions);\n                }\n            } else {\n                if (layerOptions.layerType === \"1D\") {\n                    layers = Layer1D.overlay(this, hcb, layerOptions);\n                } else if (layerOptions.layerType === \"2D\") {\n                    layers = Layer2D.overlay(this, hcb, layerOptions);\n                } else {\n                    layers = layerOptions.layerType.overlay(this, hcb, layerOptions);\n                }\n            }\n\n            if (layers === null || layers.length === 0) {\n                m.log.debug(\"failed to create layers\");\n                return;\n            }\n\n            // Allow the user to store aribitary data with the layer\n            if (layerOptions.user_data) {\n                layers.forEach(function(layer) {\n                    layer.user_data = layerOptions.user_data;\n                });\n            }\n\n            // TODO - do we want to alert like the XM plot did?\n            //if (!Gx.all && size > Gx.bufmax && Gx.HCB.length == 1) {\n            // alert(\"Plot truncated to buffer size. Use panning or /ALL\n            // switch\");\n            //}\n            // The original code has a bug here. Fixed by moving changemode\n            // outside of\n            // the !basefiles check.\n            // You can recreate with SIGPLOT ,,, IR\n            // And then loading a file.\n            changemode(this, Gx.cmode);\n\n            // if this is not the first set of layers added and\n            // we haven't asked for the plot to expand to accomodate\n            // this layers new range, then simply draw the new layer.\n            if (!basefiles && !layerOptions.expand) {\n                var plot = this;\n                layers.forEach(function(layer) {\n                    draw_layer(plot, layer);\n                });\n            } else {\n                if (Gx.HCB.length === 0) { // TODO dead code that cannot be reached\n                    basefile(this, false);\n                } else {\n                    Gx.basemode = Gx.cmode;\n                    var xmin;\n                    var xmax;\n                    if ((Gx.autox & 1) === 0) {\n                        xmin = Gx.xmin;\n                    }\n                    if ((Gx.autox & 2) === 0) {\n                        xmax = Gx.xmax;\n                    }\n                    scale_base(this, {\n                        get_data: true\n                    }, xmin, xmax);\n                    Mx.level = 0;\n                    if ((Gx.autox & 1) !== 0) {\n                        Gx.xmin = Mx.stk[0].xmin;\n                    }\n                    if ((Gx.autox & 2) !== 0) {\n                        Gx.xmax = Mx.stk[0].xmax;\n                    }\n                    if ((Gx.autoy & 1) !== 0) {\n                        Gx.ymin = Mx.stk[0].ymin;\n                    }\n                    if ((Gx.autoy & 2) !== 0) {\n                        Gx.ymax = Mx.stk[0].ymax;\n                    }\n                    Mx.resize = true;\n                    if (Gx.lyr[0].preferred_origin) {\n                        Mx.origin = Gx.lyr[0].preferred_origin;\n                    } else {\n                        Mx.origin = 1;\n                    }\n                }\n            }\n            form_plotnote(this);\n            this.refresh();\n\n            return (Gx.HCB.length - 1);\n        },\n\n        /**\n         * Load one or more files.\n         *\n         * @param {File[]}\n         *            a list of files to plot\n         */\n        load_files: function(files, layerType) {\n            var onload = (function(plot) {\n                return function(hdr) {\n                    plot.overlay_bluefile(hdr, layerType);\n                };\n            })(this);\n\n            for (var i = 0; i < files.length; i++) {\n                var f = files[i];\n                var br = new bluefile.BlueFileReader();\n                br.read(f, onload);\n            }\n        },\n\n        /**\n         * Reemove layers\n         *\n         * @example plot.get_layer(n);\n         *\n         * @param {Number}\n         *             The index of the layer. If not provided, all layers will\n         *             be removed\n         *\n         * @returns data_layer\n         *\n         */\n\n        deoverlay: function(index) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            if (Gx.HCB.length > 0) {\n                if (index === undefined) {\n                    for (var n = Gx.HCB.length - 1; n >= 0; n--) {\n                        this.remove_layer(n);\n                    }\n                } else if (index < 0) {\n                    var n = Gx.HCB.length + index;\n                    if (n < 0) {\n                        return;\n                    }\n                    this.remove_layer(n);\n                } else if (index < Gx.HCB.length) {\n                    this.remove_layer(index);\n                }\n            }\n            if (Gx.lyr.length === 0) {\n                basefile(this, false);\n                scale_base(this, {});\n            }\n        },\n\n        /**\n         * Remove a layer.\n         *\n         * @param index\n         *            the layer to remove\n         */\n        remove_layer: function(index) {\n            var Gx = this._Gx;\n\n            var fileName = \"\";\n            var HCB = null;\n\n            if ((index >= 0) && (index < Gx.HCB.length)) {\n                fileName = Gx.HCB[index].file_name;\n                // TODO if (Gx.modsource > 0) {\n                //\n                // }\n                HCB = Gx.HCB[index];\n                Gx.HCB[index] = null;\n                for (var n = index; n < Gx.HCB.length - 1; n++) {\n                    Gx.HCB[n] = Gx.HCB[n + 1];\n                }\n                Gx.HCB.length -= 1;\n            }\n\n            for (var n = Gx.lyr.length - 1; n >= 0; n--) {\n                if (Gx.lyr[n].hcb === HCB) {\n                    delete_layer(this, n);\n                }\n            }\n            form_plotnote(this);\n            this.refresh();\n\n            // Notify listeners that a file has been deoverlayed\n            var evt = document.createEvent('Event');\n            evt.initEvent('file_deoverlayed', true, true);\n            if (fileName !== \"\") {\n                evt.fileName = fileName; // The fileName that was\n            }\n            // de-overlayed\n            mx.dispatchEvent(this._Mx, evt);\n        },\n\n        /**\n         * Zoom onto a given pixel range.\n         */\n        pixel_zoom: function(x1, y1, x2, y2, continuous) {\n            var r1 = pixel_to_real(this, x1, y1);\n            var r2 = pixel_to_real(this, x2, y2);\n\n            this.zoom(r1, r2, continuous);\n        },\n\n        percent_zoom: function(xperc, yperc, continuous) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n\n            var xadj = 0;\n            if (Math.abs(xperc) < 1) {\n                xadj = Math.abs(Mx.stk[Mx.level].xmax - Mx.stk[Mx.level].xmin);\n                xadj = (xadj * xperc) / 2;\n            }\n\n            var yadj = 0;\n            if (Math.abs(yperc) < 1) {\n                yadj = Math.abs(Mx.stk[Mx.level].ymax - Mx.stk[Mx.level].ymin);\n                yadj = (yadj * yperc) / 2;\n            }\n\n            var ul = {\n                x: Math.max(Mx.stk[Mx.level].xmin + xadj, Gx.panxmin),\n                y: Math.max(Mx.stk[Mx.level].ymin + yadj, Gx.panymin)\n            };\n\n            var lr = {\n                x: Math.min(Mx.stk[Mx.level].xmax - xadj, Gx.panxmax),\n                y: Math.min(Mx.stk[Mx.level].ymax - yadj, Gx.panymax)\n            };\n\n            this.zoom(ul, lr, continuous);\n        },\n\n        /**\n         * Zoom onto a given region.\n         *\n         * @param ul\n         *            the uppler left corner\n         * @param {Number}\n         *            ul.x the upper left x pos in real plot value\n         * @param {Number}\n         *            ul.y the upper left y pos in real plot values\n         *\n         * @param lr\n         *            the lower right corner\n         * @param {Number}\n         *            lr the lower right x pos in real plot value\n         * @param {Number}\n         *            lr the lower right y pos in real plot values\n         *\n         * @param continuous\n         *            enter continuous zoom mode.  This will create a\n         *            new if you are on level 0, but stay on the same level\n         *            otherwise\n         */\n        zoom: function(ul, lr, continuous) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n\n            if (Mx.level >= 9) { // currently only allow 10 zooms\n                return;\n            }\n\n            if (ul.x === undefined) {\n                ul.x = Mx.stk[Mx.level].xmin;\n            }\n            if (ul.y === undefined) {\n                ul.y = Mx.stk[Mx.level].ymin;\n            }\n            if (lr.x === undefined) {\n                lr.x = Mx.stk[Mx.level].xmax;\n            }\n            if (lr.y === undefined) {\n                lr.y = Mx.stk[Mx.level].ymax;\n            }\n\n            if (lr.x < ul.x) {\n                var xtmp = lr.x;\n                lr.x = ul.x;\n                ul.x = xtmp;\n            }\n            if (lr.y < ul.y) {\n                var ytmp = lr.y;\n                lr.y = ul.y;\n                ul.y = ytmp;\n            }\n\n            var zstk = {};\n\n            // xscl/yscl are reset in sigplot.refresh\n            zstk.xscl = Mx.stk[Mx.level].xscl;\n            zstk.yscl = Mx.stk[Mx.level].yscl;\n\n            zstk.xmin = ul.x; // real world val at x1(origin=1,4) or\n            // x2(origin=2,4)\n            zstk.xmax = lr.x; // real world val at x2(origin=1,4) or\n            // x1(origin=2,4)\n            zstk.ymin = ul.y; // real world val at y2(origin=1,2) or\n            // y1(origin=3,4)\n            zstk.ymax = lr.y; // real world val at y1(origin=1,2) or\n            // y2(origin=3,4)\n            if (Gx.index) {\n                zstk.xmin = Math.min(zstk.xmin / Gx.xdelta);\n                zstk.xmax = Math.min(zstk.xmax / Gx.xdelta);\n            }\n\n            if (!continuous || (!Gx.inContinuousZoom)) {\n                // We aren't yet in continuous zoom mode\n                // so create a new level\n                Mx.stk.push(zstk);\n                Mx.level = Mx.stk.length - 1;\n            } else {\n                // Once in continuous zoom mode update the current level\n                Mx.stk[Mx.level] = zstk;\n            }\n            Gx.inContinuousZoom = continuous;\n\n            this.inZoom = true; // prevent recursive zooms\n            var evt = document.createEvent('Event');\n            evt.initEvent('zoom', true, true);\n            evt.level = Mx.level;\n            evt.inContinuousZoom = Gx.inContinuousZoom;\n            evt.xmin = Mx.stk[Mx.level].xmin;\n            evt.ymin = Mx.stk[Mx.level].ymin;\n            evt.xmax = Mx.stk[Mx.level].xmax;\n            evt.ymax = Mx.stk[Mx.level].ymax;\n            mx.dispatchEvent(Mx, evt); // TODO should we allow zoom to be cancelled?\n            this.inZoom = false;\n\n            this.refresh();\n        },\n\n        /**\n         * Unzoom one or more levels.\n         *\n         * @param [levels]\n         *            the number of levels to unzoom, if not provided unzoom\n         *            all.\n         */\n        unzoom: function(levels) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n\n            if (Mx.level === 0) {\n                return;\n            }\n\n            if (!levels) {\n                levels = Mx.stk.length;\n            }\n\n            while (levels > 0) {\n                if (Mx.level === 0) {\n                    break;\n                }\n                Mx.stk.pop();\n                Mx.level = Mx.stk.length - 1;\n                levels -= 1;\n            }\n\n            // If we are back at level 0, then\n            // rescale\n            if (Mx.level === 0) {\n                this.rescale();\n            }\n\n            // After any unzooms you can no longer remain in\n            // continuous zoom\n            Gx.inContinuousZoom = false;\n\n            this.inZoom = true; // prevent recursive zoom\n            // Send the event to listeners\n            var evt = document.createEvent('Event');\n            evt.initEvent('unzoom', true, true);\n            evt.level = Mx.level;\n            evt.xmin = Mx.stk[Mx.level].xmin;\n            evt.ymin = Mx.stk[Mx.level].ymin;\n            evt.xmax = Mx.stk[Mx.level].xmax;\n            evt.ymax = Mx.stk[Mx.level].ymax;\n            mx.dispatchEvent(Mx, evt);\n            this.inZoom = false;\n\n            this.refresh();\n        },\n\n        /**\n         * Register this plot to mimic zoom/unzoom of other plot\n         *\n         * @param other\n         *     the other plot to mimic\n         *\n         * @param mask\n         *     the set of event to respond to\n         *\n         * @param mask.zoom\n         *     if true, respond to zoom events\n         *\n         * @param mask.xzoom\n         *     if true, respond to zoom events for the x-axis only\n         *\n         * @param mask.yzoom\n         *     if true, respond to zoom events for the y-axis only\n         *\n         * @param mask.unzoom\n         *     if true, respond to unzoom events\n         *\n         * @param mask.pan\n         *     if true, respond to pan events\n         *\n         * @param mask.xpan\n         *     if true, respond to pan events for the x-axis only\n         *\n         * @param mask.ypan\n         *     if true, respond to pan events for the y-axis only\n         */\n        mimic: function(other, mask) {\n            var self = this;\n\n            if (!mask) {\n                throw \"mimic must be called with at least one event mask\";\n            }\n\n            this.unmimic(other);\n\n            if (mask.zoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    self.zoom({\n                            x: event.xmin,\n                            y: event.ymin\n                        }, {\n                            x: event.xmax,\n                            y: event.ymax\n                        },\n                        event.inContinuousZoom);\n                };\n                other.addListener(\"zoom\", f);\n                this.mimicListeners.listeners.zoom = f;\n            } else if (mask.xzoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    self.zoom({\n                            x: event.xmin,\n                            y: undefined\n                        }, {\n                            x: event.xmax,\n                            y: undefined\n                        },\n                        event.inContinuousZoom);\n                };\n                other.addListener(\"zoom\", f);\n                this.mimicListeners.listeners.zoom = f;\n            } else if (mask.yzoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    self.zoom({\n                            x: undefined,\n                            y: event.ymin\n                        }, {\n                            x: undefined,\n                            y: event.ymax\n                        },\n                        event.inContinuousZoom);\n                };\n                other.addListener(\"zoom\", f);\n                this.mimicListeners.listeners.zoom = f;\n            }\n\n            if (mask.unzoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    if (event.level < self._Mx.level) {\n                        self.unzoom(self._Mx.level - event.level);\n                    }\n                };\n                other.addListener(\"unzoom\", f);\n                this.mimicListeners.listeners.unzoom = f;\n            }\n\n            if (mask.pan || mask.xpan) {\n                var f = function(event) {\n                    if (self.inPan) {\n                        return;\n                    }\n                    updateViewbox(self, event.xmin, event.xmax, \"X\");\n                };\n                other.addListener(\"xpan\", f);\n                this.mimicListeners.listeners.xpan = f;\n            }\n\n            if (mask.pan || mask.ypan) {\n                var f = function(event) {\n                    if (self.inPan) {\n                        return;\n                    }\n                    updateViewbox(self, event.ymin, event.ymax, \"Y\");\n                };\n                other.addListener(\"ypan\", f);\n                this.mimicListeners.listeners.ypan = f;\n            }\n\n            this.mimicListeners.other = other;\n        },\n\n\n        /**\n         * Unregister zoom/unzoom listeners added via previous call to unmimic.\n         */\n        unmimic: function(other) {\n            var other = this.mimicListeners.other;\n            if (other) {\n                var that = this;\n                Object.keys(this.mimicListeners.listeners).forEach(function(evt) {\n                    if (that.mimicListeners.listeners[evt]) {\n                        other.removeListener(evt, that.mimicListeners.listeners[evt]);\n                    }\n                });\n            }\n            this.mimicListeners = {\n                other: null,\n                listeners: {\n                    zoom: null,\n                    unzoom: null,\n                    xpan: null,\n                    ypan: null\n                }\n            };\n        },\n\n        /**\n         * Like refresh, but doesn't rerender data\n         *\n         * @example plot.redraw();\n         */\n        redraw: function() {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n            var ctx = Mx.canvas.getContext(\"2d\");\n            if (!Gx.plotData.valid) {\n                this.refresh();\n            } else {\n                ctx.drawImage(Gx.plotData,\n                    Mx.l - 1,\n                    Mx.t - 1, (Mx.r - Mx.l) + 2, (Mx.b - Mx.t) + 2,\n                    Mx.l - 1,\n                    Mx.t - 1, (Mx.r - Mx.l) + 2, (Mx.b - Mx.t) + 2\n                );\n\n                draw_plugins(this);\n\n                Gx.cross_xpos = undefined;\n                Gx.cross_ypos = undefined;\n                if ((!Mx.warpbox) && (this.mouseOnCanvas)) {\n                    draw_crosshairs(this);\n                }\n\n                if (Gx.always_show_marker || Gx.show_marker) {\n                    draw_marker(this);\n                }\n            }\n        },\n\n        /**\n         * Refresh the entire plot\n         *\n         * @example plot.refresh();\n         */\n        refresh: function() {\n            if (!this._Gx.initialized || this._Gx.refresh_after_ctr > 0) {\n                return;\n            }\n            var self = this;\n            mx.render(this._Mx, function() {\n                self._refresh();\n            });\n        },\n\n        /**\n         * Refresh the entire plot after a function has been called.\n         *\n         * The plot will be guaranteed to have refresh called after\n         * the provided function is executed; while the function is\n         * executed all plot refreshes will be disabled.\n         *\n         * In most cases, you should not need to use this function because\n         * SigPlot will do the right thing and refresh when necessary.  The\n         * primary reason for using this is to temporarily disable refreshes\n         * while many actions are occuring, but guarantee that the refresh\n         * occurs after all those actions have been applied.\n         *\n         * While calls to refresh() are disabled until after the callback has\n         * completed, any calls to _refresh() will continue to be processed.\n         *\n         * @param {refreshAfterCallback} cb\n         *     The function to execute\n         * @callback refreshAfterCallback\n         * @param {Plot} the plot\n         *\n         * @example plot.refresh_after((plot) => {plot.push(n, data)});\n         */\n        refresh_after: function(cb) {\n            this._Gx.refresh_after_ctr += 1;\n            try {\n                cb(this);\n            } finally {\n                this._Gx.refresh_after_ctr =\n                    Math.max(this._Gx.refresh_after_ctr - 1, 0);\n                if (this._Gx.refresh_after_ctr === 0) {\n                    this.refresh();\n                }\n            }\n        },\n\n        /**\n         * Enable listeners for events on plot\n         */\n\n        enable_listeners: function() {\n            var Mx = this._Mx;\n            mx.addEventListener(Mx, \"mousedown\", this.onmousedown, false);\n            mx.addEventListener(Mx, \"mousemove\", this.throttledOnMouseMove, false);\n            window.addEventListener(\"mouseup\", Mx.onmouseup, false);\n            window.addEventListener(\"keydown\", Mx.onkeydown, false);\n            window.addEventListener(\"keyup\", Mx.onkeyup, false);\n            window.addEventListener(\"resize\", this.onresize, false);\n            document.addEventListener(\"mouseup\", this.docMouseUp, false);\n            mx.addEventListener(Mx, \"mouseup\", this.mouseup, false);\n            window.addEventListener(\"mousedown\", this.dragMouseDownHandler, false);\n            window.addEventListener(\"mousemove\", this.throttledDragOnMouseMove, false);\n            window.addEventListener(\"mouseup\", this.dragMouseUpHandler, false);\n            window.addEventListener(\"wheel\", this.wheelHandler, false);\n            window.addEventListener(\"mousewheel\", this.wheelHandler, false);\n            window.addEventListener(\"DOMMouseScroll\", this.wheelHandler, false);\n            window.addEventListener(\"keypress\", this.onkeypress, false);\n        },\n\n        /**\n         * Enable listeners for events on plot\n         */\n\n        disable_listeners: function() {\n            var Mx = this._Mx;\n\n            mx.removeEventListener(Mx, \"mousedown\", this.onmousedown, false);\n            mx.removeEventListener(Mx, \"mousemove\", this.throttledOnMouseMove,\n                false);\n            mx.removeEventListener(Mx, \"mouseup\", this.mouseup, false);\n            window.removeEventListener(\"mouseup\", Mx.onmouseup, false);\n            window.removeEventListener(\"keydown\", Mx.onkeydown, false);\n            window.removeEventListener(\"keyup\", Mx.onkeyup, false);\n            window.removeEventListener(\"resize\", this.onresize, false);\n            document.removeEventListener(\"mouseup\", this.docMouseUp, false);\n            window.removeEventListener(\"mousedown\", this.dragMouseDownHandler,\n                false);\n            window.removeEventListener(\"mousemove\", this.throttledDragOnMouseMove,\n                false);\n            window.removeEventListener(\"mouseup\", this.dragMouseUpHandler, false);\n            window.removeEventListener(\"wheel\", this.wheelHandler, false);\n            window.removeEventListener(\"mousewheel\", this.wheelHandler, false);\n            window.removeEventListener(\"DOMMouseScroll\", this.wheelHandler, false);\n            window.removeEventListener(\"keypress\", this.onkeypress, false);\n        },\n\n        checkresize: function() {\n            if (mx.checkresize(this._Mx)) {\n                this.refresh();\n            }\n        },\n        addColorMaps: function(colormaps) {\n            colormaps.forEach(function(cmap) {\n                if (cmap.hasOwnProperty(\"name\")) {\n                    m.Mc.colormap.push(cmap);\n                }\n\n            });\n\n        },\n\n        /**\n         * Display an xCut\n         *\n         * @param ypos\n         *     the y-position to extract the x-cut, leave undefined to\n         *     leave xCut\n         */\n        xCut: function(ypos) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            //display the x-cut of the raster\n            if (ypos !== undefined) {\n\n                // Stash important values\n                Gx.cut_stash = {};\n                Gx.cut_stash.ylabel = Gx.ylabel;\n                Gx.cut_stash.xlabel = Gx.xlabel;\n                Gx.cut_stash.level = Mx.level;\n                Gx.cut_stash.stk = JSON.parse(JSON.stringify(Mx.stk));\n                Gx.cut_stash.panymin = Gx.panymin;\n                Gx.cut_stash.panymax = Gx.panymax;\n                Gx.cut_stash.panxmin = Gx.panxmin;\n                Gx.cut_stash.panxmax = Gx.panxmax;\n\n                if (!Gx.p_cuts) {\n                    Gx.x_cut_data = [];\n                    var width = Gx.lyr[0].xframe;\n                    var row = Math.round((ypos - Gx.lyr[0].ystart) / Gx.lyr[0].ydelta);\n                    if ((row < 0) || (row > Gx.lyr[0].lps)) {\n                        return;\n                    }\n                    var start = row * width;\n                    var finish = start + width;\n                    Gx.x_cut_data = Gx.lyr[0].buf.slice(start, finish);\n                }\n\n                //adjust for the values of the xcut\n                Gx.old_drawmode = Gx.lyr[0].drawmode;\n                Gx.old_autol = Gx.autol;\n                this.change_settings({\n                    drawmode: \"undefined\",\n                    autol: -1\n                });\n\n                var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);\n                if (Gx.cmode === 1) {\n                    Gx.ylabel = m.UNITS[28][0];\n                } else if (Gx.cmode === 2) {\n                    Gx.ylabel = Gx.plab;\n                } else if ((Gx.cmode === 3) && (cx)) {\n                    Gx.ylabel = m.UNITS[21][0];\n                } else if (Gx.cmode === 4) {\n                    Gx.ylabel = m.UNITS[22][0];\n                } else if (Gx.cmode === 5) {\n                    Gx.ylabel = m.UNITS[22][0];\n                } else if (Gx.cmode === 6) {\n                    Gx.ylabel = m.UNITS[26][0];\n                } else if (Gx.cmode === 7) {\n                    Gx.ylabel = m.UNITS[27][0];\n                } else {\n                    Gx.ylabel = \"Intensity\";\n                }\n\n                if ((m.UNITS[Gx.xlab][0] !== \"None\") && (m.UNITS[Gx.xlab][0] !== \"Unknown\")) {\n                    Gx.xlabel = m.UNITS[Gx.xlab][0];\n                } else {\n                    Gx.xlabel = \"Frequency\";\n                }\n                Gx.xlabel += \"    CURRENTLY IN X_CUT MODE\";\n                Mx.origin = 1;\n                Gx.xcut_layer = this.overlay_array(Gx.x_cut_data, {\n                    xstart: Gx.lyr[0].xstart,\n                    xdelta: Gx.lyr[0].xdelta\n                }, {\n                    name: \"x_cut_data\",\n                    line: 3\n                });\n                Gx.xcut_layer = Gx.lyr.length - 1;\n                //do not display any other layers\n                for (var i = 0; i < Gx.xcut_layer; i++) {\n                    Gx.lyr[i].display = !Gx.lyr[i].display;\n                }\n                Gx.x_cut_press_on = true;\n\n                // The y-axis is now the z-values\n                var mxmn = m.vmxmn(Gx.x_cut_data, Gx.lyr[0].xframe);\n                var ymax = mxmn.smax;\n                var ymin = mxmn.smin;\n                var yran = ymax - ymin;\n                if (yran < 0.0) {\n                    ymax = ymin;\n                    ymin = ymax + yran;\n                    yran = -yran;\n                }\n                if (yran <= 1.0e-20) {\n                    ymin = ymin - 1.0;\n                    ymax = ymax + 1.0;\n                } else {\n                    ymin = ymin - 0.02 * yran;\n                    ymax = ymax + 0.02 * yran;\n                }\n\n                Gx.panymin = mxmn.smin;\n                Gx.panymax = mxmn.smax;\n                for (var h = 1; h < Mx.level + 1; h++) {\n                    Mx.stk[h].ymin = ymin;\n                    Mx.stk[h].ymax = ymax;\n                    Mx.stk[h].yscl = (Mx.stk[h].ymax - Mx.stk[h].ymin) / (Mx.b - Mx.t);\n                }\n                this.rescale();\n\n            } else if (Gx.x_cut_press_on) {\n                // ypos wasn't provided so turn x-cut off\n                Gx.x_cut_press_on = false;\n                for (var h = 0; h < Gx.xcut_layer; h++) {\n                    Gx.lyr[h].display = !Gx.lyr[h].display;\n                }\n                delete_layer(this, Gx.xcut_layer);\n\n                // Restore settings\n                Gx.xlabel = Gx.cut_stash.xlabel;\n                Gx.ylabel = Gx.cut_stash.ylabel;\n                Mx.level = Gx.cut_stash.level;\n                Mx.stk = JSON.parse(JSON.stringify(Gx.cut_stash.stk));\n                Gx.panymin = Gx.cut_stash.panymin;\n                Gx.panymax = Gx.cut_stash.panymax;\n                Gx.panxmin = Gx.cut_stash.panxmin;\n                Gx.panxmax = Gx.cut_stash.panxmax;\n                Gx.cut_stash = undefined;\n\n                this.rescale();\n                this.refresh();\n                Gx.xcut_layer = undefined;\n                this.change_settings({\n                    drawmode: Gx.old_drawmode,\n                    autol: Gx.old_autol\n                });\n            }\n        },\n\n        /**\n         * Display an yCut\n         *\n         * @param xpos\n         *     the x-position to extract the y-cut, leave undefined to\n         *     leave yCut\n         */\n        yCut: function(xpos) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            //display the y-cut of the raster\n            if (xpos !== undefined) {\n                // Stash important values\n                Gx.cut_stash = {};\n                Gx.cut_stash.xlabel = Gx.xlabel;\n                Gx.cut_stash.ylabel = Gx.ylabel;\n                Gx.cut_stash.level = Mx.level;\n                Gx.cut_stash.stk = JSON.parse(JSON.stringify(Mx.stk));\n                Gx.cut_stash.ymax = Mx.stk[Mx.level].ymax;\n                Gx.cut_stash.panymin = Gx.panymin;\n                Gx.cut_stash.panymax = Gx.panymax;\n                Gx.cut_stash.panxmin = Gx.panxmin;\n                Gx.cut_stash.panxmax = Gx.panxmax;\n\n                if (!Gx.p_cuts) {\n                    var height = Gx.lyr[0].lps;\n                    var width = Gx.lyr[0].xframe;\n                    var i = 0;\n\n                    Gx.y_cut_data = [];\n                    var col = Math.round((xpos - Gx.lyr[0].xstart) / Gx.lyr[0].xdelta);\n                    for (i = col; i < (width * height); i += width) {\n                        Gx.y_cut_data.push(Gx.lyr[0].buf[i]);\n                    }\n                }\n\n                //adjust for the values of the xcut\n                Gx.old_drawmode = Gx.lyr[0].drawmode;\n                Gx.old_autol = Gx.autol;\n                this.change_settings({\n                    drawmode: \"undefined\",\n                    autol: -1\n                });\n\n\n                var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);\n                if (Gx.cmode === 1) {\n                    Gx.ylabel = m.UNITS[28][0];\n                } else if (Gx.cmode === 2) {\n                    Gx.ylabel = Gx.plab;\n                } else if ((Gx.cmode === 3) && (cx)) {\n                    Gx.ylabel = m.UNITS[21][0];\n                } else if (Gx.cmode === 4) {\n                    Gx.ylabel = m.UNITS[22][0];\n                } else if (Gx.cmode === 5) {\n                    Gx.ylabel = m.UNITS[22][0];\n                } else if (Gx.cmode === 6) {\n                    Gx.ylabel = m.UNITS[26][0];\n                } else if (Gx.cmode === 7) {\n                    Gx.ylabel = m.UNITS[27][0];\n                } else {\n                    Gx.ylabel = \"Intensity\";\n                }\n\n                if ((m.UNITS[Gx.ylab][0] !== \"None\") && (m.UNITS[Gx.ylab][0] !== \"Unknown\")) {\n                    Gx.xlabel = m.UNITS[Gx.ylab][0];\n                } else {\n                    Gx.xlabel = \"Time\";\n                }\n                Gx.xlabel += \"    CURRENTLY IN Y_CUT MODE\";\n                Mx.origin = 1;\n                Gx.ycut_layer = this.overlay_array(Gx.y_cut_data, {\n                    xstart: Gx.lyr[0].ystart,\n                    xdelta: Gx.lyr[0].ydelta\n                }, {\n                    name: \"y_cut_data\",\n                    line: 3\n                });\n                Gx.ycut_layer = Gx.lyr.length - 1;\n                //do not display any other layers\n                for (var k = 0; k < Gx.ycut_layer; k++) {\n                    Gx.lyr[k].display = !Gx.lyr[k].display;\n                }\n                Gx.y_cut_press_on = true;\n\n                // The y-axis is now the z-values\n                var mxmn = m.vmxmn(Gx.y_cut_data, Gx.lyr[0].lps);\n                var ymax = mxmn.smax;\n                var ymin = mxmn.smin;\n                var yran = ymax - ymin;\n                if (yran < 0.0) {\n                    ymax = ymin;\n                    ymin = ymax + yran;\n                    yran = -yran;\n                }\n                if (yran <= 1.0e-20) {\n                    ymin = ymin - 1.0;\n                    ymax = ymax + 1.0;\n                } else {\n                    ymin = ymin - 0.02 * yran;\n                    ymax = ymax + 0.02 * yran;\n                }\n\n                Gx.panymin = mxmn.smin;\n                Gx.panymax = mxmn.smax;\n                for (var h = 1; h < Mx.level + 1; h++) {\n                    // the x-axis is now the yvalues\n                    Mx.stk[h].xmin = Mx.stk[h].ymin;\n                    Mx.stk[h].xmax = Mx.stk[h].ymax;\n                    Mx.stk[h].xscl = (Mx.stk[h].xmax - Mx.stk[h].xmin) / (Mx.r - Mx.t);\n\n                    // the y-axis is now the zvalues\n                    Mx.stk[h].ymin = ymin;\n                    Mx.stk[h].ymax = ymax;\n                    Mx.stk[h].yscl = (Mx.stk[h].ymax - Mx.stk[h].ymin) / (Mx.b - Mx.t);\n                }\n\n                this.rescale();\n            } else if (Gx.y_cut_press_on) {\n                Gx.y_cut_press_on = false;\n                for (var j = 0; j < Gx.ycut_layer; j++) {\n                    Gx.lyr[j].display = !Gx.lyr[j].display;\n                }\n                delete_layer(this, Gx.ycut_layer);\n\n                // Restore settings\n                Gx.xlabel = Gx.cut_stash.xlabel;\n                Gx.ylabel = Gx.cut_stash.ylabel;\n                Mx.level = Gx.cut_stash.level;\n                Mx.stk = JSON.parse(JSON.stringify(Gx.cut_stash.stk));\n                Gx.panymin = Gx.cut_stash.panymin;\n                Gx.panymax = Gx.cut_stash.panymax;\n                Gx.panxmin = Gx.cut_stash.panxmin;\n                Gx.panxmax = Gx.cut_stash.panxmax;\n                Gx.cut_stash = undefined;\n\n                this.rescale();\n                this.refresh();\n                Gx.ycut_layer = undefined;\n                this.change_settings({\n                    drawmode: Gx.old_drawmode,\n                    autol: Gx.old_autol\n                });\n            }\n        },\n\n        _refresh: function() {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            var ctx = Mx.canvas.getContext(\"2d\");\n            var plugin_index = 0;\n\n            if (Gx.hold) {\n                return;\n            }\n            var font_width = Mx.font_width;\n            if (Mx.font_scaled) {\n                font_width = Math.min(Mx.font_width, Mx.width / 64);\n            }\n            mx.set_font(Mx, font_width);\n            Gx.pthk = Mx.text_w * 1.5;\n\n            if (Gx.specs) {\n                var ytimecode = false;\n                if (Gx.ylab === 4) { //time-based tics\n                    ytimecode = true;\n                }\n                // Set left and right edges\n                if (Gx.show_y_axis === true) {\n                    Mx.l = Mx.text_w * 6;\n                    if (ytimecode) {\n                        // If we are in ytimecode, determine if we need the extra\n                        // space to hold the entire YYYY:MM:DD\n                        var need_full_ymd = ((Math.abs(Mx.stk[0].ymin) >= 31536000) ||\n                            (Math.abs(Mx.stk[0].ymax) >= 31536000));\n                        if (need_full_ymd) {\n                            Mx.l = Mx.text_w * 11;\n                        }\n                    }\n                } else {\n                    Mx.l = 1;\n                }\n                if (Gx.pan === true) {\n                    Mx.r = Mx.width - (Gx.pthk + 2 * Mx.text_w);\n                } else {\n                    Mx.r = Mx.width - 5;\n                }\n\n                // Set top and bottom\n                if (Gx.show_readout) {\n                    Mx.t = Mx.text_h * 2;\n                    if (Gx.show_x_axis) {\n                        Mx.b = Mx.height - Mx.text_h * 4;\n                    } else {\n                        Mx.b = Mx.height - Mx.text_h * 3;\n                    }\n                } else if (Gx.x_scrollbar_location === \"bottom\") {\n                    Mx.t = Mx.text_h * 2;\n                    if (Gx.pan) {\n                        if (Gx.show_x_axis) {\n                            Mx.b = Mx.height - Mx.text_h * 3;\n                        } else {\n                            Mx.b = Mx.height - Mx.text_h * 2;\n                        }\n                    } else {\n                        if (Gx.show_x_axis) {\n                            Mx.b = Mx.height - Mx.text_h * 2;\n                        } else {\n                            Mx.b = Mx.height - 5;\n                        }\n                    }\n                } else {\n                    if (Gx.pan) {\n                        Mx.t = Gx.pthk + 2 * Mx.text_w;\n                    } else {\n                        Mx.t = 1;\n                    }\n                    if (Gx.show_x_axis) {\n                        Mx.b = Mx.height - (Mx.text_h * 3) / 2;\n                    } else {\n                        Mx.b = Mx.height - 2;\n                    }\n                }\n\n                // set left and right edges for X scrollbar\n                if (Gx.show_readout) {\n                    // If there is a readout, show it in the bottom-right\n                    // next to the readout\n                    Gx.pl = Mx.text_w * 50;\n                } else {\n                    // Otherwise, by default it conforms to legacy\n                    // behaviour and renders at the top next to the label\n                    if (Gx.x_scrollbar_location === \"bottom\") {\n                        Gx.pl = Mx.l;\n                    } else {\n                        Gx.pl = Mx.text_w * 35;\n                    }\n                }\n                Gx.pr = Math.max(Gx.pl + Mx.text_w * 9, Mx.r);\n\n                // set top scrollbar edge for X scrollbar\n                if (Gx.show_readout) {\n                    if (Gx.show_x_axis) {\n                        Gx.pt = Mx.b + Mx.text_h + (Mx.height - Mx.b - Mx.text_h - Gx.pthk) / 2;\n                    } else {\n                        Gx.pt = Mx.b + (Mx.height - Mx.b - Gx.pthk) / 2;\n                    }\n                } else {\n                    // Otherwise, by default it conforms to legacy\n                    // behaviour and renders at the top\n                    if (Gx.x_scrollbar_location === \"bottom\") {\n                        if (Gx.show_x_axis) {\n                            Gx.pt = Mx.b + Mx.text_h + (Mx.height - Mx.b - Mx.text_h - Gx.pthk) / 2;\n                        } else {\n                            Gx.pt = Mx.b + (Mx.height - Mx.b - Gx.pthk) / 2;\n                        }\n                    } else {\n                        Gx.pt = (Mx.t - Gx.pthk) / 2;\n                    }\n                }\n                Gx.lbtn = Mx.text_h + Mx.text_w + 2;\n            } else {\n                if (Gx.pan) {\n                    Mx.t = Gx.pthk + 2 * Mx.text_w;\n                    Mx.r = Mx.width - (Gx.pthk + Mx.text_w);\n                } else {\n                    Mx.t = 1;\n                    Mx.r = Mx.width - 2;\n                }\n                Mx.b = Mx.height - 2;\n                Mx.l = 1;\n                Gx.pl = Mx.l;\n                Gx.pr = Mx.r;\n                Gx.pt = (Mx.t - Gx.pthk) / 2;\n                Gx.lbtn = 0;\n            }\n\n            // pan select ranges\n            Gx.pyl = Mx.r + (Mx.width - Mx.r - Gx.pthk) / 2 + 1;\n\n            if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                // Move the plot over to make room\n                var prev_Mx_r = Mx.r;\n                Mx.r = prev_Mx_r - 100;\n\n            }\n\n            if (Gx.p_cuts && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                //turn cross hairs on\n                Gx.cross = true;\n\n                //Move the plot over to make room\n                var prev_Mx_r = Mx.r;\n                Mx.r = prev_Mx_r - 100;\n\n                //Move the plot up to make room\n                var prev_Mx_b = Mx.b;\n                Mx.b = prev_Mx_b - 100;\n            }\n\n            if (Gx.xcut_now) {\n                Mx.canvas.width = Gx.x_box_w - 1;\n                Mx.canvas.height = Gx.x_box_h;\n                Mx.r = Gx.x_box_w - 1;\n                Mx.l = 0;\n                Mx.b = Gx.x_box_h;\n                Mx.t = 0;\n            }\n\n            if (Gx.ycut_now) {\n                Mx.canvas.width = Gx.y_box_h - 1;\n                Mx.canvas.height = Gx.y_box_w;\n                Mx.r = Gx.y_box_h - 1;\n                Mx.l = 0;\n                Mx.b = Gx.y_box_w;\n                Mx.t = 0;\n            }\n\n            // set virtual window size/pos/scaling for current level\n            var k = Mx.level;\n            Mx.stk[k].x1 = Mx.l;\n            Mx.stk[k].y1 = Mx.t;\n            Mx.stk[k].x2 = Mx.r;\n            Mx.stk[k].y2 = Mx.b;\n            Mx.stk[k].xscl = (Mx.stk[k].xmax - Mx.stk[k].xmin) / (Mx.r - Mx.l);\n            Mx.stk[k].yscl = (Mx.stk[k].ymax - Mx.stk[k].ymin) / (Mx.b - Mx.t);\n\n            // In case things have rescaled\n            var re = pixel_to_real(this, Mx.xpos, Mx.ypos);\n            Gx.retx = re.x;\n            Gx.rety = re.y;\n\n            // modify stack for section plotting\n            //if (Gx.sections) {\n            // TODO\n            //}\n\n            if (Gx.panning === 0 || Gx.panning !== 0) { // TODO Gx.panning !==\n                // 0?? Does this work?\n                Gx.plotData.valid = false;\n                mx.clear_window(Mx);\n            } //else if (!Gx.specs) {\n            // TODO\n            //} else if (Gx.panning === 1) {\n            // TODO\n            //} else {\n            // TODO\n            //}\n\n            var xlab = Gx.xlab;\n            var ylab = Gx.ylab;\n\n            if (xlab === undefined) {\n                xlab = 30;\n            }\n            if (Gx.index) {\n                xlab = 0;\n            }\n\n            if (ylab === undefined) {\n                var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);\n                if (Gx.cmode === 1) {\n                    ylab = 28;\n                } else if (Gx.cmode === 2) {\n                    ylab = Gx.plab;\n                } else if ((Gx.cmode === 3) && (cx)) {\n                    ylab = 21;\n                } else if (Gx.cmode === 4) {\n                    ylab = 22;\n                } else if (Gx.cmode === 5) {\n                    ylab = 22;\n                    xlab = 21;\n                } else if (Gx.cmode === 6) {\n                    ylab = 26;\n                } else if (Gx.cmode === 7) {\n                    ylab = 27;\n                } else {\n                    ylab = 0;\n                }\n            }\n\n            if (Gx.specs) {\n                if (Gx.sections === 0) {\n                    var drawaxis_flags = {\n                        grid: Gx.grid\n                    };\n                    if (Gx.panning === 2) {\n                        drawaxis_flags.noxtlab = true;\n                    } // TODO Does this work??\n                    if (!Gx.show_x_axis) {\n                        drawaxis_flags.noxtics = true;\n                        drawaxis_flags.noxtlab = true;\n                        drawaxis_flags.noxplab = true;\n                    }\n                    if (!Gx.show_y_axis) {\n                        drawaxis_flags.noytics = true;\n                        drawaxis_flags.noytlab = true;\n                        drawaxis_flags.noyplab = true;\n                    }\n                    if (Gx.specs && !Gx.show_readout && !Gx.pan) {\n                        drawaxis_flags.noyplab = true;\n                        drawaxis_flags.noxplab = true;\n                    }\n                    if (Gx.gridBackground) {\n                        drawaxis_flags.fillStyle = Gx.gridBackground;\n                    }\n                    if (Gx.gridStyle) {\n                        drawaxis_flags.gridStyle = Gx.gridStyle;\n                    }\n                    if (Gx.xmult) {\n                        drawaxis_flags.xmult = Gx.xmult;\n                    }\n                    if (Gx.ymult) {\n                        drawaxis_flags.ymult = Gx.ymult;\n                    }\n                    if (xlab === 4) { //time-based tics\n                        drawaxis_flags.xtimecode = true;\n                    }\n                    if (ylab === 4) { //time-based tics\n                        drawaxis_flags.ytimecode = true;\n                    }\n                    if (Gx.xlabel !== undefined) {\n                        drawaxis_flags.xlabel = Gx.xlabel;\n                    }\n                    if (Gx.ylabel !== undefined) {\n                        drawaxis_flags.ylabel = Gx.ylabel;\n                    }\n                    mx.drawaxis(Gx, Mx, Gx.xdiv, Gx.ydiv, xlab, ylab, drawaxis_flags);\n                } //else {\n                // Not implemented yet\n                //}\n\n                var i = Gx.lbtn - 2;\n\n                if (Gx.show_readout && Gx.pan) {\n                    if (!Gx.no_legend_button) {\n                        if (Gx.legend) {\n                            Gx.legendBtnLocation = {\n                                x: Mx.width - Gx.lbtn,\n                                y: 2,\n                                width: i,\n                                height: i\n                            };\n                            mx.shadowbox(Mx, Mx.width - Gx.lbtn, 2, i, i, 1, -2,\n                                'L');\n                        } else {\n                            Gx.legendBtnLocation = {\n                                x: Mx.width - Gx.lbtn,\n                                y: 2,\n                                width: i,\n                                height: i\n                            };\n                            mx.shadowbox(Mx, Mx.width - Gx.lbtn, 2, i, i, 1,\n                                2, 'L');\n                        }\n                    }\n                    display_specs(this);\n                } else {\n                    Gx.legendBtnLocation = null;\n                }\n            } else if (Gx.grid && Gx.sections >= 0) {\n                var drawaxis_flags = {\n                    grid: true,\n                    noaxisbox: true,\n                    noxtics: true,\n                    noxtlab: true,\n                    noxplab: true,\n                    noytics: true,\n                    noytlab: true,\n                    noyplab: true\n                };\n                mx.drawaxis(Gx, Mx, Gx.xdiv, Gx.ydiv, xlab, ylab,\n                    drawaxis_flags);\n            }\n\n            draw_layers(this);\n\n            draw_accessories(this, 4);\n\n\n\n            draw_plugins(this);\n\n\n            Gx.cross_xpos = undefined;\n            Gx.cross_ypos = undefined;\n            if ((!Mx.warpbox) && (this.mouseOnCanvas)) {\n                draw_crosshairs(this);\n                if (!Gx.y_cut_press_on && !Gx.x_cut_press_on && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                    draw_p_cuts(this);\n                }\n            }\n\n            if (Gx.always_show_marker || Gx.show_marker) {\n                draw_marker(this);\n            }\n        }\n\n    };\n\n    // /////////////////////////////////////////////////////////////////////////\n    // Private methods and objects\n    // /////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Map integer cmode to string equivalent.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var cxm = [\"Ma\", \"Ph\", \"Re\", \"Im\", \"IR\", \"Lo\", \"L2\"];\n\n    /**\n     * Map integer abscissa mode to string equivalent.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var cam = [\"(absc)\", \"(indx)\", \"(1/ab)\", \"(dydx)\"];\n\n\n\n    /**\n     * This object holds the data associated with layers in the plot.\n     *\n     * @constructor\n     * @memberOf sigplot\n     * @private\n     */\n    function SIGPLOTLAYER() {\n\n        this.xbuf = undefined; // raw (ArrayBuffer) of ABSC data\n        this.ybuf = undefined; // raw (ArrayBuffer) of ORD data\n\n        this.offset = 0.0;\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n        this.imin = 0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.name = \"\";\n        this.cx = false;\n        this.hcb = undefined; // index in Gx.HCB\n        // xbufn = xbuf.byteLength\n        // ybufn = ybuf.byteLength\n        this.size = 0;\n\n        this.display = true;\n        this.color = 0;\n        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting\n        this.thick = 1; // negative for dashed\n        this.symbol = 0;\n        this.radius = 3;\n\n        this.skip = 0; // number of elements between ord values\n        this.xsub = 0;\n        this.ysub = 0;\n        this.xdata = false; // true if X data is data from file\n\n        this.options = {};\n    }\n\n    /**\n     * The graphics structure object used to hold state about the plot.\n     *\n     * @constructor\n     * @memberOf sigplot\n     * @private\n     */\n    function GX() {\n        this.initialized = false;\n        this.xptr = undefined; // xpoints as anything \"array-like\"...\n        this.yptr = undefined; // ypoints as anything \"array-like\"...\n\n        this.retx = 0.0; // absc coord. at mouse location\n        this.rety = 0.0;\n        this.xmrk = 0.0; // absc coord of mark\n        this.ymrk = 0.0;\n        this.aretx = 0.0; // absc coord. at mouse location\n        this.arety = 0.0;\n\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n\n        this.panxmin = 0.0;\n        this.panxmax = 0.0;\n        this.panymin = 0.0;\n        this.panymax = 0.0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.xmult = undefined;\n        this.ymin = 0.0;\n        this.ymax = 0.0;\n        this.ymult = undefined;\n        this.zmin = undefined;\n        this.zmax = undefined;\n        this.zoff = 0;\n        this.dbmin = 0.0;\n        this.pxscl = 0.0;\n        this.pyscl = 0.0;\n        this.pmt = 0.0;\n\n        this.note = \"\";\n        // this.mouse unnecssary because we don't have res table\n        this.format = \"\";\n\n        this.pl = 0;\n        this.pr = 0;\n        this.pt = 0;\n        this.pb = 0;\n        this.px1 = 0; // specifies plotting field\n        this.px2 = 0;\n        this.py1 = 0;\n        this.py2 = 0;\n\n        this.pyl = 0;\n        this.pthk = 0; // thickness of pan drag box\n\n        this.modlayer = 0;\n        this.modsource = 0;\n        this.modified = false;\n        this.modmode = 0;\n\n        this.xdiv = 0;\n        this.ydiv = 0;\n\n        this.all = false;\n        this.expand = false;\n        this.cross = false;\n        this.grid = true;\n        this.gridBackground = undefined;\n        this.index = false;\n        this.pan = true;\n        this.specs = true;\n        this.legend = true;\n        this.xdata = false;\n\n        this.show_x_axis = true;\n        this.show_y_axis = true;\n        this.show_readout = true;\n        this.hide_note = false;\n        this.autohide_readout = false;\n        this.autohide_panbars = false;\n        this.panning = undefined;\n        this.panmode = 0; // TODO Is this a good default value? Where is this\n        // changed?\n        this.hold = false;\n\n        this.sections = 0; // number of plot sections, -1 for layers\n        this.iysec = 0;\n        this.nsec = 0; // actual number of sections\n        this.isec = 0; // current sections\n\n        this.xlab = undefined;\n        this.xlabel = undefined;\n        this.ylab = undefined;\n        this.ylabel = undefined;\n\n        // 0 - use HTML5 canvas smoothing\n        // 1 - average\n        // 2 - min\n        // 3 - max\n        // 4 - first\n        // 5 - max abs\n        this.xcompression = 0;\n\n        this.default_rubberbox_action = \"zoom\";\n        this.default_rubberbox_mode = \"box\";\n\n        this.wheelscroll_mode_natural = true;\n        this.scroll_time_interval = 10;\n\n        this.repeatPanning = undefined;\n        this.stillPanning = undefined; // TODO maybe merge this variable with\n        // Gx.panning in future?\n\n        this.autol = -1;\n\n        this.lineSmoothing = false; // not implemented\n        this.rasterSmoothing = false;\n\n        this.wheelZoom = false;\n        this.wheelZoomPercent = 0.2;\n        this.inContinuousZoom = false;\n\n        this.lyr = [];\n        this.HCB = [];\n        this.plugins = [];\n\n        this.plotData = document.createElement(\"canvas\");\n        this.plotData.valid = false;\n\n        // Large colorbar info, like button locations\n        this.lg_colorbar = false;\n\n        // Colorbar button top or bottom positions\n        this.cbb_top_x1 = 0;\n        this.cbb_top_y1 = 0;\n        this.cbb_bot_x1 = 0;\n        this.cbb_bot_y1 = 0;\n        this.cbb_width = 0;\n        this.cbb_height = 0;\n\n        //P_cuts info\n        this.p_cuts = false;\n        this.x_box_x = 0;\n        this.x_box_y = 0;\n        this.x_box_h = 0;\n        this.x_box_w = 0;\n        this.y_box_x = 0;\n        this.y_box_y = 0;\n        this.y_box_h = 0;\n        this.y_box_w = 0;\n        this.p_cuts_xpos = undefined;\n        this.p_cuts_ypos = undefined;\n        this.x_cut_data = [];\n        this.y_cut_data = [];\n        //the plot to hold the x-cut on bottom\n        this.xcut = undefined;\n        //layer xcut that will be displayed on pop-up\n        this.xcut_layer = undefined;\n        this.x_cut_press_on = false;\n        //variable that is true if the bottom xcut is being drawn\n        this.xcut_now = false;\n        //the plot to hold the y-cut\n        this.ycut = undefined;\n        //layer ycut that will be displayed on pop-up\n        this.ycut_layer = undefined;\n        this.y_cut_press_on = false;\n        //variable that is true if the ycut is being drawn\n        this.ycut_now = false;\n        this.ylabel_stash = undefined;\n        this.cut_stash = undefined;\n        //div to hold x-cut\n        this.element1 = undefined;\n        //div to hold y cut\n        this.element2 = undefined;\n\n        //x and y sticky key configuration (\"automatic\" displays point on\n        //1D and cut on 2D, \"disable\" doesn't display anything, \"pop-up\"\n        //displays point on both, and \"cuts\" displays only cuts on 2D)\n        this.xyKeys = \"automatic\";\n        //true if the x value is being displayed on plot\n        this.x_pop_now = false;\n        //true if the y value is being displayed on plot\n        this.y_pop_now = false;\n\n        //the drawmode and autol before the x or y cut was showing\n        this.old_drawmode = undefined;\n        this.old_autol = undefined;\n\n        // refresh-reference-counter\n        this.refresh_after_ctr = 0;\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function setup_cmap(plot, cmap) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        // If a color map array was provided make a custom map\n        if (Array.isArray(cmap)) {\n            var custom_cmap = {\n                name: \"Custom\",\n                colors: cmap\n            };\n            if (m.Mc.colormap[m.Mc.colormap.length - 1].name === \"Custom\") {\n                m.Mc.colormap[m.Mc.colormap.length - 1].colors = cmap;\n            } else {\n                m.Mc.colormap.push(custom_cmap);\n            }\n            Gx.cmap = m.Mc.colormap.length - 1;\n        } else if (typeof cmap === \"string\") {\n            Gx.cmap = -1;\n            for (var xc = 0; xc < m.Mc.colormap.length; xc++) {\n                if (m.Mc.colormap[xc].name === cmap) {\n                    Gx.cmap = xc;\n                    break;\n                }\n            }\n        } else {\n            Gx.cmap = cmap;\n        }\n\n        if (Gx.ncolors < 0) {\n            Gx.ncolors = -1 * Gx.ncolors;\n            Gx.cmap = Math.max(1, Gx.cmap);\n        }\n        if ((Gx.cmap < 0) || (Gx.cmap > m.Mc.colormap.length)) {\n            if (Gx.cmode === 2) {\n                Gx.cmap = 2; // wheel\n            } else {\n                Gx.cmap = 1; // ramp\n            }\n        }\n\n        mx.colormap(Mx, m.Mc.colormap[Gx.cmap].colors, Gx.ncolors);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_x(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var ls = Gx.aretx.toString();\n        if (Gx.iabsc === 1) {\n            mx.message(Mx, \"INDEX = \" + ls);\n        } else if (Gx.iabsc === 2) {\n            mx.message(Mx, \"1/X = \" + ls);\n        } else {\n            //if (Gx.xlab === 4) {\n            // TODO\n            //}\n            mx.message(Mx, \"X = \" + ls);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_timecode(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.lyr.length > 0) {\n            //var hcb = Gx.HCB[Gx.lyr[0].hcb];\n            var hcb = Gx.lyr[0].hcb; // mmm-TODO-needs investigation\n            if ((hcb[\"class\"] === 1) && ((hcb.xunits === 1) || (hcb.xunits === 4))) {\n                mx.message(Mx, \"Time = \" + m.sec2tod(hcb.timecode + Gx.retx), true);\n            } else if ((hcb[\"class\"] === 2) && ((hcb.yunits === 1) || (hcb.yunits === 4))) {\n                mx.message(Mx, \"Time = \" + m.sec2tod(hcb.timecode + Gx.rety), true);\n            } else {\n                mx.message(Mx, \"Time = UNK\");\n            }\n\n        }\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_y(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var ls = Gx.arety.toString();\n        if (Gx.iabsc === 2) {\n            mx.message(Mx, \"1/Y = \" + ls);\n        } else {\n            //if (Gx.xlab === 4) {\n            // TODO\n            //}\n            mx.message(Mx, \"Y = \" + ls);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_z(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.zmin && Gx.zmax) { // at least one layer has a z dimension\n            var msg = \"\";\n            if (Gx.lyr.length === 1) {\n                var msg = \"Z = \" + Gx.lyr[0].get_z(Gx.retx, Gx.rety).toString();\n            } else {\n                var msg = \"TODO\"; // TODO we need to think of what we want to display here\n            }\n            mx.message(Mx, msg);\n        }\n    }\n\n    /**\n     * Constructs a menu for updating the pan scale of the plot.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param command\n     *            The scroll direction to use. Either \"XPAN\" or \"YPAN\" are\n     *            acceptable.\n     * @private\n     */\n    function sigplot_scrollScaleMenu(plot, command) {\n        var Mx = plot._Mx;\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n        mx.menu(Mx, {\n            title: \"SCROLLBAR\",\n            refresh: function() {\n                plot.refresh();\n            },\n            finalize: function() {\n                mx.addEventListener(Mx, \"mousedown\",\n                    plot.onmousedown, false);\n                plot.refresh();\n            },\n            items: [{\n                text: \"Expand Range\",\n                handler: function() {\n                    middleClickScrollMenuAction(plot,\n                        mx.SB_EXPAND, command);\n                }\n            }, {\n                text: \"Shrink Range\",\n                handler: function() {\n                    middleClickScrollMenuAction(plot,\n                        mx.SB_SHRINK, command);\n                }\n            }, {\n                text: \"Expand Full\",\n                handler: function() {\n                    middleClickScrollMenuAction(plot,\n                        mx.SB_FULL, command);\n                }\n            }]\n        });\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_mainmenu(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        // show mainmenu\n        //\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n        // Sub-menus\n        var CONTROLS_MENU = {\n            text: \"Cntrls...\",\n            menu: {\n                title: \"CONTROLS OPTIONS\",\n                items: [{\n                    text: \"Continuous (Disabled)\",\n                    checked: Gx.cntrls === -2,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: -2\n                        });\n                    }\n                }, {\n                    text: \"LM Click (Disabled)\",\n                    checked: Gx.cntrls === -1,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: -1\n                        });\n                    }\n                }, {\n                    text: \"Off\",\n                    checked: Gx.cntrls === 0,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: 0\n                        });\n                    }\n                }, {\n                    text: \"LM Click\",\n                    checked: Gx.cntrls === 1,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: 1\n                        });\n                    }\n                }, {\n                    text: \"Continuous\",\n                    checked: Gx.cntrls === 2,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: 2\n                        });\n                    }\n                }]\n            }\n        };\n\n        var CXMODE_MENU = {\n            text: \"CX Mode...\",\n            menu: {\n                title: \"COMPLEX MODE\",\n                items: [{\n                    text: \"Magnitude\",\n                    checked: Gx.cmode === 1,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 1\n                        });\n                    }\n                }, {\n                    text: \"Phase\",\n                    checked: Gx.cmode === 2,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 2\n                        });\n                    }\n                }, {\n                    text: \"Real\",\n                    checked: Gx.cmode === 3,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 3\n                        });\n                    }\n                }, {\n                    text: \"Imaginary\",\n                    checked: Gx.cmode === 4,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 4\n                        });\n                    }\n                }, {\n                    text: \"IR: Imag/Real\",\n                    checked: Gx.cmode === 5,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 5\n                        });\n                    }\n                }, {\n                    text: \"10*Log10\",\n                    checked: Gx.cmode === 6,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 6\n                        });\n                    }\n                }, {\n                    text: \"20*Log10\",\n                    checked: Gx.cmode === 7,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 7\n                        });\n                    }\n                }]\n            }\n        };\n\n        var SCALING_MENU = {\n            text: \"Scaling...\",\n            menu: {\n                title: \"SCALING\",\n                items: [{\n                    text: \"Y Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Parameters...\",\n                    checked: (Gx.autoy === 0),\n                    handler: function() {\n                        Gx.autoy = 0;\n\n                        var nextPrompt = function() {\n                            setupPrompt(\n                                plot,\n                                \"Y Axis Max:\",\n                                mx.floatValidator,\n                                function(finalValue) {\n                                    if (parseFloat(finalValue) !== Mx.stk[Mx.level].ymax) {\n                                        // Only update if different\n                                        // value\n                                        if (finalValue === \"\") {\n                                            finalValue = 0;\n                                        }\n                                        updateViewbox(\n                                            plot,\n                                            Mx.stk[Mx.level].ymin,\n                                            parseFloat(finalValue),\n                                            \"Y\");\n                                    } else {\n                                        plot.refresh();\n                                    }\n                                }, Mx.stk[Mx.level].ymax,\n                                undefined, undefined, undefined);\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Y Axis Min:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Mx.stk[Mx.level].ymin) {\n                                    // Only update if different\n                                    // value\n                                    if (finalValue === \"\") {\n                                        finalValue = 0;\n                                    }\n                                    updateViewbox(plot,\n                                        parseFloat(finalValue),\n                                        Mx.stk[Mx.level].ymax,\n                                        \"Y\");\n                                } else {\n                                    plot.refresh();\n                                }\n\n                            }, Mx.stk[Mx.level].ymin, undefined,\n                            undefined, nextPrompt);\n                    }\n                }, {\n                    text: \"Min Auto\",\n                    checked: (Gx.autoy === 1),\n                    handler: function() {\n                        Gx.autoy = 1;\n                    }\n                }, {\n                    text: \"Max Auto\",\n                    checked: (Gx.autoy === 2),\n                    handler: function() {\n                        Gx.autoy = 2;\n                    }\n                }, {\n                    text: \"Full Auto\",\n                    checked: (Gx.autoy === 3),\n                    handler: function() {\n                        Gx.autoy = 3;\n                    }\n                }, {\n                    text: \"X Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Parameters...\",\n                    checked: (Gx.autox === 0),\n                    handler: function() {\n                        Gx.autox = 0;\n\n                        var nextPrompt = function() {\n                            setupPrompt(\n                                plot,\n                                \"X Axis Max:\",\n                                mx.floatValidator,\n                                function(finalValue) {\n                                    if (parseFloat(finalValue) !== Mx.stk[Mx.level].xmax) {\n                                        // Only update if different\n                                        // value\n                                        if (finalValue === \"\") {\n                                            finalValue = 0;\n                                        }\n                                        updateViewbox(\n                                            plot,\n                                            Mx.stk[Mx.level].xmin,\n                                            parseFloat(finalValue),\n                                            \"X\");\n                                    } else {\n                                        plot.refresh();\n                                    }\n                                }, Mx.stk[Mx.level].xmax,\n                                undefined, undefined, undefined);\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"X Axis Min:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Mx.stk[Mx.level].xmin) {\n                                    // Only update if different\n                                    // value\n                                    if (finalValue === \"\") {\n                                        finalValue = 0;\n                                    }\n                                    updateViewbox(plot,\n                                        parseFloat(finalValue),\n                                        Mx.stk[Mx.level].xmax,\n                                        \"X\");\n                                } else {\n                                    plot.refresh();\n                                }\n                            }, Mx.stk[Mx.level].xmin, undefined,\n                            undefined, nextPrompt);\n                    }\n                }, {\n                    text: \"Min Auto\",\n                    checked: (Gx.autox === 1),\n                    handler: function() {\n                        Gx.autox = 1;\n                    }\n                }, {\n                    text: \"Max Auto\",\n                    checked: (Gx.autox === 2),\n                    handler: function() {\n                        Gx.autox = 2;\n                    }\n                }, {\n                    text: \"Full Auto\",\n                    checked: (Gx.autox === 3),\n                    handler: function() {\n                        Gx.autox = 3;\n                    }\n                }, {\n                    text: \"Z Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Parameters...\",\n                    checked: (Gx.autoz === 0),\n                    handler: function() {\n                        Gx.autoz = 0;\n\n                        var nextPrompt = function() {\n                            setupPrompt(\n                                plot,\n                                \"Z Axis Max:\",\n                                mx.floatValidator,\n                                function(finalValue) {\n                                    if (parseFloat(finalValue) !== Gx.zmax) {\n                                        // Only update if different\n                                        // value\n                                        if (finalValue === \"\") {\n                                            finalValue = 0;\n                                        }\n                                        plot.change_settings({\n                                            zmax: finalValue\n                                        });\n                                    }\n                                }, Gx.zmax,\n                                undefined, undefined, undefined);\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Z Axis Min:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.zmin) {\n                                    if (finalValue === \"\") {\n                                        finalValue = 0;\n                                    }\n                                    plot.change_settings({\n                                        zmin: finalValue\n                                    });\n                                }\n                            }, Gx.zmin, undefined,\n                            undefined, nextPrompt);\n                    }\n                }, {\n                    text: \"Min Auto\",\n                    checked: (Gx.autoz === 1),\n                    handler: function() {\n                        plot.change_settings({\n                            autoz: 1\n                        });\n                    }\n                }, {\n                    text: \"Max Auto\",\n                    checked: (Gx.autoz === 2),\n                    handler: function() {\n                        plot.change_settings({\n                            autoz: 2\n                        });\n                    }\n                }, {\n                    text: \"Full Auto\",\n                    checked: (Gx.autoz === 3),\n                    handler: function() {\n                        plot.change_settings({\n                            autoz: 3\n                        });\n                    }\n                }]\n            }\n        };\n\n        var GRID_MENU = {\n            text: \"Grid\",\n            handler: function() {\n                plot.change_settings({\n                    grid: !Gx.grid\n                });\n            }\n        };\n\n        var SETTINGS_MENU = {\n            text: \"Settings...\",\n            menu: {\n                title: \"SETTINGS\",\n                items: [{\n                    text: \"ALL Mode\",\n                    checked: Gx.all,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            all: !Gx.all\n                        });\n                    }\n                }, {\n                    text: \"Controls...\",\n                    menu: {\n                        title: \"CONTROLS OPTIONS\",\n                        items: [{\n                            text: \"Continuous (Disabled)\",\n                            checked: Gx.cntrls === -2,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: -2\n                                });\n                            }\n                        }, {\n                            text: \"LM Click (Disabled)\",\n                            checked: Gx.cntrls === -1,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: -1\n                                });\n                            }\n                        }, {\n                            text: \"Off\",\n                            checked: Gx.cntrls === 0,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: 0\n                                });\n                            }\n                        }, {\n                            text: \"LM Click\",\n                            checked: Gx.cntrls === 1,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: 1\n                                });\n                            }\n                        }, {\n                            text: \"Continuous\",\n                            checked: Gx.cntrls === 2,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: 2\n                                });\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Mouse...\",\n                    menu: {\n                        title: \"MOUSE OPTIONS\",\n                        items: [{\n                            text: \"LM Drag (Zoom)\",\n                            checked: Gx.default_rubberbox_action === \"zoom\",\n                            handler: function() {\n                                Gx.default_rubberbox_action = \"zoom\";\n                            }\n                        }, {\n                            text: \"LM Drag (Select)\",\n                            checked: Gx.default_rubberbox_action === \"select\",\n                            handler: function() {\n                                Gx.default_rubberbox_action = \"select\";\n                            }\n                        }, {\n                            text: \"LM Drag (Disabled)\",\n                            checked: Gx.default_rubberbox_action === null,\n                            handler: function() {\n                                Gx.default_rubberbox_action = null;\n                            }\n                        }, {\n                            text: \"RM Drag (Zoom)\",\n                            checked: Gx.default_rightclick_rubberbox_action === \"zoom\",\n                            handler: function() {\n                                Gx.default_rightclick_rubberbox_action = \"zoom\";\n                            }\n                        }, {\n                            text: \"RM Drag (Select)\",\n                            checked: Gx.default_rightclick_rubberbox_action === \"select\",\n                            handler: function() {\n                                Gx.default_rightclick_rubberbox_action = \"select\";\n                            }\n                        }, {\n                            text: \"RM Drag (Disabled)\",\n                            checked: Gx.default_rightclick_rubberbox_action === null,\n                            handler: function() {\n                                Gx.default_rightclick_rubberbox_action = null;\n                            }\n                        }, {\n                            text: \"Mode...\",\n                            menu: {\n                                title: \"MOUSE Mode\",\n                                items: [{\n                                    text: \"Box\",\n                                    checked: Gx.default_rubberbox_mode === \"box\",\n                                    handler: function() {\n                                        Gx.default_rubberbox_mode = \"box\";\n                                    }\n\n                                }, {\n                                    text: \"Horizontal\",\n                                    checked: Gx.default_rubberbox_mode === \"horizontal\",\n                                    handler: function() {\n                                        Gx.default_rubberbox_mode = \"horizontal\";\n                                    }\n                                }, {\n                                    text: \"Vertical\",\n                                    checked: Gx.default_rubberbox_mode === \"vertical\",\n                                    handler: function() {\n                                        Gx.default_rubberbox_mode = \"vertical\";\n                                    }\n                                }]\n                            }\n                        }, {\n                            text: \"CROSShairs...\",\n                            menu: {\n                                title: \"Crosshairs Mode\",\n                                items: [{\n                                    text: \"Off\",\n                                    checked: !Gx.cross,\n                                    handler: function() {\n                                        Gx.cross = false;\n                                    }\n\n                                }, {\n                                    text: \"On\",\n                                    checked: Gx.cross === true,\n                                    handler: function() {\n                                        Gx.cross = true;\n                                    }\n                                }, {\n                                    text: \"Horizontal\",\n                                    checked: Gx.cross === \"horizontal\",\n                                    handler: function() {\n                                        Gx.cross = \"horizontal\";\n                                    }\n                                }, {\n                                    text: \"Vertical\",\n                                    checked: Gx.cross === \"vertical\",\n                                    handler: function() {\n                                        Gx.cross = \"vertical\";\n                                    }\n                                }]\n                            }\n                        }, {\n                            text: \"Mousewheel Natural Mode\",\n                            checked: Gx.wheelscroll_mode_natural,\n                            style: \"checkbox\",\n                            handler: function() {\n                                plot\n                                    .change_settings({\n                                        wheelscroll_mode_natural: !Gx.wheelscroll_mode_natural\n                                    });\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"CROSShairs\",\n                    checked: Gx.cross,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            cross: !Gx.cross\n                        });\n                    }\n                }, {\n                    text: \"GRID\",\n                    checked: Gx.grid,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            grid: !Gx.grid\n                        });\n                    }\n                }, {\n                    text: \"INDEX Mode\",\n                    checked: Gx.index,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            index: !Gx.index\n                        });\n                    }\n                }, {\n                    text: \"LEGEND\",\n                    checked: Gx.legend,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            legend: !Gx.legend\n                        });\n                    }\n                }, {\n                    text: \"PAN Scrollbars\",\n                    checked: Gx.pan,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            pan: !Gx.pan\n                        });\n                    }\n                }, {\n                    text: \"PHase UNITS...\",\n                    menu: {\n                        title: \"PHASE UNITS\",\n                        items: [{\n                            text: \"Radians\",\n                            checked: Gx.plab === 23,\n                            handler: function() {\n                                plot.change_settings({\n                                    phunits: 'R'\n                                });\n                            }\n\n                        }, {\n                            text: \"Degrees\",\n                            checked: Gx.plab === 24,\n                            handler: function() {\n                                plot.change_settings({\n                                    phunits: 'D'\n                                });\n                            }\n                        }, {\n                            text: \"Cycles\",\n                            checked: Gx.plab === 25,\n                            handler: function() {\n                                plot.change_settings({\n                                    phunits: 'C'\n                                });\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"SPECS\",\n                    checked: Gx.specs,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            specs: !Gx.specs\n                        });\n                    }\n                }, {\n                    text: \"P-Cuts\",\n                    checked: Gx.p_cuts,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            p_cuts: !Gx.p_cuts\n                        });\n                    }\n                }, {\n                    text: \"Large Colorbar\",\n                    checked: Gx.lg_colorbar,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            lg_colorbar: !Gx.lg_colorbar\n                        });\n                    }\n                }, {\n                    text: \"XDIVisions...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            var isValid = mx.intValidator(value);\n                            var maxXDIV = m.trunc(Mx.width / 2); // TODO\n                            // Make value an option on the plot?\n                            // Maybe still a little too high\n                            // while dotted-line grids are\n                            // being drawn?\n                            if (isValid.valid && value > maxXDIV) {\n                                return {\n                                    valid: false,\n                                    reason: \"Exceeds maximum number of divisions (\" + maxXDIV + \").\"\n                                };\n                            } else {\n                                return isValid;\n                            }\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"X Divisions:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.xdiv) { // Only\n                                    // update if different value\n                                    if (finalValue === \"\") {\n                                        finalValue = 1;\n                                    }\n                                    Gx.xdiv = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.xdiv, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"XLABel...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            console.log(\"The value is \" + value);\n                            var isValid = mx.intValidator(value);\n                            return isValid;\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"X Units:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.xlab) { // Only\n                                    // update if different value\n                                    if (finalValue < 0) {\n                                        finalValue = 0;\n                                    }\n                                    Gx.xlab = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.xlab, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"YDIVisions...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            var isValid = mx.intValidator(value);\n                            var maxYDIV = m.trunc(Mx.height / 2); // TODO\n                            // Make value an option on the plot?\n                            // Maybe still a little too high\n                            // while dotted-line grids are\n                            // being drawn?\n                            if (isValid.valid && value > maxYDIV) {\n                                return {\n                                    valid: false,\n                                    reason: \"Exceeds maximum number of divisions (\" + maxYDIV + \").\"\n                                };\n                            } else {\n                                return isValid;\n                            }\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Y Divisions:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.ydiv) {\n                                    // Only update if different\n                                    // value\n                                    if (finalValue === \"\") {\n                                        finalValue = 1;\n                                    }\n                                    Gx.ydiv = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.ydiv, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"YINVersion\",\n                    checked: (Mx.origin === 4),\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            yinv: (Mx.origin !== 4)\n                        });\n                    }\n                }, {\n                    text: \"YLABel...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            var isValid = mx.intValidator(value);\n                            return isValid;\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Y Units:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.ylab) { // Only\n                                    // update if different value\n                                    if (finalValue < 0) {\n                                        finalValue = 0;\n                                    }\n                                    Gx.ylab = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.ylab, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"X-axis\",\n                    checked: Gx.show_x_axis,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            show_x_axis: !Gx.show_x_axis\n                        });\n                    }\n                }, {\n                    text: \"Y-axis\",\n                    checked: Gx.show_y_axis,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            show_y_axis: !Gx.show_y_axis\n                        });\n                    }\n                }, {\n                    text: \"Readout\",\n                    checked: Gx.show_readout,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            show_readout: !Gx.show_readout\n                        });\n                    }\n                }, {\n                    text: \"Invert Colors\",\n                    checked: Mx.xi,\n                    style: \"checkbox\",\n                    handler: function() {\n                        mx.invertbgfg(Mx);\n                    }\n                }]\n            }\n        };\n\n        var COLORMAP_MENU = {\n            text: \"Colormap...\",\n            menu: {\n                title: \"COLORMAP\",\n                items: []\n            }\n        };\n\n        var colormap_handler = function(item) {\n            plot.change_settings({\n                cmap: this.cmap\n            });\n        };\n\n        for (var xc = 0; xc < m.Mc.colormap.length; xc++) {\n            var menuitem = {\n                text: m.Mc.colormap[xc].name,\n                cmap: xc,\n                checked: (Gx.cmap === xc),\n                handler: colormap_handler\n            };\n            COLORMAP_MENU.menu.items.push(menuitem);\n        }\n\n        var traceoptionsmenu = function(index) {\n            return {\n                title: \"TRACE OPTIONS\",\n                items: [{\n                    text: \"Dashed...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var thk = 1;\n                        if (index !== undefined) {\n                            thk = Math.abs(plot._Gx.lyr[index].thick);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n\n                            thk = Math.abs(plot._Gx.lyr[0].thick);\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                                    thk = 1;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Line thickness:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 3;\n                                    plot._Gx.lyr[index].thick = -1 * finalValue;\n                                    plot._Gx.lyr[index].symbol = 0;\n                                } else {\n                                    for (var ii = 0; ii < Gx.lyr.length; ii++) {\n                                        plot._Gx.lyr[ii].line = 3;\n                                        plot._Gx.lyr[ii].thick = -1 * finalValue;\n                                        plot._Gx.lyr[ii].symbol = 0;\n                                    }\n                                }\n                            }, thk);\n                    }\n                }, {\n                    text: \"Colors...\",\n                    menu: {\n                        title: \"COLORS\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"Red\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"red\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"red\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"red\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Pink\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"pink\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"pink\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"pink\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Hot Pink\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#ff009e\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"#ff009e\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"#ff009e\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Orange\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"orange\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"orange\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"orange\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Yellow\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"yellow\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"yellow\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"yellow\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Lime Green\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#80f741\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"#80f741\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"#80f741\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Green\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"green\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"green\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"green\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Blue\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"blue\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"blue\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"blue\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Purple\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"purple\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"purple\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"purple\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Custom Hexcode\",\n                            handler: function() {\n                                setupPrompt(\n                                    plot,\n                                    \"Color code (requires #):\",\n                                    mx.hexValidator,\n                                    function(finalValue) {\n                                        if (index !== undefined) {\n                                            plot._Gx.lyr[index].color = finalValue;\n                                        } else {\n                                            for (var ii = 0; ii < Gx.lyr.length; index++) {\n                                                plot._Gx.lyr[ii].color = finalValue;\n                                            }\n                                        }\n                                    }, undefined, undefined, undefined, undefined);\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Dots...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var radius = 3;\n                        if (index !== undefined) {\n                            radius = Math.abs(plot._Gx.lyr[index].radius);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n                            var i;\n                            for (i = 0; i < Gx.lyr.length; i++) {\n                                if (radius !== Math.abs(plot._Gx.lyr[i].radius)) {\n                                    radius = 3;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Radius/Shape:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                var sym;\n                                var rad;\n                                if (finalValue < 0) {\n                                    sym = 3; // square\n                                    rad = Math.abs(finalValue);\n                                } else if (finalValue > 0) {\n                                    sym = 2; // circle\n                                    rad = finalValue;\n                                } else {\n                                    sym = 1;\n                                    rad = 0;\n                                }\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 0;\n                                    plot._Gx.lyr[index].radius = rad;\n                                    plot._Gx.lyr[index].symbol = sym;\n                                } else {\n                                    var i;\n                                    for (i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 0;\n                                        plot._Gx.lyr[i].radius = rad;\n                                        plot._Gx.lyr[i].symbol = sym;\n                                    }\n                                }\n                            }, radius);\n                    }\n                }, {\n                    text: \"Radius...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var radius = 3;\n                        if (index !== undefined) {\n                            radius = Math.abs(plot._Gx.lyr[index].radius);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                if (radius !== Math.abs(plot._Gx.lyr[i].radius)) {\n                                    radius = 3;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Radius:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                var sym;\n                                var rad;\n                                if (finalValue < 0) {\n                                    rad = Math.abs(finalValue);\n                                } else if (finalValue > 0) {\n                                    rad = finalValue;\n                                } else {\n                                    sym = 1;\n                                    rad = 0;\n                                }\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 0;\n                                    plot._Gx.lyr[index].radius = rad;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 0;\n                                        plot._Gx.lyr[i].radius = rad;\n                                    }\n                                }\n                            }, radius);\n                    }\n                }, {\n                    text: \"Solid...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var thk = 1;\n                        if (index !== undefined) {\n                            thk = Math.abs(plot._Gx.lyr[index].thick);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n\n                            thk = Math.abs(plot._Gx.lyr[0].thick);\n                            var i;\n                            for (i = 0; i < Gx.lyr.length; i++) {\n                                if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                                    thk = 1;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Line thickness:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 3;\n                                    plot._Gx.lyr[index].thick = finalValue;\n                                    plot._Gx.lyr[index].symbol = 0;\n                                } else {\n                                    var i;\n                                    for (i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 3;\n                                        plot._Gx.lyr[i].thick = finalValue;\n                                        plot._Gx.lyr[i].symbol = 0;\n                                    }\n                                }\n                            }, thk);\n                    }\n                }, {\n                    text: \"Toggle\",\n                    style: (index !== undefined) ? \"checkbox\" : undefined,\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].display : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].display = !plot._Gx.lyr[index].display;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].display = !plot._Gx.lyr[i].display;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Symbols...\",\n                    menu: {\n                        title: \"SYMBOLS\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"None\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 0 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 0;\n                                    plot._Gx.lyr[index].symbol = 0;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 0;\n                                        plot._Gx.lyr[i].symbol = 0;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Pixels\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 1 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 1;\n                                    plot._Gx.lyr[index].symbol = 1;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 1;\n                                        plot._Gx.lyr[i].symbol = 1;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Circles\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 2 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 2;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 2;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Squares\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 3 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 3;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 3;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Plusses\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 4 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 4;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 4;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"X's\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 5 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 5;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 5;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Triangles\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 6 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 6;\n                                    plot._Gx.lyr[index].symbol = 6;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 6;\n                                        plot._Gx.lyr[i].symbol = 6;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Downward Triangles\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 7 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 6;\n                                    plot._Gx.lyr[index].symbol = 7;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 6;\n                                        plot._Gx.lyr[i].symbol = 7;\n                                    }\n                                }\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Line Type...\",\n                    menu: {\n                        title: \"LINE TYPE\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"None\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 0 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 0;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 0;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Verticals\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 1 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 1;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 1;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Horizontals\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 2 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 2;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 2;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Connecting\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 3 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 3;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 3;\n                                    }\n                                }\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Thickness...\",\n                    handler: function() {\n                        var thickness = 1;\n                        if (index !== undefined) {\n                            thickness = plot._Gx.lyr[index].thick;\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Thickness\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                if (finalValue === \"\") {\n                                    finalValue = 1;\n                                }\n                                finalValue = Math.max(0, finalValue);\n\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].thick = finalValue;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].thick = finalValue;\n                                    }\n                                }\n                            }, thickness, undefined,\n                            undefined, undefined);\n                    }\n                }, {\n                    text: \"Opacity...\",\n                    handler: function() {\n                        var opacity = 1.0;\n                        if (index !== undefined) {\n                            opacity = plot._Gx.lyr[index].opacity;\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Opacity:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (finalValue === \"\") {\n                                    finalValue = 1.0;\n                                }\n                                finalValue = Math.max(0, finalValue);\n                                finalValue = Math.min(1, finalValue);\n\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].opacity = finalValue;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].opacity = finalValue;\n                                    }\n                                }\n                            }, opacity, undefined,\n                            undefined, undefined);\n                    }\n                }, {\n                    text: \"XCompression...\",\n                    menu: {\n                        title: \"XCOMPRESSION\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"Smoothing\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 0 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 0\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 0\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Average\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 1 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 1\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 1\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Minimum\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 2 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 2\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 2\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Maximum\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 3 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 3\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 3\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"First\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 4 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 4\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 4\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Max (Abs)\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 5 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 5\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 5\n                                        });\n                                    }\n                                }\n                            }\n                        }]\n                    }\n                }]\n            };\n        };\n\n        var VIEW_MENU = {\n            text: \"View...\",\n            menu: {\n                title: \"VIEW\",\n                items: [{\n                    text: \"Reset\",\n                    handler: function() {\n                        plot.unzoom();\n                    }\n                }, {\n                    text: \"Y Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Expand Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_EXPAND, \"YPAN\");\n                    }\n                }, {\n                    text: \"Shrink Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_SHRINK, \"YPAN\");\n                    }\n                }, {\n                    text: \"Expand Full\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_FULL, \"YPAN\");\n                    }\n                }, {\n                    text: \"X Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Expand Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_EXPAND, \"XPAN\");\n                    }\n                }, {\n                    text: \"Shrink Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_SHRINK, \"XPAN\");\n                    }\n                }, {\n                    text: \"Expand Full\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_FULL, \"XPAN\");\n                    }\n                }]\n            }\n        };\n\n        var TRACES_MENU = {\n            text: \"Traces...\",\n            menu: function() {\n                var Gx = plot._Gx;\n                var tracemenu = {\n                    title: \"TRACE\",\n                    items: []\n                };\n                // Add the ALL option\n                tracemenu.items.push({\n                    text: \"All\",\n                    menu: traceoptionsmenu()\n                });\n                // Add all the active layers\n                for (var i = 0; i < Gx.lyr.length; i++) {\n                    tracemenu.items.push({\n                        text: Gx.lyr[i].name,\n                        menu: traceoptionsmenu(i)\n                    });\n                }\n                return tracemenu;\n            }\n        };\n\n        var FILES_MENU = {\n            text: \"Files...\",\n            menu: {\n                title: \"FILES OPTIONS\",\n                items: [\n                    // Overlay File... is disabled\n                    // because it's actually very\n                    // difficult to bring up a\n                    // a file upload browse dialog\n                    /*\n                     * { text: \"Overlay File...\", handler: function() {\n                     * plot.change_settings( {phunits: 'R'} ); } },\n                     */\n                    {\n                        text: \"Deoverlay File...\",\n                        menu: function() {\n                            var Gx = plot._Gx;\n                            var deoverlaymenu = {\n                                title: \"DEOVERLAY\",\n                                items: []\n                            };\n                            deoverlaymenu.items.push({\n                                text: \"Deoverlay All\",\n                                handler: function() {\n                                    plot.deoverlay();\n                                }\n                            });\n                            /* jshint -W083 */\n                            /* TODO figure out how to not create functions within a loop */\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                var handler = (function(index) {\n                                    return function() {\n                                        plot.deoverlay(index);\n                                    };\n                                }(i));\n\n                                deoverlaymenu.items.push({\n                                    text: Gx.lyr[i].name,\n                                    handler: handler\n                                });\n                            }\n                            /* jshint +W083 */\n                            return deoverlaymenu;\n                        }\n                    }\n                ]\n            }\n        };\n\n        var PLUGINS_MENU = {\n            text: \"Plugins...\",\n            menu: {\n                title: \"PLUGINS\",\n                items: (function() { // Immediately\n                    // Invoked\n                    // Function\n                    var result = [];\n                    for (var i = 0; i < Gx.plugins.length; i++) {\n                        var plugin = Gx.plugins[i];\n                        if (plugin.impl.menu) {\n                            if (typeof plugin.impl.menu === 'function') {\n                                result.push(plugin.impl.menu());\n                            } else {\n                                result.push(plugin.impl.menu);\n                            }\n                        }\n                    }\n                    return result;\n                }())\n            }\n        };\n\n        var SAVE_MENU = {\n            text: \"Save as...\",\n            menu: {\n                title: \"SAVE AS\",\n                items: [{\n                    text: \"PNG\",\n                    handler: function() {\n                        var img = plot._Mx.active_canvas.toDataURL(\"image/png\");\n                        var link = document.createElement(\"a\");\n                        link.href = img;\n                        link.download = \"SigPlot.\" + (new Date()).getTime() + \".png\";\n                        link.display = \"none\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                }, {\n                    text: \"JPG\",\n                    handler: function() {\n                        var img = plot._Mx.active_canvas.toDataURL(\"image/jpg\");\n                        var link = document.createElement(\"a\");\n                        link.href = img;\n                        link.download = \"SigPlot.\" + (new Date()).getTime() + \".jpg\";\n                        link.display = \"none\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                }, {\n                    text: \"SVG\",\n                    handler: function() {\n                        var img = plot._Mx.active_canvas.toDataURL(\"image/svg\");\n                        var link = document.createElement(\"a\");\n                        link.href = img;\n                        link.download = \"SigPlot.\" + (new Date()).getTime() + \".svg\";\n                        link.display = \"none\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                }]\n            }\n        };\n\n        var REFRESH_ITEM = {\n            text: \"Refresh\"\n            // no handler, just let the finalizer deal with it\n        };\n\n        var KEYPRESSINFO_ITEM = {\n            text: \"Keypress Info\",\n            handler: function() {\n                mx.message(Mx, KEYPRESS_HELP);\n            }\n        };\n\n        var EXIT_ITEM = {\n            text: \"Exit\",\n            handler: function() {\n                var evt = document.createEvent('Event');\n                evt.initEvent('sigplotexit', true, true);\n                mx.dispatchEvent(Mx, evt);\n            }\n        };\n\n        // Main Menu\n        var MAINMENU = {\n            title: \"SIG-PLOT\",\n            finalize: function() {\n                if (!Mx.prompt) {\n                    // A prompt may have been\n                    // created by a menu handler\n                    // - let it deal with\n                    // eventListener re-setting\n                    mx.addEventListener(Mx, \"mousedown\", plot.onmousedown,\n                        false);\n                }\n                plot.refresh();\n            },\n            items: [REFRESH_ITEM, CONTROLS_MENU, CXMODE_MENU, SCALING_MENU, VIEW_MENU,\n                GRID_MENU, SETTINGS_MENU, COLORMAP_MENU, TRACES_MENU, FILES_MENU,\n                PLUGINS_MENU, KEYPRESSINFO_ITEM, SAVE_MENU, EXIT_ITEM\n            ]\n        };\n\n        mx.menu(Mx, MAINMENU);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_legend_menu(plot, index) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n        var DASHED = {\n            text: \"Dashed...\",\n            handler: function() {\n                // Figure out the current thickness\n                var thk = 1;\n                if (index !== undefined) {\n                    thk = Math.abs(plot._Gx.lyr[index].thick);\n                } else {\n                    if (Gx.lyr.length === 0) {\n                        return;\n                    }\n\n                    thk = Math.abs(plot._Gx.lyr[0].thick);\n                    for (var i = 0; i < Gx.lyr.length; i++) {\n                        if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                            thk = 1;\n                            break;\n                        }\n                    }\n                }\n                setupPrompt(\n                    plot,\n                    \"Line thickness:\",\n                    mx.intValidator,\n                    function(finalValue) {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 3;\n                            plot._Gx.lyr[index].thick = -1 * finalValue;\n                            plot._Gx.lyr[index].symbol = 0;\n                        } else {\n                            for (var ii = 0; ii < Gx.lyr.length; ii++) {\n                                plot._Gx.lyr[ii].line = 3;\n                                plot._Gx.lyr[ii].thick = -1 * finalValue;\n                                plot._Gx.lyr[ii].symbol = 0;\n                            }\n                        }\n                    }, thk);\n            }\n\n        };\n\n        var COLORS = {\n            text: \"Colors...\",\n            menu: {\n                title: \"COLORS\",\n                items: [{\n                    text: \"Retain Current\"\n                }, {\n                    text: \"Red\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"red\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"red\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"red\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Pink\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"pink\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"pink\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"pink\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Hot Pink\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#ff009e\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"#ff009e\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"#ff009e\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Orange\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"orange\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"orange\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"orange\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Yellow\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"yellow\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"yellow\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"yellow\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Lime Green\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#80f741\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"#80f741\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"#80f741\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Green\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"green\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"green\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"green\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Blue\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"blue\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"blue\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"blue\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Purple\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"purple\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"purple\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"purple\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Custom Hexcode\",\n                    handler: function() {\n                        setupPrompt(\n                            plot,\n                            \"Color code (requires #):\",\n                            mx.hexValidator,\n                            function(finalValue) {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = finalValue;\n                                } else {\n                                    for (var ii = 0; ii < Gx.lyr.length; ii++) {\n                                        plot._Gx.lyr[ii].color = finalValue;\n                                    }\n                                }\n                            }, undefined, undefined, undefined, undefined);\n                    }\n                }]\n            }\n        };\n\n        var SOLID = {\n            text: \"Solid...\",\n            handler: function() {\n                // Figure out the current thickness\n                var thk = 1;\n                if (index !== undefined) {\n                    thk = Math.abs(plot._Gx.lyr[index].thick);\n                } else {\n                    if (Gx.lyr.length === 0) {\n                        return;\n                    }\n\n                    thk = Math.abs(plot._Gx.lyr[0].thick);\n                    var i;\n                    for (i = 0; i < Gx.lyr.length; i++) {\n                        if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                            thk = 1;\n                            break;\n                        }\n                    }\n                }\n                setupPrompt(\n                    plot,\n                    \"Line thickness:\",\n                    mx.intValidator,\n                    function(finalValue) {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 3;\n                            plot._Gx.lyr[index].thick = finalValue;\n                            plot._Gx.lyr[index].symbol = 0;\n                        } else {\n                            var i;\n                            for (i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 3;\n                                plot._Gx.lyr[i].thick = finalValue;\n                                plot._Gx.lyr[i].symbol = 0;\n                            }\n                        }\n                    }, thk);\n            }\n        };\n\n        var TOGGLE = {\n            text: \"Toggle\",\n            style: (index !== undefined) ? \"checkbox\" : undefined,\n            checked: (index !== undefined) ? plot._Gx.lyr[index].display : undefined,\n            handler: function() {\n                if (index !== undefined) {\n                    plot._Gx.lyr[index].display = !plot._Gx.lyr[index].display;\n                } else {\n                    for (var i = 0; i < Gx.lyr.length; i++) {\n                        plot._Gx.lyr[i].display = !plot._Gx.lyr[i].display;\n                    }\n                }\n            }\n        };\n\n        var SYMBOLS = {\n            text: \"Symbols...\",\n            menu: {\n                title: \"SYMBOLS\",\n                items: [{\n                    text: \"Retain Current\"\n                }, {\n                    text: \"None\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 0 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 0;\n                            plot._Gx.lyr[index].symbol = 0;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 0;\n                                plot._Gx.lyr[i].symbol = 0;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Pixels\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 1 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 1;\n                            plot._Gx.lyr[index].symbol = 1;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 1;\n                                plot._Gx.lyr[i].symbol = 1;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Circles\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 2 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 2;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 2;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Squares\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 3 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 3;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 3;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Plusses\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 4 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 4;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 4;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"X's\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 5 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 5;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 5;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Triangles\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 6 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 6;\n                            plot._Gx.lyr[index].symbol = 6;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 6;\n                                plot._Gx.lyr[i].symbol = 6;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Downward Triangles\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 7 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 6;\n                            plot._Gx.lyr[index].symbol = 7;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 6;\n                                plot._Gx.lyr[i].symbol = 7;\n                            }\n                        }\n                    }\n                }]\n            }\n        };\n\n        var LINE_TYPE = {\n            text: \"Line Type...\",\n            menu: {\n                title: \"LINE TYPE\",\n                items: [{\n                    text: \"Retain Current\"\n                }, {\n                    text: \"None\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 0 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 0;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 0;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Verticals\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 1 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 1;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 1;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Horizontals\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 2 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 2;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 2;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Connecting\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 3 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 3;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 3;\n                            }\n                        }\n                    }\n                }]\n            }\n        };\n\n        var THICKNESS = {\n            text: \"Thickness...\",\n            handler: function() {\n                var thickness = 1;\n                if (index !== undefined) {\n                    thickness = plot._Gx.lyr[index].thick;\n                }\n                setupPrompt(\n                    plot,\n                    \"Thickness\",\n                    mx.intValidator,\n                    function(finalValue) {\n                        if (finalValue === \"\") {\n                            finalValue = 1;\n                        }\n                        finalValue = Math.max(0, finalValue);\n\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].thick = finalValue;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].thick = finalValue;\n                            }\n                        }\n                    }, thickness, undefined,\n                    undefined, undefined);\n            }\n        };\n\n        var OPACITY = {\n            text: \"Opacity...\",\n            handler: function() {\n                var opacity = 1.0;\n                if (index !== undefined) {\n                    opacity = plot._Gx.lyr[index].opacity;\n                }\n                setupPrompt(\n                    plot,\n                    \"Opacity:\",\n                    mx.floatValidator,\n                    function(finalValue) {\n                        if (finalValue === \"\") {\n                            finalValue = 1.0;\n                        }\n                        finalValue = Math.max(0, finalValue);\n                        finalValue = Math.min(1, finalValue);\n\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].opacity = finalValue;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].opacity = finalValue;\n                            }\n                        }\n                    }, opacity, undefined,\n                    undefined, undefined);\n            }\n        };\n\n        var LEGEND_TRACE = {\n            title: Gx.lyr[index].name,\n            finalize: function() {\n                if (!Mx.prompt) {\n                    // A prompt may have been\n                    // created by a menu handler\n                    // - let it deal with\n                    // eventListener re-setting\n                    mx.addEventListener(Mx, \"mousedown\", plot.onmousedown,\n                        false);\n                }\n                plot.refresh();\n            },\n            items: [DASHED, COLORS, SOLID, TOGGLE, SYMBOLS, LINE_TYPE, THICKNESS, OPACITY]\n        };\n\n        mx.menu(Mx, LEGEND_TRACE);\n    }\n\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function rubberbox_cb(plot, triggerEvent) {\n        return function(event, xo, yo, xl, yl, action, mode) {\n            var Gx = plot._Gx;\n            var Mx = plot._Mx;\n\n            var x = Math.min(xo, xl);\n            var y = Math.min(yo, yl);\n            var w = Math.abs(xl - xo);\n            var h = Math.abs(yl - yo);\n\n            var takeAction = false;\n            if (event.which === triggerEvent) {\n                // On some browsers, a click will actually be sent as\n                // mousedown/mousemove/mouseup so\n                // don't make insanely small zooms...instead treat them as a\n                // click\n                if (mode === \"horizontal\") {\n                    takeAction = (w > 2);\n                } else if (mode === \"vertical\") {\n                    takeAction = (h > 2);\n                } else {\n                    takeAction = ((w > 2) && (h > 2));\n                }\n            }\n\n            if (!takeAction) {\n                // The mouse didn't shift enough to be considered\n                // as a rubberbox action so treat it as mouseup\n                plot.mouseup(event);\n            } else {\n                // action === null is disabled, but undefined is default\n                if ((action === undefined) || (action === \"zoom\")) {\n                    plot.pixel_zoom(xo, yo, xl, yl);\n                    plot.refresh();\n                } else if (action === \"select\") {\n                    var evt = document.createEvent('Event');\n                    evt.initEvent('mtag', true, true);\n                    var re = pixel_to_real(plot, x, y);\n                    var rwh = pixel_to_real(plot, x + w, y + h);\n                    evt.x = re.x;\n                    evt.y = re.y;\n                    evt.xpos = x;\n                    evt.ypos = y;\n                    evt.w = Math.abs(rwh.x - re.x);\n                    evt.h = Math.abs(rwh.y - re.y);\n                    evt.wpxl = w;\n                    evt.hpxl = h;\n                    evt.shift = event.shiftKey;\n                    mx.dispatchEvent(Mx, evt);\n                }\n            }\n        };\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function plot_init(plot, o) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if (!o.xlab) {\n            o.xlab = 0;\n        }\n        if (!o.ylab) {\n            o.ylab = 0;\n        }\n        if (o.useDomMenu) {\n            Mx.useDomMenu = true;\n        }\n\n        //Convert xunits and yunits to numbers if they are strings\n        o.xlab = m.unit_lookup(o.xlab);\n        o.ylab = m.unit_lookup(o.ylab);\n\n        // Equivalent to reading cmd line args\n        Gx.xmin = o.xmin === undefined ? 0.0 : o.xmin;\n        Gx.xmax = o.xmax === undefined ? 0.0 : o.xmax;\n        var havexmin = (o.xmin !== undefined);\n        var havexmax = (o.xmax !== undefined);\n        var address;\n        if (typeof o.cmode === \"number\") {\n            switch (o.cmode) {\n                case 1:\n                    address = \"MA\";\n                    break;\n                case 2:\n                    address = \"PH\";\n                    break;\n                case 3:\n                    address = \"RE\";\n                    break;\n                case 4:\n                    address = \"IM\";\n                    break;\n                case 5:\n                    address = \"IR\";\n                    break;\n                case 6:\n                    address = \"LO\";\n                    break;\n                case 7:\n                    address = \"L2\";\n                    break;\n                default:\n                    throw new RangeError(\"Invalid cmode value\");\n            }\n        } else {\n            address = o.cmode === undefined ? \"\" : o.cmode.toUpperCase();\n        }\n        var line = o.line === undefined ? 3 : o.line;\n        Gx.ylab = o.ylab;\n        Gx.ylabel = o.ylabel;\n        Gx.ymin = o.ymin === undefined ? 0.0 : o.ymin;\n        Gx.ymax = o.ymax === undefined ? 0.0 : o.ymax;\n        var haveymin = (o.ymin !== undefined);\n        var haveymax = (o.ymax !== undefined);\n        Gx.zmin = o.zmin;\n        Gx.zmax = o.zmax;\n        var havezmin = (o.zmin !== undefined);\n        var havezmax = (o.zmax !== undefined);\n\n        if (o.colors !== undefined) {\n            mx.setbgfg(Mx, o.colors.bg, o.colors.fg, Mx.xi);\n        }\n\n        if (o.xi) {\n            mx.invertbgfg(Mx);\n        }\n\n        Gx.forcelab = o.forcelab === undefined ? true : o.forcelab;\n\n        Gx.all = o.all === undefined ? false : o.all;\n        // By default, SIGPLOT auto-scales only on the first buffer size.\n        // \"expand\" is a feature added for websigplot that when\n        // combined with \"all\" will expand the y-range automaticall\n        // to accomodate all of the samples\n        Gx.expand = o.expand === undefined ? false : o.expand;\n\n        // TODO Gx.mimic = M$GET_SWITCH ('MIMIC')\n        Gx.xlab = o.xlab;\n        Gx.xlabel = o.xlabel;\n        Gx.segment = o.segment === undefined ? false : o.segment;\n        Gx.plab = 24;\n\n        var phunits = (o.phunits === undefined) ? 'D' : o.phunits;\n        if (phunits[0] === 'R') {\n            Gx.plab = 23;\n        } else if (phunits[0] === 'C') {\n            Gx.plab = 25;\n        }\n        Gx.xdiv = o.xdiv === undefined ? 5 : o.xdiv;\n        Gx.ydiv = o.ydiv === undefined ? 5 : o.ydiv;\n\n        Gx.xcompression = o.xcmp || 0;\n        Gx.rasterSmoothing = o.smoothing || false;\n\n        Mx.origin = 1;\n        if (o.yinv) {\n            Mx.origin = 4;\n        }\n        Gx.pmt = o.pmt === undefined ? 1.0 : o.pmt;\n        Gx.bufmax = o.bufmax === undefined ? 32768 : o.bufmax;\n        Gx.sections = o.nsec === undefined ? 0 : o.nsec;\n        Gx.anno_type = o.anno_type === undefined ? 0 : o.anno_type;\n\n        Gx.xfmt = o.xfmt === undefined ? \"\" : o.xfmt;\n        Gx.yfmt = o.yfmt === undefined ? \"\" : o.yfmt;\n\n        // TODO Gx.xf.msgid = M$GET_SWITCH ('MSGID')\n        // Gx.xf.msgmask = max (0, M$GET_SWITCH ('MASK'))\n\n        Gx.index = o.index === undefined ? false : o.index;\n        var imode = (Gx.index || (address.slice(0, 2) === \"IN\"));\n        if (imode) {\n            if (havexmin && (Gx.xmin === 1.0)) {\n                havexmin = false;\n            }\n            if (havexmax && (Gx.xmin === 1.0)) {\n                havexmax = false;\n            }\n        }\n\n        Gx.xdata = false;\n        Gx.note = \"\";\n        Gx.hold = 0;\n        Gx.always_show_marker = o.always_show_marker || false;\n\n        m.vstype('D');\n\n        if (!o.inputs) {\n            basefile(plot, false);\n        } else {\n            // TODO load files\n        }\n\n        var cmode = address;\n\n        if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n            Gx.cmode = 1;\n        } else {\n            Gx.cmode = 3;\n        }\n\n        if ((cmode === \"MA\") || (cmode === \"INMA\") || (cmode === \"ABMA\") ||\n            (cmode === \"__MA\") || (cmode === \"MAGNITUDE\")) {\n            Gx.cmode = 1;\n        }\n        if ((cmode === \"PH\") || (cmode === \"INPH\") || (cmode === \"ABPH\") ||\n            (cmode === \"__PH\") || (cmode === \"PHASE\")) {\n            Gx.cmode = 2;\n        }\n        if ((cmode === \"RE\") || (cmode === \"INRE\") || (cmode === \"ABRE\") ||\n            (cmode === \"__RE\") || (cmode === \"REAL\")) {\n            Gx.cmode = 3;\n        }\n        if ((cmode === \"IM\") || (cmode === \"INIM\") || (cmode === \"ABIM\") ||\n            (cmode === \"__IM\") || (cmode === \"IMAGINARY\")) {\n            Gx.cmode = 4;\n        }\n        if ((cmode === \"LO\") || (cmode === \"D1\") || (cmode === \"INLO\") || (cmode === \"IND1\") ||\n            (cmode === \"ABIM\") || (cmode === \"ABD1\") || (cmode === \"__LO\") ||\n            (cmode === \"__D1\") || (cmode === \"10*LOG10\")) {\n            Gx.cmode = 6;\n        }\n        if ((cmode === \"L2\") || (cmode === \"D2\") || (cmode === \"INL2\") || (cmode === \"IND2\") ||\n            (cmode === \"ABLO\") || (cmode === \"ABD2\") || (cmode === \"__L2\") ||\n            (cmode === \"__D2\") || (cmode === \"20*LOG10\")) {\n            Gx.cmode = 7;\n        }\n        if ((cmode === \"RI\") || (cmode === \"IR\") || (cmode === \"INRI\") || (cmode === \"INIR\") ||\n            (cmode === \"ABRI\") || (cmode === \"ABIR\") || (cmode === \"__RI\") ||\n            (cmode === \"__IR\") || (cmode === \"IMAG/REAL\") || (cmode === \"REAL/IMAG\")) {\n            if (Gx.index) {\n                alert(\"Imag/Real mode not permitted in INDEX mode\");\n            } else {\n                Gx.cmode = 5;\n            }\n        }\n\n        Gx.basemode = Gx.cmode;\n\n        plot.change_settings({\n            cmode: Gx.cmode\n        });\n\n        // if ( (Gx.forcelab) .and. (Gx.xlab .le. 0) .and.\n        // & (Gx.ylab .le. 0) ) then\n        // call M$WARNING\n        // & ('/xlab or /ylab is missing with /forcelab usage')\n        // Gx.forcelab = .false.\n        // endif\n\n        Gx.dbmin = 1.0e-20;\n        if (Gx.cmode >= 6) {\n            var dbscale = 10.0;\n            if (Gx.cmode === 7) {\n                dbscale = 20.0;\n            }\n            if ((cmode[0] === \"L\") || (cmode[0] === \"1\") || (cmode[0] === \"2\")) {\n                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                    Gx.ymin = Math.max(Gx.ymin, 1e-10);\n                    Gx.ymax = Math.max(Gx.ymax, 1e-10);\n                } else {\n                    Gx.ymin = Math.max(Gx.ymin, 1e-20);\n                    Gx.ymax = Math.max(Gx.ymax, 1e-20);\n                }\n                Gx.ymin = m.log10(Gx.ymin) * dbscale;\n                Gx.ymax = m.log10(Gx.ymax) * dbscale;\n            } else if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                Gx.ymin = Math.max(-18.0 * dbscale, Gx.ymin);\n                Gx.ymax = Math.max(-18.0 * dbscale, Gx.ymax);\n                Gx.dbmin = 1e-37;\n            } else if (Math.min(Gx.ymin, Gx.ymax) < -20.0 * dbscale) {\n                Gx.ymin = Math.max(-37.0 * dbscale, Gx.ymin);\n                Gx.ymax = Math.max(-37.0 * dbscale, Gx.ymax);\n                Gx.dbmin = Math.pow(10, Math.min(Gx.ymin, Gx.ymax) / dbscale);\n            }\n        }\n\n        Mx.level = 0;\n        if (imode && !Gx.index) {\n            if (havexmin) {\n                Gx.xmin = Gx.xstart + Gx.xdelta * (Gx.xmin - 1.0);\n            }\n            if (havexmin) {\n                Gx.xmax = Gx.xstart + Gx.xdelta * (Gx.xmax - 1.0);\n            }\n        }\n        Gx.xmult = o.xmult;\n        Gx.ymult = o.xmult;\n\n        //Convert string inputs of autox to numbers\n        switch (o.autox) {\n            case \"none\":\n                o.autox = -1;\n                break;\n            case \"min\":\n                o.autox = 1;\n                break;\n            case \"max\":\n                o.autox = 2;\n                break;\n            case \"full\":\n                o.autox = 3;\n                break;\n        }\n\n        Gx.autox = o.autox === undefined ? -1 : o.autox;\n        if (Gx.autox < 0) {\n            Gx.autox = 0;\n            if (!havexmin) {\n                Gx.autox += 1;\n            }\n            if (!havexmax) {\n                Gx.autox += 2;\n            }\n        }\n\n        //Convert string inputs of autoy to numbers\n\n        switch (o.autoy) {\n            case \"none\":\n                o.autoy = -1;\n                break;\n            case \"min\":\n                o.autoy = 1;\n                break;\n            case \"max\":\n                o.autoy = 2;\n                break;\n            case \"full\":\n                o.autoy = 3;\n                break;\n        }\n\n        Gx.autoy = o.autoy === undefined ? -1 : o.autoy;\n        if (Gx.autoy < 0) {\n            Gx.autoy = 0;\n            if (!haveymin) {\n                Gx.autoy += 1;\n            }\n            if (!haveymax) {\n                Gx.autoy += 2;\n            }\n        }\n\n        //Convert string inputs of autoz to numbers\n\n        switch (o.autoz) {\n            case \"none\":\n                o.autoz = -1;\n                break;\n            case \"min\":\n                o.autoz = 1;\n                break;\n            case \"max\":\n                o.autoz = 2;\n                break;\n            case \"full\":\n                o.autoz = 3;\n                break;\n        }\n\n        Gx.autoz = o.autoz === undefined ? -1 : o.autoz;\n        if (Gx.autoz < 0) {\n            Gx.autoz = 0;\n            if (!havezmin) {\n                Gx.autoz += 1;\n            }\n            if (!havezmax) {\n                Gx.autoz += 2;\n            }\n        }\n        Gx.autol = o.autol === undefined ? -1 : o.autol;\n\n        if (!havexmin) {\n            Gx.xmin = undefined;\n        }\n        if (!havexmax) {\n            Gx.xmax = undefined;\n        }\n\n        scale_base(plot, {\n            get_data: true\n        }, Gx.xmin, Gx.xmax, Gx.xlab, Gx.ylab);\n\n        if (!havexmin) {\n            Gx.xmin = Mx.stk[0].xmin;\n        }\n        if (!havexmax) {\n            Gx.xmax = Mx.stk[0].xmax;\n        }\n        if (!haveymin) {\n            Gx.ymin = Mx.stk[0].ymin;\n        }\n        if (!haveymax) {\n            Gx.ymax = Mx.stk[0].ymax;\n        }\n\n        if (Gx.xmin > Gx.xmax) {\n            Mx.stk[0].xmin = Gx.xmax;\n            Gx.xmax = Gx.xmin;\n            Gx.xmin = Mx.stk[0].xmin;\n        }\n        if (Gx.ymin > Gx.ymax) {\n            Mx.stk[0].ymin = Gx.ymax;\n            Gx.ymax = Gx.ymin;\n            Gx.ymin = Mx.stk[0].ymin;\n        }\n        Mx.stk[0].xmin = Gx.xmin;\n        Mx.stk[0].xmax = Gx.xmax;\n        Mx.stk[0].ymin = Gx.ymin;\n        Mx.stk[0].ymax = Gx.ymax;\n\n        Gx.panxmin = Math.min(Gx.panxmin, Gx.xmin);\n        Gx.panxmax = Math.max(Gx.panxmax, Gx.xmax);\n        Gx.panymin = Math.min(Gx.panymin, Gx.ymin);\n        Gx.panymax = Math.max(Gx.panymax, Gx.ymax);\n\n        Gx.panxpad = o.panxpad;\n        Gx.panypad = o.panypad;\n\n        var xran = (Gx.panxmax - Gx.panxmin);\n        var yran = (Gx.panymax - Gx.panymin);\n\n        Gx.panxmin -= m.pad(xran, Gx.panxpad);\n        Gx.panxmax += m.pad(xran, Gx.panxpad);\n        Gx.panymin -= m.pad(yran, Gx.panypad);\n        Gx.panymax += m.pad(yran, Gx.panypad);\n\n        Gx.xmin = Mx.stk[0].xmin;\n        Gx.ymin = Mx.stk[0].ymin;\n\n        if (o.font_family) {\n            Mx.font_family = o.font_family;\n        }\n        if (o.font_width) {\n            Mx.font_width = o.font_width;\n        }\n        if (o.font_scaled) {\n            Mx.font_scaled = true;\n        }\n\n        var font_width = Mx.font_width;\n        if (Mx.font_scaled) {\n            font_width = Math.min(Mx.font_width, Mx.width / 64);\n        }\n        mx.set_font(Mx, font_width);\n\n        Gx.ncolors = o.ncolors === undefined ? 500 : o.ncolors;\n        Gx.cmap = null;\n        if (o.cmap) {\n            Gx.cmap = o.cmap;\n        } else {\n            Gx.cmap = o.xc === undefined ? -1 : o.xc;\n        }\n\n        setup_cmap(plot, Gx.cmap);\n\n        // TODO setup annotate, boxes and points facilities\n\n        // TODO initialize layer structure line types\n\n        if (o.xcnt === \"leftmouse\") {\n            Gx.cntrls = 1;\n        } else if (o.xcnt === \"continuous\") {\n            Gx.cntrls = 2;\n        } else {\n            Gx.cntrls = o.xcnt === undefined ? 1 : o.xcnt;\n        }\n\n        Gx.default_rubberbox_mode = o.rubberbox_mode === undefined ? \"box\" : o.rubberbox_mode;\n        Gx.default_rubberbox_action = o.rubberbox_action === undefined ? \"zoom\" : o.rubberbox_action;\n        Gx.default_rightclick_rubberbox_mode = o.rightclick_rubberbox_mode === undefined ? \"box\" : o.rightclick_rubberbox_mode;\n        Gx.default_rightclick_rubberbox_action = o.rightclick_rubberbox_action === undefined ? null : o.rightclick_rubberbox_action;\n\n        Gx.cross = o.cross === undefined ? false : o.cross;\n        Gx.grid = o.nogrid === undefined ? true : !o.nogrid;\n        Gx.fillStyle = o.fillStyle;\n        Gx.gridBackground = o.gridBackground;\n        Gx.gridStyle = o.gridStyle;\n        Gx.wheelZoom = o.wheelZoom;\n        Gx.wheelZoomPercent = o.wheelZoomPercent;\n        Gx.legend = o.legend === undefined ? false : o.legend;\n        Gx.no_legend_button = o.no_legend_button === undefined ? false : o.no_legend_button;\n        Gx.legendBtnLocation = null;\n        Gx.pan = o.nopan === undefined ? true : !o.nopan;\n        Gx.nomenu = o.nomenu === undefined ? false : o.nomenu;\n\n        // TODO Gx.lmap.ip = 0\n        Gx.modmode = 0;\n        Gx.modlayer = -1; // 0-based indexing instead of 1\n        Gx.modsource = 0;\n        Gx.modified = (o.mod && Gx.lyr.length > 0);\n        // TODO Gx.marks(5) = 5\n        Gx.nmark = 0;\n        Gx.iabsc = 0;\n        if (Gx.index) {\n            Gx.iabsc = 1;\n        }\n        // TODO if (o.specs > 0) Gx.iabsc = M$SEARCH('IRS',c(1:1))\n        Gx.specs = !o.nospecs;\n\n        Gx.scroll_time_interval = o.scroll_time_interval === undefined ? Gx.scroll_time_interval : o.scroll_time_interval;\n\n        Gx.autohide_readout = o.autohide_readout;\n        Gx.autohide_panbars = o.autohide_panbars;\n        Gx.x_scrollbar_location = o.x_scrollbar_location;\n        if (Gx.specs) {\n            Gx.show_x_axis = !o.noxaxis;\n            Gx.show_y_axis = !o.noyaxis;\n            Gx.show_readout = !o.noreadout;\n            if (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout) {\n                Gx.specs = true;\n            } else {\n                Gx.specs = false;\n            }\n        } else {\n            Gx.show_x_axis = false;\n            Gx.show_y_axis = false;\n            Gx.show_readout = false;\n        }\n        Gx.hide_note = o.hide_note || false;\n\n        Gx.xmrk = 0.0;\n        Gx.ymrk = 0.0;\n\n        if (!o.nodragdrop) {\n            mx.addEventListener(Mx, \"dragover\", function(evt) {\n                evt.preventDefault();\n            }, false);\n\n            mx.addEventListener(Mx, \"drop\", (function(plot) {\n                return function(evt) {\n                    var files = evt.dataTransfer.files;\n                    if (files.length > 0) {\n                        evt.preventDefault();\n                        plot.load_files(files);\n                    }\n                };\n            }(plot)), false);\n        }\n\n        Gx.initialized = true;\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function basefile(plot, open) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        // != BASEFILE(false)\n\n        // unlike SIGPLOT, where if Gx.index == 1\n        // then xstart = 1.0 and xdelta = 1.0...technically\n        // Gx.retx is supposed to be the real X coordinate\n        // and Gx.aretx is supposed to be the X coordinate in the\n        // current abscissa mode\n        if (open) {\n            var hcb = Gx.HCB[0];\n            Gx.xstart = hcb.xstart;\n            Gx.xdelta = hcb.xdelta;\n            Mx.origin = 1;\n        } else {\n            Gx.xstart = 0.0;\n            Gx.xdelta = 1.0;\n            Gx.autol = -1;\n            Mx.origin = 1;\n        }\n\n        // if (!open) {\n        // Gx.lay[0].cx = false;\n        // }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_accessories(plot, mode) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n        if (mode > 0) {\n            if ((mode >= 4) && (Gx.show_readout) && (!Gx.hide_note)) {\n                var ln = Gx.note.length;\n                mx.text(Mx, Mx.width - Gx.lbtn - (ln + 1) * Mx.text_w,\n                    Mx.text_h, Gx.note);\n            }\n            if (mode >= 4) {\n                draw_panbars(plot);\n            }\n            if ((mode >= 1) && (Gx.legend)) {\n                draw_legend(plot);\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_plugins(plot) {\n        var Gx = plot._Gx;\n        var ctx = plot._Mx.canvas.getContext(\"2d\");\n        var canvas;\n\n        var plugin_index = 0;\n        while (plugin_index < Gx.plugins.length) {\n            var plugin = Gx.plugins[plugin_index].impl;\n            if (plugin.refresh) {\n                canvas = Gx.plugins[plugin_index].canvas;\n\n                // Ensure the plugin canvas has the same size as the plot\n                if (canvas.width !== plot._Mx.canvas.width) {\n                    canvas.width = plot._Mx.canvas.width;\n                }\n                if (canvas.height !== plot._Mx.canvas.height) {\n                    canvas.height = plot._Mx.canvas.height;\n                }\n\n                // If the plugin canvas is visible, draw it\n                if (canvas.height !== 0 && canvas.width !== 0) {\n                    if (canvas.width !== plot._Mx.canvas.width) {\n                        canvas.width = plot._Mx.canvas.width;\n                    }\n                    if (canvas.height !== plot._Mx.canvas.height) {\n                        canvas.height = plot._Mx.canvas.height;\n                    }\n                    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n                    Gx.plugins[plugin_index].impl.refresh(canvas);\n                    ctx.drawImage(canvas, 0, 0);\n                }\n            }\n            plugin_index = plugin_index + 1;\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_legend(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n        //Gx.always_show_marker = true;\n        var ctx = Mx.canvas.getContext(\"2d\");\n\n        var i = 0;\n        var n = 0; // integer*4\n        var ix = 0; // integer*4\n        var iy = 0; // integer*4\n        var ln = 0; // integer*4\n        var tw = 0; // integer*4\n        var xc = 0; // integer*4\n        var yc = 0; // integer*4\n        var xs = 0; // integer*4\n        var ys = 0; // integer*4\n        var thk = 0; // integer*4\n        var ic = 0; // integer*4\n\n        tw = Mx.text_w;\n        xs = tw * 23;\n        ys = (Gx.lyr.length + 1) * Mx.text_h;\n        xc = Mx.r - xs;\n        yc = Mx.t;\n\n        var legendPos = {\n            x: xc + 2,\n            y: yc + 2,\n            width: xs - 5,\n            height: ys - 5\n        }; // default legend size\n\n        // Determine legend position and label offset based on label sizes\n        var defLabelWidth = 98; // a magic number - default width of pixels\n        var maxLabelWidth = 0;\n        var labelOffset = 0;\n        for (n = 0; n < Gx.lyr.length; n++) { // figure out maximum label\n            // length\n            var labelLength = ctx.measureText(Gx.lyr[n].name).width;\n            if (labelLength > maxLabelWidth) {\n                maxLabelWidth = labelLength;\n            }\n        }\n        if (maxLabelWidth > defLabelWidth) {\n            labelOffset = (maxLabelWidth - defLabelWidth);\n            legendPos.width += labelOffset;\n            legendPos.x -= labelOffset;\n        }\n\n        ctx.strokeStyle = Mx.fg; // Mx.xwfg swapped in for FGColor\n        ctx.fillStyle = Mx.bg;\n        ctx.fillRect(legendPos.x, legendPos.y, legendPos.width,\n            legendPos.height); // Creating a filled box instead of using\n        // clear_area\n        ctx.strokeRect(legendPos.x, legendPos.y, legendPos.width,\n            legendPos.height);\n\n        for (n = 0; n < Gx.lyr.length; n++) {\n            ix = xc + 4 * tw;\n            iy = yc + n * Mx.text_h + Mx.text_h; // additional text_h to\n            // account for 0-based\n            // indexing\n            if (n === Gx.modlayer) {\n                mx.text(Mx, xc + tw - labelOffset, iy + Math.floor(Mx.text_w / 2), '**'); // Added text_w/2\n                // offset\n            }\n            if (Gx.lyr[n].display) {\n                ic = Gx.lyr[n].color;\n                if (Gx.lyr[n].line > 0) {\n                    thk = m.sign(Math.min(tw, Math.abs(Gx.lyr[n].thick)),\n                        Gx.lyr[n].thick);\n                    // added magic -3 offset to y coordinates to center lines\n                    // with text\n                    if (thk < 0 || thk === mx.L_dashed) {\n                        mx.draw_line(Mx, ic, ix - labelOffset, iy - 3, (ix + tw * 2) - labelOffset, iy - 3, Math.abs(thk), {\n                            mode: \"dashed\",\n                            on: 4,\n                            off: 4\n                        });\n                    } else {\n                        mx.draw_line(Mx, ic, ix - labelOffset, iy - 3, (ix + tw * 2) - labelOffset, iy - 3, Math.abs(thk));\n                    }\n                }\n                if (Gx.lyr[n].symbol > 0) {\n                    // New logic here with 0.6*tw to help with legend symbol\n                    // sizing\n                    if (Gx.lyr[n].radius < 0) {\n                        thk = -m.trunc(0.6 * tw);\n                    } else {\n                        thk = Math.min(Gx.lyr[n].radius, m.trunc(0.6 * tw));\n                    }\n\n                    mx.draw_symbol(Mx, ic, ix + tw - labelOffset, iy - 3,\n                        Gx.lyr[n].symbol, thk);\n                }\n                if (Gx.lyr[n].hcb[\"class\"] === 2) {\n                    //draw colormap\n                    mx.legend_colorbar(Mx, legendPos.x + 10, legendPos.y + (legendPos.height / 4),\n                        (legendPos.width / 4) - 10, legendPos.height / 2);\n                }\n            }\n            ix = ix + tw * 3;\n            iy = iy + Mx.text_h * 0.3;\n            mx.text(Mx, ix - labelOffset, iy, Gx.lyr[n].name);\n        }\n        // a variable to hold the legend y positon of each layer\n        var layerheight = legendPos.height / Gx.lyr.length;\n\n        for (i = 0; i < Gx.lyr.length; i++) {\n            if ((legendPos.x <= Mx.xpos) && ((legendPos.x + legendPos.width) >= Mx.xpos) &&\n                ((legendPos.y <= Mx.ypos)) && (legendPos.y + layerheight) >= Mx.ypos) {\n                //find a way to pull up the menu\n                sigplot_legend_menu(plot, i);\n            }\n            legendPos.y += layerheight;\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function form_plotnote(plot) {\n        var Gx = plot._Gx;\n        if (Gx.HCB.length === 0) {\n            Gx.note = \"\";\n        } else if (Gx.HCB[0].plotnote === undefined) {\n            var files = [];\n            for (var n = 0; n < Gx.HCB.length; n++) {\n                if (Gx.HCB[n].file_name) {\n                    files.push(Gx.HCB[n].file_name);\n                }\n            }\n            Gx.note = files.join(\"|\").toUpperCase();\n        }\n    }\n\n    function draw_pcut_x(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((Gx.zmin === undefined) || (Gx.zmax === undefined)) {\n            return;\n        }\n\n        //fill variables to draw x-cut box along bottom\n        // one-pixel lines need to be draw on half-pixel boundaries\n        var plot_width = Mx.r - Mx.l;\n        Gx.x_box_x = Math.floor(Mx.l - 2) + 0.5;\n        Gx.x_box_y = Math.floor(Mx.b + 25) + 0.5;\n        Gx.x_box_w = Math.floor(plot_width + 4);\n        Gx.x_box_h = Math.floor((5 * Mx.text_h) + 20);\n\n        mx.draw_box(Mx, Mx.fg, Gx.x_box_x, Gx.x_box_y, Gx.x_box_w, Gx.x_box_h, 1, Mx.bg);\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = Mx.fg;\n\n        var x = null;\n        var y = null;\n        for (var ii = 0; ii < plot._Gx.x_cut_data.length; ii++) {\n            var z = plot._Gx.x_cut_data[ii]; // the real z-value\n            // constrain to bounds\n            z = Math.min(Math.max(z, Gx.zmin), Gx.zmax);\n            var zrt = plot._Gx.x_box_h / (Gx.zmax - Gx.zmin); // the z-value to pixel ratio\n            var zpx = Math.round((z - Gx.zmin) * zrt);\n\n            var xrt = plot._Gx.x_box_w / plot._Gx.x_cut_data.length;\n            var xpx = Math.round(ii * xrt);\n\n            var xnew = plot._Gx.x_box_x + xpx;\n            var ynew = (plot._Gx.x_box_y + plot._Gx.x_box_h - zpx);\n\n            if (ii === 0) {\n                ctx.moveTo(xnew, ynew);\n            } else if ((xnew !== x) || (ynew !== y)) {\n                // only draw the line if we are moving to a new point\n                ctx.lineTo(xnew, ynew);\n                x = xnew;\n                y = ynew;\n            }\n        }\n        ctx.stroke();\n    }\n\n    function draw_pcut_y(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((Gx.zmin === undefined) || (Gx.zmax === undefined)) {\n            return;\n        }\n\n        var plot_height = Mx.b - Mx.t;\n\n        //fill variables to draw y-cut box along right sidea\n        // one-pixel lines need to be draw on half-pixel boundaries\n        Gx.y_box_x = Math.floor(Mx.r + 25) + 0.5;\n        Gx.y_box_y = Math.floor(Mx.t - 2) + 0.5;\n        Gx.y_box_w = Math.floor((5 * Mx.text_w) + 20);\n        Gx.y_box_h = Math.floor(plot_height + 2);\n\n        if (Gx.lg_colorbar) { //move over box if large colorbar displayed\n            Gx.y_box_x += 100;\n        }\n\n        //draw y-cut box\n        mx.draw_box(Mx, Mx.fg, Gx.y_box_x, Gx.y_box_y, Gx.y_box_w, Gx.y_box_h, 1, Mx.bg);\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = Mx.fg;\n\n        var x = null;\n        var y = null;\n        for (var ii = 0; ii < plot._Gx.y_cut_data.length; ii++) {\n            var z = plot._Gx.y_cut_data[ii]; // the real z-value\n            // constrain to bounds\n            z = Math.min(Math.max(z, Gx.zmin), Gx.zmax);\n            var zrt = plot._Gx.y_box_w / (Gx.zmax - Gx.zmin); // the z-value to pixel ratio\n            var zpx = Math.round((z - Gx.zmin) * zrt);\n\n            var yrt = plot._Gx.y_box_h / plot._Gx.y_cut_data.length;\n            var ypx = Math.round(ii * yrt);\n\n            var xnew = (plot._Gx.y_box_x + zpx);\n            var ynew = plot._Gx.y_box_y + ypx;\n\n            if (ii === 0) {\n                ctx.moveTo(xnew, ynew);\n            } else if ((xnew !== x) || (ynew !== y)) {\n                // only draw the line if we are moving to a new point\n                ctx.lineTo(xnew, ynew);\n                x = xnew;\n                y = ynew;\n            }\n        }\n        ctx.stroke();\n    }\n\n    function draw_layers(plot) {\n        var layers = plot._Gx.lyr;\n        for (var n = 0; n < layers.length; n++) {\n            //if (Gx.sections !== 0) {\n            // TODO\n            //}\n            draw_layer(plot, layers[n]);\n        }\n    }\n\n    /**\n     * Draws the specified layer.\n     *\n     * This is expected to be called after clearing the plot.\n     *\n     * @param {sigplot.Plot}\n     *            the plot object\n     * @param {Number}\n     *            the layer to draw\n     * @private\n     * @memberOf sigplot\n     */\n    function draw_layer(plot, layer) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((!layer.display) || (Gx.hold !== 0)) {\n            return;\n        }\n\n        layer.draw();\n\n        // TODO consider if this is a source of performance\n        // issues on streaming plots\n        var evt = document.createEvent('Event');\n        evt.initEvent('lyrdraw', true, true);\n        evt.index = layer.index;\n        evt.name = layer.name; // the name of the layer\n        evt.layer = layer;\n        mx.dispatchEvent(Mx, evt);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function delete_layer(plot, n) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        //if (n < Gx.modlayer) Gx.modlayer = Gx.modlayer - 1;\n        //if (n < Gx.modsource) Gx.modsource = Gx.modsource - 1;\n\n        // Notify listeners that a layer is about to be deleted\n        var evt = document.createEvent('Event');\n        evt.initEvent('lyrdel', true, true);\n        evt.index = n;\n        evt.name = Gx.lyr[n].name; // the name of the layer\n        evt.layer = Gx.lyr[n];\n        var executeDefault = mx.dispatchEvent(Mx, evt);\n        if (!executeDefault) {\n            return; // Delete was prevented\n        }\n\n        Gx.lyr[n].ybufn = 0;\n        Gx.lyr[n].ybuf = null;\n        if (n < Gx.lyr.length - 1) {\n            var lyr = Gx.lyr[n];\n            for (var i = n; i < Gx.lyr.length - 1; i++) {\n                Gx.lyr[i] = Gx.lyr[i + 1];\n            }\n        }\n        Gx.lyr.length -= 1;\n\n        if (Gx.HCB.length > 0) {\n            Gx.panxmin = 1.0;\n            Gx.panxmax = -1.0;\n            Gx.panymin = 1.0;\n            Gx.panymax = -1.0;\n        }\n    }\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n\n    function draw_p_cuts(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        if (Gx.lyr[0].hcb[\"class\"] !== 2) {\n            return;\n        }\n\n        var plot_height = Mx.b - Mx.t;\n        var plot_width = Mx.r - Mx.l;\n        var height = Gx.lyr[0].yframe;\n        var width = Gx.lyr[0].xframe;\n\n        if (Gx.p_cuts) {\n            if (!Gx.lyr[0].hcb.pipe) {\n                if (((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r) && (Gx.p_cuts_xpos !== Mx.xpos))) {\n                    var line = 0;\n                    var i = 0;\n\n                    //fill data for y_cut for this mouse xpos\n                    Gx.y_cut_data = [];\n                    line = Math.floor((width * (Mx.xpos - Mx.l)) / plot_width);\n                    for (i = line; i < (width * height); i += width) {\n                        Gx.y_cut_data.push(Gx.lyr[0].zbuf[i]);\n                    }\n                    draw_pcut_y(plot);\n                    Gx.p_cuts_xpos = Mx.xpos;\n                }\n                if (((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b) && (Gx.p_cuts_ypos !== Mx.ypos))) {\n                    var row = 0;\n                    var start = 0;\n                    var finish = 0;\n                    var i = 0;\n\n                    //fill data for x_cut for this mouse ypos\n                    row = Math.floor((height * (Mx.ypos - Mx.t)) / plot_height);\n                    start = row * width;\n                    finish = start + width;\n                    Gx.x_cut_data = Gx.lyr[0].zbuf.slice(start, finish);\n                    draw_pcut_x(plot);\n\n                    Gx.p_cuts_ypos = Mx.ypos;\n                }\n            } else {\n                if ((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r)) {\n                    var line = 0;\n                    var i = 0;\n                    height = Gx.lyr[0].lps;\n                    //fill data for y_cut for this mouse xpos\n                    Gx.y_cut_data = [];\n                    line = Math.floor((width * (Mx.xpos - Mx.l)) / plot_width);\n                    for (i = line; i < (width * height); i += width) {\n                        Gx.y_cut_data.push(Gx.lyr[0].zbuf[i]);\n                    }\n                    draw_pcut_y(plot);\n                }\n\n                if ((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b)) {\n                    var row = 0;\n                    var start = 0;\n                    var finish = 0;\n                    //fill data for x_cut for this mouse ypos\n                    Gx.x_cut_data = [];\n                    row = Math.floor((height * (Mx.ypos - Mx.t)) / plot_height);\n                    start = row * width;\n                    finish = start + width;\n                    Gx.x_cut_data = Gx.lyr[0].zbuf.slice(start, finish);\n                    draw_pcut_x(plot);\n                }\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_crosshairs(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.cross) {\n            if ((Gx.cross === \"vertical\") || (Gx.cross === true)) {\n                if ((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r) && (Gx.cross_xpos !== Mx.xpos)) {\n                    if (Gx.cross_xpos !== undefined) {\n                        mx.rubberline(Mx, Gx.cross_xpos, Mx.t, Gx.cross_xpos, Mx.b);\n                    }\n                    mx.rubberline(Mx, Mx.xpos, Mx.t, Mx.xpos, Mx.b);\n                    Gx.cross_xpos = Mx.xpos;\n                }\n            }\n            if ((Gx.cross === \"horizontal\") || (Gx.cross === true)) {\n                if ((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b) && (Gx.cross_ypos !== Mx.ypos)) {\n                    if (Gx.cross_ypos !== undefined) {\n                        mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r, Gx.cross_ypos);\n                    }\n\n                    mx.rubberline(Mx, Mx.l, Mx.ypos, Mx.r, Mx.ypos);\n                    Gx.cross_ypos = Mx.ypos;\n                }\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_marker(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.xmrk !== null && Gx.ymrk !== null) {\n            var pix = mx.real_to_pixel(Mx, Gx.xmrk, Gx.ymrk);\n            if ((Gx.lyr.length > 0) && (Gx.lyr[0].hcb[\"class\"] === 1)) {\n                if (pix.clipped) {\n                    return;\n                }\n            } else if ((Gx.lyr.length > 0) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                if (pix.clipped_x || !pix.clipped_y) {\n                    return;\n                }\n            }\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            ctx.beginPath();\n            ctx.strokeStyle = Mx.xwfg;\n            ctx.fillStyle = Mx.xwfg;\n            ctx.arc(pix.x, pix.y, 2, 0, 360);\n            ctx.stroke(); // just draw the arc's outline\n\n            // TODO add x/y coord\n            ctx.textBaseline = \"alphabetic\";\n            ctx.textAlign = \"left\";\n            ctx.fillStyle = Mx.fg;\n            ctx.font = Mx.font.font;\n\n            var text = \"x:\" + mx.format_g(Gx.xmrk, 6, 3, true);\n            ctx.fillText(text, pix.x + 5, pix.y - 5);\n            text = \"y:\" + mx.format_g(Gx.ymrk, 6, 3, true);\n            ctx.fillText(text, pix.x + 5, pix.y - 5 + Mx.text_h);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function changephunits(plot, newphunits) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        var newplab = Gx.plab;\n        if (newphunits === 'R') {\n            newplab = 23;\n        } else if (newphunits === 'D') {\n            newplab = 24;\n        }\n        if (newphunits === 'C') {\n            newplab = 25;\n        }\n        if (newplab !== Gx.plab) {\n            var phscale = [Math.PI, 180.0, 0.5];\n            var dscl = phscale[newplab - 23] / phscale[Gx.plab - 23];\n            Gx.plab = newplab;\n            if (Gx.cmode === 2) {\n                for (var i = 0; i <= Mx.level; i++) {\n                    Mx.stk[i].ymin = Mx.stk[i].ymin * dscl;\n                    Mx.stk[i].ymax = Mx.stk[i].ymax * dscl;\n                    Mx.stk[i].yscl = Mx.stk[i].yscl * dscl;\n                }\n\n                Gx.panymin = Gx.panymin * dscl;\n                Gx.panymax = Gx.panymax * dscl;\n                plot.refresh();\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function changemode(plot, newmode) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        Gx.xdata = false;\n        for (var n = 0; n < Gx.lyr.length; n++) {\n            if (newmode === 5) {\n                Gx.lyr[n].xdata = true;\n            } else {\n                Gx.lyr[n].xdata = false; // TODO (Gx.lyr(n).xsub > 0)\n            }\n            if (Gx.lyr[n].xdata) {\n                Gx.xdata = true;\n            }\n        }\n\n        if (newmode === Gx.cmode) {\n            return;\n        } else if (newmode === 5 && Gx.index) {\n            alert(\"Imag/Real mode not permitted in INDEX mode\");\n        } else if (Gx.lyr.length <= 0) {\n            Gx.cmode = newmode;\n            // The call to display specs isn't found in sigplot.for;\n            // which causes a small bug where the plot mode is\n            // changed but the mode label in the specs area\n            // isn't updated.\n            display_specs(plot);\n        } else if (newmode > 0) {\n            var oldmode = Gx.cmode;\n            Gx.cmode = newmode;\n\n            var autox = Gx.autox;\n            var autoy = Gx.autoy;\n            Gx.autox = 3;\n            Gx.autoy = 3;\n\n            if ((newmode === 5) || (oldmode === 5)) {\n                Gx.panxmin = 1.0;\n                Gx.panxmax = -1.0;\n                Gx.panymin = 1.0;\n                Gx.panymax = -1.0;\n                Mx.level = 0;\n\n                if (newmode === Gx.basemode) {\n                    Mx.stk[0].xmin = Gx.xmin;\n                    Mx.stk[0].xmax = Gx.xmax;\n                    Mx.stk[0].ymin = Gx.ymin;\n                    Mx.stk[0].ymax = Gx.ymax;\n                } else if ((newmode === 5) || (Gx.basemode === 5)) {\n                    scale_base(plot, {\n                        get_data: true\n                    });\n                } else {\n                    Mx.stk[0].xmin = Gx.xmin;\n                    Mx.stk[0].xmax = Gx.xmax;\n                    scale_base(plot, {\n                        get_data: true\n                    }, Gx.xmin, Gx.xmax);\n                }\n            } else {\n                if ((Gx.HCB.length === 0) && (newmode === Gx.basemode)) {\n                    Gx.panymin = 1.0;\n                    Gx.panymax = -1.0;\n                    Mx.stk[0].ymin = Gx.ymin;\n                    Mx.stk[0].ymax = Gx.ymax;\n                } else {\n                    scale_base(plot, {}, Mx.stk[Mx.level].xmin,\n                        Mx.stk[Mx.level].xmax);\n                }\n                for (var n = 1; n <= Mx.level; n++) {\n                    Mx.stk[n].ymin = Mx.stk[0].ymin;\n                    Mx.stk[n].ymax = Mx.stk[0].ymax;\n                }\n            }\n            Gx.autox = autox;\n            Gx.autoy = autoy;\n            plot.refresh();\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_panbars(plot) {\n        var k; // integer*4\n        //var i1; // integer*4\n        //var itext; // integer*4\n\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((!Gx.pan) || (Mx.widget)) {\n            return;\n        }\n\n        k = Mx.level; // Y scrollbar\n\n        var out = {\n            ps: Mx.stk[k].ymin,\n            pe: Mx.stk[k].ymax\n        };\n        var need_y_scrollbar = ((out.ps !== Gx.panymin) || (out.pe !== Gx.panymax));\n        need_y_scrollbar = need_y_scrollbar && (Mx.level > 0);\n\n        if (Gx.autohide_panbars && (!need_y_scrollbar || !plot.mouseOnCanvas) && !Gx.panning) {\n            var ctx = Mx.canvas.getContext(\"2d\");\n            ctx.fillStyle = Mx.bg;\n            ctx.fillRect(Gx.pyl, Mx.t, Gx.pyl + Gx.pthk, Mx.b - Mx.t);\n        } else {\n            var i1 = mx.scrollbar(Mx, 0, Gx.pyl, Gx.pyl + Gx.pthk, Mx.t, Mx.b, out,\n                Gx.panymin, Gx.panymax, undefined, Mx.scrollbar_y);\n            Mx.stk[k].ymin = out.ps;\n            Mx.stk[k].ymax = out.pe;\n        }\n\n        if (Gx.pl < Mx.width) { // X scrollbar\n            out = {\n                ps: Mx.stk[k].xmin,\n                pe: Mx.stk[k].xmax\n            };\n            var need_x_scrollbar = ((out.ps !== Gx.panxmin) || (out.pe !== Gx.panxmax));\n            need_x_scrollbar = need_x_scrollbar && (!Gx.all || (Mx.level > 0));\n\n            if (Gx.autohide_panbars && (!need_x_scrollbar || !plot.mouseOnCanvas) && !Gx.panning) {\n                var ctx = Mx.canvas.getContext(\"2d\");\n                ctx.fillStyle = Mx.bg;\n                ctx.fillRect(Gx.pl, Gx.pt - 1, Gx.pr - Gx.pl, Gx.pthk + 4);\n            } else {\n                var i1 = mx.scrollbar(Mx, 0, Gx.pl, Gx.pr, Gx.pt, Gx.pt + Gx.pthk, out,\n                    Gx.panxmin, Gx.panxmax, undefined, Mx.scrollbar_x);\n                Mx.stk[k].xmin = out.ps;\n                Mx.stk[k].xmax = out.pe;\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function pan(plot, action, flag, mouseEvent) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var i; // an integer*4\n        var k; // an integer*4\n        // var ih // an integer*4\n        // var iw; // an integer*4\n        // var imin; // an integer*4\n        // var imax; // an integer*4\n        var j; // an integer*4\n        var xmin; // a real*8\n        var xmax; // a real*8\n        var xran; // a real*8\n        // var xtemp; // a real*8\n        var ymin; // a real*8\n        var ymax; // a real*8\n        var yran; // a real*8\n        // var ytemp; // a real*8\n        var warn; // a logical*4\n\n        var scrollbarState;\n\n        var sbx = new mx.SCROLLBAR(); // a SCROLLBAR\n        var sby = new mx.SCROLLBAR(); // a SCROLLBAR\n\n        var SIGPLOT_PAN = false;\n        k = Mx.level;\n        if (Gx.panmode > 0) {\n            sbx.flag = 11;\n            sby.flag = 11;\n        } else {\n            sbx.flag = -12;\n            sby.flag = -12;\n        }\n        if (flag === 0) {\n            sbx.action = 0;\n            sby.action = 0;\n        }\n\n        warn = true;\n        if (action.substring(0, 1) === 'Y') {\n            ymin = Mx.stk[k].ymin;\n            ymax = Mx.stk[k].ymax;\n            yran = ymax - ymin;\n            if (action === 'YPAN') {\n                scrollbarState = Mx.scrollbar_y;\n\n                var out = {\n                    ps: ymin,\n                    pe: ymax\n                };\n                i = mx\n                    .scrollbar(Mx, sby, Gx.pyl, Gx.pyl + Gx.pthk, Mx.t,\n                        Mx.b, out, Gx.panymin, Gx.panymax, mouseEvent,\n                        scrollbarState);\n                ymin = out.ps;\n                ymax = out.pe;\n                // TODO: Warn only if Scrollbar arrow is pressed and no\n                // movement.\n                if (sby.action !== 0) {\n                    j = mx.scroll(Mx, sby, mx.XW_UPDATE, undefined,\n                        scrollbarState);\n                }\n                warn = false;\n            } else if (action === 'YCENTER') {\n                // Orig code : ymin = ymin - yran * (Mx.ypos - (Mx.t + Mx.b) /\n                // 2) / (Mx.b - Mx.t) // TODO Worry about any int division here?\n                ymin = ymin - yran * (Mx.ypos - (Mx.t + Mx.b) / 2) / (Mx.b - Mx.t);\n                ymax = ymin + yran;\n                warn = false;\n            }\n\n            if (ymin !== Mx.stk[k].ymin || ymax !== Mx.stk[k].ymax) {\n                Mx.stk[k].ymin = ymin;\n                Mx.stk[k].ymax = ymax;\n                if (Gx.cmode === Gx.basemode && Mx.level === 1) {\n                    Gx.ymin = Math.min(Gx.ymin, ymin);\n                    Gx.ymax = Math.max(Gx.ymax, ymax);\n                }\n\n                this.inPan = true; // prevent recursive pans\n                var evt = document.createEvent('Event');\n                evt.initEvent('ypan', true, true);\n                evt.level = Mx.level;\n                evt.xmin = Mx.stk[Mx.level].xmin;\n                evt.ymin = Mx.stk[Mx.level].ymin;\n                evt.xmax = Mx.stk[Mx.level].xmax;\n                evt.ymax = Mx.stk[Mx.level].ymax;\n                mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n                this.inPan = false;\n\n                plot.refresh();\n                // MSGDO(MSK_PANY, Mx.level); // just sets plotinfo.xmin and\n                // xmax into the MQD for the menu\n                SIGPLOT_PAN = true;\n            }\n            // TODO Later - Implement a messagebox status method\n            // else if (warn) {\n            // mx.message('All panned out', -1.0);\n            // }\n        } else {\n            xmin = Mx.stk[k].xmin;\n            xmax = Mx.stk[k].xmax;\n            xran = xmax - xmin;\n            if (action === 'XPAN') {\n                scrollbarState = Mx.scrollbar_x;\n\n                var out = {\n                    ps: xmin,\n                    pe: xmax\n                };\n                i = mx\n                    .scrollbar(Mx, sbx, Gx.pl, Gx.pr, Gx.pt, Gx.pt + Gx.pthk, out, Gx.panxmin, Gx.panxmax,\n                        mouseEvent, scrollbarState);\n                xmin = out.ps;\n                xmax = out.pe;\n                // TODO: Warn only if Scrollbox arrow is pressed and no\n                // movement.\n                if (sbx.action !== 0) {\n                    j = mx.scroll(Mx, sbx, mx.XW_UPDATE, undefined,\n                        scrollbarState);\n                }\n                warn = false;\n            } else if (action === 'XCENTER') {\n                // Original code : xmin = xmin + xran * (Mx.xpos - (Mx.l + Gx.r)\n                // / 2) / (Mx.r - Mx.l) // TODO Worry about any int division\n                // here?\n                xmin = xmin + xran * (Mx.xpos - (Mx.l + Mx.r) / 2) / (Mx.r - Mx.l);\n                if (xmin !== Mx.stk[k].xmin) {\n                    xmax = xmin + xran;\n                }\n                warn = false;\n            }\n\n            if (Mx.stk[k].xmin !== xmin || Mx.stk[k].xmax !== xmax) {\n                Mx.stk[k].xmin = xmin;\n                Mx.stk[k].xmax = xmax;\n                if (!Gx.xdata && Mx.level === 1) {\n                    Gx.xmin = Mx.stk[1].xmin;\n                    Gx.xmax = Mx.stk[1].xmax;\n                }\n\n                this.inPan = true; // prevent recursive pans\n                var evt = document.createEvent('Event');\n                evt.initEvent('xpan', true, true);\n                evt.level = Mx.level;\n                evt.xmin = Mx.stk[Mx.level].xmin;\n                evt.ymin = Mx.stk[Mx.level].ymin;\n                evt.xmax = Mx.stk[Mx.level].xmax;\n                evt.ymax = Mx.stk[Mx.level].ymax;\n                mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n                this.inPan = false;\n\n                plot.refresh();\n                // MSGDO (MSK_PANX, Mx.level); // just sets plotinfo.xmin and\n                // xmax into the MQD for the menu\n                SIGPLOT_PAN = true;\n            }\n            // TODO Later - Implement a messagebox status method\n            // else if (warn) {\n            // mx.message('All panned out', -1.0);\n            // }\n        }\n\n        return SIGPLOT_PAN;\n    }\n\n    /**\n     * Direct method to handle the dragging of a scrollbar.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param scrollAction\n     *            The scroll action being performed. Either \"YPAN\" or \"XPAN\" are\n     *            accepted.\n     * @param event\n     *            The mouse move event.\n     * @private\n     * @memberOf sigplot\n     */\n    function drag_scrollbar(plot, scrollAction, event) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n        var min;\n        var max;\n\n        // ----- Retrieve appropriate SCROLLBAR -----\n        var scrollbar;\n        if (scrollAction === \"XPAN\") {\n            scrollbar = plot._Mx.scrollbar_x;\n        } else if (scrollAction === \"YPAN\") {\n            scrollbar = plot._Mx.scrollbar_y;\n        } else {\n            throw \"Unable to drag scrollbar - scrollAction is not 'XPAN' or 'YPAN'!!\";\n        }\n\n        // ----- OLD SIGPLOT.PAN Logic -----\n        scrollbar.flag = -12; // TODO Necessary?\n        var k = Mx.level;\n        if (scrollAction === \"XPAN\") {\n            min = Mx.stk[k].xmin;\n            max = Mx.stk[k].xmax;\n        } else if (scrollAction === \"YPAN\") {\n            min = Mx.stk[k].ymin;\n            max = Mx.stk[k].ymax;\n        } else {\n            min = undefined;\n            max = undefined;\n        }\n\n        // ----- MX.SCROLLBAR Logic -----\n        var rangeOut = {\n            \"min\": min,\n            \"max\": max\n        };\n        drag_updateRange(Mx, Gx, scrollbar, scrollAction, rangeOut, event);\n        min = rangeOut.min;\n        max = rangeOut.max;\n\n        // ----- UPDATE SCROLLBAR -----\n        scrollbar.smin = min;\n        scrollbar.srange = max - min;\n        mx.redrawScrollbar(scrollbar, Mx, undefined);\n\n        // ----- Update the viewbox -----\n        updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange,\n            scrollAction.slice(0, 1));\n\n        this.inPan = true; // prevent recursive pans\n        var evt = document.createEvent('Event');\n        if (scrollAction === \"XPAN\") {\n            evt.initEvent('xpan', true, true);\n        } else if (scrollAction === \"YPAN\") {\n            evt.initEvent('ypan', true, true);\n        }\n        evt.level = Mx.level;\n        evt.xmin = Mx.stk[Mx.level].xmin;\n        evt.ymin = Mx.stk[Mx.level].ymin;\n        evt.xmax = Mx.stk[Mx.level].xmax;\n        evt.ymax = Mx.stk[Mx.level].ymax;\n        mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n        this.inPan = false;\n\n        scrollbar.action = 0; // TODO New step - reset action of the scrollbar\n        // after drag is done...\n        plot.refresh();\n    }\n\n    /**\n     * Method to update plot range based on a drag event. Takes the mouse offset\n     * introduced by the drag and adds a scale factor.\n     *\n     * @param Gx\n     *            The GX Context to work with.\n     * @param scrollbar\n     *            The Scrollbar to use.\n     * @param scrollAction\n     *            The scroll action being performed. Either \"YPAN\" or \"XPAN\" are\n     *            accepted.\n     * @param range\n     *            The plot' min and max range values to update.\n     * @param event\n     *            The mouse move event.\n     *\n     * @private\n     * @memberOf sigplot\n     */\n    function drag_updateRange(Mx, Gx, scrollbar, scrollAction, range, event) {\n        scrollbar.action = mx.SB_DRAG;\n\n        if (scrollAction === \"YPAN\") {\n            var scaleFactor = Mx.scrollbar_y.trange / Mx.scrollbar_y.h;\n            if (scrollbar.origin === 4) { // inverted y\n                scaleFactor *= -1;\n            }\n            var mouseOffset = event.screenY - Gx.panning.ypos;\n            var realOffset = mouseOffset * scaleFactor;\n\n            if ((Gx.panning.ymin - realOffset) < Gx.panymin) { // At the left\n                // edge\n                range.max = Gx.panymin + (range.max - range.min);\n                range.min = Gx.panymin;\n            } else if ((Gx.panning.ymax - realOffset) > Gx.panymax) { // At\n                // the\n                // right\n                // edge\n                range.min = Gx.panymax - (range.max - range.min);\n                range.max = Gx.panymax;\n            } else {\n                range.min = Gx.panning.ymin - realOffset;\n                range.max = Gx.panning.ymax - realOffset;\n            }\n        } else if (scrollAction === \"XPAN\") {\n            var scaleFactor = Mx.scrollbar_x.trange / Mx.scrollbar_x.w;\n            if (scrollbar.origin === 3) { // inverted x\n                scaleFactor *= -1;\n            }\n            var mouseOffset = event.screenX - Gx.panning.xpos;\n            var realOffset = mouseOffset * scaleFactor;\n\n            if ((Gx.panning.xmin + realOffset) < Gx.panxmin) { // At the left\n                // edge\n                range.max = Gx.panxmin + (range.max - range.min);\n                range.min = Gx.panxmin;\n            } else if ((Gx.panning.xmax + realOffset) > Gx.panxmax) { // At\n                // the\n                // right\n                // edge\n                range.min = Gx.panxmax - (range.max - range.min);\n                range.max = Gx.panxmax;\n            } else {\n                range.min = Gx.panning.xmin + realOffset;\n                range.max = Gx.panning.xmax + realOffset;\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function setupPrompt(plot, promptText, isValid, onSuccess, inputValue,\n        xpos, ypos, callback) {\n        var Mx = plot._Mx;\n\n        if (Mx.prompt) {\n            throw \"Prompt already exists! Can only have one prompt at a time!\";\n        }\n\n        // Disable Mx keypress/mouse listeners\n        mx.disableListeners(Mx);\n\n        // Disable Plot keypress/mouse listeners\n        plot.disable_listeners();\n\n        // Add on to the onSuccess method with plot specifics\n        var realOnSuccess = function(plot, onSuccess) {\n            return function(value) {\n                onSuccess(value);\n\n                // Re-enable Mx keypress/mouse listeners\n                mx.enableListeners(Mx);\n\n                // Re-enable Plot keypress/mouse listeners\n                plot.enable_listeners();\n\n                plot.refresh();\n\n                if (callback !== undefined) {\n                    callback();\n                }\n            };\n        };\n\n        var refresh = function() { // TODO Refactor this setup method to be\n            // more like mx.menu/main menu widget?\n            plot.refresh();\n        };\n\n        // Create the prompt\n        var errorMessageTimeout = 5000;\n\n        try {\n            mx.prompt(Mx, promptText, isValid, realOnSuccess(plot, onSuccess),\n                refresh, inputValue, xpos, ypos, errorMessageTimeout);\n        } catch (err) {\n            console.log(\"ERROR: Failed to set up prompt due to: \" + err);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function enable_listeners(plot) {\n        var Mx = plot._Mx;\n        mx.addEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n        mx.addEventListener(Mx, \"mousemove\", plot.throttledOnMouseMove, false);\n        document.addEventListener(\"mouseup\", plot.docMouseUp, false);\n        mx.addEventListener(Mx, \"mouseup\", plot.mouseup, false);\n        window.addEventListener(\"mousedown\", plot.dragMouseDownHandler, false);\n        window.addEventListener(\"mousemove\", plot.throttledDragOnMouseMove, false);\n        window.addEventListener(\"mouseup\", plot.dragMouseUpHandler, false);\n        window.addEventListener(\"wheel\", plot.wheelHandler, false);\n        window.addEventListener(\"mousewheel\", plot.wheelHandler, false);\n        window.addEventListener(\"DOMMouseScroll\", plot.wheelHandler, false);\n        window.addEventListener(\"keypress\", plot.onkeypress, false);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function disable_listeners(plot) {\n        var Mx = plot._Mx;\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n        mx.removeEventListener(Mx, \"mousemove\", plot.throttledOnMouseMove,\n            false);\n        document.removeEventListener(\"mouseup\", plot.docMouseUp, false);\n        mx.removeEventListener(Mx, \"mouseup\", plot.mouseup, false);\n        window.removeEventListener(\"mousedown\", plot.dragMouseDownHandler,\n            false);\n        window.removeEventListener(\"mousemove\", plot.throttledDragOnMouseMove,\n            false);\n        window.removeEventListener(\"mouseup\", plot.dragMouseUpHandler, false);\n        window.removeEventListener(\"wheel\", plot.wheelHandler, false);\n        window.removeEventListener(\"mousewheel\", plot.wheelHandler, false);\n        window.removeEventListener(\"DOMMouseScroll\", plot.wheelHandler, false);\n        window.removeEventListener(\"keypress\", plot.onkeypress, false);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function display_specs(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var ctx = Mx.canvas.getContext(\"2d\");\n\n        // section logic\n        if (Gx.sections !== 0) {\n            // TODO\n        } else {\n            Gx.isec = 0;\n        }\n\n        // transform into realworld coordinates\n        // is already done by the mousemove listener\n        // adjust for abscissa mode\n        if (Mx.warpbox) {\n            var re = pixel_to_real(plot, Mx.warpbox.xo, Mx.warpbox.yo);\n            var rwh = pixel_to_real(plot, Mx.warpbox.xl, Mx.warpbox.yl);\n\n            Gx.aretx = re.x;\n            Gx.arety = re.y;\n            Gx.dretx = rwh.x - re.x;\n            Gx.drety = rwh.y - re.y;\n        } else {\n            Gx.aretx = Gx.retx;\n            Gx.arety = Gx.rety;\n            Gx.dretx = Gx.retx - Gx.xmrk;\n            Gx.drety = Gx.rety - Gx.ymrk;\n        }\n\n        if ((Gx.cmode === 5) && (Gx.iabsc === 1)) {\n            Gx.iabsc = 2;\n        } // R/I mode\n        if (Gx.iabsc === 1) { // index\n            Gx.aretx = Math.round((Gx.aretx - Gx.xstart) / Gx.xdelta);\n            if (!Gx.index) {\n                Gx.aretx += 1;\n            }\n            Gx.dretx = Math.round(Gx.dretx / Gx.xdelta);\n        } else if (Gx.iabsc === 2) { // 1/absc\n            if (Gx.aretx !== 0.0) {\n                Gx.aretx = 1.0 / Gx.aretx;\n            }\n            if (Gx.arety !== 0.0) {\n                Gx.arety = 1.0 / Gx.arety;\n            }\n            if (Gx.dretx !== 0.0) {\n                Gx.dretx = 1.0 / Gx.dretx;\n            }\n            if (Gx.drety !== 0.0) {\n                Gx.drety = 1.0 / Gx.drety;\n            }\n        }\n\n        if ((!Gx.show_readout) || (Mx.widget)) {\n            return;\n        }\n\n        // Clear the specs area\n        // First clear the y-row\n        ctx.fillStyle = Mx.bg;\n        var iy = Math.floor(Mx.height - 2.5 * Mx.text_h);\n        ctx.fillRect(Mx.text_w, iy - 1, 49 * Mx.text_w, iy + 1.5 * Mx.text_h);\n\n        // Then clear the x-row\n        iy = Math.floor(Mx.height - 0.5 * Mx.text_h);\n        var k = Math.max(Gx.pr + Mx.text_w, Mx.width - Mx.text_w * 2);\n        ctx.fillStyle = Mx.bg;\n        ctx.fillRect(k, iy - Mx.text_h, Mx.text_w, Mx.text_h);\n\n        if (Gx.autohide_readout && !plot.mouseOnCanvas && !Gx.panning) {\n            return;\n        }\n\n        var xval, yval, xdelta, ydelta;\n        // TODO handle xfmt/yfmt using m.d2a_form equivalent\n        if ((Gx.iabsc === 0) && (Gx.ylab === 4)) {\n            yval = (m.sec2tspec(Gx.arety) + \"                \").substring(0, 16);\n            ydelta = (m.sec2tspec(Gx.drety, \"delta\") + \"                \").substring(0, 16);\n        } else {\n            yval = mx.format_g(Gx.arety, 16, 9, true);\n            ydelta = mx.format_g(Gx.drety, 16, 9);\n        }\n        if ((Gx.iabsc === 0) && (Gx.xlab === 4)) {\n            xval = (m.sec2tspec(Gx.aretx) + \"                \").substring(0, 16);\n            xdelta = (m.sec2tspec(Gx.dretx, \"delta\") + \"                \").substring(0, 16);\n        } else {\n            xval = mx.format_g(Gx.aretx, 16, 9, true);\n            xdelta = mx.format_g(Gx.dretx, 16, 9);\n        }\n\n        var chara = \"y: \" + yval + \" dy: \" + ydelta + \" L=\" + Mx.level + \" \" + cxm[Gx.cmode - 1];\n        var charb = \"x: \" + xval + \" dx: \" + xdelta + \" \" + cam[Gx.iabsc];\n        if (Gx.iabsc === 3) {\n            if (Gx.dretx === 0.0) {\n                chara = chara.substr(0, 20) + \"sl: Inf             \" + chara.substr(40, chara.length);\n            } else {\n                chara = chara.substr(0, 20) + \"sl: \" + mx.format_g(Gx.drety / Gx.dretx, 16, 9) + chara.substr(40, chara.length);\n            }\n        }\n\n        iy = Math.floor(Mx.height - 1.5 * Mx.text_h);\n        mx.text(Mx, Mx.text_w, iy, chara);\n        iy = Math.floor(Mx.height - 0.5 * Mx.text_h);\n        mx.text(Mx, Mx.text_w, iy, charb);\n\n        if (mx.LEGACY_RENDER) {\n            // display controls indicator\n            if (k < Mx.width) {\n                if (Gx.cntrls > 0) {\n                    mx.text(Mx, k, iy, 'C');\n                } else {\n                    mx.text(Mx, k, iy, ' ');\n                }\n            }\n        }\n\n        // draw color bar - large\n        var x = 0;\n        var y = 0;\n        var w = 0;\n        var h = 0;\n        if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n            var plot_height = Mx.b - Mx.t;\n\n            x = Mx.r + 35;\n            y = Mx.t + (1 / 8) * plot_height;\n            w = 5 * Mx.text_w;\n            h = (3 / 4) * plot_height;\n\n            // If I have a large color bar, I probably also want to add buttons\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            ctx.strokeStyle = \"rgba(124, 123, 121, 0.8)\";\n            ctx.fillStyle = \" rgba(124, 123, 121, 0.8)\";\n\n            // For more precise referencing\n            var colorbar_x = x;\n            var colorbar_y = y;\n            var colorbar_width = w;\n            var colorbar_height = h;\n            var button_width = colorbar_width - 2;\n            var button_height = button_width / 2;\n            var button_x = colorbar_x + ((colorbar_width - button_width) / 2);\n            var button_y = colorbar_y - 10;\n\n            // Draw the top button\n            ctx.beginPath();\n            ctx.moveTo(button_x, button_y);\n            ctx.lineTo(button_x + button_width, button_y);\n            ctx.lineTo(button_x + (1 / 2) * button_width, button_y - button_height);\n            ctx.lineTo(button_x, button_y);\n            ctx.stroke();\n            ctx.fill();\n\n            // Draw the bottom button\n            var button_y_2 = button_y + colorbar_height + 20;\n\n            ctx.beginPath();\n            ctx.moveTo(button_x, button_y_2);\n            ctx.lineTo(button_x + button_width, button_y_2);\n            ctx.lineTo(button_x + (1 / 2) * button_width, button_y_2 + button_height);\n            ctx.lineTo(button_x, button_y_2);\n            ctx.stroke();\n            ctx.fill();\n\n            // Store this info so we can access it later\n\n            Gx.cbb_top_x1 = button_x;\n            Gx.cbb_top_y1 = button_y;\n            Gx.cbb_bot_x1 = button_x;\n            Gx.cbb_bot_y1 = button_y_2;\n            Gx.cbb_width = button_width;\n            Gx.cbb_height = button_height;\n\n        } else { // draw a small colorbar\n            x = (49 * Mx.text_w) - 3;\n            y = Mx.height - Mx.text_h * 2.5;\n            w = Mx.text_w;\n            h = Mx.text_h * 2;\n        }\n\n        mx.colorbar(Mx, x, y, w, h);\n\n        //draw boxes for the p_cuts\n        if (Gx.p_cuts && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n            draw_pcut_y(plot);\n            draw_pcut_x(plot);\n        }\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function scale_base(plot, mode, xxmin, xxmax, xlab, ylab) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var load = (mode.get_data === true);\n\n        Gx.panxmin = 1.0;\n        Gx.panxmax = -1.0;\n        Gx.panymin = 1.0;\n        Gx.panymax = -1.0;\n        var xmin = xxmin;\n        var xmax = xxmax;\n        var noxmin = (xmin === undefined);\n        var noxmax = (xmax === undefined);\n        if (Gx.lyr.length === 0) {\n            Gx.panxmin = -1.0;\n            Gx.panxmax = 1.0;\n            Gx.panymin = -1.0;\n            Gx.panymax = 1.0;\n        } else {\n            if (xlab === undefined) {\n                Gx.xlab = Gx.lyr[0].xlab;\n            }\n            if (ylab === undefined) {\n                Gx.ylab = Gx.lyr[0].ylab;\n            }\n\n            for (var n = 0; n < Gx.lyr.length; n++) {\n                if (Gx.lyr[n].display === false) {\n                    continue;\n                }\n                if (noxmin) {\n                    xmin = Gx.lyr[n].xmin;\n                } else {\n                    xmin = xxmin;\n                }\n\n                if (noxmax) {\n                    xmax = Gx.lyr[n].xmax;\n                } else {\n                    xmax = xxmax;\n                }\n\n                if (Gx.xlab !== Gx.lyr[n].xlab) {\n                    Gx.xlab = 0; // If the layers aren't consistent use None\n                }\n                if (Gx.ylab !== Gx.lyr[n].ylab) {\n                    Gx.ylab = 0; // If the layers aren't consistent use None\n                }\n\n                if (load) {\n                    Gx.lyr[n].get_data(xmin, xmax);\n                }\n\n                if (Gx.autox > 0 || Gx.autoy > 0) {\n                    while (xmin < xmax) {\n                        // get_data fills in the layer xbuf/ybuf with data\n                        Gx.lyr[n].get_data(xmin, xmax);\n\n                        // have the layer prep it's data to be rendered\n                        var npts = Gx.lyr[n].prep(xmin, xmax);\n\n                        // If both All and Expand are provided we\n                        // need to look at the entire file to auto-scale it\n                        if (Gx.all && Gx.expand) {\n                            if (Gx.lyr[n].size === 0) {\n                                xmin = xmax;\n                            } else {\n                                if (Gx.index) {\n                                    xmin = xmin + npts;\n                                } else {\n                                    if (Gx.lyr[n].xdelta >= 0) {\n                                        xmin = xmin + (Gx.lyr[n].size * Gx.lyr[n].xdelta);\n                                    } else {\n                                        xmax = xmax + (Gx.lyr[n].size * Gx.lyr[n].xdelta);\n                                    }\n                                }\n                            }\n                        } else {\n                            xmin = xmax;\n                        }\n                    }\n                } else {\n                    Gx.lyr[n].prep(1.0, -1.0);\n                }\n            }\n        }\n\n        var xran = Gx.panxmax - Gx.panxmin;\n        if (xran < 0.0) {\n            Gx.panxmax = Gx.panxmin;\n            Gx.panxmin = Gx.panxmax + xran;\n            xran = -xran;\n        }\n        if (xran <= 1.0e-20) {\n            Gx.panxmin = Gx.panxmin - 1.0;\n            Gx.panxmax = Gx.panxmax + 1.0;\n        }\n        xran = Gx.panxmax - Gx.panxmin;\n\n        Gx.panxmin -= m.pad(xran, Gx.panxpad);\n        Gx.panxmax += m.pad(xran, Gx.panxpad);\n\n        if (((Gx.autox & 1) !== 0) && noxmin) {\n            Mx.stk[0].xmin = Gx.panxmin;\n        }\n        if (((Gx.autox & 2) !== 0) && noxmax) {\n            Mx.stk[0].xmax = Gx.panxmax;\n            if (!(Gx.all || Gx.xdata)) {\n                for (var n = 0; n < Gx.lyr.length; n++) {\n                    xmax = Math.min(Gx.lyr[n].xmax, Mx.stk[0].xmax);\n                    var dpts = Math.abs((xmax - Gx.lyr[n].xmin) / Gx.lyr[n].xdelta) - Gx.bufmax + 1.0;\n                    if (dpts > 0) {\n                        Mx.stk[0].xmax = xmax - dpts * Math.abs(Gx.lyr[n].xdelta);\n                    }\n                }\n            }\n        }\n\n        if (((Gx.autoy & 1) !== 0)) {\n            Mx.stk[0].ymin = Gx.panymin;\n        }\n        if (((Gx.autoy & 2) !== 0)) {\n            Mx.stk[0].ymax = Gx.panymax;\n        }\n\n        var yran = (Gx.panymax - Gx.panymin);\n        Gx.panymin -= m.pad(yran, Gx.panypad);\n        Gx.panymax += m.pad(yran, Gx.panypad);\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function pixel_to_real(plot, xpos, ypos) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var ret = mx.pixel_to_real(Mx, xpos, ypos);\n        if (Gx.index) {\n            ret.x = ret.x * Gx.xdelta;\n        }\n\n        return ret;\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function coordsInRectangle(x, y, rect_x, rect_y, rect_width, rect_height) {\n        return (x >= rect_x && x <= rect_x + rect_width && y >= rect_y && y <= rect_y + rect_height);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function coordsInTriangle(x, y, tri_x1, tri_y1, tri_x2, tri_y2, tri_x3, tri_y3) {\n        // Uses barycentric coordinates\n        // https://en.wikipedia.org/wiki/Barycentric_coordinate_system ( and http://blackpawn.com/texts/pointinpoly/)\n\n        // Compute vectors\n        var v0 = [tri_x3 - tri_x1, tri_y3 - tri_y1];\n        var v1 = [tri_x2 - tri_x1, tri_y2 - tri_y1];\n        var v2 = [x - tri_x1, y - tri_y1];\n\n        // Compute dot products\n        var dot00 = (v0[0] * v0[0]) + (v0[1] * v0[1]);\n        var dot01 = (v0[0] * v1[0]) + (v0[1] * v1[1]);\n        var dot02 = (v0[0] * v2[0]) + (v0[1] * v2[1]);\n        var dot11 = (v1[0] * v1[0]) + (v1[1] * v1[1]);\n        var dot12 = (v1[0] * v2[0]) + (v1[1] * v2[1]);\n\n        var inv_denom = 1 / (dot00 * dot11 - dot01 * dot01);\n\n        var u = (dot11 * dot02 - dot01 * dot12) * inv_denom;\n        var v = (dot00 * dot12 - dot01 * dot02) * inv_denom;\n\n        /*\n        console.log(\"u \", u);\n        console.log(\"v \", v);\n        */\n\n        return (u >= 0 && v >= 0 && u + v < 1);\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function inPanRegion(plot, coord) {\n        var inPanRegion = false;\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var x = 0;\n        var y = 0;\n        if (coord === undefined) {\n            x = Mx.xpos;\n            y = Mx.ypos;\n\n            if (!plot.mouseOnCanvas) {\n                return false;\n            }\n        } else {\n            x = coord.x;\n            y = coord.y;\n        }\n\n        var command = ' ';\n\n        if (!Gx.pan) {\n            return false;\n        }\n\n        var outside_right_border = (x > Mx.r);\n        var above_top_border = (y <= Gx.pt + Gx.pthk + 2);\n        var below_bottom_border = (y > Gx.pt - 2);\n        var between_top_and_bottom = (y >= Mx.t && y <= Mx.b);\n        var between_left_and_right = (x >= Gx.pl && x <= Gx.pr);\n        var has_bottom_scrollbar = (Gx.show_readout || (Gx.x_scrollbar_location === \"bottom\"));\n\n        if (outside_right_border && between_top_and_bottom) { // YPAN\n            command = 'YPAN'; // Y scrollbar\n            // TODO do we want to\n            // reset the xposition?\n\n            if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                // Need to do an additional check since there is area outside Mx.r that is NOT the pan region\n                var right_of_colorbar = (x > Mx.r + 100); // Mx.r = Mx.r - 100 is how we moved it initally\n                if (right_of_colorbar) {\n                    inPanRegion = true;\n                } else {\n                    inPanRegion = false;\n                }\n\n            } else {\n                Mx.xpos = Gx.pyl + m.trunc(Gx.pthk / 2);\n                inPanRegion = true;\n            }\n            //possibly do another check for p_cuts as well;\n        } else if (has_bottom_scrollbar && between_left_and_right && below_bottom_border) {\n            command = 'XPAN'; // X scrollbar\n            Mx.ypos = Gx.pt + m.trunc(Gx.pthk / 2); // TODO Do we want to reset\n            // the yposition?\n            inPanRegion = true;\n        } else if (!has_bottom_scrollbar && between_left_and_right && above_top_border) {\n            command = 'XPAN'; // X scrollbar\n            Mx.ypos = Gx.pt + m.trunc(Gx.pthk / 2); // TODO Do we want to reset\n            // the yposition?\n            inPanRegion = true;\n        }\n\n        return {\n            inPanRegion: inPanRegion,\n            command: command\n        };\n    }\n\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function inPanCenterRegion(plot) {\n        var inCenterRegion = false;\n        var Mx = plot._Mx;\n        var x = Mx.xpos;\n        var y = Mx.ypos;\n        var th = Mx.text_h;\n        var tw = Mx.text_w;\n        var command = ' ';\n\n        if (x < Mx.l - tw && y <= Mx.b && y >= Mx.t) { // YCENTER\n            // Mx.canvas.getContext(\"2d\").strokeStyle = \"blue\";\n            // Mx.canvas.getContext(\"2d\").strokeRect(0, Mx.t, Mx.l - tw, Mx.b -\n            // Mx.t);\n            command = 'YCENTER';\n            inCenterRegion = true;\n        } else if (y > Mx.b + m.trunc(0.5 * tw) && y <= Mx.b + m.trunc(m.trunc(3 * th) / 2) && x >= Mx.l && x <= Mx.r) { // XCENTER\n            // Mx.canvas.getContext(\"2d\").strokeStyle = \"red\";\n            // Mx.canvas.getContext(\"2d\").strokeRect(Mx.l, Mx.b + m.trunc(.5 *\n            // tw),\n            // Mx.r - Mx.l, (Mx.b + m.trunc(m.trunc(3 * th) / 2)) - (Mx.b +\n            // m.trunc(.5 * tw)));\n            command = 'XCENTER';\n            inCenterRegion = true;\n        }\n\n        return {\n            inCenterRegion: inCenterRegion,\n            command: command\n        };\n    }\n\n    /**\n     * Returns true if position is within the given scrollbar's area. Depends on\n     * mx.scroll_real2pix method.\n     *\n     * @param position\n     *            An object containing 'x' and 'y' pixel values that represent a\n     *            position.\n     * @param scrollbar\n     *            The scrollbar object itself.\n     *\n     * @private\n     * @memberOf sigplot\n     */\n    function onScrollbar(position, scrollbar) {\n        var s1;\n        var sw;\n\n        /*\n         * Compute s, the offset in pixels from the 'origin' of the scrollbar's\n         * on-screen region.\n         */\n        var s;\n        if (scrollbar.origin & 1) {\n            s = position.x - scrollbar.x;\n            if (scrollbar.origin & 2) {\n                s = scrollbar.w - s;\n            }\n        } else {\n            s = position.y - scrollbar.y;\n            if (scrollbar.origin <= 2) {\n                s = scrollbar.h - s;\n            }\n        }\n\n        // Update s1 and sw values\n        var scrollReal2PixOut = mx.scroll_real2pix(scrollbar);\n        s1 = scrollReal2PixOut.s1;\n        sw = scrollReal2PixOut.sw;\n\n        // Determine if mouse is on scrollbar\n        if (s >= s1 && s <= s1 + sw) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Performs the middle-click scroll-menu action specified on the plot.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param action\n     *            The scrollbar action to perform.\n     * @param direction\n     *            The scroll direction to update. Acceptable directions are\n     *            either \"XPAN\" or \"YPAN\".\n     * @memberOf sigplot\n     * @private\n     */\n    function middleClickScrollMenuAction(plot, action, direction) {\n        var Mx = plot._Mx;\n\n        // Determine the appropriate scrollbar to work with\n        var scrollbar;\n        if (direction === \"XPAN\") {\n            scrollbar = Mx.scrollbar_x;\n        } else if (direction === \"YPAN\") {\n            scrollbar = Mx.scrollbar_y;\n        }\n\n        // Set scrollbar action\n        scrollbar.action = action;\n        scrollbar.step = 0.1 * scrollbar.srange;\n        scrollbar.page = 9 * scrollbar.step;\n        scrollbar.scale = 2.0;\n\n        // Update min and range to the appropriate values based on action\n        mx.scroll(Mx, scrollbar, mx.XW_COMMAND, undefined, scrollbar);\n\n        // Update the viewbox based on new min and max values\n        updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange,\n            direction.slice(0, 1));\n\n        this.inPan = true; // prevent recursive pans\n        var evt = document.createEvent('Event');\n        if (direction === \"XPAN\") {\n            evt.initEvent('xpan', true, true);\n        } else if (direction === \"YPAN\") {\n            evt.initEvent('ypan', true, true);\n        }\n        evt.level = Mx.level;\n        evt.xmin = Mx.stk[Mx.level].xmin;\n        evt.ymin = Mx.stk[Mx.level].ymin;\n        evt.xmax = Mx.stk[Mx.level].xmax;\n        evt.ymax = Mx.stk[Mx.level].ymax;\n        mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n        this.inPan = false;\n\n    }\n\n    /**\n     * Updates a plot's viewbox along a given axis to the provided min and max\n     * values.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param newMin\n     *            The new minimum axis value to use\n     * @param newMax\n     *            The new maximum axis value to use\n     * @param axis\n     *            The axis to update. Acceptable axis values are \"X\" or \"Y\".\n     * @memberOf sigplot\n     * @private\n     */\n    function updateViewbox(plot, newMin, newMax, axis) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var k = Mx.level;\n\n        if (axis === \"X\") {\n            var xmin = newMin;\n            var xmax = newMax;\n\n            if (Mx.stk[k].xmin !== xmin || Mx.stk[k].xmax !== xmax) {\n                Mx.stk[k].xmin = xmin;\n                Mx.stk[k].xmax = xmax;\n                if (!Gx.xdata && Mx.level === 1) {\n                    Gx.xmin = Mx.stk[1].xmin;\n                    Gx.xmax = Mx.stk[1].xmax;\n                }\n                plot.refresh();\n            }\n        } else if (axis === \"Y\") {\n            var ymin = newMin;\n            var ymax = newMax;\n\n            if (ymin !== Mx.stk[k].ymin || ymax !== Mx.stk[k].ymax) {\n                Mx.stk[k].ymin = ymin;\n                Mx.stk[k].ymax = ymax;\n                if (Gx.cmode === Gx.basemode && Mx.level === 1) {\n                    Gx.ymin = Math.min(Gx.ymin, ymin);\n                    Gx.ymax = Math.max(Gx.ymax, ymax);\n                }\n                plot.refresh();\n            }\n        }\n    }\n\n    sigplot.Plot = Plot;\n    module.exports = sigplot;\n\n}());\n","/**\n * @license\n * File: common.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n\n/* global module */\n/* global require */\n\n(function() {\n\nmodule.exports = {};\n\nif (window.ArrayBuffer) {\n    if (!ArrayBuffer.prototype.slice) {\n        //Monkey Patching for iOS and early Firefox\n        ArrayBuffer.prototype.slice = function(start, end) {\n            var that = new Uint8Array(this);\n            if (end === undefined) {\n                end = that.length;\n            }\n            var result = new ArrayBuffer(end - start);\n            var resultArray = new Uint8Array(result);\n            for (var i = 0; i < resultArray.length; i++) {\n                resultArray[i] = that[i + start];\n            }\n            return result;\n        };\n    }\n}\n\n// Shim for requestAnimationFrame compatibility\nwindow.requestAnimFrame = (function(callback) {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n        function(callback) {\n            return window.setTimeout(callback, 1000 / 60);\n    };\n})();\n\nwindow.cancelAnimFrame = (function(callback) {\n    return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCanelAnimationFrame ||\n        function(timeoutID) {\n            window.clearTimeout(timeoutID);\n    };\n})();\n\n// Handle various ways to draw dashed lines\nmodule.exports.dashOn = function(ctx, on, off) {\n    if (ctx.setLineDash) {\n        ctx.setLineDash([on, off]);\n        return true;\n    } else if (ctx.mozDash !== undefined) { // Gecko 7.0+\n        ctx.mozDash = [on, off];\n        return true;\n    } else if (ctx.webkitLineDash && ctx.webkitLineDash.length === 0) {\n        ctx.webkitLineDash = [on, off];\n        return true;\n    }\n    return false;\n};\n\nmodule.exports.dashOff = function(ctx) {\n    if (ctx.setLineDash) {\n        ctx.setLineDash([]);\n    } else if (ctx.mozDash) { // Gecko 7.0+\n        ctx.mozDash = null;\n    } else if (ctx.webkitLineDash) {\n        ctx.webkitLineDash = [];\n    }\n};\n\n// Firefox behaves differntly for keypress events\nmodule.exports.getKeyCode = function(e) {\n    e = window.event || e;\n    e = e.charCode || e.keyCode;\n    return e;\n};\n\nmodule.exports.setKeypressHandler = function(handler) {\n    if (window.addEventListener) { window.addEventListener('keypress', handler, false); }\n    else if (window.attachEvent) {\n        window.attachEvent('onkeypress', handler);\n    }\n};\n\n// endsWith() is part of ECMAScript 6, include the Mozilla\n// Polyfill from https://developer.mozilla.org\nif (!String.prototype.endsWith) {\n    String.prototype.endsWith = function(search, this_len) {\n        if (this_len === undefined || this_len > this.length) {\n            this_len = this.length;\n        }\n        return this.substring(this_len - search.length, this_len) === search;\n    };\n}\n\nif (!Uint8Array.prototype.slice) {\n    Object.defineProperty(Uint8Array.prototype, 'slice', {\n        value: Array.prototype.slice\n    });\n}\n\nif (!Int8Array.prototype.slice) {\n    Object.defineProperty(Int8Array.prototype, 'slice', {\n        value: Array.prototype.slice\n    });\n}\n\nif (!Int16Array.prototype.slice) {\n    Object.defineProperty(Int16Array.prototype, 'slice', {\n        value: Array.prototype.slice\n    });\n}\n\nif (!Int32Array.prototype.slice) {\n    Object.defineProperty(Int32Array.prototype, 'slice', {\n        value: Array.prototype.slice\n    });\n}\n\nif (!Float32Array.prototype.slice) {\n    Object.defineProperty(Float32Array.prototype, 'slice', {\n        value: Array.prototype.slice\n    });\n}\n\nif (!Float64Array.prototype.slice) {\n    Object.defineProperty(Float64Array.prototype, 'slice', {\n        value: Array.prototype.slice\n    });\n}\n\n// Array.isArray\n// FF 4+\n// IE 9+\n// SF 5+\n// http://kangax.github.io/es5-compat-table/#Array.isArray\nif (!Array.isArray) {\n    Array.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n}\n\nif (!window.Float64Array) {\n    //Monkey Patching for iOS\n    // This is essentially ReadOnly because\n    // if someone does x[i] = 5\n    // the value will be set in the array\n    // but not in the underlying buffer\n    window.Float64Array = (function() {\n        return window.Float64Array ||\n            function(buffer, byteOffset, length) {\n                if (!(buffer instanceof ArrayBuffer)) {\n                    throw \"Invalid type\";\n                }\n                var dv = new DataView(buffer);\n                var b = [];\n                var maxlength = (buffer.byteLength - byteOffset) / 8;\n                if (length === undefined) {\n                    b.length = maxlength;\n                } else {\n                    b.length = Math.min(length, maxlength);\n                }\n\n                for (var i = 0; i < b.length; i++) {\n                    b[i] = dv.getFloat64(i * 8 + byteOffset, true);\n                }\n                b.subarray = function(begin, end) {\n                    return b.slice(begin, end);\n                };\n                return b;\n        };\n    })();\n}\n\n// Shims\n(function() {\n    /* console shim*/\n    var f = function() {};\n    if (!window.console) {\n        window.console = {\n            log: f,\n            info: f,\n            warn: f,\n            debug: f,\n            error: f\n        };\n    }\n\n    // Firefox 4 has a glaring subarray bug\n    // http://ryanberdeen.com/2011/04/16/firefox-subarray-bug.html\n    if (new Int8Array([0, 1, 0]).subarray(1).subarray(1)[0]) {\n        var subarray = function(begin, end) {\n            if (arguments.length === 0) {\n                begin = 0;\n                end = this.length;\n            } else {\n                if (begin < 0) {\n                    // relative to end\n                    begin += this.length;\n                }\n                // clamp to 0, length\n                begin = Math.max(0, Math.min(this.length, begin));\n                if (arguments.length === 1) {\n                    // slice to end\n                    end = this.length;\n                } else {\n                    if (end < 0) {\n                        // relative to end\n                        end += this.length;\n                    }\n                    // clamp to begin, length\n                    end = Math.max(begin, Math.min(this.length, end));\n                }\n            }\n\n            var byteOffset = this.byteOffset + begin * this.BYTES_PER_ELEMENT;\n            return new this.constructor(this.buffer, byteOffset, end - begin);\n        };\n\n        var typedArrays = [Int8Array, Uint8Array, Int16Array, Uint16Array,\n            Int32Array, Uint32Array, Float32Array, Float64Array\n        ];\n        typedArrays.forEach(function(cls) {\n            cls.prototype.subarray = subarray;\n        });\n    }\n\n}());\n\n// https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel?redirectlocale=en-US&redirectslug=DOM%2FMozilla_event_reference%2Fwheel#Listening_to_this_event_across_browser\n// creates a global \"addWheelListener\" method\n// example: addWheelListener( elem, function( e ) { console.log( e.deltaY ); e.preventDefault(); } );\n(function(window, document) {\n\n    var prefix = \"\",\n        _addEventListener, onwheel, support;\n\n    // detect event model\n    if (window.addEventListener) {\n        _addEventListener = \"addEventListener\";\n    } else {\n        _addEventListener = \"attachEvent\";\n        prefix = \"on\";\n    }\n\n    // detect available wheel event\n    support = \"onwheel\" in document.createElement(\"div\") ? \"wheel\" : // Modern browsers support \"wheel\"\n    document.onmousewheel !== undefined ? \"mousewheel\" : // Webkit and IE support at least \"mousewheel\"\n    \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\n\n    window.addWheelListener = function(elem, callback, useCapture) {\n        _addWheelListener(elem, support, callback, useCapture);\n\n        // handle MozMousePixelScroll in older Firefox\n        if (support === \"DOMMouseScroll\") {\n            _addWheelListener(elem, \"MozMousePixelScroll\", callback, useCapture);\n        }\n    };\n\n    /* jshint -W030 */\n    function _addWheelListener(elem, eventName, callback, useCapture) {\n        elem[_addEventListener](prefix + eventName, support === \"wheel\" ? callback : function(originalEvent) {\n            !originalEvent && (originalEvent = window.event);\n\n            // create a normalized event object\n            var event = {\n                // keep a ref to the original event object\n                originalEvent: originalEvent,\n                target: originalEvent.target || originalEvent.srcElement,\n                type: \"wheel\",\n                deltaMode: originalEvent.type === \"MozMousePixelScroll\" ? 0 : 1,\n                deltaX: 0,\n                delatZ: 0,\n                preventDefault: function() {\n                    originalEvent.preventDefault ?\n                        originalEvent.preventDefault() :\n                        originalEvent.returnValue = false;\n                }\n            };\n\n            // calculate deltaY (and deltaX) according to the event\n            if (support === \"mousewheel\") {\n                event.deltaY = -1 / 40 * originalEvent.wheelDelta;\n                // Webkit also support wheelDeltaX\n                originalEvent.wheelDeltaX && (event.deltaX = -1 / 40 * originalEvent.wheelDeltaX);\n            } else {\n                event.deltaY = originalEvent.detail;\n            }\n\n            // it's time to fire the callback\n            return callback(event);\n\n        }, useCapture || false);\n    }\n    /* jshint +W030 */\n\n})(window, document);\n//Add Proxy poly fill https://github.com/GoogleChrome/proxy-polyfill\nif(!window.Proxy){\n/* jshint ignore:start */\n(function(){function l(){function n(a){return a?\"object\"===typeof a||\"function\"===typeof a:!1}var p=null;var g=function(a,b){function f(){}if(!n(a)||!n(b))throw new TypeError(\"Cannot create proxy with a non-object as target or handler\");p=function(){f=function(a){throw new TypeError(\"Cannot perform '\"+a+\"' on a proxy that has been revoked\");}};var e=b;b={get:null,set:null,apply:null,construct:null};for(var k in e){if(!(k in b))throw new TypeError(\"Proxy polyfill does not support trap '\"+k+\"'\");b[k]=e[k]}\"function\"===\ntypeof e&&(b.apply=e.apply.bind(e));var c=this,g=!1,q=!1;\"function\"===typeof a?(c=function(){var h=this&&this.constructor===c,d=Array.prototype.slice.call(arguments);f(h?\"construct\":\"apply\");return h&&b.construct?b.construct.call(this,a,d):!h&&b.apply?b.apply(a,this,d):h?(d.unshift(a),new (a.bind.apply(a,d))):a.apply(this,d)},g=!0):a instanceof Array&&(c=[],q=!0);var r=b.get?function(a){f(\"get\");return b.get(this,a,c)}:function(a){f(\"get\");return this[a]},v=b.set?function(a,d){f(\"set\");b.set(this,\na,d,c)}:function(a,b){f(\"set\");this[a]=b},t={};Object.getOwnPropertyNames(a).forEach(function(b){if(!((g||q)&&b in c)){var d={enumerable:!!Object.getOwnPropertyDescriptor(a,b).enumerable,get:r.bind(a,b),set:v.bind(a,b)};Object.defineProperty(c,b,d);t[b]=!0}});e=!0;Object.setPrototypeOf?Object.setPrototypeOf(c,Object.getPrototypeOf(a)):c.__proto__?c.__proto__=a.__proto__:e=!1;if(b.get||!e)for(var m in a)t[m]||Object.defineProperty(c,m,{get:r.bind(a,m)});Object.seal(a);Object.seal(c);return c};g.revocable=\nfunction(a,b){return{proxy:new g(a,b),revoke:p}};return g};var u=\"undefined\"!==typeof process&&\"[object process]\"==={}.toString.call(process)||\"undefined\"!==typeof navigator&&\"ReactNative\"===navigator.product?global:self;u.Proxy||(u.Proxy=l(),u.Proxy.revocable=u.Proxy.revocable);})();\n/* jshint ignore:end */\n}\n\n//Updates destenation object with source values\nmodule.exports.update = function update(dst, src) {\n    for (var prop in src) {\n        var val = src[prop];\n        if (typeof val === \"object\") { // recursive\n            update(dst[prop], val);\n        } else {\n            dst[prop] = val;\n        }\n    }\n    return dst; // return dst to allow method chaining\n};\n\n}());\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Plot } from 'sigplot';\n\n/**\n * SigPlot.js React wrapper class\n *\n * @version 0.1.2\n * @visibleName SigPlot.js React Wrapper\n */\nexport default class SigPlot extends Component {\n  static childContextTypes = {\n    plot: PropTypes.instanceOf(Plot),\n  }\n\n  static propTypes = {\n    /**\n     * Different Layer nodes (e.g., ArrayLayer, PipeLayer, etc.)\n     *\n     * @ignore\n     */\n    children: PropTypes.node,\n\n    /** Height of the wrapper div */\n    height: PropTypes.number,\n\n    /** Width of the wrapper div */\n    width: PropTypes.number,\n\n    /** CSS 'display' property */\n    display: PropTypes.string,\n\n    /** Styles object for any other CSS styles on the wrapper div */\n    styles: PropTypes.object,\n\n    /**\n     * SigPlot plot-level options\n     *\n     * @see See [sigplot.Plot Docs](http://sigplot.lgsinnovations.com/html/doc/sigplot.Plot.html)\n     */\n    options: PropTypes.object,\n  }\n\n  static defaultProps = {\n    height: 300,\n    width: 300,\n    display: 'inline-block',\n    options: {\n      all: true,\n      expand: true,\n      autol: 100,\n      autohide_panbars: true\n    },\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getChildContext() {\n    return {\n      plot: this.plot,\n    };\n  }\n\n  componentDidMount() {\n    const { options } = this.props;\n    this.plot = new Plot(this.element, options);\n\n    // Have to trigger context tree, setting state does that.\n    // eslint-disable-next-line react/no-did-mount-set-state\n    // eslint-disable-next-line react/no-unused-state\n    this.setState({ plot: this.plot });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { height, width, options } = this.props;\n    const {\n      height: newHeight,\n      width: newWidth,\n      options: newOptions\n    } = nextProps;\n\n    // When the outer div height/width changes,\n    // we need to explicitly tell SigPlot to resize;\n    // otherwise, it won't resize automatically.\n    if (newHeight !== height || newWidth !== width) {\n      this.plot.checkresize();\n    }\n\n    // If the options change at the plot level,\n    // we need to handle that\n    if (newOptions !== options) {\n      this.plot.change_settings(newOptions);\n    }\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      display,\n      styles,\n      children: propChildren,\n    } = this.props;\n    const { plot } = this;\n\n    /**\n     * Recall we're treating the `sigplot.layer1d` and\n     * `sigplot.layer2d` as (virtual) children nodes since\n     * they are simply manipulations/API calls that modify\n     * the underlying <canvas>.\n     *\n     * As such, the user should never have to access the\n     * `children` property outright, instead being able to\n     * write\n     *\n     *   <SigPlot>\n     *     <ArrayLayer ... />\n     *   </SigPlot>\n     *\n     * Anyway, the point of the following statement is\n     * to provide the `plot` object (controlled by the parent)\n     * to the child so it can mutate it.\n     */\n    const children = plot\n      ? React.Children.map(propChildren, (child) => {\n        if (child) {\n          return React.cloneElement(child, { plot });\n        }\n        return null;\n      }) : null;\n\n    return (\n      <div\n        style={{\n          height,\n          width,\n          display, // this will be deprecated\n          ...styles\n        }}\n        ref={element => this.element = element}\n      >\n        { children }\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'; // eslint-disable-line no-unused-vars\nimport PropTypes from 'prop-types';\nimport { Plot } from 'sigplot';\n\n/**\n * Abstract base class for all Layers\n */\nexport default class Layer extends Component {\n  static contextTypes = {\n    plot: PropTypes.instanceOf(Plot)\n  }\n\n  static propTypes = {\n    /** Array of `Number` types */\n    data: PropTypes.arrayOf(PropTypes.number), // eslint-disable-line react/no-unused-prop-types\n\n    /** Header options for `data` */\n    options: PropTypes.object, // eslint-disable-line react/no-unused-prop-types\n\n    /**\n     * Options about the layer\n     *\n     * @see See [sigplot.layer1d](https://github.com/LGSInnovations/sigplot/blob/master/js/sigplot.layer1d.js)\n     * @see See [sigplot.layer2d](https://github.com/LGSInnovations/sigplot/blob/master/js/sigplot.layer2d.js)\n     */\n    layerOptions: PropTypes.object // eslint-disable-line react/no-unused-prop-types\n  }\n\n  /**\n   * On unmount, all we need to do is remove the layer\n   * from the plot.\n   */\n  componentWillUnmount() {\n    this.plot.remove_layer(this.layer);\n  }\n\n  /**\n   * Getter for the sigplot.Plot object\n   *\n   * The `plot` is 'given' to  the layer-children\n   * from the <SigPlot> parent component, so we receive\n   * it from the context.\n   */\n  get plot() {\n    const { plot } = this.context;\n    return plot;\n  }\n\n  /**\n   * The layer components don't _actually_ render to the DOM.\n   *\n   * They are merely abstractions of canvas-manipulations.\n   */\n  render() {\n    return false;\n  }\n}\n","import React from 'react'; // eslint-disable-line no-unused-vars\nimport Layer from './layer';\n\n/**\n * ArrayLayer wrapper for sigplot.layer1d and sigplot.layer2d\n *\n * This layer is meant for static 1D and 2D (or 1D with `framesize`)\n * JS arrays/ArrayBuffers. A typical use case looks like\n *\n * For a 1-D spectral or time-series plot:\n *\n *   <SigPlot>\n *     <ArrayLayer data={[1, 2, 3]}/>\n *   </SigPlot>\n *\n * For a 2-D raster/heatmap:\n *\n *   <SigPlot>\n *     <ArrayLayer data={[[1, 2, 3], [2, 3, 4]]}/>\n *   </SigPlot>\n */\nexport default class ArrayLayer extends Layer {\n  /**\n   * Handles ArrayLayer being mounted onto the DOM\n   *\n   * All we need to do when the component 'mounts',\n   * is call `plot.overlay_array` with the relevant\n   * data and options. This will return our layer object.\n   *\n   * A large portion of the time, especially for dynamic\n   * systems, this will look like\n   * `this.plot.overlay_array([], undefined)` upon mount.\n   */\n  componentDidMount() {\n    const { data, options, layerOptions } = this.props;\n    this.layer = this.plot.overlay_array(data, options, layerOptions);\n  }\n\n  /**\n   * Handles new properties being passed into <ArrayLayer/>\n   *\n   * This will be replaced by\n   *\n   *     static getDerivedStateFromProps(nextProps, prevState)\n   *\n   * in React 17.\n   *\n   * This sits in the lifecycle right before `shouldComponentUpdate`,\n   * `componentWillUpdate`, and most importantly `render`, so this is\n   * where we will call the plot's `reload` and `headermod` methods.\n   *\n   * @param nextProps    the newly received properties\n   */\n  componentWillReceiveProps(nextProps) {\n    const {\n      data: currentData,\n      options: currentOptions,\n      layerOptions: currentLayerOptions\n    } = this.props;\n\n    const {\n      data: nextData,\n      options: nextOptions,\n      layerOptions: nextLayerOptions\n    } = nextProps;\n\n    // if the data changes, we'll go ahead\n    // and do a full `reload`;\n    // otherwise, we only need to headermod\n    // with the new options\n    if (nextData !== currentData) {\n      this.plot.reload(this.layer, nextData, nextOptions);\n    } else if (nextOptions !== currentOptions) {\n      this.plot.headermod(this.layer, nextOptions);\n    } else if (nextLayerOptions !== currentLayerOptions) {\n      this.plot.get_layer(this.layer).change_settings(nextLayerOptions);\n    }\n\n    return false;\n  }\n}\n","import React from 'react'; // eslint-disable-line no-unused-vars\nimport Layer from './layer';\n\n/**\n * Wrapper around sigplot.Plot.overlay_pipe\n *\n * This wrapper is for streaming 1-D plots or\n * 2-D raster waterfall plots.\n *\n * Typical use of this would look like\n *\n *   <SigPlot>\n *     <PipeLayer options={options} data={data}/>\n *   </SigPlot>\n *\n * where options is populated before data begins flowing\n */\nexport default class PipeLayer extends Layer {\n  /**\n   * On mount, the only action we can take is to overlay the\n   * pipe with the specified header (`options`) information\n   *\n   * It isn't until data begins coming that we can begin to\n   */\n  componentDidMount() {\n    const { options, data } = this.props;\n\n    // start by setting the header of the pipe\n    this.layer = this.plot.overlay_pipe(options);\n\n    // if data is provided and non-empty, go ahead and\n    // begin plotting data\n    if (data !== undefined && data.length > 0) {\n      this.plot.push(this.layer, data);\n    }\n  }\n\n  /**\n   * Handles new properties being passed into <PipeLayer/>\n   *\n   * This will be replaced by\n   *\n   *     static getDerivedStateFromProps(nextProps, prevState)\n   *\n   * in React 17.\n   *\n   * This sits in the lifecycle right before `shouldComponentUpdate`,\n   * `componentWillUpdate`, and most importantly `render`, so this is\n   * where we will call the plot's `reload` and `headermod` methods.\n   *\n   * @param nextProps    the newly received properties\n   *\n   * @TODO Handle headermod updates\n   */\n  componentWillReceiveProps(nextProps) {\n    const {\n      data: currentData,\n      options: currentOptions,\n      layerOptions: currentLayerOptions\n    } = this.props;\n    const {\n      data: nextData,\n      options: nextOptions,\n      layerOptions: nextLayerOptions\n    } = nextProps;\n\n    // if new data has come in, plot that\n    if (nextData && nextData !== currentData) {\n      this.plot.push(this.layer, nextData, nextOptions);\n    } else if (nextOptions !== currentOptions) {\n      this.plot.headermod(this.layer, nextOptions);\n    } else if (nextLayerOptions !== currentLayerOptions) {\n      this.plot.get_layer(this.layer).change_settings(nextLayerOptions);\n    }\n\n    return false;\n  }\n}\n","import React from 'react'; // eslint-disable-line no-unused-vars\nimport PropTypes from 'prop-types';\nimport Layer from './layer';\n\n/**\n * Wrapper around sigplot.Plot.overlay_href\n *\n * Typical use of this layer looks like\n *   <SigPlot>\n *     <HrefLayer href={'/path/to/file.tmp'}/>\n *   </SigPlot>\n */\nexport default class HrefLayer extends Layer {\n  static propTypes = {\n    /**\n     * URI to BLUEFILE or MATFILE to plot\n     *\n     * This can either be local 'file:///path/to/file' or\n     * remote 'http://myfile.com/file.tmp'\n     *\n     * Keep in mind that if the file is on a different domain,\n     * most browsers/web-servers will block cross origin requests.\n     *\n     * Since this layer doesn't take any numeric data,\n     * we are omitting the use of the `data` prop here.\n     */\n    href: PropTypes.string,\n\n    /** Callback that executes once the file loads */\n    onload: PropTypes.func,\n\n    /** Layer options */\n    options: PropTypes.object,\n  }\n\n  static defaultProps = {\n    href: '',\n    onload: null,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onloadWrapper.bind(this);\n  }\n\n  onloadWrapper(onload) {\n    return (hcb, i) => {\n      this.layer = i;\n      return onload(hcb, i);\n    };\n  }\n\n  /**\n   * On mount, all we need to do is call overlay_href\n   */\n  componentDidMount() {\n    const { href, onload, options } = this.props;\n    this.plot.overlay_href(href, this.onloadWrapper(onload), options);\n  }\n\n  /**\n   * Handles new properties being passed into <HrefLayer/>\n   *\n   * This will be replaced by\n   *\n   *     static getDerivedStateFromProps(nextProps, prevState)\n   *\n   * in React 17.\n   *\n   * This sits in the lifecycle right before `shouldComponentUpdate`,\n   * `componentWillUpdate`, and most importantly `render`, so this is\n   * where we will call the plot's `reload` and `headermod` methods.\n   *\n   * @param nextProps    the newly received properties\n   */\n  componentWillReceiveProps(nextProps) {\n    const {\n      href: oldHref,\n      options: oldOptions,\n    } = this.props;\n\n    const {\n      href: newHref,\n      onload: newOnload,\n      options: newOptions,\n    } = nextProps;\n\n    // we only care if `href` or `options` changes\n    if (newHref !== oldHref) {\n      this.plot.deoverlay(this.layer);\n      this.plot.overlay_href(newHref, this.onloadWrapper(newOnload), newOptions);\n    } else if (this.layer !== undefined && newOptions !== oldOptions) {\n      this.plot.get_layer(this.layer).change_settings(newOptions);\n    }\n\n    return false;\n  }\n}\n","import React from 'react'; // eslint-disable-line no-unused-vars\nimport Layer from './layer';\n\n/**\n * BlueLayer wrapper for sigplot.layer1d and sigplot.layer2d\n *\n * This layer is meant for Bluefiles\n * ArrayBuffers. A typical use case looks like\n *\n * For a 1-D spectral or time-series plot:\n *\n *   <SigPlot>\n *     <BlueLayer data={hcb}/>\n *   </SigPlot>\n *\n * For a 2-D raster/heatmap:\n *\n *   <SigPlot>\n *     <BlueLayer data={hcb}\n *           layerOptions={{\n *             subsize: 8,\n *             layerType: \"2D\"\n *         }}\n *       />\n *   </SigPlot>\n */\nexport default class BlueLayer extends Layer {\n  /**\n   * Handles BlueLayer being mounted onto the DOM\n   *\n   * All we need to do when the component 'mounts',\n   * is call `plot.overlay_bluefile` with the relevant\n   * data and options. This will return our layer object.\n   */\n  componentDidMount() {\n    const { data, layerOptions } = this.props;\n    this.layer = this.plot.overlay_bluefile(data, layerOptions);\n  }\n\n  /**\n   * Handles new properties being passed into <BlueLayer/>\n   *\n   * This will be replaced by\n   *\n   *     static getDerivedStateFromProps(nextProps, prevState)\n   *\n   * in React 17.\n   *\n   * This sits in the lifecycle right before `shouldComponentUpdate`,\n   * `componentWillUpdate`, and most importantly `render`, so this is\n   * where we will call the plot's `reload` and `headermod` methods.\n   *\n   * @param nextProps    the newly received properties\n   */\n  componentWillReceiveProps(nextProps) {\n    const {\n      data: currentData,\n      options: currentOptions,\n      layerOptions: currentLayerOptions\n    } = this.props;\n\n    const {\n      data: nextData,\n      options: nextOptions,\n      layerOptions: nextLayerOptions\n    } = nextProps;\n\n    // if the data changes, we'll go ahead\n    // and do a full `reload`;\n    // otherwise, we only need to headermod\n    // with the new options\n    if (nextData !== currentData) {\n      this.plot.reload(this.layer, nextData, nextOptions);\n    } else if (nextOptions !== currentOptions) {\n      this.plot.headermod(this.layer, nextOptions);\n    } else if (nextLayerOptions !== currentLayerOptions) {\n      this.plot.get_layer(this.layer).change_settings(nextLayerOptions);\n    }\n\n    return false;\n  }\n}\n","import React from 'react'; // eslint-disable-line no-unused-vars\nimport PropTypes from 'prop-types';\nimport Layer from './layer';\n\n/**\n * Wrapper around sigplot.Plot.overlay_websocket\n *\n * Typical use of this layer looks like\n *   <SigPlot>\n *     <WebsocketLayer wsurl={'ws://localhost:8080'}/>\n *   </SigPlot>\n */\nexport default class WebsocketLayer extends Layer {\n  static propTypes = {\n    /**\n     * URI to websocket server\n     *\n     * This usually looks like ws://<some URI>:<some port>\n     *\n     * Keep in mind that if the websocket server is on a different domain,\n     * most browsers/web-servers will block cross origin requests.\n     *\n     * Since this layer doesn't take any numeric data,\n     * we are omitting the use of the `data` prop here.\n     */\n    wsurl: PropTypes.string,\n\n    /** Key-value pairs whose values alter plot settings */\n    overrides: PropTypes.object,\n\n    /** Layer options */\n    options: PropTypes.object,\n  }\n\n  static defaultProps = {\n    wsurl: '',\n  }\n\n  /**\n   * On mount, all we need to do is call overlay_websocket\n   */\n  componentDidMount() {\n    const { wsurl, overrides, options } = this.props;\n    this.layer = this.plot.overlay_websocket(wsurl, overrides, options);\n  }\n\n  /**\n   * Handles new properties being passed into <HrefLayer/>\n   *\n   * This will be replaced by\n   *\n   *     static getDerivedStateFromProps(nextProps, prevState)\n   *\n   * in React 17.\n   *\n   * This sits in the lifecycle right before `shouldComponentUpdate`,\n   * `componentWillUpdate`, and most importantly `render`, so this is\n   * where we will call the plot's `reload` and `headermod` methods.\n   *\n   * @param nextProps    the newly received properties\n   *\n   * @TODO Investigate whether deoverlay is necessary here\n   */\n  componentWillReceiveProps(nextProps) {\n    const {\n      wsurl: oldWsurl,\n      options: oldOptions,\n    } = this.props;\n\n    const {\n      wsurl: newWsurl,\n      overrides: newOverrides,\n      options: newOptions,\n    } = nextProps;\n\n    // we only care if `wsurl` or `options` changes;\n    if (newWsurl !== oldWsurl) {\n      this.plot.deoverlay(this.layer);\n      this.layer = this.plot.overlay_websocket(\n        newWsurl,\n        newOverrides,\n        newOptions\n      );\n    } else if (this.layer !== undefined && newOptions !== oldOptions) {\n      this.plot.get_layer(this.layer).change_settings(newOptions);\n    }\n\n    return false;\n  }\n}\n","import React, { Component } from 'react'; // eslint-disable-line no-unused-vars\nimport PropTypes from 'prop-types';\nimport { Plot } from 'sigplot';\n\n/**\n * Abstract base class for all Plugins\n */\nexport default class Plugin extends Component {\n  static contextTypes = {\n    plot: PropTypes.instanceOf(Plot)\n  }\n\n  static propTypes = {\n    /**\n     * Options about the plugin\n     *\n     * @see See [plugins](https://github.com/LGSInnovations/sigplot/blob/master/js/plugins.js)\n     */\n    pluginOptions: PropTypes.object // eslint-disable-line react/no-unused-prop-types\n  }\n\n  /**\n   * On unmount, all we need to do is remove the plugin\n   * from the plot.\n   */\n  componentWillUnmount() {\n    this.plot.remove_plugin(this.plugin);\n  }\n\n  /**\n   * Getter for the sigplot.Plot object\n   *\n   * The `plot` is 'given' to  the plugin-children\n   * from the <SigPlot> parent component, so we receive\n   * it from the context.\n   */\n  get plot() {\n    const { plot } = this.context;\n    return plot;\n  }\n\n  /**\n   * The plugin components don't _actually_ render to the DOM.\n   *\n   * They are merely abstractions of canvas-manipulations.\n   */\n  render() {\n    return false;\n  }\n}\n","export { default as SigPlot } from './sigplot';\nexport { default as ArrayLayer } from './arraylayer';\nexport { default as PipeLayer } from './pipelayer';\nexport { default as HrefLayer } from './hreflayer';\nexport { default as BlueLayer } from './bluelayer';\nexport { default as WebsocketLayer } from './websocketlayer';\nexport { default as Layer } from './layer';\nexport { default as Plugin } from './plugin';\n","/**\n * @license\n * File: m.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jslint nomen: true, browser: true, devel: true*/\n\n//Uses Immediately-invoked Function Expressions (IIFE)s for namespaces\n//See http://addyosmani.com/blog/essential-js-namespacing/ for details.\n\n/* global module */\n/* global require */\n\n(function() {\n    'use strict';\n\n    var bluefile = require(\"./bluefile\");\n    var loglevel = require(\"loglevel\");\n\n    function m() {}\n\n    m.log = loglevel;\n\n    /**\n     *\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var PointArray = null;\n\n    /**\n     * True if we detected that we are on an iOS device\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);\n    if ((iOS) || // iOS doesn't support Float64\n        (typeof Float64Array === 'undefined') || // If it's undefined it's obviously not supported\n        (Float64Array.emulated) || // If it's emulated, don't waste time on extra precision\n        (!Float64Array.BYTES_PER_ELEMENT)) { // If bytes per element isn't defined, it's a buggy implementation (i.e. PhantomJS)\n        m.PointArray = Float32Array;\n    } else {\n        m.PointArray = Float64Array;\n    }\n\n\n    /** UNITS Structure:\n     *\t\t0: [\"None\", \"U\"],\n     *\t\t1: [\"Time\", \"sec\"],\n     *\t\t2: [\"Delay\", \"sec\"],\n     *\t\t3: [\"Frequency\", \"Hz\"],\n     *\t\t4: [\"Time code format\", \"\"],\n     *\t\t5: [\"Distance\", \"m\"],\n     *\t\t6: [\"Speed\", \"m/s\"],\n     *\t\t7: [\"Acceleration\", \"m/sec^2\"],\n     *\t\t8: [\"Jerk\", \"m/sec^3\"],\n     *\t\t9: [\"Doppler\", \"Hz\"],\n     *\t\t10: [\"Doppler rate\", \"Hz/sec\"],\n     *\t\t11: [\"Energy\", \"J\"],\n     *\t\t12: [\"Power\", \"W\"],\n     *\t\t13: [\"Mass\", \"g\"],\n     *\t\t14: [\"Volume\", \"l\"],\n     *\t\t15: [\"Angular power density\", \"W/ster\"],\n     *\t\t16: [\"Integrated power density\", \"W/rad\"],\n     *\t\t17: [\"Spatial power density\", \"W/m^2\"],\n     *\t\t18: [\"Integrated power density\", \"W/m\"],\n     *\t\t19: [\"Spectral power density\", \"W/MHz\"],\n     *\t\t20: [\"Amplitude\", \"U\"],\n     *\t\t21: [\"Real\", \"U\"],\n     *\t\t22: [\"Imaginary\", \"U\"],\n     *\t\t23: [\"Phase\", \"rad\"],\n     *\t\t24: [\"Phase\", \"deg\"],\n     *\t\t25: [\"Phase\", \"cycles\"],\n     *\t\t26: [\"10*Log\", \"U\"],\n     *\t\t27: [\"20*Log\", \"U\"],\n     *\t\t28: [\"Magnitude\", \"U\"],\n     *\t\t29: [\"Unknown\", \"U\"],\n     *\t\t30: [\"Unknown\", \"U\"],\n     *\t\t31: [\"General dimensionless\", \"\"],\n     *\t\t32: [\"Counts\", \"\"],\n     *\t\t33: [\"Angle\", \"rad\"],\n     *\t\t34: [\"Angle\", \"deg\"],\n     *\t\t35: [\"Relative power\", \"dB\"],\n     *\t\t36: [\"Relative power\", \"dBm\"],\n     *\t\t37: [\"Relative power\", \"dBW\"],\n     *\t\t38: [\"Solid angle\", \"ster\"],\n     *\t\t40: [\"Distance\", \"ft\"],\n     *\t\t41: [\"Distance\", \"nmi\"],\n     *\t\t42: [\"Speed\", \"ft/sec\"],\n     *\t\t43: [\"Speed\", \"nmi/sec\"],\n     *\t\t44: [\"Speed\", \"knots=nmi/hr\"],\n     *\t\t45: [\"Acceleration\", \"ft/sec^2\"],\n     *\t\t46: [\"Acceleration\", \"nmi/sec^2\"],\n     *\t\t47: [\"Acceleration\", \"knots/sec\"],\n     *\t\t48: [\"Acceleration\", \"G\"],\n     *\t\t49: [\"Jerk\", \"G/sec\"],\n     *\t\t50: [\"Rotation\", \"rps\"],\n     *\t\t51: [\"Rotation\", \"rpm\"],\n     *\t\t52: [\"Angular velocity\", \"rad/sec\"],\n     *\t\t53: [\"Angular velocity\", \"deg/sec\"],\n     *\t\t54: [\"Angular acceleration\", \"rad/sec^2\"],\n     *\t\t55: [\"Angular acceleration\", \"deg/sec^2\"],\n     *\t\t60: [\"Latitude\", \"deg\"],\n     *\t\t61: [\"Longitude\", \"deg\"],\n     *\t\t62: [\"Altitude\", \"ft\"],\n     *\t\t63: [\"Altitude\", \"m\"]\n     * @global\n     */\n    var UNITS = {\n        0: [\"None\", \"U\", true, true],\n        1: [\"Time\", \"sec\", true, true],\n        2: [\"Delay\", \"sec\", true, false],\n        3: [\"Frequency\", \"Hz\", true, true],\n        4: [\"Time code format\", \"\", true, false],\n        5: [\"Distance\", \"m\", true, true],\n        6: [\"Speed\", \"m/s\", true, true],\n        7: [\"Acceleration\", \"m/sec^2\", true, true],\n        8: [\"Jerk\", \"m/sec^3\", true, true],\n        9: [\"Doppler\", \"Hz\", true, false],\n        10: [\"Doppler rate\", \"Hz/sec\", true, true],\n        11: [\"Energy\", \"J\", true, true],\n        12: [\"Power\", \"W\", true, true],\n        13: [\"Mass\", \"g\", true, true],\n        14: [\"Volume\", \"l\", true, true],\n        15: [\"Angular power density\", \"W/ster\", true, true],\n        16: [\"Integrated power density\", \"W/rad\", true, true],\n        17: [\"Spatial power density\", \"W/m^2\", true, true],\n        18: [\"Integrated power density\", \"W/m\", false, true],\n        19: [\"Spectral power density\", \"W/MHz\", true, true],\n        20: [\"Amplitude\", \"U\", true, false],\n        21: [\"Real\", \"U\", true, false],\n        22: [\"Imaginary\", \"U\", true, false],\n        23: [\"Phase\", \"rad\", true, true],\n        24: [\"Phase\", \"deg\", false, true],\n        25: [\"Phase\", \"cycles\", false, true],\n        26: [\"10*Log\", \"U\", true, false],\n        27: [\"20*Log\", \"U\", true, false],\n        28: [\"Magnitude\", \"U\", true, false],\n        29: [\"Unknown\", \"U\", true, false],\n        30: [\"Unknown\", \"U\", false, false],\n        31: [\"General dimensionless\", \"\", true, true],\n        32: [\"Counts\", \"\", true, false],\n        33: [\"Angle\", \"rad\", true, false],\n        34: [\"Angle\", \"deg\", false, false],\n        35: [\"Relative power\", \"dB\", true, true],\n        36: [\"Relative power\", \"dBm\", false, true],\n        37: [\"Relative power\", \"dBW\", false, true],\n        38: [\"Solid angle\", \"ster\", true, true],\n        40: [\"Distance\", \"ft\", false, true],\n        41: [\"Distance\", \"nmi\", false, true],\n        42: [\"Speed\", \"ft/sec\", false, true],\n        43: [\"Speed\", \"nmi/sec\", false, true],\n        44: [\"Speed\", \"knots=nmi/hr\", false, true],\n        45: [\"Acceleration\", \"ft/sec^2\", false, true],\n        46: [\"Acceleration\", \"nmi/sec^2\", false, true],\n        47: [\"Acceleration\", \"knots/sec\", false, true],\n        48: [\"Acceleration\", \"G\", false, true],\n        49: [\"Jerk\", \"G/sec\", false, true],\n        50: [\"Rotation\", \"rps\", true, false],\n        51: [\"Rotation\", \"rpm\", false, false],\n        52: [\"Angular velocity\", \"rad/sec\", true, true],\n        53: [\"Angular velocity\", \"deg/sec\", false, true],\n        54: [\"Angular acceleration\", \"rad/sec^2\", true, true],\n        55: [\"Angular acceleration\", \"deg/sec^2\", false, true],\n        60: [\"Latitude\", \"deg\", true, false],\n        61: [\"Longitude\", \"deg\", true, false],\n        62: [\"Altitude\", \"ft\", true, false],\n        63: [\"Altitude\", \"m\", false, false]\n    };\n\n    m.UNITS = UNITS;\n\n    /** Common structure\n     * @private\n     */\n    m.Mc = {\n        // Colormaps are stored as 7 element tables which are then\n        //\tinterpolated to the number of colors actually used in a graphics routine\n        //\tcall to MX$COLORMAP.\n\n        // There are 4 colormap tables stored in the environment: A GREYSCALE,\n        // COLORRAMP, COLORWHEEL, COLORSPECTRUM, or SUNSET.  The specific values that\n        // are listed here are from xcolordef.prm (use the XCOLORMAP widget).\n        //\n        // The actual values are a result of tribal knowledge and years of experience\n        colormap: [{\n                name: \"Greyscale\",\n                colors: [{\n                    pos: 0,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 60,\n                    red: 50,\n                    green: 50,\n                    blue: 50\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }]\n            }, {\n                name: \"Ramp Colormap\",\n                colors: [{\n                    pos: 0,\n                    red: 0,\n                    green: 0,\n                    blue: 15\n                }, {\n                    pos: 10,\n                    red: 0,\n                    green: 0,\n                    blue: 50\n                }, {\n                    pos: 31,\n                    red: 0,\n                    green: 65,\n                    blue: 75\n                }, {\n                    pos: 50,\n                    red: 0,\n                    green: 85,\n                    blue: 0\n                }, {\n                    pos: 70,\n                    red: 75,\n                    green: 80,\n                    blue: 0\n                }, {\n                    pos: 83,\n                    red: 100,\n                    green: 60,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 0,\n                    blue: 0\n                }]\n            }, {\n                name: \"Color Wheel\",\n                colors: [{\n                    pos: 0,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 20,\n                    red: 0,\n                    green: 80,\n                    blue: 40\n                }, {\n                    pos: 30,\n                    red: 0,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 50,\n                    red: 10,\n                    green: 10,\n                    blue: 0\n                }, {\n                    pos: 65,\n                    red: 100,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 88,\n                    red: 100,\n                    green: 40,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }]\n            }, {\n                name: \"Spectrum\",\n                colors: [{\n                    pos: 0,\n                    red: 0,\n                    green: 75,\n                    blue: 0\n                }, {\n                    pos: 22,\n                    red: 0,\n                    green: 90,\n                    blue: 90\n                }, {\n                    pos: 37,\n                    red: 0,\n                    green: 0,\n                    blue: 85\n                }, {\n                    pos: 49,\n                    red: 90,\n                    green: 0,\n                    blue: 85\n                }, {\n                    pos: 68,\n                    red: 90,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 80,\n                    red: 90,\n                    green: 90,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 95,\n                    green: 95,\n                    blue: 95\n                }]\n            }, {\n                name: \"calewhite\",\n                colors: [{\n                    pos: 0,\n                    red: 100,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 16.666,\n                    red: 0,\n                    green: 0,\n                    blue: 100\n                }, {\n                    pos: 33.333,\n                    red: 0,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 50,\n                    red: 0,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 66.666,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 83.333,\n                    red: 100,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 0,\n                    blue: 100\n                }]\n            }, {\n                name: \"HotDesat\",\n                colors: [{\n                    pos: 0,\n                    red: 27.84,\n                    green: 27.84,\n                    blue: 85.88\n                }, {\n                    pos: 14.2857,\n                    red: 0,\n                    green: 0,\n                    blue: 35.69\n                }, {\n                    pos: 28.571,\n                    red: 0,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 42.857,\n                    red: 0,\n                    green: 49.8,\n                    blue: 0\n                }, {\n                    pos: 57.14286,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 71.42857,\n                    red: 100,\n                    green: 37.65,\n                    blue: 0\n                }, {\n                    pos: 85.7143,\n                    red: 41.96,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 87.84,\n                    green: 29.8,\n                    blue: 29.8\n                }]\n            }, {\n                name: \"Sunset\",\n                colors: [{\n                    pos: 0,\n                    red: 10,\n                    green: 0,\n                    blue: 23\n                }, {\n                    pos: 18,\n                    red: 34,\n                    green: 0,\n                    blue: 60\n                }, {\n                    pos: 36,\n                    red: 58,\n                    green: 20,\n                    blue: 47\n                }, {\n                    pos: 55,\n                    red: 74,\n                    green: 20,\n                    blue: 28\n                }, {\n                    pos: 72,\n                    red: 90,\n                    green: 43,\n                    blue: 0\n                }, {\n                    pos: 87,\n                    red: 100,\n                    green: 72,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 100,\n                    blue: 76\n                }]\n            },\n            {\n                name: \"Hot\",\n                colors: [\"#000000\", \"#7f0000\", \"#b30000\", \"#d7301f\", \"#ef6548\", \"#fc8d59\", \"#fdbb84\", \"#fdd49e\", \"#fee8c8\", \"#fff7ec\", \"#ffffff\"]\n            }, {\n                name: \"Cold\",\n                colors: [\"#000000\", \"#023858\", \"#045a8d\", \"#0570b0\", \"#3690c0\", \"#74a9cf\", \"#a6bddb\", \"#d0d1e6\", \"#ece7f2\", \"#fff7fb\", \"#ffffff\"]\n            },\n            {\n                name: \"Purple\",\n                colors: [\"#230022\", \"#4d004b\", \"#810f7c\", \"#88419d\", \"#8c6bb1\", \"#8c96c6\", \"#9ebcda\", \"#bfd3e6\", \"#e0ecf4\", \"#f7fcfd\"]\n            }, {\n                name: \"BuGn\",\n                colors: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b']\n            }, {\n                name: \"YlOrBr\",\n                colors: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506']\n            }, {\n                name: \"YlGnBu\",\n                colors: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58']\n            }, {\n                name: \"YlOrRd\",\n                colors: [\"#000000\", \"#662506\", \"#993404\", \"#cc4c02\", \"#ec7014\", \"#fe9929\", \"#fec44f\", \"#fee391\", \"#fff7bc\", \"#ffffe5\", \"#ffffff\"]\n            }, {\n                name: \"GreyNRed\",\n                colors: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'].reverse()\n            }\n        ]\n    };\n\n    /** Pipe Size\n     * @private\n     */\n    m.PIPESIZE = 1024 * 1024;\n\n    /**\n     * Converts unit strings to number code\n     * @param\t{string}\tunitInput\tUser unit input\n     */\n    m.unit_lookup = function(unitInput) {\n        for (var i = 0; i < 64; i++) {\n            var u;\n            if (UNITS[i] === undefined) {\n                u = UNITS[0];\n            } else {\n                u = UNITS[i];\n            }\n            var first = u[0];\n            var second = u[1];\n            var comparer1 = u[0] + \" \" + u[1];\n            var comparer2 = u[0] + \"_\" + u[1];\n            if (unitInput === first) {\n                if (u[2]) {\n                    return i;\n                }\n            } else if (unitInput === second) {\n                if (u[3]) {\n                    return i;\n                }\n            } else if ((unitInput === comparer1) || (unitInput === comparer2)) {\n                return i;\n            }\n        }\n        return unitInput;\n    };\n\n    /**\n     * Creates new file with header initialized to type-1000 defaults\n     * and data appended. (tbd)\n     * @param\t{string}\tfilename\tName of File to Create\n     * @param  \t{array}\t\tdata\t\tInput data buffer\n     * @param  \t{array}\t  \toverrides\tList of fields/values to be overridden in the bluefile header\n     * @return \t{header} \thcb\t\tReturn <hcb> type-1000 bluefile header, filename=null\n     */\n    m.initialize = function(data, overrides) {\n        var hcb = new bluefile.BlueHeader(null);\n\n        hcb.version = 'BLUE';\n        hcb.size = 0;\n        hcb.type = 1000;\n        hcb.format = 'SF';\n        hcb.timecode = 0.0;\n        hcb.xstart = 0.0;\n        hcb.xdelta = 1.0;\n        hcb.xunits = 0;\n        hcb.subsize = 1;\n        hcb.ystart = 0.0;\n        hcb.ydelta = 1.0;\n        hcb.yunits = 0;\n        hcb.enabled_streaming_pcut = false;\n\n        if (!overrides) {\n            /* if no overrides provided...set it to empty*/\n            overrides = {};\n        }\n\n        for (var field in overrides) {\n            hcb[field] = overrides[field];\n        }\n\n        //Convert xunits and yunits to numbers if they are strings\n        hcb[\"xunits\"] = m.unit_lookup(hcb[\"xunits\"]);\n        hcb[\"yunits\"] = m.unit_lookup(hcb[\"yunits\"]);\n\n\n        // Force type 2000 is subsize is specified\n        if (hcb[\"subsize\"] > 1) {\n            hcb.type = 2000;\n        } else if (Array.isArray(data) && Array.isArray(data[0])) {\n            //If this is a 2-D array automatically set subsize\n            hcb.type = 2000;\n            hcb.subsize = data[0].length;\n            hcb.size = data.length;\n        }\n        hcb[\"class\"] = hcb.type / 1000;\n        // If this is a type 2000 , subsize *must* be provided\n        if ((hcb[\"class\"] === 2) && (hcb[\"subsize\"] === undefined)) {\n            throw \"subsize must be provided with type 2000 files\";\n        }\n\n\n        if (!overrides.pipe) {\n            hcb.setData(data);\n        } else {\n            hcb.pipe = true;\n            hcb.in_byte = 0;\n            hcb.out_byte = 0;\n            // TODO round pipe size to nearest number of elements\n            var pipesize = overrides.pipesize || m.PIPESIZE;\n\n            hcb.buf = new ArrayBuffer(pipesize);\n            hcb.setData(hcb.buf);\n            hcb.data_free = hcb.dview.length;\n        }\n\n        return hcb;\n    };\n\n    /**\n     * Convert type-2000 header internals to force GRAB and FILAD routines to treat file as a 1000-type file.\n     * @param\t{header}\thcb\t\tBluefile header control block\n     */\n    m.force1000 = function(hcb) {\n        if (hcb[\"class\"] === 2) {\n            if ((hcb.size) && (!hcb.pipe)) {\n                hcb.size = hcb.subsize * hcb.size;\n            } else {\n                // assume the size is 0\n                hcb.size = 0;\n            }\n            hcb.bpe = hcb.bpe / hcb.subsize;\n            hcb.ape = 1;\n        }\n    };\n\n    /**\n     * Get data from file at specified start location.\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @param\t{array}\t\tbufview\t\tData buffer to receive data\n     * @param\t{number}\tstart\t\tStart location\n     * @param\t{number}\tnget\t\tNumber of requested data\n     * @return\t{number}\tngot\t\tNumber of received data\n     */\n    m.grab = function(hcb, bufview, start, nget) {\n        if (!hcb.dview) {\n            return 0;\n        }\n\n        // TODO reformat\n        if (hcb.format[0] === 'C') {\n            start = start * 2;\n        }\n\n        nget = hcb.ape * nget; // TODO - this is never used????\n\n        //var ngot = Math.min(bufview.length, (hcb.dview.length-start)); //mmm\n        var ngot = Math.min(bufview.length, (hcb.dview.length - start));\n        // iOS doesn't have .set on TypedArrays\n        if (bufview.set === undefined) {\n            for (var i = 0; i < ngot; i++) {\n                bufview[i] = hcb.dview[start + i];\n            }\n        } else {\n            bufview.set(hcb.dview.subarray(start, start + ngot));\n        }\n        if (hcb.format[0] === 'C') {\n            ngot = ngot / 2;\n        }\n        return ngot;\n    };\n\n    /**\n     * Append data buffer to file specified in the bluefile header control block.\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @param\t{array}\t\tdata\t\tData buffer\n     * @param   {boolean}       [sync=false]    dispatch onpipewrite syncronously\n     */\n    m.filad = function(hcb, data, sync) {\n        if (hcb.data_free < data.length) {\n            throw \"Pipe full\";\n        }\n        var sidx = hcb.in_byte / hcb.dview.BYTES_PER_ELEMENT;\n        var eidx = (sidx + data.length);\n        if (eidx > hcb.dview.length) {\n            var head = hcb.dview.length - sidx;\n            var tail = data.length - head;\n            if (data.subarray) {\n                hcb.dview.set(data.subarray(0, head), sidx);\n                hcb.dview.set(data.subarray(head, data.length), 0);\n            } else {\n                hcb.dview.set(data.slice(0, head), sidx);\n                hcb.dview.set(data.slice(head, data.length), 0);\n            }\n            hcb.in_byte = (tail * hcb.dview.BYTES_PER_ELEMENT);\n        } else {\n            hcb.dview.set(data, sidx);\n            hcb.in_byte = (eidx * hcb.dview.BYTES_PER_ELEMENT) % hcb.buf.byteLength;\n        }\n        hcb.data_free -= data.length;\n        if (hcb.onwritelisteners) {\n            for (var i = 0; i < hcb.onwritelisteners.length; i++) {\n                if (!sync) {\n                    window.setTimeout(hcb.onwritelisteners[i], 0);\n                } else {\n                    hcb.onwritelisteners[i]();\n                }\n            }\n        }\n    };\n\n    /**\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @return\t{number}\telements available\n     * @private\n     */\n    m.pavail = function(hcb) {\n        return hcb.dview.length - hcb.data_free;\n    };\n\n    /**\n     * Get data from file in dataflow fashion.\n     * @param\t{array}\t\thcb\tBluefile header control block\n     * @param \t{array}\t\tdview\tData buffer to receive data\n     * @param\t{number}\tnget\tInput variable name of parameter to receive data\n     * @param\t{number}\toffset\tOffset into file\n     * @return\t{number}\tngot\tNumber of data values gotten\n     */\n    // WARNING - nget is number of scalars...which differs from the normal API\n    m.grabx = function(hcb, dview, nget, offset) {\n        var navail = hcb.dview.length - hcb.data_free;\n        if (offset === undefined) {\n            offset = 0;\n        }\n        if (!nget) {\n            nget = Math.min(dview.length - offset, navail);\n        } else if (nget > dview.length - offset) {\n            throw \"m.grabx : nget larger then available buffer space\";\n        }\n        if (nget < 0) {\n            throw \"m.grabx : nget cannot be negative\";\n        }\n        if (nget > navail) {\n            return 0;\n        }\n\n        var sidx = hcb.out_byte / hcb.dview.BYTES_PER_ELEMENT;\n        var eidx = (sidx + nget);\n        if (eidx >= hcb.dview.length) {\n            var head = hcb.dview.length - sidx;\n            eidx = eidx - hcb.dview.length;\n            dview.set(hcb.dview.subarray(sidx, hcb.dview.length), offset);\n            dview.set(hcb.dview.subarray(0, eidx), offset + head);\n        } else {\n            dview.set(hcb.dview.subarray(sidx, eidx), offset);\n        }\n        hcb.out_byte = (eidx * hcb.dview.BYTES_PER_ELEMENT) % hcb.buf.byteLength;\n        hcb.data_free += nget;\n        var ngot = nget;\n        return ngot;\n    };\n\n\n    /**\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @param\t{number}\tonwrite\t\t-\n     * @private\n     */\n    m.addPipeWriteListener = function(hcb, onwrite) {\n        if (!hcb.onwritelisteners) {\n            hcb.onwritelisteners = [];\n        }\n        if (hcb.onwritelisteners.indexOf(onwrite) === -1) {\n            hcb.onwritelisteners.push(onwrite);\n        }\n    };\n\n    /**\n     * Returns ASCII description of units code\n     * @param \t{number}\tUNITS array index (see global UNITS)\n     * @return \t{string}\tASCII code pair\n     */\n    // ~= M$UNITS_NAME\n    m.units_name = function(units) {\n        var u = UNITS[units];\n        return u[0] + \" (\" + u[1] + \")\";\n    };\n\n    /**\n     * Extract filename from full path\n     * @param \t{string}\tpathfilename\tFull path, including filename\n     * @return\t{string}\tfilename\t    Trimmed filename\n     */\n    m.trim_name = function(pathfilename) {\n        var i = pathfilename.indexOf(']');\n        if (i === -1) {\n            i = pathfilename.indexOf('/');\n        }\n        if (i === -1) {\n            i = pathfilename.indexOf(':');\n        }\n        var j = pathfilename.substr(i + 1, pathfilename.length).indexOf('.');\n        if (j < 0) {\n            j = pathfilename.length - i;\n        }\n        var filename = pathfilename.substr(i + 1, i + j + 1);\n        return filename;\n    };\n\n    /**\n     * Takes an integer code for units and a multiplier and returns the string representation of the two.\n     * Example: l = m.label(1,1.0e3) ==> l =  Time (Ksec)\n     * @param \t{number}\tunits\tInteger code for Unit (see global UNITS)\n     * @param \t{number} \tmult\tUnits multiplier (i.e 1.0e3 ==> 'K')\n     * @return {string} representation of units and multiplier\n     */\n    // ~= M$LABEL\n    m.label = function(units, mult) {\n        var u = [\"Unknown\", \"U\"];\n\n        if (typeof units === \"string\") {\n            u = [units, null];\n        } else if (Array.isArray(units)) {\n            u = units;\n        } else {\n            u = UNITS[units];\n            if (u === undefined) {\n                u = [\"Unknown\", \"U\"];\n            }\n        }\n\n        var prefix = m.mult_prefix(mult);\n\n        if (u[1]) {\n            return u[0] + \" (\" + prefix + u[1] + \")\";\n        } else {\n            return u[0];\n        }\n    };\n\n    /**\n     * @method bound\n     * @param a\n     * @param b\n     * @param c\n     */\n    m.bound = function(a, b, c) {\n        return a < b ? b : (a > c ? c : a);\n    };\n\n    m.touch_distance = function(touchA, touchB) {\n        var xd = (touchA.pageX - touchB.pageX);\n        var yd = (touchA.pageY - touchB.pageY);\n        return Math.sqrt((xd * xd) + (yd * yd));\n    };\n\n    m.mult_prefix = function(mult) {\n        var prefix = \"?\";\n\n        /* jshint -W116 */\n        if (mult == 1) {\n            prefix = \"\";\n        } else if (mult == 10) {\n            prefix = 'da';\n        } else if (mult == 0.1) {\n            prefix = 'd';\n        } else if (mult == 100) {\n            prefix = 'h';\n        } else if (mult == 0.01) {\n            prefix = 'c';\n        } else if (mult == 1.0e3) {\n            prefix = 'K';\n        } else if (mult == 1.0e-3) {\n            prefix = 'm';\n        } else if (mult == 1.0e6) {\n            prefix = 'M';\n        } else if (mult == 1.0e-6) {\n            prefix = 'u';\n        } else if (mult == 1.0e9) {\n            prefix = 'G';\n        } else if (mult == 1.0e-9) {\n            prefix = 'n';\n        } else if (mult == 1.0e12) {\n            prefix = 'T';\n        } else if (mult == 1.0e-12) {\n            prefix = 'p';\n        }\n        /* jshint +W116 */\n\n        return prefix;\n    };\n\n    /**\n     * @private\n     */\n    var VECTOR = {\n        MV: 'F', // vector type\n        MS: 'F', // scalar type...not really necessary in javascript\n        nbpt: 4,\n        view: undefined\n    };\n\n\n    /**\n     * Sets data type for all subsequent calls to vector libraries.  Remains in effect until another call to this routine.\n     * @param ctype\n     */\n    // ~= VSTYPE - not really necessary\n    m.vstype = function(ctype) {\n        VECTOR.MS = ctype;\n        VECTOR.MV = ctype;\n        if (VECTOR.MV === 'D') {\n            VECTOR.nbpt = 8;\n        } else if ((VECTOR.MV === 'L') || (VECTOR.MV === 'F')) {\n            VECTOR.nbpt = 4;\n        } else if (VECTOR.MV === 'I') {\n            VECTOR.nbpt = 2;\n        } else if (VECTOR.MV === 'B') {\n            VECTOR.nbpt = 1;\n        } else {\n            alert(\"Unsupported vector type\");\n        }\n    };\n\n    m.log10 = function(v, lo_thresh) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        return Math.log(Math.max(v, lo_thresh)) / Math.log(10);\n    };\n\n    /**\n     * For each vector element in <src>, determine the max of <src> element and <lo_thresh>, returns the log(base10) of that value in <dst>\n     * @param\t{array}\t\tsrc\t\tInput vector.\n     * @param \t{number} \tlo_thresh\tUser-set minimum log threshold (if not defined, set default=1.0e-20). Prevent computing log of 0 or negative values.\n     * @param \t{array}\t\tdst\t\tOuput vector.  If undefined, <src> elements will be overwritten.\n     */\n    // ~= M$VLOG10- not really necessary\n    m.vlog10 = function(src, lo_thresh, dst) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        if (dst === undefined) {\n            dst = src;\n        }\n        for (var i = 0; i < src.length; i++) {\n            if (dst.length <= i) {\n                break;\n            }\n            dst[i] = Math.log(Math.max(src[i], lo_thresh)) / Math.log(10);\n        }\n    };\n\n    /**\n     * Same as vlog10 but multiply each output value by a scale factor <dbscale>.\n     * @param \t{array}\t\tsrc\t\tInput vector.\n     * @param \t{number}\tlo_thresh\tUser-set minimum log threshold.\n     *                                              If undefined, defaults to 1.0e-20. Prevent computing log of 0 or negative values.\n     * @param \t{number}\tdbscale\t\tOutput scale factor. If undefined, defaults to 1.\n     * @param \t{array}\t\tdst\t\tOutput vector. If undefined, <src> elements will be overwritten.\n     * @private\n     */\n    m.vlogscale = function(src, lo_thresh, dbscale, dst) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        if (dbscale === undefined) {\n            dbscale = 1;\n        }\n        if (dst === undefined) {\n            dst = src;\n        }\n        for (var i = 0; i < src.length; i++) {\n            if (dst.length <= i) {\n                break;\n            }\n            dst[i] = Math.log(Math.abs(Math.max(src[i], lo_thresh))) / Math.log(10);\n            dst[i] = dst[i] * dbscale;\n        }\n    };\n\n    /**\n     * Same as vlogscale but computes magnitude squared.\n     *\n     * @param \t{array}\t\tsrc\t\tInput vector.\n     * @param \t{number}\tlo_thresh\tUser-set minimum log threshold.\n     *                                              If undefined, defaults to 1.0e-20. Prevent computing log of 0 or negative values.\n     * @param \t{number}\tdbscale\t\tOutput scale factor. If undefined, defaults to 1.\n     * @param \t{array}\t\tdst\t\tOutput vector. If undefined, <src> elements will be overwritten.\n     * @private\n     */\n    m.cvmag2logscale = function(src, lo_thresh, dbscale, dst) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        if (dbscale === undefined) {\n            dbscale = 1;\n        }\n        if (dst === undefined) {\n            dst = src;\n        }\n        var j = 0;\n        for (var i = 0; i < dst.length; i++) {\n            j = 2 * i + 1;\n            if (j >= src.length) {\n                break;\n            }\n            dst[i] = (src[j - 1] * src[j - 1]) + (src[j] * src[j]);\n            dst[i] = Math.log(Math.abs(Math.max(dst[i], lo_thresh))) / Math.log(10);\n            dst[i] = dst[i] * dbscale;\n        }\n    };\n\n    /**\n     * Multiply <count> elements of <src> by <mul>, store results in <dst>\n     * @param\t{array} \tsrc\t\tInput vector.\n     * @param\t{number}\tmul\t\tVector multiplier.\n     * @param\t{array}\t\tdst\t\tOutput vector. If not defined, <src> elements will be overwritten.\n     * @param\t{number}\tcount\t\tNumber of elements to apply multiplier, starting with first <src> element.\n     */\n    // ~= M$VSMUL\n    m.vsmul = function(src, mul, dst, count) {\n        if (dst === undefined) {\n            dst = src;\n        }\n        if (count === undefined) {\n            count = dst.length;\n        }\n        count = Math.min(dst.length, count);\n        count = Math.min(src.length, count);\n\n        for (var i = 0; i < count; i++) {\n            if (dst.length <= i) {\n                break;\n            }\n            dst[i] = src[i] * mul;\n        }\n    };\n\n    /**\n     * Finds max and min values in vector <vec> and returns values.\n     * @param \t{array}\t\tvec\t\tInput vector.\n     * @param\t{number}\tsize\t\tNumber of elements to search to find max.min values.\n     * @return \t{array}\t\tmxmin\t\tIndex and value of min and max elements in <vec>.\n     */\n    // ~= M$VMXMN\n    m.vmxmn = function(vec, size) {\n        // Originally this code used an object to hold the values\n        // but Chrome 34.0.1847.131 seemed to have a bug where\n        // these values would somehow get messed up...oddly\n        // putting printouts or breakpoints prevented the\n        // problem from showing up.\n        var smax = vec[0];\n        var smin = vec[0];\n        var imax = 0;\n        var imin = 0;\n        size = Math.min(size, vec.length);\n        for (var i = 0; i < size; i++) {\n            if (vec[i] > smax) {\n                smax = vec[i];\n                imax = i;\n            }\n            if (vec[i] < smin) {\n                smin = vec[i];\n                imin = i;\n            }\n        }\n        return {\n            smax: smax,\n            smin: smin,\n            imax: imax,\n            imin: imin\n        };\n    };\n\n    /**\n     * Move <count> elements from <src> to <dest>.  Stride is the distance between each array element in either or both the input and output vectors.\n     * @param {array}\tsrc\t\tInput vector.\n     * @param {number}\tsstride\t\tInput stride.\n     * @param {array}\tdest\t\tOutput vector.\n     * @param {number}\tdstride\t\tOutput stride.\n     * @param {number}\tcount\t\tNumber of input vector elements to move, starting with 0th element of <vec>. Cannot exceed vector lengths,\n     *\t\t\t\t\ttaking into account the strides.\n     */\n    m.vmov = function(src, sstride, dest, dstride, count) {\n        if (count === undefined) {\n            count = src.length;\n        }\n        count = Math.min(src.length, count);\n        //count = Math.min(src.length, count, (count)*(dest.length)*(dstride)); //mmm-TODO\n\n        for (var i = 0; i < count; i++) {\n            var s = i * sstride;\n            var d = i * dstride;\n            if (s >= src.length) {\n                break;\n            }\n            if (d >= dest.length) {\n                break;\n            }\n            dest[d] = src[s];\n        }\n    };\n\n    /**\n     * Initialize <count> consecutive elements of input vector <vec> with value <inpval>.\n     * @param\t{array}\t\tvec\t\tInput vector\n     * @param\t{number}\tinpval\t\tValue\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <vec>.  If undefined, entire <vec> is written.\n     */\n    // ~= M$VFILL\n    // TODO - more optimal version?\n    m.vfill = function(vec, inpval, count) {\n        if (count === undefined) {\n            count = vec.length;\n        }\n        count = Math.min(vec.length, count);\n        for (var i = 0; i < count; i++) {\n            vec[i] = inpval;\n        }\n    };\n\n    /**\n     * Compute the absolute value of <count> elements in <vec> and write to output vector <dest>\n     * @param \t{array}\t\tvec\t\tInput vector.\n     * @param \t{array}\t\tdest\t\tOuput vector. If <dest> is undefined, overwrite input vector <vec>.\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <vec>. Cannot exceed vector lengths.\n     */\n    m.vabs = function(vec, dest, count) {\n        if (count === undefined) {\n            count = vec.length;\n        }\n        if (dest === undefined) {\n            dest = vec;\n        }\n        //count = Math.min(dest.length, count, vec.length); //mmm-TODO\n        for (var i = 0; i < count; i++) {\n            dest[i] = Math.abs(vec[i]);\n        }\n    };\n\n\n    /**\n     * Computes the magnitude of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVMAG\n    m.cvmag = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO\n\n        for (var i = 0; i < count; i++) {\n            var j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            dest[i] = Math.sqrt((cxvec[j - 1] * cxvec[j - 1]) + (cxvec[j] * cxvec[j]));\n        }\n    };\n\n    /**\n     * Computes the magnitude squared of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVMAG2\n    m.cvmag2 = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO\n\n        var j = 0;\n        for (var i = 0; i < count; i++) {\n            j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            dest[i] = (cxvec[j - 1] * cxvec[j - 1]) + (cxvec[j] * cxvec[j]);\n        }\n    };\n\n    /**\n     * Computes phase in radians of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVPHA\n    m.cvpha = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO\n\n        var j = 0;\n        var re = 0;\n        var im = 0;\n        for (var i = 0; i < count; i++) {\n            j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            re = cxvec[j - 1];\n            im = cxvec[j];\n            if ((re === 0.0) && (im === 0.0)) {\n                re = 1.0;\n            }\n            dest[i] = Math.atan2(im, re);\n        }\n    };\n\n    /**\n     * Computes the phase in degrees of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVPHAD\n    m.cvphad = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n\n        var j = 0;\n        var re = 0;\n        var im = 0;\n        for (var i = 0; i < count; i++) {\n            j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            re = cxvec[j - 1];\n            im = cxvec[j];\n            if ((re === 0.0) && (im === 0.0)) {\n                re = 1.0;\n            }\n            dest[i] = Math.atan2(im, re) * (180.0 / Math.PI);\n        }\n    };\n\n    /**\n     * @param n\n     * @private\n     */\n    // ~= INT(), DINT\n    m.trunc = function(n) {\n        return n - n % 1;\n    };\n\n    /**\n     * @param a1\n     * @param a2\n     * @private\n     */\n    // Transfer of sign function from Fortran\n    m.sign = function(a1, a2) {\n        if (a2 >= 0) {\n            return Math.abs(a1);\n        } else {\n            return -Math.abs(a1);\n        }\n    };\n\n    /**\n     * @method pad2\n     * @param number\n     * @private\n     */\n\n    function pad2(number) {\n        return (number < 10 ? '0' : '') + number;\n    }\n\n    /**\n     * Convert J1950 time or seconds-since-Epoch (midnight Dec-31-1949) to time-of-day. Fractional seconds accurate to milliseconds.\n     * @param \t{number}\tsec\t\tNumber of seconds.\n     * @return\t{string}\ttod\t\tTime of day\n     */\n\n    /* Output string can be in different forms as follows:\n     * -31536000 <  sec < 0                   -DDD::HH:MM:SS\n     *         0 <= sec < 86400                     HH:MM:SS\n     *         86400 <= sec < 31536000         DDD::HH:MM:SS\n     *         31536000 <=sec            YYYY:MM:DD:HH:MM:SS.<FFFFFF>\n     *                                    where FFFFFF is in microseconds\n     *\n     */\n\n    m.sec2tod = function(sec, trim_trailing_zeros) {\n        var tod = \"\";\n        var j1950 = Date.UTC(1950, 0, 1); //From 1950 to 1970\n        var j1950Date = new Date(j1950); //debug var\n        var j1949 = Date.UTC(1949, 11, 31);\n        var j1949Date = new Date(j1949); //debug var\n        var d = new Date();\n        var midnightToday = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0, 0);\n        var diffDaySecs = 86400; //    86400 secs = 24*60*60\n        var diffYearSecs = 31536000; // 31536000 secs = 365*24*60*60\n        var negDiffYearSecs = -1 * diffYearSecs; //-31536000 secs\n\n        if (sec >= 0) {\n            if (sec < diffDaySecs) {\n                // hh:mm:ss\n                var millisecs = midnightToday.getTime() + (sec * 1000);\n                var d = new Date(millisecs);\n                tod = pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n            } else if (sec === 86400) {\n                tod = \"24:00:00\";\n            } else if (sec < diffYearSecs) {\n                // ddd:hh:mm:ss\n                var days = sec / diffDaySecs;\n                days = [days > 0 ? Math.floor(days) : Math.ceil(days)];\n                var d = new Date((sec * 1000) + midnightToday.getTime());\n                tod = days.toString() + \"::\" + pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n            } else {\n                // convert to j1950\n                var secMilli = Math.floor(sec * 1000) + j1950;\n                d = new Date(secMilli);\n                tod = d.getUTCFullYear() + \":\" + pad2(d.getUTCMonth() + 1) + \":\" + pad2(d.getUTCDate()) + \"::\" +\n                    pad2(d.getUTCHours()) + \":\" + pad2(d.getUTCMinutes()) + \":\" + pad2(d.getUTCSeconds());\n            }\n        } else {\n            if (sec > negDiffYearSecs) {\n                // -ddd:hh:mm:ss\n                var days = sec / diffDaySecs;\n                days = (days <= 0) ? Math.ceil(days) : Math.floor(days);\n                var d = new Date(Math.abs(sec * 1000) + midnightToday.getTime());\n                if (days === 0) {\n                    days = \"-0\";\n                } else {\n                    days = days.toString();\n                }\n                tod = days + \"::\" + pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n            } else {\n                // convert to j1950\n                var secMilli = Math.floor(sec * 1000) + j1950;\n                d = new Date(secMilli);\n                tod = d.getUTCFullYear() + \":\" + pad2(d.getUTCMonth() + 1) + \":\" + pad2(d.getUTCDate()) + \"::\" +\n                    pad2(d.getUTCHours()) + \":\" + pad2(d.getUTCMinutes()) + \":\" + pad2(d.getUTCSeconds());\n            }\n        }\n\n        // violate legacy behavior, include full precision always\n        // even if we are on a full second boundary, otherwise\n        // on rising/falling rasters it can look like the display\n        // is flickering\n        var fractional = (sec % 1);\n        if (fractional === 0.0) {\n            tod += \".000000\";\n        } else {\n            tod += \".\" + Math.abs(sec % 1).toPrecision(6).slice(2, 8);\n        }\n\n        if (trim_trailing_zeros) {\n            var dloc = tod.indexOf(\".\");\n            var zloc = -1;\n            // If there is a 'decimal point'\n            if (dloc !== -1) {\n                zloc = tod.substr(dloc, tod.length).indexOf(\"0\");\n            }\n            if (zloc !== -1) {\n                tod = tod.substr(0, dloc + zloc);\n            }\n        }\n        return tod;\n\n    };\n\n    /**\n     * The offset to convert midnight Jan 1st 1970 to\n     * midnight Jan 1st 1950.\n     *\n     * @private\n     */\n    var j1950offset = (20.0 * 365.0 + 5.0) * (24 * 3600);\n\n    /**\n     * 0.0 - 86400 == m.sec2tod\n     * >86400 then modulo 86400\n     *   if modulo <= 0 return m.sec2tod(modulo)+86400\n     *   if module <\n     */\n    m.sec2tspec = function(sec, mode, trim_trailing_zeros) {\n        mode = mode || \"\";\n        if (sec >= 0 && sec <= 86400) {\n            return m.sec2tod(sec, trim_trailing_zeros);\n        } else {\n            sec = sec % 86400;\n            if (mode !== \"delta\" && sec <= 0) {\n                return m.sec2tod(sec + 86400, trim_trailing_zeros);\n            } else if (mode === \"delta\" && sec <= 0) {\n                return \"-\" + m.sec2tod(-1 * sec, trim_trailing_zeros);\n            } else {\n                return m.sec2tod(sec, trim_trailing_zeros);\n            }\n        }\n    };\n\n    /**\n     * @param \t{number}\tsec\t\tNumber of seconds.\n     * @return\t{string}\ttod\t\tTime of day\n     */\n\n    m.sec2tod_j1970 = function(sec) {\n        var tod = \"\";\n        var d;\n        if ((sec >= 0) && (sec < 86400)) {\n            // hh:mm:ss\n            d = new Date(sec * 1000);\n            tod = pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n\n        } else if ((sec < 0) && (sec > -31536000)) {\n            // -ddd:hh:mm:ss\n            var days = -1 * (sec / (24 * 60 * 60));\n            d = new Date(sec * 1000);\n            tod = days.toString() + \"::\" + pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n        } else {\n            // convert to j1950\n            d = new Date((sec - j1950offset) * 1000);\n            tod = d.getFullYear() + \":\" + pad2(d.getMonth()) + \":\" + pad2(d.getDate()) + \"::\" +\n                pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n        }\n        if ((sec % 1) !== 0) {\n            tod += \".\" + (sec % 1).toPrecision(6).slice(2, 8);\n        }\n        return tod;\n    };\n\n    m.j1970toj1950 = function(t) {\n        if (t.getTime !== undefined) {\n            return ((t.getTime() / 1000) + j1950offset);\n        } else {\n            return (t + j1950offset);\n        }\n    };\n\n    m.j1950toj1970 = function(t) {\n        return (t - j1950offset);\n    };\n\n    /**\n     * @private\n     */\n    // Throttle calls to \"callback\" routine and ensure that it\n    // is not invoked any more often than \"delay\" milliseconds.\n    //\n    m.throttle = function(delay, callback) {\n        var previousCall = new Date().getTime();\n        return function() {\n            var time = new Date().getTime();\n\n            //\n            // if \"delay\" milliseconds have expired since\n            // the previous call then propagate this call to\n            // \"callback\"\n            //\n            if ((time - previousCall) >= delay) {\n                previousCall = time;\n                callback.apply(null, arguments);\n            }\n        };\n    };\n\n    m.pad = function(value, padamt) {\n        if (!padamt) {\n            return 0;\n        }\n        if (typeof padamt === 'string') {\n            if (padamt.endsWith(\"%\")) {\n                padamt = value * (parseFloat(padamt) / 100.0);\n            } else {\n                padamt = parseFloat(padamt);\n            }\n        }\n\n        return padamt;\n    };\n\n    // Node: Export function\n    module.exports = m;\n\n}());\n","/**\n * @license\n * File: mx.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jslint nomen: true, browser: true, devel: true*/\n\n//Uses Immediately-invoked Function Expressions (IIFE)s for namespaces\n//See http://addyosmani.com/blog/essential-js-namespacing/ for details.\n\n/**\n * This namespace includes generic graphical routines and functions\n * the manipulate a canvas.\n *\n * @namespace\n */\n\n/* global module */\n/* global require */\n/* global requestAnimFrame */\n/* global cancelAnimFrame */\n\n(function() {\n\n    var tinycolor = require(\"tinycolor2\");\n    var ColorMap = require(\"./ColorMap\");\n    var common = require(\"./common\");\n    var CanvasInput = require(\"./CanvasInput\");\n    var m = require(\"./m\");\n\n    function mx() {}\n\n    mx.DomMenu = require(\"./mx.dommenu\");\n    mx.XW_INIT = -3;\n    mx.XW_DRAW = 1;\n    mx.XW_EVENT = 2;\n    mx.XW_UPDATE = 3;\n    mx.XW_COMMAND = 5;\n    mx.SB_EXPAND = 1;\n    mx.SB_SHRINK = 2;\n    mx.SB_FULL = 3;\n    mx.SB_STEPINC = 4;\n    mx.SB_STEPDEC = 5;\n    mx.SB_PAGEINC = 6;\n    mx.SB_PAGEDEC = 7;\n    mx.SB_DRAG = 8;\n    mx.SB_WHEELUP = 9;\n    mx.SB_WHEELDOWN = 10;\n\n    // Grayscale colors:\n    // \"15%,15%,10%\" - very dark gray\n    // \"25%,25%,20%\" - dark gray\n    // \"35%,35%,30%\" - medium gray\n    // \"40%,40%,35%\" - light medium gray\n    // \"60%,60%,55%\" - light gray\n    // \"70%,70%,65%\" - very light gray\n    // \"80%,80%,75%\" - very very light gray\n\n    mx.L_ArrowLeft = 1001;\n    mx.L_ArrowRight = 1002;\n    mx.L_ArrowUp = 1003;\n    mx.L_ArrowDown = 1004;\n    mx.L_dashed = 801;\n    mx.GBorder = 3; // TODO Is this a good original value to use...?\n    mx.L_RModeOff = 900;\n    mx.L_RModeOn = 901;\n    mx.L_PixelSymbol = 1;\n    mx.L_CircleSymbol = 2;\n    mx.L_SquareSymbol = 3;\n    mx.L_PlusSymbol = 4;\n    mx.L_XSymbol = 5;\n    mx.L_TriangleSymbol = 6;\n    mx.L_ITriangleSymbol = 7;\n    mx.L_HLineSymbol = 8;\n    mx.L_VLineSymbol = 9;\n\n    /**\n     * Set to True for a retro look that would make hipsters proud\n     */\n    mx.LEGACY_RENDER = false;\n\n    /**\n     * The zoom stack structure object\n     * @private\n     */\n    mx.STKSTRUCT = function() {\n        this.xmin = 0.0; // real world val at x1(origin=1,4) or x2(origin=2,4)\n        this.xmax = 0.0; // real world val at x2(origin=1,4) or x1(origin=2,4)\n        this.ymin = 0.0; // real world val at y2(origin=1,2) or y1(origin=3,4)\n        this.ymax = 0.0; // real world val at y1(origin=1,2) or y2(origin=3,4)\n        this.xscl = 0.0; // ratio of X real world units to pixel units\n        this.yscl = 0.0; // ratio of Y real world units to pixel units\n        this.x1 = 0; // left edge relative to window (pixels)\n        this.y1 = 0; // top edge relative to window (pixels)\n        this.x2 = 0; // right edge relative to window (pixels)\n        this.y2 = 0; // bottom edge relative to window (pixels)\n    };\n\n    /**\n     * The scrollbar structure object used to hold state about scrolling\n     * @private\n     */\n    mx.SCROLLBAR = function() {\n        this.flag = null; // int_4 // flag field for MX$SCROLLBAR routine\n        this.action = null; // int_4 // returned action performed (XW_EVENT)\n        this.smin = null;\n        this.srange = null; // real_8 // real_8 // min and range values of scroll\n        // bar\n        this.tmin = null;\n        this.trange = null; // real_8 // real_8 // min and range values of trough\n        this.step = null; // real_8 // ratios of smin to move for step\n        this.page = null; // real_8 // ratios of smin to move for page\n        this.scale = null; // real_8 // ratio to scale by for expand/shrink\n        this.dragoutline = null; // bool_4 // FALSE = smooth scroll, TRUE = drag &\n        // drop\n        this.initial_pause = null; // real_4\n        this.repeat_pause = null; // real_4\n\n        this.x = null;\n        this.y = null;\n        this.w = null;\n        this.h = null; // int_2 // These fields are private and are to be\n        this.s1 = null;\n        this.sw = null;\n        this.swmin = null;\n        this.soff = null; // int_2 // set through other interfaces\n        this.a1 = null;\n        this.a2 = null;\n        this.arrow = null; // int_2\n        this.mxevent = null; // bool_1\n        this.origin = null; // int_1\n        this.repeat_count = null; // int_4\n    };\n\n    /**\n     * @method WARPBOX\n     * @private\n     */\n    function WARPBOX() {\n        this.xo = 0;\n        this.yo = 0;\n        this.xl = 0;\n        this.yl = 0;\n        this.xmin = 0;\n        this.xmax = 0;\n        this.ymin = 0;\n        this.ymax = 0;\n        this.func = undefined;\n        this.mode = undefined;\n    }\n\n    /**\n     * Defines 2 canvas layers, canvas and wid_canvas\n     * @method MX\n     * @param element\n     * @private\n     */\n    function MX(element) { // this is where the canvases are setup/defined\n        this.root = element;\n\n        // Create a div to hold all the various canvas layers\n        this.parent = document.createElement('div');\n        this.parent.style.position = \"relative\";\n        //this.parent.style.height = \"100%\"; //element.clientHeight;\n        //this.parent.style.width = \"100%\"; //element.clientHeight;\n        //this.parent.clientWidth = element.clientWidth;\n        this.parent.width = element.clientWidth;\n        this.parent.height = element.clientHeight;\n        element.appendChild(this.parent);\n\n        // Create the canvas that will hold the plot\n        this.canvas = document.createElement('canvas');\n        this.canvas.style.position = \"absolute\";\n        this.canvas.style.top = \"0px\";\n        this.canvas.style.left = \"0px\";\n        this.canvas.width = element.clientWidth;\n        this.canvas.height = element.clientHeight;\n\n        this.parent.appendChild(this.canvas);\n        this.active_canvas = this.canvas;\n\n        // This canvas holds all widgets and reacts to mouse events\n        this.wid_canvas = document.createElement('canvas');\n        this.wid_canvas.style.position = \"absolute\";\n        this.wid_canvas.style.top = \"0px\";\n        this.wid_canvas.style.left = \"0px\";\n        this.wid_canvas.style.zIndex = 1;\n        this.wid_canvas.width = element.clientWidth;\n        this.wid_canvas.height = element.clientHeight;\n\n        this.parent.appendChild(this.wid_canvas);\n\n        //if ((this.canvas.height <= 0) || (this.canvas.width <= 0)) {\n        //\tthrow \"Plot could not be instantiated correctly; did you specify a size for your placeholder?\";\n        //}\n\n        this.font = undefined; // the full calculated font string\n        this.font_family = \"Courier New, monospace\"; // default font family\n        this.font_width = 8;\n        this.font_scaled = false;\n        this.text_w = 0; // text width\n        this.text_h = 0; // text height\n        this.level = 0; // current zoom level\n        this.width = this.parent.width; // width of window\n        this.height = this.parent.height; // height of window\n        this.xpos = 0; // x-pixel loc of mouse during event\n        this.ypos = 0; // y-pixel loc of mouse during event\n        this.xmrk = 0.0; // absc coord of mark\n        this.ymrk = 0.0;\n        this.origin = 1;\n        this.stk = [new mx.STKSTRUCT()]; // zoom stack\n\n        mx.setbgfg(this, \"black\", \"white\");\n\n        // Custom stuff for the Javascript implementation\n        this.event_cb = undefined;\n        this.warpbox = undefined;\n\n        // draw_mode flags;\n        this.rmode = false;\n        this.linewidth = 1;\n        this.style = undefined;\n        this.xi = false;\n\n        // Button Eventing variables\n        this.button_release = 0;\n        this.button_press = 0;\n        this.state_mask = 0;\n\n        // Specifies display field\n        this.l = 0;\n        this.r = this.width;\n        this.t = 0;\n        this.b = this.height;\n\n        // Scrollbar state\n        this.scrollbar_x = new mx.SCROLLBAR();\n        this.scrollbar_y = new mx.SCROLLBAR();\n\n        // Prompt mode state variable\n        this.prompt = undefined;\n\n        // Colormap\n        this.pixel = undefined;\n\n        // Render Canvas\n        this._renderCanvas = document.createElement(\"canvas\");\n        // Syncronous render should only be used for testing\n        this._syncRender = false;\n    }\n\n    /* This is used as a helper function for defining highlight ranges/\n     */\n\n    function in_fill_range(ele, range_begin, range_end) {\n        var left = false;\n        var right = false;\n\n        if (ele >= range_begin) {\n            left = true;\n        }\n\n\n        if (ele <= range_end) {\n            right = true;\n        }\n\n        if (left === true && right === true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Create Canvas and it's Mx structure and functions\n     * @param {element}\telement \tReference to a DOM window element\n     */\n    /* Step #5*/\n    mx.open = function(element) {\n        var Mx = new MX(element); /* Step #6*/\n\n        Mx.wid_canvas.oncontextmenu = function(event) {\n            event.preventDefault();\n            return false;\n        };\n\n        this._ctx = Mx.active_canvas.getContext(\"2d\");\n\n        Mx.onmousemove = (function(Mx) {\n            return function(e) {\n                var rect = e.target.getBoundingClientRect();\n                // Screen x/y of mouse\n                Mx.x = e.x || e.clientX;\n                Mx.y = e.y || e.clientY;\n                // Plot relative x/y of mouse\n                Mx.xpos = (e.offsetX === undefined) ? (e.pageX - rect.left - window.scrollX) : e.offsetX;\n                Mx.ypos = (e.offsetX === undefined) ? (e.pageY - rect.top - window.scrollY) : e.offsetY;\n\n                //\t\t\t\tMx.xpos = (e.offsetX === undefined) ? e.layerX : e.offsetX;\n                //\t\t\t\tMx.ypos = (e.offsetY === undefined) ? e.layerY : e.offsetY;\n\n                if (Mx.warpbox) {\n                    if ((e.ctrlKey || e.metaKey) && (Mx.warpbox.alt_style !== undefined)) {\n                        Mx.warpbox.style = Mx.warpbox.alt_style;\n                    } else {\n                        Mx.warpbox.style = Mx.warpbox.def_style;\n                    }\n                    mx.redraw_warpbox(Mx);\n                }\n\n                mx.widget_callback(Mx, e);\n            };\n        })(Mx);\n\n        Mx.onmouseup = (function(Mx) {\n            return function(event) {\n                if (Mx.warpbox) {\n                    mx.onWidgetLayer(Mx, function() {\n                        mx.erase_window(Mx);\n                    });\n\n                    var old_warpbox = Mx.warpbox;\n                    Mx.warpbox = undefined;\n\n                    if (event.which === 1 || event.which === 3) {\n                        if (old_warpbox.func) {\n                            var xo = old_warpbox.xo;\n                            var yo = old_warpbox.yo;\n                            var xl = old_warpbox.xl;\n                            var yl = old_warpbox.yl;\n\n                            if (old_warpbox.mode === \"vertical\") {\n                                xo = Mx.l;\n                                xl = Mx.r;\n                            } else if (old_warpbox.mode === \"horizontal\") {\n                                yo = Mx.t;\n                                yl = Mx.b;\n                            } // else \"box\"\n                            old_warpbox.func(event, xo, yo, xl, yl,\n                                old_warpbox.style.return_value,\n                                old_warpbox.mode);\n                        }\n                    }\n\n                }\n                mx.widget_callback(Mx, event);\n            };\n        })(Mx);\n\n        Mx.onmousedown = (function(Mx) {\n            return function(event) {\n                event.preventDefault();\n                mx.widget_callback(Mx, event);\n                return false;\n            };\n        })(Mx);\n\n        Mx.onkeydown = (function(Mx) {\n            return function(event) {\n                if (Mx.warpbox) {\n                    var keyCode = common.getKeyCode(event);\n                    if (((keyCode === 17) || // Ctrl\n                            (keyCode === 224) || // Mac Command Firefox\n                            (keyCode === 91) || // Safari/Chrome Left-command\n                            (keyCode === 93)) && // Safari/Chrome Right-command\n                        (Mx.warpbox.style !== Mx.warpbox.alt_style)) {\n                        Mx.warpbox.style = Mx.warpbox.alt_style;\n                        mx.redraw_warpbox(Mx);\n                    }\n                }\n\n                mx.widget_callback(Mx, event);\n            };\n        })(Mx);\n\n        Mx.onkeyup = (function(Mx) {\n            return function(event) {\n                if (Mx.warpbox) {\n                    var keyCode = common.getKeyCode(event);\n                    if (((keyCode === 17) || // Ctrl\n                            (keyCode === 224) || // Mac Command Firefox\n                            (keyCode === 91) || // Safari/Chrome Left-command\n                            (keyCode === 93)) && // Safari/Chrome Right-command\n                        (Mx.warpbox.style !== Mx.warpbox.def_style)) {\n                        Mx.warpbox.style = Mx.warpbox.def_style;\n                        mx.redraw_warpbox(Mx);\n                    }\n                }\n            };\n        })(Mx);\n\n        Mx.ontouchend = (function(Mx) {\n            return function(event) {\n                Mx.onmouseup({\n                    which: 1\n                });\n            };\n        })(Mx);\n\n        Mx.ontouchmove = (function(Mx) {\n            return function(event) {\n                // Compute the total offset - consider caching offset and only calculating on resize\n                var element = Mx.canvas;\n                var offsetX = 0;\n                var offsetY = 0;\n                if (element.offsetParent !== undefined) {\n                    do {\n                        offsetX += element.offsetLeft;\n                        offsetY += element.offsetTop;\n                    } while ((element = element.offsetParent));\n                }\n\n                Mx.xpos = event.targetTouches[0].pageX - offsetX;\n                Mx.ypos = event.targetTouches[0].pageY - offsetY;\n                mx.redraw_warpbox(Mx);\n            };\n        })(Mx);\n\n        mx.enableListeners(Mx);\n\n        return Mx;\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.enableListeners = function(Mx) {\n        mx.addEventListener(Mx, \"mousemove\", Mx.onmousemove, false);\n        window.addEventListener(\"mouseup\", Mx.onmouseup, false);\n        mx.addEventListener(Mx, \"mousedown\", Mx.onmousedown, false);\n        window.addEventListener(\"keydown\", Mx.onkeydown, false);\n        window.addEventListener(\"keyup\", Mx.onkeyup, false);\n        //mx.addEventListener(Mx, \"touchend\", Mx.ontouchend);\n        //mx.addEventListener(Mx, 'touchmove', Mx.ontouchmove, false);\n\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.disableListeners = function(Mx) {\n        mx.removeEventListener(Mx, \"mousemove\", Mx.onmousemove, false);\n        window.removeEventListener(\"mouseup\", Mx.onmouseup, false);\n        mx.removeEventListener(Mx, \"mousedown\", Mx.onmousedown, false);\n        window.removeEventListener(\"keydown\", Mx.onkeydown, false);\n        window.removeEventListener(\"keyup\", Mx.onkeyup, false);\n        //mx.addEventListener(Mx, \"touchend\", Mx.ontouchend);\n        //mx.addEventListener(Mx, 'touchmove', Mx.ontouchmove, false);\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @param callback\n     * @param useCapture\n     * @private\n     */\n    mx.addEventListener = function(Mx, event, callback, useCapture) {\n        return Mx.wid_canvas.addEventListener(event, callback, useCapture);\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @param callback\n     * @param useCapture\n     * @private\n     */\n    mx.removeEventListener = function(Mx, event, callback, useCapture) {\n        return Mx.wid_canvas.removeEventListener(event, callback, useCapture);\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @private\n     */\n    mx.dispatchEvent = function(Mx, event) {\n        return Mx.wid_canvas.dispatchEvent(event);\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.onWidgetLayer = function(Mx, func) {\n        mx.onCanvas(Mx, Mx.wid_canvas, func);\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.onCanvas = function(Mx, canvas, func) {\n        var current_active = Mx.active_canvas;\n        Mx.active_canvas = canvas;\n        try {\n            if (func) {\n                return func();\n            }\n        } finally {\n            Mx.active_canvas = current_active;\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.withWidgetLayer = function(Mx, func) {\n        var f = function() {\n            mx.onWidgetLayer(Mx, func);\n        };\n        return f;\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.render = function(Mx, func) {\n        if (!func) {\n            return;\n        }\n\n        var active_canvas = Mx.active_canvas;\n\n        if (Mx._syncRender === false) {\n            if (!active_canvas._animationFrameHandle) {\n                active_canvas._animationFrameHandle = requestAnimFrame(function() {\n                    active_canvas._animationFrameHandle = undefined;\n                    func();\n                });\n            }\n        } else {\n            func();\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param value\n     * @private\n     */\n    mx.fullscreen = function(Mx, value) {\n        if (value === undefined) {\n            value = !Mx.fullscreen;\n        }\n        if (value) {\n            Mx.fullscreen = {\n                position: Mx.root.style.position,\n                height: Mx.root.style.height,\n                width: Mx.root.style.width,\n                left: Mx.root.style.left,\n                top: Mx.root.style.top,\n                zIndex: Mx.root.style.zIndex\n            };\n            Mx.root.style.position = \"fixed\";\n            Mx.root.style.height = \"100%\";\n            Mx.root.style.width = \"100%\";\n            Mx.root.style.left = \"0px\";\n            Mx.root.style.top = \"0px\";\n            Mx.root.style.zIndex = 16777271; // http://www.puidokas.com/max-z-index/\n        } else {\n            Mx.root.style.position = Mx.fullscreen.position;\n            Mx.root.style.height = Mx.fullscreen.height;\n            Mx.root.style.width = Mx.fullscreen.width;\n            Mx.root.style.left = Mx.fullscreen.left;\n            Mx.root.style.top = Mx.fullscreen.top;\n            Mx.root.style.zIndex = Mx.fullscreen.zIndex;\n            Mx.fullscreen = undefined;\n        }\n        mx.checkresize(Mx);\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.checkresize = function(Mx) {\n        var canvas = Mx.canvas;\n        if ((canvas.height !== Mx.root.clientHeight) || (canvas.width !== Mx.root.clientWidth)) {\n\n            Mx.height = Mx.root.clientHeight;\n            Mx.width = Mx.root.clientWidth;\n\n            Mx.canvas.height = Mx.height;\n            Mx.canvas.width = Mx.width;\n            Mx.wid_canvas.height = Mx.height;\n            Mx.wid_canvas.width = Mx.width;\n\n            return true;\n        }\n        return false;\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.invertbgfg = function(Mx) {\n        mx.setbgfg(Mx, Mx.fg, Mx.bg, !Mx.xi);\n    };\n\n    /**\n     * @param color1\n     * @param color2\n     * @param color3\n     * @private\n     */\n    mx.mixcolor = function(color1, color2, perc1to2) {\n        var c1 = tinycolor(color1).toRgb();\n        var c2 = tinycolor(color2).toRgb();\n        var mix = 1.0 - perc1to2;\n        c2.r = c1.r * mix + c2.r * perc1to2;\n        c2.g = c1.g * mix + c2.g * perc1to2;\n        c2.b = c1.b * mix + c2.b * perc1to2;\n        return tinycolor(c2).toHexString(true);\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param fillStyle\n     * @private\n     */\n    mx.linear_gradient = function(Mx, x, y, w, h, fillStyle) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        var step_size = 1.0 / fillStyle.length;\n        var lingrad = ctx.createLinearGradient(x, y, w, h);\n        for (var i = 0; i < fillStyle.length - 1; i++) {\n            lingrad.addColorStop(step_size * (i), fillStyle[i]);\n        }\n        lingrad.addColorStop(1, fillStyle[fillStyle.length - 1]);\n        return lingrad;\n    };\n\n    /**\n     * Set's the background and foreground\n     * xwfg : usually used for text on a widget\n     * xwbg : background for a widget\n     * @param Mx\n     * @param bg\n     * @param fg\n     * @param xi\n     * @private\n     */\n    mx.setbgfg = function(Mx, bg, fg, xi) {\n        Mx.bg = tinycolor(bg).toHexString();\n        Mx.fg = tinycolor(fg).toHexString();\n        Mx.xi = tinycolor(xi).toHexString();\n\n        if ((tinycolor.equals(Mx.bg, \"black\")) && (tinycolor.equals(Mx.fg, \"white\"))) { ///mmm\n            Mx.xwfg = Mx.fg; // X-Widget Foreground color\n            Mx.xwbg = \"rgb(35%,35%,30%)\"; // X-Widget Background color\n            Mx.xwts = \"rgb(60%,60%,55%)\"; // X-Widget top shadow color\n            Mx.xwbs = \"rgb(25%,25%,20%)\"; // X-Widget bottom shadow color\n            Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n            Mx.xwlo = \"rgb(15%,15%,10%)\"; // X-Widget top shadow color\n            Mx.hi = Mx.xwts; //  Highlight color\n        } else if ((tinycolor.equals(Mx.bg, \"white\")) && (tinycolor.equals(Mx.fg, \"black\"))) {\n            Mx.xwfg = Mx.fg; // X-Widget Foreground color\n            Mx.xwbg = \"rgb(60%,60%,55%)\"; // X-Widget Background color\n            Mx.xwts = \"rgb(80%,80%,75%)\"; // X-Widget top shadow color\n            Mx.xwbs = \"rgb(40%,40%,35%)\"; // X-Widget bottom shadow color\n            Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n            Mx.xwlo = \"rgb(70%,70%,65%)\";\n            Mx.hi = Mx.xwbs; //  Highlight color\n        } else {\n            var clr = tinycolor(Mx.bg).toRgb();\n            var hsp = Math.sqrt( // HSP equation from http://alienryderflex.com/hsp.html\n                0.299 * (clr.r * clr.r) +\n                0.587 * (clr.g * clr.g) +\n                0.114 * (clr.b * clr.b)\n            );\n            if (hsp > 127.5) { // light\n                Mx.xwfg = \"black\";\n                Mx.xwbg = \"rgb(60%,60%,55%)\"; // X-Widget Background color\n                Mx.xwts = \"rgb(80%,80%,75%)\"; // X-Widget top shadow color\n                Mx.xwbs = \"rgb(40%,40%,35%)\"; // X-Widget bottom shadow color\n                Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n                Mx.xwlo = \"rgb(70%,70%,65%)\";\n                Mx.hi = Mx.xwts;\n            } else { // dark\n                Mx.xwfg = \"white\";\n                Mx.xwbg = \"rgb(35%,35%,30%)\"; // X-Widget Background color\n                Mx.xwts = \"rgb(60%,60%,55%)\"; // X-Widget top shadow color\n                Mx.xwbs = \"rgb(25%,25%,20%)\"; // X-Widget bottom shadow color\n                Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n                Mx.xwlo = \"rgb(15%,15%,10%)\"; // X-Widget top shadow color\n                Mx.hi = Mx.xwbs;\n            }\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param theme\n     * @private\n     */\n    mx.settheme = function(Mx, theme) {\n        Mx.bg = theme.bg;\n        Mx.fg = theme.fg;\n        Mx.xi = theme.xi;\n        Mx.xwfg = theme.xwfg;\n        Mx.xwbg = theme.xwbg;\n        Mx.xwts = theme.xwts;\n        Mx.xwbs = theme.xwbs;\n        Mx.xwlo = theme.xwlo;\n        Mx.hi = theme.hi;\n    };\n\n    /**\n     * Close graphics windows.\n     * @param Mx\n     */\n    mx.close = function(Mx) {\n        var canvas = Mx.wid_canvas;\n        canvas.removeEventListener(\"mousemove\", Mx.onmousemove, false);\n        //canvas.removeEventListener(\"touchmove\", Mx.ontouchmove);\n        canvas.removeEventListener(\"mouseup\", Mx.onmouseup, false);\n        //canvas.addEventListener(\"touchend\", Mx.onmouseup);\n\n        if (Mx.parent && Mx.parent.parentNode) {\n            Mx.parent.parentNode.removeChild(Mx.parent);\n        }\n    };\n\n    /**\n     * Draws and implements a scrollbar\n     * @param Mx\n     * @param sb\n     * @param xs\n     * @param xe\n     * @param ys\n     * @param ye\n     * @param out\n     * @param qs\n     * @param qe\n     * @param mouseEvent\n     * @param scrollbarState\n     */\n    //\n    // ~= MX$SCROLLBAR\n    //\n    mx.scrollbar = function(Mx, sb, xs, xe, ys, ye, out, qs, qe, mouseEvent, scrollbarState) {\n        // Param types:\n        // mx.SCROLLBAR* sb,\n        // int xs, int xe, int ys, int ye,\n        // real* ps, real* pe, real qs, real qe\n\n        var mode; // an int\n        var action; // an int\n        var origin; // an int\n        var stat = 0; // an int\n\n        var step; // a real_8\n        var page; // a real_8\n        var scale; // a real_8\n        var sblocal = new mx.SCROLLBAR(); // a SCROLLBAR\n\n        mode = (sb.flag !== undefined ? sb.flag : sb); // REFACTOR - if user sends in a number instead of a scrollbar\n        action = Math.abs(mode);\n\n        if (ye - ys > xe - xs) {\n            if (Mx.origin < 3) {\n                origin = 2; /* inverted Y scrollbar */\n            } else {\n                origin = 4; /* normal Y scrollbar */\n            }\n        } else {\n            if (Mx.origin & 2) {\n                origin = 3; /* inverted X scrollbar */\n            } else {\n                origin = 1; /* normal X scrollbar */\n            }\n        }\n\n        if (action < 10) {\n            sb = sblocal; /* use local SB structure */\n        }\n        if (action < 10 || sb.action === 0) {\n            /* re-init the SB structure */\n            mx.scroll(Mx, sb, mx.XW_INIT, undefined, scrollbarState);\n            sb.flag = mode;\n            /* Turn off repeated event handling in mx_scroll */\n            sb.initial_pause = -1.0;\n            mx.scroll_loc(sb, xs, ys, xe - xs + 1, ye - ys + 1, origin, scrollbarState);\n        }\n        sb.srange = out.pe - out.ps;\n\n        switch (action) {\n            case 0:\n                step = page = scale = 1.0;\n                break;\n            case 1:\n            case 11:\n                step = page = 0.9 * sb.srange;\n                scale = 2.0;\n                break;\n            case 2:\n            case 12:\n                step = 0.1 * sb.srange;\n                page = 9 * step;\n                scale = 2.0;\n                break;\n            case 3:\n            case 13:\n                step = 1.0;\n                page = sb.srange - 1.0;\n                scale = 1.0;\n                break;\n            default:\n                return 0;\n        }\n        mx.scroll_vals(sb, out.ps, sb.srange, qs, qe - qs, step, page, scale, scrollbarState);\n\n        if (mode === 0) {\n            mx.scroll(Mx, sb, mx.XW_DRAW, undefined, undefined); // No need for a mouse event\n        } else {\n            if (mx.scroll(Mx, sb, mx.XW_EVENT, mouseEvent, scrollbarState)) {\n                if (out.ps !== sb.smin) {\n                    out.ps = sb.smin;\n                    stat += 1;\n                }\n                if (out.pe !== sb.smin + sb.srange) {\n                    out.pe = sb.smin + sb.srange;\n                    stat += 2;\n                }\n            }\n        }\n        return stat;\n    };\n\n    /**\n     * Instantiate scrollbar on graphics window\n     * @param Mx\n     * @param sv\n     * @param op\n     * @param mouseEvent\n     * @param scrollbarState\n     */\n    //\n    // ~= mx_scroll\n    //\n    mx.scroll = function(Mx, sv, op, mouseEvent, scrollbarState) {\n        var btn; // an int\n        var smin; // a real_8\n        var srange; // a real_8\n        var s; // an int_4\n\n        if (sv === undefined) {\n            return false; /* an mx.SCROLLBAR */\n        }\n\n        switch (op) {\n            case mx.XW_INIT:\n                mx.scroll_loc(sv, 0, 0, Mx.width, 20, 1, scrollbarState);\n                mx.scroll_vals(sv, 0.0, 10.0, 0.0, 100.0, 1.0, 10.0, 1.0, scrollbarState);\n                sv.flag = 0;\n                sv.action = 0;\n                sv.initial_pause = 0.25;\n                sv.repeat_pause = 0.05;\n                sv.mxevent = true;\n                sv.repeat_count = 0;\n                break;\n            case mx.XW_EVENT:\n                /*  Determine which button, if any, was pressed/released\n                 */\n                btn = 0;\n                if (sv.mxevent) { // TODO make sure mxevent is set properly when an event goes off - how is this supposed to be set?\n                    btn = (Mx.button_release) ? -Mx.button_release : Mx.button_press;\n                } else if (mouseEvent.type === \"mousedown\" || mouseEvent.type === \"mouseup\") {\n                    // TODO Does this case ever happen?\n                    switch (mouseEvent.which) {\n                        case 1:\n                            btn = 1;\n                            break;\n                        case 2:\n                            btn = 2;\n                            break;\n                        case 3:\n                            btn = 3;\n                            break;\n                            /* Add these cases for the mouse wheel */\n                        case 4:\n                            btn = 4;\n                            break;\n                        case 5:\n                            btn = 5;\n                            break;\n                    }\n                    if (mouseEvent.type === \"mouseup\") {\n                        btn = -btn;\n                    }\n                } else if (mouseEvent.type === \"mousewheel\" || mouseEvent.type === \"DOM-MouseScroll\") {\n                    // TODO Does this case ever happen?\n                    if (mouseEvent.wheelDelta && mouseEvent.wheelDelta > 0) {\n                        btn = 4; // TODO is 4 right for negative scroll (aka a scroll forwards away from the user)\n                        // TODO Do we need to worry about a release here?\n                    } else if (mouseEvent.wheelDelta && mouseEvent.wheelDelta < 0) {\n                        btn = 5; // TODO is 5 right for negative scroll (aka a scroll backward towards the user)\n                        // TODO Do we need to worry about a release here?\n                    }\n                }\n\n                if (sv.action === 0) {\n                    /*  First-time action -- only interested in button presses\n                     *  1 or 2 within our bounds\n                     */\n                    /* If scroll wheel, pretend we're on vertical scroll bar */\n                    if (btn === 4 || btn === 5) {\n                        Mx.xpos = sv.x;\n                    }\n\n\n                    /* Button !=1,2,4,5 OR NOT on scroll bar */\n                    if ((btn !== 1 && btn !== 2 && btn !== 4 && btn !== 5) ||\n                        Mx.xpos < sv.x || Mx.ypos < sv.y ||\n                        Mx.xpos > sv.x + sv.w || Mx.ypos > sv.y + sv.h) {\n                        return false;\n                    }\n                } else if (btn < 0) {\n                    /* Any button release within a repeated action will make us exit */\n                    sv.action = sv.repeat_count = 0; // TODO Update scrollbarState's action?\n                    return true;\n                }\n\n                /*  Compute s, the offset in pixels from the 'origin' of\n                 *  the scrollbar's on-screen region.\n                 */\n                if (sv.origin & 1) {\n                    s = Mx.xpos - sv.x;\n                    if (sv.origin & 2) {\n                        s = sv.w - s;\n                    }\n                } else {\n                    s = Mx.ypos - sv.y;\n                    if (sv.origin <= 2) {\n                        s = sv.h - s;\n                    }\n                }\n\n                /*  Determine action */\n                if (sv.action === 0) {\n                    /* First-time action */\n\n                    sv.repeat_count = 0; // TODO Is repeat count necessary any more?\n\n                    var scrollReal2PixOut = mx.scroll_real2pix(sv);\n                    // UPDATE SCROLLBAR STATE as well\n                    sv.s1 = scrollbarState.s1 = scrollReal2PixOut.s1;\n                    sv.sw = scrollbarState.sw = scrollReal2PixOut.sw;\n                    sv.soff = scrollbarState.soff = s - sv.s1;\n                    if (sv.trange === 0.0) {\n                        // UPDATE SCROLLBAR STATE as well\n                        sv.smin = scrollbarState.smin = sv.tmin;\n                        sv.srange = scrollbarState.srange = 0.0;\n                    } else switch (btn) {\n                        case 1:\n                            if (s > sv.a1 && s < sv.a2) {\n                                /* on scroll trough */\n                                sv.action = (sv.soff > 0) ? mx.SB_PAGEINC : mx.SB_PAGEDEC;\n                            } else {\n                                /* on arrows */\n                                sv.action = (sv.soff > 0) ? mx.SB_STEPINC : mx.SB_STEPDEC;\n                            }\n                            break;\n                        case 4:\n                            sv.action = mx.SB_WHEELUP;\n                            break;\n                        case 5:\n                            sv.action = mx.SB_WHEELDOWN;\n                            break;\n                    }\n                } else {\n                    /* We're repeating sv.action */\n                    switch (sv.action) {\n                        case mx.SB_WHEELUP:\n                        case mx.SB_WHEELDOWN:\n                        case mx.SB_EXPAND:\n                            /* we don't want to repeat these */\n                        case mx.SB_SHRINK:\n                        case mx.SB_FULL:\n                            sv.action = sv.repeat_count = 0;\n                    }\n                }\n                /* FALL THROUGH!!! */\n                /* jshint -W086 */\n            case mx.XW_COMMAND:\n                /* jshint +W086 */\n\n                smin = sv.smin;\n                srange = sv.srange;\n\n                switch (sv.action) {\n                    case mx.SB_STEPINC:\n                        smin += sv.step;\n                        break;\n                    case mx.SB_STEPDEC:\n                        smin -= sv.step;\n                        break;\n                    case mx.SB_PAGEINC:\n                        smin += sv.page;\n                        break;\n                    case mx.SB_PAGEDEC:\n                        smin -= sv.page;\n                        break;\n                    case mx.SB_FULL:\n                        smin = sv.tmin;\n                        srange = sv.trange;\n                        break;\n                    case mx.SB_EXPAND:\n                        srange = srange * sv.scale;\n                        if (smin <= 0 && smin + sv.srange >= 0) {\n                            smin *= sv.scale;\n                        } else {\n                            smin -= (srange - sv.srange) / 2.0;\n                        }\n                        break;\n                    case mx.SB_SHRINK:\n                        srange = srange / sv.scale;\n                        if (smin < 0 && smin + sv.srange >= 0) {\n                            smin += srange / sv.scale; /* Plot crosses axis */\n                        } else if (smin === 0 && smin + sv.srange >= 0) {\n                            smin = srange / sv.scale; /* Plot touches axis */\n                        } else {\n                            smin += (sv.srange - srange) / 2.0; /* Plot is completely contained on positive side of axis */\n                        }\n                        break;\n                        /* The mouse wheel needs to scroll 1 page at a time, if you want an\n\t\t           application to scroll differently, change sv.page with\n\t\t           mx_scroll_vals in the application code */\n                    case mx.SB_WHEELUP:\n                        smin -= sv.page;\n                        break;\n                    case mx.SB_WHEELDOWN:\n                        smin += sv.page;\n                        break;\n                }\n\n                if (sv.trange > 0) {\n                    smin = Math.max(sv.tmin, Math.min(smin, sv.tmin + sv.trange - srange));\n                    srange = Math.min(srange, sv.trange);\n                } else {\n                    smin = Math.min(sv.tmin, Math.max(smin, sv.tmin + sv.trange - srange));\n                    srange = Math.max(srange, sv.trange);\n                }\n\n                if (sv.smin === smin && sv.srange === srange) {\n                    if (sv.action !== mx.SB_DRAG) {\n                        sv.action = sv.repeat_count = 0;\n                    }\n                } else {\n                    // UPDATE SCROLLBAR STATE as well\n                    sv.smin = scrollbarState.smin = smin;\n                    sv.srange = scrollbarState.srange = srange;\n                    sv.repeat_count++;\n                }\n\n                if (op === mx.XW_COMMAND) {\n                    mx.scroll(Mx, sv, mx.XW_UPDATE, undefined);\n                    sv.action = 0;\n                }\n\n                break;\n            case mx.XW_DRAW:\n            case mx.XW_UPDATE:\n                mx.redrawScrollbar(sv, Mx, op);\n\n        } /* switch */\n        return true;\n    };\n\n    /**\n     * Specify location and orientation of a scrollbar\n     * @param sv\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param origin\n     * @param scrollbarState\n     */\n    //\n    // ~= mx_scroll_loc\n    //\n    mx.scroll_loc = function(sv, x, y, w, h, origin, scrollbarState) {\n        // UPDATE local scrollbar and SCROLLBAR STATE\n        if (sv === undefined) {\n            return; /* mx.SCROLLBAR */\n        }\n        sv.x = scrollbarState.x = x; // int\n        sv.y = scrollbarState.y = y; // int\n        sv.w = scrollbarState.w = w; // int\n        sv.h = scrollbarState.h = h; // int\n        sv.origin = scrollbarState.origin = Math.max(1, Math.min(4, origin)); // int\n\n        if (sv.origin & 1) {\n            sv.a2 = scrollbarState.a2 = sv.w;\n            sv.arrow = scrollbarState.arrow = Math.min(m.trunc((sv.w - m.trunc(2 * mx.GBorder)) / 3), sv.h + mx.GBorder);\n        } else {\n            sv.a2 = scrollbarState.a2 = sv.h;\n            sv.arrow = scrollbarState.arrow = Math.min(m.trunc((sv.h - m.trunc(2 * mx.GBorder)) / 3), sv.w + mx.GBorder);\n        }\n        sv.a1 = scrollbarState.a1 = sv.arrow + mx.GBorder;\n        sv.a2 -= sv.arrow + mx.GBorder;\n        scrollbarState.a2 -= sv.arrow + mx.GBorder;\n        sv.swmin = scrollbarState.swmin = Math.min(10, sv.a2 - sv.a1);\n        sv.s1 = scrollbarState.s1 = 0;\n        sv.sw = scrollbarState.sw = 0;\n        sv.action = scrollbarState.action = 0;\n    };\n\n    /**\n     * Set coordinates in scrollbar structure\n     * @param sv\n     * @param smin\n     * @param srange\n     * @param tmin\n     * @param trange\n     * @param step\n     * @param page\n     * @param scale\n     * @param scrollbarState\n     */\n    //\n    // ~= mx_scroll_vals\n    //\n    mx.scroll_vals = function(sv, smin, srange, tmin, trange, step, page, scale, scrollbarState) {\n        // UPDATE SCROLLBAR STATE as well\n        if (sv === undefined) {\n            return; /* an mx.SCROLLBAR */\n        }\n        sv.smin = scrollbarState.smin = smin;\n        sv.srange = scrollbarState.srange = srange;\n        sv.tmin = scrollbarState.tmin = tmin;\n        sv.trange = scrollbarState.trange = trange;\n        sv.step = scrollbarState.step = step;\n        sv.page = scrollbarState.page = page;\n        sv.scale = scrollbarState.scale = Math.max(scale, 1.0);\n    };\n\n    /**\n     * Draw single symbol centered at pixel (x,y)\n     * @param Mx\n     * @param ic\n     * @param x\n     * @param y\n     * @param symbol\n     * @param rr\n     */\n    //\n    // ~= MX$DRAW_SYMBOL\n    //\n    mx.draw_symbol = function(Mx, ic, x, y, symbol, rr, n) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        var r = 0; // int\n        var d = 0; // int\n        var d2 = 0; // int\n        var rmode = false; // bool\n        var fill = false; // bool\n        var tri = []; // XPoint array of size 4\n        for (var cnt = 0; cnt < 4; cnt++) { // initializing 4 points in the array\n            tri[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n        var c = ''; // char\n\n        fill = rr < 0;\n        r = Math.abs(rr);\n        d = r * 2;\n\n        // Set the foreground color\n        ctx.fillStyle = ic;\n        ctx.strokeStyle = ic;\n\n        if (typeof symbol === \"function\") {\n            symbol(ctx, n, x, y);\n        } else {\n            switch (symbol) {\n                case mx.L_CircleSymbol:\n                    ctx.beginPath();\n                    if (fill) {\n                        ctx.arc(x, y, r, 0, 360); // draw arc\n                        ctx.fill(); // fill in the area of the arc\n                    } else {\n                        ctx.arc(x, y, r, 0, 360);\n                        ctx.stroke(); // just draw the arc's outline\n                    }\n                    break;\n                case mx.L_SquareSymbol:\n                    if (fill) {\n                        fill_rectangle(ctx, x - r, y - r, d, d);\n                    } else {\n                        draw_rectangle(ctx, x - r, y - r, d, d);\n                    }\n                    break;\n                case mx.L_PixelSymbol:\n                    d = 1; // d = 2*GMaxLines; // TODO Do we care about a maximum number of lines?\n                    // No native way to draw just a pixel - so use a circle instead\n                    ctx.beginPath();\n                    ctx.arc(x, y, 1, 0, 2 * Math.PI, true);\n                    ctx.fill();\n                    break;\n                case mx.L_ITriangleSymbol:\n                    r = -r; // TODO Refactor without switch fall-through?\n                    /* jshint -W086 */\n                case mx.L_TriangleSymbol:\n                    /* jshint +W086 */\n                    d = m.trunc(r * 1.5);\n                    d2 = m.trunc(r * 0.80);\n\n                    // Coordinates of just the triangle itself\n                    tri[1].x = -d2;\n                    tri[1].y = d;\n                    tri[2].x = d2 * 2;\n                    tri[2].y = 0;\n                    tri[3].x = -d2;\n                    tri[3].y = -d;\n\n                    var tempTri = []; // XPoint array of size 4\n                    for (var cnt = 0; cnt < 4; cnt++) { // initializing 4 points in the array\n                        tempTri[cnt] = {\n                            x: 0,\n                            y: 0\n                        };\n                    }\n\n                    if (fill) {\n                        tempTri[0].x = x;\n                        tempTri[0].y = y - r;\n\n                        // Replacement for CoordModePrevious offset (updating coordinates to be relative to origin, instead of previous pt)\n                        tempTri[1].x = tempTri[0].x + tri[1].x;\n                        tempTri[1].y = tempTri[0].y + tri[1].y;\n                        tempTri[2].x = tempTri[1].x + tri[2].x;\n                        tempTri[2].y = tempTri[1].y + tri[2].y;\n                        tempTri[3].x = tempTri[2].x + tri[3].x;\n                        tempTri[3].y = tempTri[2].y + tri[3].y;\n\n                        fill_poly(ctx, tempTri);\n                    } else {\n                        tempTri[0].x = x;\n                        tempTri[0].y = y - r;\n\n                        // Replacement for CoordModePrevious offset (updating coordinates to be relative to origin, instead of previous pt)\n                        tempTri[1].x = tempTri[0].x + tri[1].x;\n                        tempTri[1].y = tempTri[0].y + tri[1].y;\n                        tempTri[2].x = tempTri[1].x + tri[2].x;\n                        tempTri[2].y = tempTri[1].y + tri[2].y;\n                        tempTri[3].x = tempTri[2].x + tri[3].x;\n                        tempTri[3].y = tempTri[2].y + tri[3].y;\n\n                        draw_poly(ctx, tempTri);\n                    }\n                    break;\n                case mx.L_PlusSymbol:\n                    draw_line(ctx, x, y + r, x, y - r);\n                    draw_line(ctx, x + r, y, x - r, y);\n                    break;\n                case mx.L_HLineSymbol:\n                    draw_line(ctx, x + r, y, x - r, y);\n                    break;\n                case mx.L_VLineSymbol:\n                    draw_line(ctx, x, y + r, x, y - r);\n                    break;\n                case mx.L_XSymbol:\n                    draw_line(ctx, x - r, y - r, x + r, y + r);\n                    draw_line(ctx, x + r, y - r, x - r, y + r);\n                    break;\n                default:\n                    c = symbol;\n                    r = m.trunc(Mx.text_w / 2); //tbd\n                    if (fill && !rmode) {\n                        ctx.fillText(c.substring(0, 2), x - r, y + r); // TODO Does this cover it? Do we need to also fill in a rectangle behind\n                    }\n                    break;\n            } // end switch (symbol)\n        }\n    };\n\n    /**\n     * Plot symbols at centers defined by an array of pixels\n     * @param Mx\n     * @param ic\n     * @param pixx\n     * @param pixy\n     * @param npix\n     * @param symbol\n     * @param rr\n     * @private\n     */\n    //\n    // ~= MX$DRAW_SYMBOLS\n    //\n    mx.draw_symbols = function(Mx, ic, pixx, pixy, npix, symbol, rr, istart) {\n        for (var i = 0; i < npix; i++) {\n            mx.draw_symbol(Mx, ic, pixx[i], pixy[i], symbol, rr, i + istart);\n        }\n    };\n\n    /* http://geomalgorithms.com/a01-_area.html\n     *   > 0 left\n     *   = 0 on\n     *   < 0 right\n     */\n    /**\n     * Test if a point is Left|On|Right of an infinite 2D line.\n     * @method isLeft\n     * @param p_x Point's x-coordinate\n     * @param p_y Point's y-coordinate\n     * @param e_x1 Lines's x1-coordinate\n     * @param e_y1 Lines's y1-coordinate\n     * @param e_x2 Lines's x2-coordinate\n     * @param e_y2 Lines's y2-coordinate\n     * @private\n     */\n    function isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) {\n        return ((e_x1 - p_x) * (e_y2 - p_y) - (e_x2 - p_x) * (e_y1 - p_y));\n    }\n\n    /**\n     * @method update_winding_number\n     * @param wn\n     * @param p_x\n     * @param p_y\n     * @param e_x1\n     * @param e_y1\n     * @param e_x2\n     * @param e_y2\n     * @private\n     */\n    function update_winding_number(wn, p_x, p_y, e_x1, e_y1, e_x2, e_y2) {\n        if (e_y1 <= p_y) { // start y <= P.y\n            if (e_y2 > p_y) { // an upward crossing\n                if (isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) > 0) {\n                    wn += 1;\n                }\n            }\n        } else { // start y > P.y (no test needed)\n            if (e_y2 <= p_y) { // a downward crossing\n                if (isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) < 0) {\n                    wn -= 1;\n                }\n            }\n        }\n        return wn;\n    }\n\n    /**\n     * Converts array of (x,y) coordinates to pixel coordinates, plots lines or dots\n     * @param Mx\n     * @param color\n     * @param xpoint\n     * @param ypoint\n     * @param npts\n     * @param skip\n     * @param line\n     * @param symb\n     * @param rad\n     * @param options\n     */\n    //\n    // ~= MX$TRACE\n    //\n    mx.trace = function(Mx, color, xpoint, ypoint, npts, istart, skip, line, symb, rad, options) {\n        if ((xpoint === undefined) || (ypoint === undefined)) {\n            throw \"mx.trace requires xpoint and ypoint\";\n        }\n\n        if (skip === undefined) {\n            skip = 1;\n        }\n\n        if (line === undefined) {\n            line = 1;\n        }\n\n        if (symb === undefined) {\n            symb = 0;\n        }\n\n        if (rad === undefined) {\n            rad = 0;\n        }\n\n        if (options === undefined) {\n            options = {};\n        }\n\n        if (npts <= 0) {\n            m.log.warn(\"No points to draw\");\n            return;\n        }\n\n        if ((line === 0) && (symb === 0)) {\n            m.log.warn(\"No line or symbol to draw\");\n            return;\n        }\n\n        var style;\n        if (options.dashed) {\n            style = {\n                mode: \"dashed\",\n                on: 4,\n                off: 4\n            };\n        }\n\n        var stk4 = mx.origin(Mx.origin, 4, Mx.stk[Mx.level]);\n        if ((stk4.xscl === 0.0) || (stk4.yscl === 0.0)) {\n            // the min and max are the same\n            return;\n        }\n\n        var left = stk4.x1;\n        var top = stk4.y1;\n\n        var xxmin = stk4.xmin;\n        var xscl = 1.0 / stk4.xscl;\n\n        var yymin = stk4.ymin;\n        var yscl = 1.0 / stk4.yscl;\n\n        if (!options.noclip) {\n            mx.clip(Mx, left, top, stk4.x2 - left + 1, stk4.y2 - top + 1);\n        }\n\n        var dx = Math.abs(stk4.xmax - stk4.xmin);\n        var dy = Math.abs(stk4.ymax - stk4.ymin);\n        var xmin = Math.min(stk4.xmin, stk4.xmax);\n        var ymin = Math.min(stk4.ymin, stk4.ymax);\n        var xmax = xmin + dx;\n        var ymax = ymin + dy;\n        //dx = dx * 0.5;\n        //if ((line == -1) || (line == 1)) {\n        //\tdy = dy * 10.0;\n        //} else {\n        //\tdy = dy * 0.5;\n        //}\n        //xmin = xmin - dx;\n        //ymin = ymin - dy;\n        //xmax = xmax + dx;\n        //ymax = ymax + dy;\n        // These buffers need to be able to hold 2 times the number of points.\n        // if all points are on screen, then we will will need 'n' points\n        // if all points are off the screen, then we will need (2*n)-2\n        var bufsize = 4 * Math.ceil(2 * xpoint.length);\n        var pixx = new Int32Array(new ArrayBuffer(bufsize));\n        var pixy = new Int32Array(new ArrayBuffer(bufsize));\n\n        var ib = 0;\n        if ((line === 0) && (symb !== 0)) {\n            for (var n = (skip - 1); n < npts; n += skip) {\n                var x = xpoint[n];\n                var y = ypoint[n];\n                var lvisible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));\n                if (lvisible) {\n                    pixx[0] = Math.round((x - xxmin) * xscl) + left;\n                    pixy[0] = Math.round((y - yymin) * yscl) + top;\n                    mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);\n                }\n            }\n        }\n        if (options.vertsym === true) {\n            for (var n = (skip - 1); n < npts; n += skip) {\n                var x = xpoint[n];\n                var y = ypoint[n];\n                if ((x >= xmin) && (x <= xmax)) {\n                    var i = Math.round((x - xxmin) * xscl) + left;\n                    mx.draw_line(Mx, color, i, 0, i, Mx.height);\n                    if ((y >= ymin) && (y <= ymax)) {\n                        pixx[0] = i;\n                        pixy[0] = Math.round((y - yymin) * yscl) + top;\n                        mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);\n                    }\n                }\n            }\n        }\n        if (options.horzsym === true) {\n            for (var n = (skip - 1); n < npts; n += skip) {\n                var x = xpoint[n];\n                var y = ypoint[n];\n                if ((y >= ymin) && (y <= ymax)) {\n                    var i = Math.round((y - yymin) * yscl) + top;\n                    mx.draw_line(Mx, color, 0, i, Mx.width, i);\n                    if ((x >= xmin) && (x <= xmax)) {\n                        pixx[0] = Math.round((x - xxmin) * xscl) + left;\n                        pixy[0] = i;\n                        mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);\n                    }\n                }\n            }\n        } else if (line !== 0) {\n            var colors;\n            if ((options) && (options.highlight)) {\n                colors = [];\n                for (var sn = 0; sn < options.highlight.length; sn++) {\n                    if (options.highlight[sn].xstart >= xmax) {\n                        continue;\n                    }\n                    if (options.highlight[sn].xend <= xmin) {\n                        continue;\n                    }\n\n                    var xs = Math.max(options.highlight[sn].xstart, xmin);\n                    var xe = Math.min(options.highlight[sn].xend, xmax);\n\n                    if (xs < xe) {\n                        var rxs = Math.round((xs - xxmin) * xscl) + left;\n                        var rxe = Math.round((xe - xxmin) * xscl) + left;\n\n                        for (var cn = colors.length - 1; cn >= 0; cn--) {\n                            // This highlight overlaps the entire range of a previous\n                            // highlight...we can thus remove the color\n                            if ((rxs <= colors[cn].start) && (rxe >= colors[cn].end)) {\n                                colors.splice(cn, 1);\n                                continue;\n                            }\n                            // This highlight splits a previous highlight...we need\n                            // to create a new color range\n                            else if ((rxs >= colors[cn].start) && (rxe <= colors[cn].end)) {\n                                colors.push({\n                                    start: rxe,\n                                    end: colors[cn].end,\n                                    color: colors[cn].color\n                                });\n                                colors[cn].end = rxs;\n\n                            }\n                            // This highlight overlaps partially\n                            else if ((rxs <= colors[cn].start) && (rxe >= colors[cn].start)) {\n                                colors[cn].start = rxe;\n                            } else if ((rxs <= colors[cn].end) && (rxe >= colors[cn].end)) {\n                                colors[cn].end = rxs;\n                            }\n\n                            // See if this colors is still valid\n                            if (colors[cn].end <= colors[cn].start) {\n                                colors.splice(cn, 1);\n                            }\n                        }\n\n                        colors.push({\n                            start: rxs,\n                            end: rxe,\n                            color: options.highlight[sn].color\n                        });\n                    }\n                }\n\n                // The first color is the start of the plot\n                // in the base-line color\n                colors.push({\n                    start: left,\n                    color: color\n                });\n\n                colors.sort(function(a, b) {\n                    return a.start - b.start;\n                });\n\n            } else {\n                colors = color;\n            }\n\n            var wn = 0; // the winding number counter http://geomalgorithms.com/a03-_inclusion.html\n            var mid_x = (Mx.stk[Mx.level].xmax + Mx.stk[Mx.level].xmin) / 2.0;\n            var mid_y = (Mx.stk[Mx.level].ymax + Mx.stk[Mx.level].ymin) / 2.0;\n\n            var x = xpoint[0];\n            var y = ypoint[0];\n\n            wn = update_winding_number(wn, mid_x, mid_y, Mx.stk[Mx.level].xmin, Mx.stk[Mx.level].ymin, x, y);\n\n            var lvisible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));\n            // The first point is visible\n            if (lvisible) {\n                pixx[ib] = Math.round((x - xxmin) * xscl) + left;\n                pixy[ib] = Math.round((y - yymin) * yscl) + top;\n                ib += 1;\n                if (symb !== 0) {\n                    mx.draw_symbols(Mx, color, pixx, pixy, 1, symb, rad, istart);\n                }\n            } else {\n                ib = 0;\n            }\n\n            var ie = 0;\n            var visible = false;\n            for (var n = skip; n <= (skip * (npts - 1)); n += skip) {\n\n                var lx = x;\n                var ly = y;\n                x = xpoint[n];\n                y = ypoint[n];\n\n                wn = update_winding_number(wn, mid_x, mid_y, lx, ly, x, y);\n\n                visible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));\n                if ((lvisible) && (visible)) {\n                    // both the left point and right point are visible, so we can draw the trace\n                    pixx[ib] = Math.round((x - xxmin) * xscl) + left;\n                    pixy[ib] = Math.round((y - yymin) * yscl) + top;\n                    ib += 1;\n                } else {\n                    // clipping necessary, either the left or right point are not visible\n                    lvisible = visible;\n                    // calculate the difference between the last point and this point\n                    dx = lx - x;\n                    dy = ly - y;\n                    if ((dx !== 0.0) || (dy !== 0.0)) {\n                        var o = {\n                            tL: 1.0,\n                            tE: 0.0\n                        };\n                        // Between the last point and the current point,\n                        // determine the ratio of the x and y porionts\n                        // that intersects the border.  If clipt returns\n                        // false then no portion of the line between the two\n                        // points is visible\n                        if (clipt(dx, xmin - x, o)) {\n                            if (clipt(-dx, x - xmax, o)) {\n                                if (clipt(dy, ymin - y, o)) {\n                                    if (clipt(-dy, y - ymax, o)) {\n                                        // If this point is starting the on-screen portion, start the line\n                                        if (o.tL < 1) {\n                                            pixx[ib] = Math.round((x - xxmin + o.tL * dx) * xscl) + left;\n                                            pixy[ib] = Math.round((y - yymin + o.tL * dy) * yscl) + top;\n                                            ib += 1;\n                                        }\n\n                                        // If this point is ending the on-screen portion draw the line\n                                        if (o.tE > 0) {\n                                            pixx[ib] = Math.round((x - xxmin + o.tE * dx) * xscl) + left;\n                                            pixy[ib] = Math.round((y - yymin + o.tE * dy) * yscl) + top;\n                                            ib += 1;\n                                            mx.draw_lines(Mx, colors, pixx.subarray(ie, ib), pixy.subarray(ie, ib), (ib - ie), line, style);\n\n                                            if (symb !== 0 && (ib - ie) > 2) {\n                                                mx.draw_symbols(Mx,\n                                                    color,\n                                                    pixx.subarray(ie + 1, ib - 1),\n                                                    pixy.subarray(ie + 1, ib - 1), (ib - ie - 2),\n                                                    symb,\n                                                    rad,\n                                                    istart + n - (ib - ie - 2));\n                                            }\n                                            ie = ib;\n                                        } else {\n                                            // otherwise add it to the line to be drawn\n                                            pixx[ib] = Math.round((x - xxmin) * xscl) + left;\n                                            pixy[ib] = Math.round((y - yymin) * yscl) + top;\n                                            ib += 1;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            wn = update_winding_number(wn, mid_x, mid_y, x, y, Mx.stk[Mx.level].xmax, Mx.stk[Mx.level].ymin);\n            wn = update_winding_number(wn, mid_x, mid_y, Mx.stk[Mx.level].xmax, Mx.stk[Mx.level].ymin, Mx.stk[Mx.level].xmin, Mx.stk[Mx.level].ymin);\n            if ((ib - ie) > 0) {\n                mx.draw_lines(Mx, colors, pixx.subarray(ie, ib), pixy.subarray(ie, ib), (ib - ie), line, style);\n                if (visible) {\n                    ie = ie + 1;\n                }\n                if (symb !== 0 && (ib - ie) > 1) {\n                    // TODO ib - 1 is used below because\n                    // otherwise the last point has undefined\n                    // for it's x/y coordinates...but this may\n                    // be a bug because it may neglect drawing\n                    // the last data point\n                    mx.draw_symbols(Mx,\n                        color,\n                        pixx.subarray(ie - 1, ib),\n                        pixy.subarray(ie - 1, ib),\n                        ib - ie - 1,\n                        symb,\n                        rad,\n                        n - ib + istart);\n                }\n            }\n\n            if (options.fillStyle && !Mx.fillMin && !Mx.fillMax) {\n                if ((ib > 1) || (wn !== 0)) {\n                    // if we have at least one point\n                    // or the entire plot area is in the fill zone\n                    mx.fill_trace(Mx, options.fillStyle, pixx, pixy, ib);\n                }\n            }\n\n            if (options.highlight) {\n                for (var i = 0; i < options.highlight.length; i++) {\n                    var highlight = options.highlight[i];\n                    if (!highlight.fill) {\n                        continue;\n                    }\n\n                    var x_start = highlight.xstart;\n                    var x_end = highlight.xend;\n\n                    console.log(\"x start \", x_start);\n                    console.log(\"x end \", x_end);\n\n                    if (x_start >= Mx.stk[Mx.level].xmax) {\n                        continue;\n                    }\n                    if (x_end <= Mx.stk[Mx.level].xmin) {\n                        continue;\n                    }\n\n                    if ((ib > 1) || (wn !== 0)) {\n\n                        var xstart_pixel_value = mx.real_to_pixel(Mx, x_start, 0);\n                        var xend_pixel_value = mx.real_to_pixel(Mx, x_end, 0);\n\n                        var pi_start = xstart_pixel_value.x;\n                        var pi_end = xend_pixel_value.x;\n                        //console.log('start: ', pi_start, 'end: ', pi_end);\n                        var pixx_new = [];\n                        var pixy_new = [];\n                        for (var q = 0; q < ib; q++) {\n                            var this_point = pixx[q];\n                            var this_point_y = pixy[q];\n                            //console.log(this_point);\n                            if (in_fill_range(this_point, pi_start, pi_end) === true) {\n                                //console.log('in range: ', this_point);\n                                pixx_new.push(this_point);\n                                pixy_new.push(this_point_y);\n\n                            }\n                        }\n\n                        if ((pixx_new.length > 0) || (wn !== 0)) {\n                            pi_start = Math.max(pi_start, pixx_new[0]);\n                            pi_end = Math.min(pi_end, pixx_new[pixx_new.length - 1]);\n                            mx.fill_trace(Mx, highlight.fill, pixx_new, pixy_new, pixx_new.length, pi_start, pi_end);\n                        }\n                    }\n\n                }\n            }\n\n\n        }\n\n        if (!options.noclip) {\n            mx.clip(Mx, 0, 0, 0, 0);\n        }\n    };\n\n    /**\n     * Set dashed or solid lines mode.\n     * @param Mx\n     * @param linewidth\n     * @param style\n     */\n    //\n    // ~= MX$DRAW_MODE\n    //\n    mx.draw_mode = function(Mx, linewidth, style) {\n        Mx.linewidth = (linewidth === undefined) ? 1 : linewidth;\n        Mx.style = style;\n    };\n\n    /**\n     * @param Mx\n     * @param color\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     * @param linewidth\n     * @param style\n     */\n    //\n    // ~= MX$DRAW_LINES\n    //\n    mx.draw_line = function(Mx, color, x1, y1, x2, y2, linewidth, style) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (linewidth === undefined) {\n            linewidth = Mx.linewidth;\n        }\n        if (style === undefined) {\n            style = Mx.style;\n        }\n        // Look up the color in Mx.pixels\n        if (typeof color === \"number\") {\n            if (!Mx.pixel) {\n                m.log.warn(\"COLORMAP not initialized, defaulting to foreground\");\n                color = Mx.fg;\n            } else {\n                if (isNaN(color)) {\n                    color = 0;\n                }\n                var cidx = Math.max(0, Math.min(Mx.pixel.map.length, color));\n                color = Mx.pixel.getColor(color);\n                color = to_rgb(\n                    color.red,\n                    color.green,\n                    color.blue);\n            }\n        }\n        draw_line(ctx, x1, y1, x2, y2, style, color, linewidth);\n    };\n\n    /**\n     * @param Mx\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     */\n    //\n    // ~= MX$RUBBERLINE\n    //\n    mx.rubberline = function(Mx, x1, y1, x2, y2) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        draw_line(ctx, x1, y1, x2, y2, {\n            mode: \"xor\"\n        }, \"white\", 1);\n    };\n\n    /**\n     * @param Mx\n     * @param fillStyle\n     * @param pixx\n     * @param pixy\n     * @param npts\n     * @private\n     */\n    mx.fill_trace = function(Mx, fillStyle, pixx, pixy, npts, l, r) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (Array.isArray(fillStyle)) {\n            ctx.fillStyle = mx.linear_gradient(Mx, 0, 0, 0, Mx.b - Mx.t, fillStyle);\n        } else {\n            ctx.fillStyle = fillStyle;\n        }\n\n        if (npts < 1) {\n            ctx.fillRect(Mx.l, Mx.t, (Mx.r - Mx.l), (Mx.b - Mx.t));\n            return;\n        }\n\n        if (l === undefined) {\n            l = Mx.l;\n        }\n        if (r === undefined) {\n            r = Mx.r;\n        }\n\n        if (fillStyle) {\n            var x = pixx[0];\n            var y = pixy[0];\n\n            ctx.beginPath();\n            if (y === Mx.t) {\n                ctx.lineTo(l, Mx.t);\n            } else {\n                ctx.lineTo(l, Mx.b);\n            }\n\n\n            ctx.lineTo(x, y);\n\n\n\n            for (var i = 1; i < npts; i++) {\n                x = pixx[i];\n                y = pixy[i];\n                ctx.lineTo(x, y);\n            }\n\n            if (y === Mx.t) {\n                ctx.lineTo(r, Mx.t);\n            }\n            ctx.lineTo(r, Mx.b);\n            if (pixy[0] === Mx.t) {\n                ctx.lineTo(l, Mx.b);\n            }\n\n            ctx.closePath();\n            ctx.fill(\"evenodd\");\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param colors\n     * @param pixx\n     * @param pixy\n     * @param npts\n     * @param linewidth\n     * @param style\n     */\n    //\n    // ~= MX$DRAW_LINES\n    //\n    mx.draw_lines = function(Mx, colors, pixx, pixy, npts, linewidth, style) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (npts < 1) {\n            return;\n        }\n\n        var x = pixx[0];\n        var y = pixy[0];\n\n        if (linewidth === undefined) {\n            linewidth = Mx.linewidth;\n        }\n        if (style === undefined) {\n            style = Mx.style;\n        }\n\n        if ((style) && (style.mode === \"dashed\")) {\n            var dash_supported = common.dashOn(ctx, style.on, style.off);\n            if (!dash_supported) {\n                m.log.warn(\"WARNING: Dashed lines aren't supported on your browser\");\n            }\n        }\n\n        ctx.lineWidth = linewidth;\n        var current_color = 0;\n\n        if (typeof colors === \"string\") {\n            colors = [{\n                start: 0,\n                color: colors\n            }];\n        } else if (!(colors instanceof Array)) {\n            if (colors.start === undefined) {\n                colors.start = 0;\n            }\n            colors = [colors];\n        }\n\n        var n;\n        for (n = (colors.length - 1); n >= 0; n--) {\n            if ((colors[n].end != null) && (colors[n].end < x)) {\n                colors.splice(n, 1);\n            }\n        }\n\n        // Find the first valid color (expects colors to be sorted)\n        for (n = 0; n < colors.length; n++) {\n            if (colors[n].start < x) {\n                current_color = n;\n            }\n        }\n\n        ctx.strokeStyle = colors[current_color].color;\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n\n        for (var i = 0; i < npts; i++) {\n            if ((x === pixx[i]) && (y === pixy[i])) {\n                continue;\n            }\n            x = pixx[i];\n            y = pixy[i];\n\n            var newcolor = false;\n            if ((current_color > 0) && (colors[current_color].end != null) && (colors[current_color].end < x)) {\n                newcolor = true;\n                while ((colors[current_color].end != null) && (colors[current_color].end < x)) {\n                    colors.splice(current_color, 1);\n                    current_color -= 1;\n                    if (current_color === 0) {\n                        break;\n                    }\n                }\n            }\n\n            if (((current_color + 1) < colors.length) && (colors[current_color + 1].start <= x)) {\n                newcolor = true;\n                while (((current_color + 1) < colors.length) && (colors[current_color + 1].start <= x)) {\n                    current_color++;\n                }\n            }\n\n            ctx.lineTo(x, y);\n            if (newcolor) {\n                ctx.stroke();\n                ctx.strokeStyle = colors[current_color].color;\n                ctx.beginPath();\n                ctx.lineTo(x, y);\n            }\n        }\n        ctx.stroke();\n        common.dashOff(ctx);\n        ctx.beginPath();\n    };\n\n    /**\n     * @param Mx\n     * @param left\n     * @param top\n     * @param width\n     * @param height\n     */\n    //\n    // ~= MX$CLIP\n    //\n    mx.clip = function(Mx, left, top, width, height) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if ((left === 0) && (top === 0) && (width === 0) && (height === 0)) {\n            ctx.restore();\n            return;\n        }\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(left, top, width, height);\n        ctx.clip();\n    };\n\n    /**\n     * @param Mx\n     */\n    //\n    // ~= MX$CLEAR_WINDOW\n    //\n    mx.clear_window = function(Mx) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        ctx.fillStyle = Mx.bg;\n        ctx.fillRect(0, 0, Mx.width, Mx.height);\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.erase_window = function(Mx) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        ctx.clearRect(0, 0, Mx.width, Mx.height);\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @param mode\n     * @param def_style\n     * @param alt_style\n     */\n    //\n    // ~= MX$RUBBERBOX\n    // Unlike MX$RUBBERBOX, this is a non-blocking call.  As such the 'func' is a callback for then the rubberbox is finished.\n    //\n    // When CTRL is pressed, alt_style is used\n    //\n    mx.rubberbox = function(Mx, func, mode, def_style, alt_style) {\n        mx.warpbox(Mx, Mx.xpos, Mx.ypos, Mx.xpos, Mx.ypos, 0, Mx.width, 0, Mx.height, func, mode, def_style, alt_style);\n    };\n\n    /**\n     * @param Mx\n     * @param xo\n     * @param yo\n     * @param xl\n     * @param yl\n     * @param xmin\n     * @param xmax\n     * @param ymin\n     * @param ymax\n     * @param func\n     * @param mode\n     * @param def_style\n     * @param alt_style\n     */\n    //\n    // ~= MX$WARPBOX\n    // Unlike MX$WARPBOX, this is a non-blocking call.   As such the 'func' is a callback for then the rubberbox is finished.\n    //\n    mx.warpbox = function(Mx, xo, yo, xl, yl, xmin, xmax, ymin, ymax, func, mode, def_style, alt_style) {\n        if (!def_style) {\n            def_style = {};\n        }\n\n        Mx.warpbox = new WARPBOX();\n        Mx.warpbox.xo = xo;\n        Mx.warpbox.yo = yo;\n        Mx.warpbox.xl = xl;\n        Mx.warpbox.yl = yl;\n        Mx.warpbox.xmin = xmin;\n        Mx.warpbox.xmax = xmax;\n        Mx.warpbox.ymin = ymin;\n        Mx.warpbox.ymax = ymax;\n        Mx.warpbox.func = func;\n        Mx.warpbox.mode = mode;\n\n        Mx.warpbox.style = def_style;\n        Mx.warpbox.def_style = def_style;\n        Mx.warpbox.alt_style = alt_style;\n    };\n\n    /**\n     * @param inorigin\n     * @param outorigin\n     * @param instk\n     */\n    //\n    // ~= M$ORIGIN\n    //\n    mx.origin = function(inorigin, outorigin, instk) {\n        inorigin = Math.max(1, inorigin);\n        outorigin = Math.max(1, outorigin);\n\n        var outstk = new mx.STKSTRUCT();\n\n        outstk.xmin = instk.xmin;\n        outstk.xmax = instk.xmax;\n        outstk.ymin = instk.ymin;\n        outstk.ymax = instk.ymax;\n        outstk.xscl = instk.xscl;\n        outstk.yscl = instk.yscl;\n        outstk.x1 = instk.x1;\n        outstk.y1 = instk.y1;\n        outstk.x2 = instk.x2;\n        outstk.y2 = instk.y2;\n\n        if (inorigin !== outorigin) {\n            var diff = Math.abs(outorigin - inorigin); // used to simplify boolean logic\n            var sum = outorigin + inorigin;\n            if (diff === 2 || sum !== 5) { // (1<->3) (2<->4) (1<->2) (3<->4)\n                outstk.xmin = instk.xmax;\n                outstk.xmax = instk.xmin;\n                outstk.xscl = -instk.xscl;\n            }\n            if (diff === 2 || sum === 5) { // (1<->3) (2<->4) (1<->4) (2<->3)\n                outstk.ymin = instk.ymax;\n                outstk.ymax = instk.ymin;\n                outstk.yscl = -instk.yscl;\n            }\n        }\n        return outstk;\n    };\n\n    /**\n     * @param end1\n     * @param end2\n     */\n    //\n    // ~= MX$MULT\n    //\n    mx.mult = function(end1, end2) {\n        var absmax = Math.max(Math.abs(end1), Math.abs(end2));\n        if (absmax === 0) {\n            return 1.0;\n        }\n        var kengr = 0.1447648 * Math.log(absmax);\n        kengr = kengr | kengr; // Math.floor always rounds down, so -3.3 becomes -4 use this bitwise hack instead\n        if (absmax < 1.0) {\n            kengr = kengr - 1;\n        }\n        if (kengr < 0) {\n            return 1.0 / Math.pow(10, (-3 * kengr));\n        } else {\n            return Math.pow(10, (3 * kengr));\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @private\n     */\n    //\n    // event may be undefined or null\n    mx.widget_callback = function(Mx, event) {\n        if (Mx.prompt) {\n            if (event.which === 3) {\n                Mx.prompt.input.onsubmit();\n            }\n        }\n\n        if (Mx.widget) {\n            Mx.widget.callback(event);\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param promptText\n     * @param isValid\n     * @param onSuccess\n     * @param refresh\n     * @param inputValue\n     * @param xpos\n     * @param ypos\n     * @param errorTimeout\n     */\n    //\n    // ~= MX$DPROMPT - only higher-level\n    mx.prompt = function(Mx, promptText, isValid, onSuccess, refresh, inputValue, xpos, ypos, errorTimeout) {\n        if (inputValue !== undefined) {\n            var inputValid = isValid(inputValue);\n\n            if (!inputValid.valid) {\n                throw \"Prompt default input value not valid due to '\" + inputValid.reason + \"'\";\n            }\n        }\n\n        // TODO Validation - make sure promptText is not too long and isn't multi-line...\n        mx.onWidgetLayer(Mx, function() {\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            var maxNumChars = 30;\n\n            // Construct the input box\n            var pxIndex = ctx.font.indexOf('px');\n            var fontIndex = pxIndex + 3;\n            var fontSize = ctx.font.substr(0, pxIndex);\n            var fontFamily = ctx.font.substr(fontIndex, ctx.font.length).toString();\n\n            /* TODO Note: There is a scrolling bug - you can scroll to the right, but not the left of the value\n\t\t\tAnd... when truncating the width of an input field - it shows the value as though truncated\n\t\t\tfrom the right (say if its cut off by 1 and that one happened to be a negative sign, the value\n\t\t\twould look like a positive) .\n\t\t\t */\n            var canvasInput = new CanvasInput({\n                height: Mx.text_h,\n                fontFamily: fontFamily,\n                /* jshint -W053 */\n                fontSize: new Number(fontSize),\n                /* jshint +W053 */\n                backgroundColor: Mx.bg,\n                fontColor: Mx.fg,\n                borderWidth: 0,\n                borderRadius: 0,\n                padding: 0,\n                boxShadow: \"none\",\n                innerShadow: \"none\",\n                width: Mx.text_w * maxNumChars,\n                value: (inputValue !== undefined ? inputValue.toString() : \"\"),\n                disableBlur: true,\n                renderOnReturn: false,\n                tabToClear: true\n            });\n\n            var subHandlerCreator = function(messageX, messageY) {\n                return function() {\n                    var newValue = this.value();\n\n                    var inputValid = isValid(newValue);\n\n                    if (!inputValid.valid) {\n                        mx.message(Mx, \"Value: '\" + newValue + \"' isn't valid due to '\" + inputValid.reason + \"' - RETRY\", undefined, messageX, messageY);\n\n                        // Clear error message\n                        setTimeout(function() {\n                            mx.onWidgetLayer(Mx, function() {\n                                mx.erase_window(Mx);\n                            });\n                            Mx.widget = null;\n                            //refresh();\n                        }, errorTimeout != null ? errorTimeout : 4000);\n                    } else {\n                        Mx.prompt = undefined; // clear state variable\n\n                        // Kill CanvasInput\n                        this.cleanup();\n                        mx.onWidgetLayer(Mx, function() {\n                            mx.erase_window(Mx);\n                        });\n\n                        onSuccess(newValue);\n                    }\n                };\n            };\n\n            // Create redraw method\n            var redrawPromptCreator = function(Mx, input, promptText) {\n                return function(xpos, ypos) {\n                    mx.onWidgetLayer(Mx, function() {\n                        var GBorder = 3;\n\n                        // Calculate the position variables\n\n                        var xssPrompt = (promptText.length + 2) * Mx.text_w;\n                        var xss = xssPrompt + (maxNumChars + 1) * Mx.text_w;\n                        var yss = 2 * Mx.text_h;\n\n                        var xs = xss + 2 * GBorder;\n                        var ys = yss + 2 * GBorder;\n                        if (!xpos) {\n                            xpos = Mx.xpos;\n                        }\n                        if (!ypos) {\n                            ypos = Mx.ypos;\n                        }\n                        var xc = Math.max(0, Math.min(xpos, Mx.width - xs));\n                        var yc = Math.max(0, Math.min(ypos, Mx.height - ys));\n                        var xcc = xc + GBorder;\n                        var ycc = yc + GBorder;\n\n                        var yPos = ycc + Mx.text_h * 1.5;\n                        var inputXPos = xcc + Mx.text_w;\n\n                        // Draw the box and label text\n                        mx.widgetbox(Mx, xc, yc, xs, ys, xcc, ycc, 0, \"\");\n                        mx.text(Mx, inputXPos, yPos, promptText);\n\n                        var inputYPos = yPos - Mx.text_h * 1.15;\n\n                        // Redraw the input at the new location\n                        input.x(xcc + Mx.text_w + xssPrompt - Mx.text_w);\n                        input.y(inputYPos);\n\n                        input.onsubmit(subHandlerCreator(xc, inputYPos - 75)); // TODO Refactor positioning based on char length of reason code...\n                        if (!input.canvas()) {\n                            input.canvas(Mx.active_canvas);\n                        } else {\n                            input.render();\n                        }\n                    });\n                };\n            };\n\n            var redrawPrompt = redrawPromptCreator(Mx, canvasInput, promptText);\n\n            //refresh();\n            redrawPrompt(xpos, ypos);\n            canvasInput.focus();\n\n            // Set state variable\n            Mx.prompt = {\n                redraw: redrawPrompt,\n                input: canvasInput\n            };\n        });\n    };\n\n    /**\n     * Floating-point number validator. Verifies that value is a valid floating point\n     * number. Validation is loose by default - meaning empty strings are considered valid.\n     * @param value The value to validate.\n     * @param strict If strict is set to true - does not consider empty strings as valid floating point numbers.\n     * @private\n     */\n    mx.floatValidator = function(value, strict) {\n        if (!(((strict === undefined || strict === false) && value === \"\")) &&\n            isNaN(parseFloat(value)) || !isFinite(value)) {\n            return {\n                valid: false,\n                reason: \"Failed float validation: not a valid floating point number\"\n            };\n        }\n\n        return {\n            valid: true,\n            reason: \"\"\n        };\n    };\n\n    /**\n     * Integer number validator. Verifies that value is a valid integer.\n     * Validation is loose by default - meaning empty strings are considered valid.\n     * @param value The value to validate.\n     * @param strict If strict is set to true - does not consider empty strings as valid integers.\n     * @private\n     */\n    mx.intValidator = function(value, strict) {\n        if (((strict === undefined || strict === false) && value === \"\") ||\n            ((parseFloat(value) === parseInt(value, 10)) && !isNaN(value))) {\n            return {\n                valid: true,\n                reason: \"\"\n            };\n        } else {\n            return {\n                valid: false,\n                reason: \"Failed integer validation: not a valid integer\"\n            };\n        }\n    };\n\n    mx.hexValidator = function(value, strict) {\n        var regColorcode = /^(#)?([0-9a-fA-F]{3})([0-9a-fA-F]{3})?$/;\n        if (((strict === undefined || strict === false) && value === \"\") ||\n            (regColorcode.test(value) !== false)) {\n            return {\n                valid: true,\n                reason: \"\"\n            };\n        } else {\n            return {\n                valid: false,\n                reason: \"Failed hexcode validation: not a valid hexcode\"\n            };\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param msg\n     * @param time - unused?\n     * @param xpos\n     * @param ypos\n     */\n    //\n    // ~= MX$MESSAGE\n    //\n    mx.message = function(Mx, msg, time, xpos, ypos, type) {\n        mx.onWidgetLayer(Mx, function() {\n\n            mx.render_message_box(Mx, msg, xpos, ypos);\n\n            Mx.widget = {\n                type: type || \"ONESHOT\",\n                callback: function(event) {\n                    if ((event.type === \"mousedown\") || (event.type === \"keydown\")) {\n                        Mx.widget = null;\n                        mx.onWidgetLayer(Mx, function() {\n                            mx.erase_window(Mx);\n                        });\n                    }\n                }\n            };\n        });\n    };\n\n    mx.render_message_box = function(Mx, msg, xpos, ypos, textColor) {\n        var GBorder = 3;\n\n        // Unlike MX$MESSAGE, this implementaion if the message\n        // already contains newlines, the text will placed in the\n        // box as-is.\n        var beg = msg.split(/\\r\\n|\\r|\\n/g);\n        var linel = 0;\n        var center;\n        if (beg.length === 1) {\n            beg = [];\n            var MESSWIDTH = 40;\n\n            linel = Math.min((((Mx.width - 2 * GBorder) / Mx.text_w) - 2), msg.length);\n            if (linel <= 0) {\n                return;\n            }\n            while ((linel > MESSWIDTH) && (2.5 * Mx.text_h * msg.length < Mx.height * linel)) {\n                linel -= 5;\n            }\n\n            var cur = 0;\n            var bg = 0;\n            var i = 0;\n            var j = 0;\n            var end = 0;\n            var brk = 0;\n            var beg = [];\n\n            center = true;\n            while (bg < msg.length) {\n                end = bg + linel - 1;\n                brk = end = Math.min(end, msg.length - 1);\n                var endinreturn = false;\n                for (cur = bg; cur <= end && !endinreturn; cur++) {\n                    switch (msg[cur]) {\n                        case ',':\n                        case ';':\n                        case ' ':\n                        case ':':\n                            brk = cur;\n                            break;\n                        case '-':\n                        case '/':\n                            if (brk !== cur - 1) {\n                                brk = cur;\n                            }\n                            break;\n                        case '@':\n                        case '\\n':\n                        case '\\r':\n                            center = false;\n                            endinreturn = true;\n                            brk = cur;\n                            break;\n                    }\n                }\n                if (cur === msg.length) {\n                    brk = end;\n                }\n                if (endinreturn) {\n                    beg.push(msg.substring(bg, brk));\n                } else {\n                    // trim leading space\n                    var s = msg.substring(bg, brk + 1).replace(/^\\s+/, \"\");\n                    beg.push(s);\n                }\n                bg = brk + 1;\n                j = Math.max(j, beg[i].length);\n            }\n        } else {\n            for (var i = 0; i < beg.length; i++) {\n                linel = Math.min((((Mx.width - 2 * GBorder) / Mx.text_w) - 2), Math.max(linel, beg[i].length));\n            }\n        }\n\n        var lines = beg.length;\n        if (lines > 6) {\n            center = false;\n        }\n        var cur = 0;\n        var winlines = Math.max(1, Mx.height / Mx.text_h);\n        var lastline = Math.min(lines, cur + winlines - 1);\n\n        var xss = (linel + 2) * Mx.text_w;\n        var yss = (lastline - cur + 1) * Mx.text_h;\n\n        var xs = xss + 2 * GBorder;\n        var ys = yss + 2 * GBorder;\n        if (!xpos) {\n            xpos = Mx.xpos;\n        }\n        if (!ypos) {\n            ypos = Mx.ypos;\n        }\n        var xc = Math.max(Mx.l, Math.min(xpos, Mx.r - xs));\n        var yc = Math.max(Mx.t, Math.min(ypos, Mx.b - ys));\n        var xcc = xc + GBorder;\n        var ycc = yc + GBorder;\n\n        mx.widgetbox(Mx, xc, yc, xs, ys, xcc, ycc, 0, \"\");\n\n        var j = ycc + Mx.text_h / 3;\n        var i = xcc + Mx.text_w;\n        while (cur < lastline) {\n            j += Mx.text_h;\n            if (center) {\n                i = xc + xs / 2 - ((beg[cur].length * Mx.text_w) / 2);\n            }\n            mx.text(Mx, i, j, beg[cur], textColor);\n            cur++;\n        }\n    };\n\n    /**\n     * Based on http://js-bits.blogspot.co.uk/2010/07/canvas-rounded-corner-rectangles.html\n     *\n     * @param Mx\n     * @param color\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} w\n     * @param {Number} h\n     * @param fill_opacity\n     * @param fill_color\n     * @param {Number} radius The corner radius. Defaults to 5;\n     */\n    mx.draw_round_box = function(Mx, color, x, y, w, h, fill_opacity, fill_color, radius) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!radius) {\n            radius = 5;\n        }\n\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + w - radius, y);\n        ctx.quadraticCurveTo(x + w, y, x + w, y + radius);\n        ctx.lineTo(x + w, y + h - radius);\n        ctx.quadraticCurveTo(x + w, y + h, x + w - radius, y + h);\n        ctx.lineTo(x + radius, y + h);\n        ctx.quadraticCurveTo(x, y + h, x, y + h - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = color;\n        ctx.stroke();\n\n        if ((fill_opacity !== undefined) && (fill_opacity > 0)) {\n            var oldAlpha = ctx.globalAlpha;\n            ctx.globalAlpha = fill_opacity;\n            if (fill_color) {\n                ctx.fillStyle = fill_color;\n            } else {\n                ctx.fillStyle = color;\n            }\n            ctx.fill();\n            ctx.globalAlpha = oldAlpha;\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param color\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param fill_opacity\n     * @param fill_color\n     */\n    //\n    // ~= MX$DRAW_BOX\n    //\n    mx.draw_box = function(Mx, color, x, y, w, h, fill_opacity, fill_color) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (color !== \"xor\") {\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = color;\n            ctx.strokeRect(x, y, w, h);\n        } else {\n            if (typeof Uint8ClampedArray === 'undefined') {\n                // we don't have typed arrays, so canvas getImageData operations\n                // will be very slow, so use Mx.fg instead\n                ctx.lineWidth = 1;\n                ctx.strokeStyle = Mx.fg;\n                ctx.strokeRect(x, y, w, h);\n            } else {\n                // TODO switch to using TypedArrays\n                x = Math.floor(x);\n                y = Math.floor(y);\n                w = Math.floor(w);\n                h = Math.floor(h);\n\n                // For now assume xor always uses the base canvas\n                // even if it draws on another canvas\n                var dctx = Mx.canvas.getContext(\"2d\");\n\n                var imgd = dctx.getImageData(x, y, w, 1);\n                var pix = imgd.data;\n                for (var c = 0; c < imgd.data.length; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x, y);\n\n                imgd = dctx.getImageData(x, y + h, w, 1);\n                pix = imgd.data;\n                for (var c = 0; c < imgd.data.length; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x, y + h);\n\n                var imgd = dctx.getImageData(x, y, 1, h);\n                var pix = imgd.data;\n                for (var c = 0; c < h; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x, y);\n\n                imgd = dctx.getImageData(x + w, y, 1, h);\n                pix = imgd.data;\n                for (var c = 0; c < h; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x + w, y);\n            }\n        }\n\n        if ((fill_opacity !== undefined) && (fill_opacity > 0)) {\n            var oldAlpha = ctx.globalAlpha;\n            ctx.globalAlpha = fill_opacity;\n            if (fill_color) {\n                ctx.fillStyle = fill_color;\n            } else {\n                ctx.fillStyle = color;\n            }\n            ctx.fillRect(x + 1, y + 1, w - 1, h - 1);\n            ctx.globalAlpha = oldAlpha;\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param width\n     */\n    // ~= MX$SETFONT\n    mx.set_font = function(Mx, width) {\n        var ctx = Mx.canvas.getContext(\"2d\");\n        var ctx_wid = Mx.wid_canvas.getContext(\"2d\");\n\n        if ((Mx.font) && (Mx.font.width === width)) {\n            // use the cached font\n            ctx.font = Mx.font.font;\n            ctx_wid.font = Mx.font.font;\n        } else {\n            // figure out the font\n            var text_h = 1;\n            do {\n                text_h = text_h + 1;\n                ctx.font = text_h + \"px \" + Mx.font_family;\n                ctx_wid.font = text_h + \"px \" + Mx.font_family;\n                var font_size = ctx.measureText('M'); // the capital M is typically the same height and width\n                Mx.text_w = font_size.width;\n                Mx.text_h = text_h;\n            } while (Mx.text_w < width);\n            Mx.font = {\n                font: text_h + \"px \" + Mx.font_family,\n                width: width\n            };\n        }\n    };\n\n\n    /**\n     * @param Mx\n     * @param xstart\n     * @param ystart\n     * @param xend\n     * @param yend\n     * @param style\n     */\n    // ~= MX$FTEXTLINE\n    mx.textline = function(Mx, xstart, ystart, xend, yend, style) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (!style) {\n            style = {};\n        }\n        if (!style.color) {\n            style.color = Mx.fg;\n        }\n        if (!style.width) {\n            style.width = 1;\n        }\n        draw_line(ctx, xstart, ystart, xend, yend, style, style.color, style.width);\n    };\n\n    /**\n     * @param dmin\n     * @param dmax\n     * @param ndiv\n     */\n    // ~= MX$TICS\n    mx.tics = function(dmin, dmax, ndiv, timecode) {\n        var dtic = 1;\n        var dtic1 = dmin;\n\n        // handle degenerate case\n        if (dmax === dmin) {\n            return {\n                dtic: 1,\n                dtic1: dmin\n            };\n        }\n\n        // split up range into about ndiv 'nice' chunks\n        // zero is included only if   dmin < zero < dmax\n        var dran = Math.abs(dmax - dmin);\n        var df = dran / ndiv;\n        var sig = log10(Math.max(df, 1.0e-36));\n        var nsig;\n        if (sig < 0.0) {\n            nsig = Math.ceil(sig);\n            nsig = nsig - 1;\n        } else {\n            nsig = Math.floor(sig);\n        }\n\n        var ddf = df * Math.pow(10.0, (-nsig));\n        sig = Math.pow(10.0, nsig);\n        var dft = ddf * sig;\n        // If timecode has been requested and it looks like\n        // timecode\n        if (timecode && (dft >= 5.0 && dft <= 59.5 * 3600 * 24)) {\n            var dscl;\n            if (dft < 17.5) {\n                dscl = 5.0; // align to 5 sec tics\n            } else if (dft < 37.5) {\n                dscl = 15.0; // align to 15 sec tics\n            } else if (dft < 4.5 * 60) {\n                dscl = 60.0; // 1 minute tics\n            } else if (dft < 17.5 * 60) {\n                dscl = 5.0 * 60; // and so on\n            } else if (dft < 37.5 * 60) {\n                dscl = 15.0 * 60;\n            } else if (dft < 2.0 * 3600) {\n                dscl = 1.0 * 3600;\n            } else if (dft < 4.5 * 3600) {\n                dscl = 3.0 * 3600;\n            } else if (dft < 9.0 * 3600) {\n                dscl = 6.0 * 3600;\n            } else if (dft < 1.5 * 3600 * 24) {\n                dscl = 12.0 * 3600;\n            } else if (dft < 6.0 * 3600 * 24) {\n                dscl = 1.0 * 3600 * 24; // 1 day\n            } else {\n                dscl = 1.0 * 3600 * 24 * 7; // 1 week\n            }\n            dtic = Math.round(dft / dscl) * dscl;\n        } else {\n            if (ddf < 1.75) {\n                dtic = sig;\n            } else if (ddf < 2.25) {\n                dtic = 2.0 * sig;\n            } else if (ddf < 3.5) {\n                dtic = 2.50 * sig;\n            } else if (ddf < 7.0) {\n                dtic = 5.0 * sig;\n            } else {\n                dtic = 10.0 * sig;\n            }\n        }\n\n        // redefine dmin and dmax to line up on 'nice' boundaries\n        if (dtic === 0.0) {\n            dtic = 1.0;\n        }\n        var nseg;\n        if (dmax >= dmin) {\n            if (dmin >= 0.0) {\n                nseg = dmin / dtic + 0.995;\n            } else {\n                nseg = dmin / dtic - 0.005;\n            }\n            nseg = Math.floor(nseg); // floor\n            dtic1 = nseg * dtic;\n        } else {\n            if (dmin >= 0.0) {\n                nseg = dmin / dtic + 0.005;\n            } else {\n                nseg = dmin / dtic - 0.995;\n            }\n            nseg = Math.floor(nseg); // floor\n            dtic1 = nseg * dtic;\n            dtic = -1 * dtic;\n        }\n        if (dtic1 + dtic === dtic1) {\n            dtic = dmax - dmin;\n        }\n\n        return {\n            dtic: dtic,\n            dtic1: dtic1\n        };\n    };\n\n    /**\n     * @param Mx\n     * @param xdiv\n     * @param ydiv\n     * @param xlab\n     * @param ylab\n     * @param flags\n     */\n    // ~= MX$FDRAWAXIS\n    mx.drawaxis = function(Gx, Mx, xdiv, ydiv, xlab, ylab, flags) {\n        var stk1 = mx.origin(Mx.origin, 1, Mx.stk[Mx.level]);\n        var iscl = 0;\n        var isct = 0;\n        var iscr = 0;\n        var iscb = 0;\n        var width = 0;\n        var height = 0;\n\n        xlab = (xlab === undefined) ? 30 : xlab;\n        ylab = (ylab === undefined) ? 30 : ylab;\n\n\n        if (flags.exactbox) {\n            iscl = Math.floor(stk1.x1);\n            isct = Math.floor(stk1.y1);\n            iscr = Math.floor(stk1.x2);\n            iscb = Math.floor(stk1.y2);\n            width = iscr - iscl;\n            height = iscb - isct;\n        } else {\n            iscl = Math.max(Math.floor(stk1.x1) - 2, 0);\n            isct = Math.max(Math.floor(stk1.y1) - 2, 0);\n            iscr = Math.min(Math.floor(stk1.x2) + 2, Mx.width);\n            iscb = Math.min(Math.floor(stk1.y2) + 2, Mx.height);\n            width = iscr - iscl - 4;\n            height = iscb - isct - 4;\n        }\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (flags.fillStyle) {\n            if (Array.isArray(flags.fillStyle)) {\n                ctx.fillStyle = mx.linear_gradient(Mx, 0, 0, 0, iscb - isct, flags.fillStyle);\n            } else {\n                ctx.fillStyle = flags.fillStyle;\n            }\n        } else {\n            ctx.fillStyle = Mx.bg;\n        }\n        ctx.fillRect(iscl, isct, iscr - iscl, iscb - isct);\n\n        if (!flags.noaxisbox) {\n            mx.textline(Mx, iscl, isct, iscr, isct);\n            mx.textline(Mx, iscr, isct, iscr, iscb);\n            mx.textline(Mx, iscr, iscb, iscl, iscb);\n            mx.textline(Mx, iscl, iscb, iscl, isct);\n        }\n\n        var xTIC = {\n            dtic: 0,\n            dtic1: 0\n        };\n        var yTIC = {\n            dtic: 0,\n            dtic1: 0\n        };\n\n        if (xdiv < 0) {\n            xTIC.dtic1 = stk1.xmin;\n            xTIC.dtic = (stk1.xmin - stk1.xmax) / xdiv;\n        } else {\n            xTIC = mx.tics(stk1.xmin, stk1.xmax, xdiv, flags.xtimecode);\n        }\n\n\n        var _xmult = 1.0;\n        if (flags.xmult) { // if xmult was provided\n            _xmult = flags.xmult;\n        } else if (!flags.xtimecode) {\n            _xmult = mx.mult(stk1.xmin, stk1.xmax);\n        }\n        if (ydiv < 0) {\n            yTIC.dtic1 = stk1.ymin;\n            yTIC.dtic = (stk1.ymin - stk1.ymax) / ydiv;\n        } else {\n            yTIC = mx.tics(stk1.ymin, stk1.ymax, ydiv, flags.ytimecode);\n        }\n        var _ymult = 1.0;\n        if (flags.ymult) { // if ymult was provided\n            _ymult = flags.ymult;\n        } else if (!flags.ytimecode) {\n            _ymult = mx.mult(stk1.ymin, stk1.ymax);\n        }\n\n        var xticlabels = !flags.noxtlab;\n        var yticlabels = !flags.noytlab;\n\n        // add labels\n        var ix = Math.max(0, iscl - 4 * Mx.text_w);\n        var iy = 0;\n        if (flags.ontop) {\n            iy = Math.min(Mx.height, Math.floor(iscb + 1.5 * Mx.text_h));\n        } else {\n            iy = Math.max(Mx.text_h, Math.floor(isct - 0.5 * Mx.text_h));\n        }\n\n        var xlabel;\n        var ylabel;\n\n        if (iy > 0) {\n            var ly = 0;\n            if (!flags.noyplab) {\n                if (flags.ylabel instanceof Function) {\n                    ylabel = flags.ylabel(ylab, _ymult);\n                } else if (flags.ylabel !== undefined) {\n                    ylabel = flags.ylabel;\n                } else {\n                    ylabel = m.label(ylab, _ymult);\n                }\n            }\n            if (!flags.noxplab) {\n                if (flags.xlabel instanceof Function) {\n                    xlabel = flags.xlabel(xlab, _xmult);\n                } else if (flags.xlabel !== undefined) {\n                    xlabel = flags.xlabel;\n                } else {\n                    xlabel = m.label(xlab, _xmult);\n                }\n            }\n        }\n\n        if (xlabel && ylabel) {\n            mx.text(Mx, ix, iy, ylabel + \" vs \" + xlabel);\n        } else if (xlabel) {\n            mx.text(Mx, ix, iy, xlabel);\n        } else if (ylabel) {\n            mx.text(Mx, ix, iy, ylabel);\n        }\n\n        var itext = 5.5 * Mx.text_w;\n        var jtext = 0;\n        if (flags.ontop) {\n            if (flags.inside) {\n                jtext = isct + 1.0 * Mx.text_h;\n            } else {\n                jtext = isct - 0.2 * Mx.text_h;\n            }\n        } else {\n            if (flags.inside) {\n                jtext = iscb - 0.5 * Mx.text_h;\n            } else {\n                jtext = iscb + 1.0 * Mx.text_h + 2;\n            }\n        }\n        var fact;\n        if (stk1.xmin !== stk1.xmax) {\n            fact = width / (stk1.xmax - stk1.xmin);\n        } else {\n            fact = width / 1.0;\n        }\n\n        var fmul;\n        if (_xmult !== 0) {\n            fmul = 1.0 / _xmult;\n        } else {\n            fmul = 1.0;\n        }\n\n        // Figure out how many characters can fit between tics\n        var xlbl_maxlen = Math.min(12, Math.round(fact * xTIC.dtic) / Mx.text_w);\n\n        // The sp flag decides if all tics should be labeled, or just the first tic.\n        // in LEGACY rendering when sp=0 you should get one tic at the start\n        // that then displays like XPOS += tic-delta\n        //\n        // The original logic basically says, if the tic-delta (i.e. dtic) is very small\n        // relative to the first tic, only render the first tic.  Specifically:\n        //    sp = (Math.abs(xTIC.dtic) / Math.max(Math.abs(xTIC.dtic1), Math.abs(xTIC.dtic)) > 1.0e-6);\n        //\n        // However, it's probably more important to decide this based off the significant digits of the\n        // tic labels.  In other words, if the tics cannot be labeled uniquely then you need to make sp=0.\n        var sp = 1;\n        var x;\n        var xlbl = \"\";\n        if (xticlabels) {\n            if (flags.xtimecode) {\n                xlbl = m.sec2tod(xTIC.dtic1);\n                // If the label is no longer than half of the total width display multiple labels\n                sp = (xlbl.length * Mx.text_w < (iscr - iscl) / 2);\n            } else {\n                // Ensure that all of the tic labels will render uniquely\n                var last_xlbl;\n                for (x = xTIC.dtic1; x <= stk1.xmax; x = x + xTIC.dtic) {\n                    xlbl = mx.format_f(x * fmul, xlbl_maxlen, xlbl_maxlen / 2);\n                    if (xlbl === last_xlbl) {\n                        sp = 0;\n                        break;\n                    }\n                    last_xlbl = xlbl;\n                }\n            }\n        }\n        if (xTIC.dtic === 0) {\n            xTIC.dtic = stk1.xmax - xTIC.dtic1 + 1.0;\n        }\n\n        var i;\n        ix = 0;\n        xlbl = \"\";\n        for (x = xTIC.dtic1; x <= stk1.xmax; x = x + xTIC.dtic) {\n            i = iscl + Math.round(fact * (x - stk1.xmin)) + 2;\n            if (i < iscl) {\n                continue;\n            }\n            if (flags.grid && flags.grid !== \"y\") {\n                if (!flags.gridStyle) {\n                    if (mx.LEGACY_RENDER) {\n                        flags.gridStyle = {\n                            mode: \"dashed\",\n                            on: 1,\n                            off: 3\n                        };\n                    } else {\n                        flags.gridStyle = {\n                            \"color\": Mx.xwms,\n                            mode: \"dashed\",\n                            on: 1,\n                            off: 3\n                        };\n                    }\n                }\n                mx.textline(Mx, i, iscb, i, isct, flags.gridStyle);\n            } else {\n                mx.textline(Mx, i, iscb - 2, i, iscb + 2);\n                mx.textline(Mx, i, isct - 2, i, isct + 2);\n            }\n            if (xticlabels) {\n                if (sp) {\n                    xlbl = null;\n                    if (flags.xtimecode) {\n                        // If we have enough space to draw the next tic label\n                        if (i > ix) {\n                            xlbl = m.sec2tod(x, true);\n                            ix = i + (Mx.text_w * (xlbl.length + 1));\n                        }\n                    } else {\n                        xlbl = mx.format_f(x * fmul, xlbl_maxlen, xlbl_maxlen / 2);\n                        xlbl = trimlabel(xlbl, true);\n                    }\n                    if (xlbl) {\n                        var itexti = Math.round(xlbl.length / 2) * Mx.text_w;\n                        if (flags.inside) {\n                            i = Math.max(iscl + itexti, i);\n                            i = Math.min(iscr - itexti, i);\n                        }\n                        if (i - itexti >= 0) {\n                            mx.text(Mx, i - itexti, jtext, xlbl);\n                        }\n                    }\n                } else if (x === xTIC.dtic1) {\n                    if (flags.xtimecode) {\n                        xlbl = m.sec2tod(x, true);\n                        if (flags.inside) {\n                            i = Math.floor(Math.max(iscl + itext, i));\n                        }\n                        mx.text(Mx, i - itext, jtext, xlbl + \" +\\u0394 \" + m.sec2tod(xTIC.dtic));\n                    } else {\n                        xlbl = (xTIC.dtic1 * fmul).toString();\n                        if (flags.inside) {\n                            i = Math.floor(Math.max(iscl + itext, i));\n                        }\n                        mx.text(Mx, i - itext, jtext, xlbl + \" +\\u0394 \" + (xTIC.dtic * fmul));\n                    }\n                }\n            }\n        }\n\n        // Add y-tick marks\n        if (flags.yonright) { // TODO - yonright probably doesn't work\n            if (flags.inside) {\n                itext = Math.min(iscr - 6 * Mx.text_w, Mx.width - 5 * Mx.text_w);\n            } else {\n                itext = Math.min(iscr + Mx.text_w, Mx.width - 5 * Mx.text_w);\n            }\n        } else {\n            if (flags.inside) {\n                itext = Math.max(0, iscl + Mx.text_w);\n            } else {\n                itext = Math.max(0, Math.floor(iscl - (Mx.l - 0.5) * Mx.text_w));\n            }\n        }\n        jtext = 0.4 * Mx.text_h;\n        if (stk1.ymin !== stk1.ymax) {\n            fact = -height / (stk1.ymax - stk1.ymin);\n        } else {\n            fact = -height / 1.0;\n        }\n        if (_ymult !== 0) {\n            fmul = 1.0 / _ymult;\n        } else {\n            fmul = 1;\n        }\n        var ytic, ytic1, endtic;\n        if (yTIC.dtic === 0) {\n            ytic = stk1.ymax - ytic1 + 1.0;\n        }\n        if (stk1.ymax >= stk1.ymin) {\n            endtic = function(val) {\n                return (val <= stk1.ymax);\n            };\n        } else {\n            endtic = function(val) {\n                return (val >= stk1.ymax);\n            };\n        }\n        var ylbl;\n        for (var y = yTIC.dtic1; endtic(y); y = y + yTIC.dtic) {\n            i = iscb + Math.round(fact * (y - stk1.ymin)) - 2;\n            if (i > iscb) {\n                continue;\n            }\n            if (flags.grid && flags.grid !== \"x\") {\n                if (!flags.gridStyle) {\n                    flags.gridStyle = {\n                        mode: \"dashed\",\n                        on: 1,\n                        off: 3\n                    };\n                }\n                mx.textline(Mx, iscl, i, iscr, i, flags.gridStyle);\n            } else {\n                mx.textline(Mx, iscl - 2, i, iscl + 2, i);\n                mx.textline(Mx, iscr - 2, i, iscr + 2, i);\n            }\n            if (yticlabels) {\n                // TODO\n                if (flags.inside &&\n                    ((i < isct + Mx.text_h) || (i > iscb - Mx.text_h * 2))) {\n                    // out of range for inside labels\n                } else if (flags.ytimecode) {\n                    ylbl = m.sec2tod(y); // don't trim zeros because we use them later\n                    // y-axis timecodes\n                    // use three lines\n                    // YYYY:MM:DD\n                    // HH:MM\n                    // SS.factional\n                    var k = i + jtext - Mx.text_h;\n                    var sep = ylbl.indexOf(\"::\");\n                    if (sep !== -1) {\n                        if (k > isct && k < iscb) {\n                            // it the label has space, draw it\n                            mx.text(Mx, itext, k, ylbl.substring(0, sep));\n                        }\n                        sep += 1; // adjust for the next stage\n                    }\n                    // The draw the primary portion\n                    mx.text(Mx, itext, Math.min(iscb, i + jtext), ylbl.substring(sep + 1, sep + 6));\n                    // Finally the sections portion if it fits on the screen\n                    // and is necessary\n                    k = i + jtext + Mx.text_h;\n                    if ((k > isct && k < iscb)) {\n                        if (ylbl.substring(sep + 7, sep + 9) !== \"00\") {\n                            // add the .00 which is safe to do unconditionally because\n                            // we truncate on the following line and we know that\n                            // sec2tod either returns no decimal places or 6 decimal places\n                            ylbl = ylbl + \".00\";\n                            mx.text(Mx, itext, k, ylbl.substring(sep + 7, sep + 12));\n                        }\n                    }\n                } else {\n                    ylbl = mx.format_f(y * fmul, 12, 6);\n                    ylbl = trimlabel(ylbl, flags.inside);\n                    mx.text(Mx, itext, Math.min(iscb, i + jtext), ylbl);\n                }\n            }\n        }\n    };\n\n    /**\n     * @param x\n     * @param y\n     * @param rect_x\n     * @param rect_y\n     * @param rect_width\n     * @param rect_height\n     * @private\n     */\n    mx.inrect = function(x, y, rect_x, rect_y, rect_width, rect_height) {\n        return (x >= rect_x && x <= rect_x + rect_width &&\n            y >= rect_y && y <= rect_y + rect_height);\n    };\n    /**\n     * @private\n     */\n    var MENU_CONSTANTS = {\n        GBorder: 3,\n        sidelab: 0,\n        toplab: 1,\n        n_show: 0\n    };\n\n    /**\n     * @method _menu_redraw\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    function _menu_redraw(Mx, menu) {\n        if (menu.animationFrameHandle) {\n            return;\n        }\n        // Use the current mouse position and the size of the plot to determine available space\n        //var mouse_pos = Mx.ypos; TODO: Use mouse position\n        var plot_height = Mx.canvas.height;\n        var buffer_sz = 35; // estimate of how much of the canvas is spacing around plot\n        var avail_space = plot_height - 2 * buffer_sz;\n\n        // Calculate how many menu items can fit inside that space\n        var menu_item_height = Mx.text_h * 1.5;\n        var n_items = Math.floor(avail_space / menu_item_height);\n        if (n_items >= menu.items.length) {\n            MENU_CONSTANTS.n_show = menu.items.length;\n        } else {\n            MENU_CONSTANTS.n_show = n_items;\n        }\n\n\n        menu.animationFrameHandle = requestAnimFrame(mx.withWidgetLayer(Mx, function() {\n            mx.erase_window(Mx);\n\n            menu.animationFrameHandle = undefined;\n            var yb = Mx.text_h * 1.5;\n            menu.x = Math.max(menu.x, 0);\n            menu.y = Math.max(menu.y, 0);\n            menu.x = Math.min(menu.x, Mx.width - menu.w);\n            menu.y = Math.min(menu.y, Mx.height - menu.h);\n\n            var xcc = menu.x + MENU_CONSTANTS.GBorder + Math.max(0, MENU_CONSTANTS.sidelab);\n            var ycc = menu.y + MENU_CONSTANTS.GBorder + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);\n\n            var xss = menu.w - 2 * MENU_CONSTANTS.GBorder - Math.abs(MENU_CONSTANTS.sidelab);\n            var yss = menu.h - 2 * MENU_CONSTANTS.GBorder - MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);\n\n            mx.widgetbox(Mx, menu.x, menu.y, menu.w, menu.h, xcc, ycc, xss, yss, menu.title);\n\n            //ctx.fillStyle = xwlo;\n            //ctx.fillRect(xcc, ycc, xss, yss);\n\n            var ctx = Mx.wid_canvas.getContext(\"2d\");\n            ctx.lineWidth = 1;\n\n            ctx.strokeStyle = Mx.xwbs; // xwbs\n            ctx.beginPath();\n            ctx.moveTo(xcc, ycc - 4 + 0.5);\n            ctx.lineTo(xcc + xss - 1, ycc - 4 + 0.5);\n            ctx.stroke();\n\n            ctx.strokeStyle = Mx.xwts; // xwts\n            ctx.beginPath();\n            ctx.moveTo(xcc, ycc - 3 + 0.5);\n            ctx.lineTo(xcc + xss - 1, ycc - 3 + 0.5);\n            ctx.stroke();\n\n            var i_begin = menu.queue[0];\n            var i_end = menu.queue[MENU_CONSTANTS.n_show - 1];\n            if (i_end === 0) {\n                // now we are starting over\n                for (var q = 0; q < MENU_CONSTANTS.n_show; q++) {\n                    menu.queue[q] = q;\n                }\n                i_begin = menu.queue[0];\n                i_end = menu.queue[MENU_CONSTANTS.n_show - 1];\n            }\n            var menu_counter = 0;\n            for (var i = i_begin; i <= i_end; i++) {\n                var item = menu.items[i];\n                var y = ycc + yb * menu_counter;\n                menu_counter = menu_counter + 1;\n\n                if (item.style === \"separator\") {\n                    ctx.fillStyle = Mx.xwbs;\n                    ctx.fillRect(xcc, y, xss, yb);\n\n                    ctx.beginPath();\n                    ctx.moveTo(xcc, y + 0.5);\n                    ctx.lineTo(xcc + xss, y + 0.5);\n                    ctx.stroke();\n\n                    ctx.textBaseline = \"middle\";\n                    ctx.textAlign = \"left\";\n                    ctx.fillStyle = Mx.xwfg;\n                    ctx.fillText(\" \" + item.text + \" \", xcc + Mx.text_w * 2, y + yb / 2);\n                } else {\n                    if (mx.LEGACY_RENDER) {\n                        ctx.fillStyle = Mx.xwlo;\n                        ctx.fillRect(xcc, y, xss, yb);\n                        ctx.beginPath();\n                        ctx.moveTo(xcc, y + 0.5);\n                        ctx.lineTo(xcc + xss, y + 0.5);\n                        ctx.stroke();\n                        if (item.selected) {\n                            mx.shadowbox(Mx, xcc - 1, y, xss + 2, yb, 1, 2, \"\", 0.75);\n                        }\n                    } else {\n                        ctx.save();\n                        ctx.globalAlpha = 0.75;\n                        if (item.selected) {\n                            ctx.fillStyle = Mx.xwts;\n                        } else {\n                            ctx.fillStyle = Mx.xwlo;\n                        }\n                        ctx.fillRect(xcc, y, xss, yb);\n                        ctx.restore();\n                        ctx.strokeStyle = Mx.bg;\n                        ctx.beginPath();\n                        ctx.moveTo(xcc, y + 0.5);\n                        ctx.lineTo(xcc + xss, y + 0.5);\n                        ctx.stroke();\n                    }\n\n                    ctx.textBaseline = \"middle\";\n                    ctx.textAlign = \"left\";\n                    ctx.fillStyle = Mx.xwfg;\n                    if (item.style === \"checkbox\") {\n                        ctx.fillText(\" \" + item.text + \" \", xcc + Mx.text_w * 2, y + yb / 2);\n                        ctx.strokeStyle = Mx.xwfg;\n                        ctx.strokeRect(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2), Mx.text_w, Mx.text_w);\n                        if (item.checked) {\n                            ctx.beginPath();\n                            ctx.moveTo(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2));\n                            ctx.lineTo(xcc + 1 + Mx.text_w + Mx.text_w, y + ((yb - Mx.text_w) / 2) + Mx.text_w);\n                            ctx.stroke();\n                            ctx.beginPath();\n                            ctx.moveTo(xcc + 1 + Mx.text_w + Mx.text_w, y + ((yb - Mx.text_w) / 2));\n                            ctx.lineTo(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2) + Mx.text_w);\n                            ctx.stroke();\n                        }\n                    } else {\n                        ctx.fillText(\" \" + item.text + \" \", xcc, y + yb / 2);\n\n                        // draw the triangle\n                        if (item.checked) {\n                            ctx.beginPath();\n                            ctx.moveTo(xcc + 1, y + Mx.text_h / 4);\n                            ctx.lineTo(xcc + 1 + Mx.text_w - 2, y + Mx.text_h / 4 + Mx.text_h / 2);\n                            ctx.lineTo(xcc + 1, y + Mx.text_h / 4 + Mx.text_h);\n                            ctx.lineTo(xcc + 1, y + Mx.text_h / 4);\n                            ctx.fill();\n                        }\n                    }\n                }\n            }\n\n\n        }));\n    }\n\n    /**\n     * @method _menu_takeaction\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    function _menu_takeaction(Mx, menu) {\n        mx.onWidgetLayer(Mx, function() {\n            mx.erase_window(Mx);\n        });\n        Mx.menu = undefined;\n        Mx.widget = null;\n\n        for (var i = 0; i < menu.items.length; i++) {\n            var item = menu.items[i];\n            if (item.selected) {\n                if (item.handler) {\n                    item.handler();\n                } else if (item.menu) {\n                    var newmenu = item.menu;\n                    if (typeof item.menu === 'function') {\n                        newmenu = item.menu();\n                    }\n                    newmenu.finalize = menu.finalize;\n                    mx.menu(Mx, newmenu);\n                }\n                break;\n            }\n        }\n        if ((!Mx.menu) && (menu.finalize)) {\n            menu.finalize();\n        }\n    }\n\n    /**\n     * @method _menu_dismiss\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    function _menu_dismiss(Mx, menu) {\n        mx.onWidgetLayer(Mx, function() {\n            mx.erase_window(Mx);\n        });\n        if (Mx.useDomMenu) {\n            Mx.menu.remove();\n        }\n        Mx.menu = undefined;\n        Mx.widget = null;\n\n        if ((!Mx.menu) && (menu.finalize)) {\n            menu.finalize();\n        }\n    }\n\n    /**\n     * @method _menu_callback\n     * @param Mx\n     * @param menu\n     * @param event\n     * @private\n     */\n    function _menu_callback(Mx, menu, event) {\n        // Keep track of whats visible currently\n        var i_begin = menu.queue[0];\n        var i_end = menu.queue[MENU_CONSTANTS.n_show - 1];\n        if (event === undefined) {\n            // no event, just refresh the menu\n            _menu_redraw(Mx, menu);\n        } else if (event.type === \"mousemove\") {\n            // Update position\n            if (menu.drag_x !== undefined && menu.drag_y !== undefined && Math.abs(Mx.xpos - menu.drag_x) > 2 && Math.abs(Mx.ypos - menu.drag_y) > 2) {\n                menu.x += Mx.xpos - menu.drag_x;\n                menu.y += Mx.ypos - menu.drag_y;\n                menu.drag_x = Mx.xpos;\n                menu.drag_y = Mx.ypos;\n            }\n\n            // All of these variables suck and are common in other places...refactoring is necessary\n            var xcc = menu.x + MENU_CONSTANTS.GBorder + Math.max(0, MENU_CONSTANTS.sidelab);\n            var xss = menu.w - 2 * MENU_CONSTANTS.GBorder - Math.abs(MENU_CONSTANTS.sidelab);\n            var yb = Mx.text_h * 1.5;\n            var ycc = menu.y + MENU_CONSTANTS.GBorder + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);\n\n            for (var i = i_begin; i <= i_end; i++) {\n                var y = ycc + yb * i;\n                var item = menu.items[i];\n                item.selected = false;\n                if (mx.inrect(Mx.xpos, Mx.ypos, xcc, y, xss, yb)) {\n                    item.selected = true;\n                }\n            }\n            _menu_redraw(Mx, menu);\n        } else if (event.type === \"mouseup\") {\n            // No longer dragging menu\n            if (event.which === 1) {\n                if ((menu.drag_x !== undefined) && (menu.drag_y !== undefined)) {\n                    menu.drag_x = undefined;\n                    menu.drag_y = undefined;\n                } else {\n                    _menu_takeaction(Mx, menu);\n                }\n            } else if (event.which === 3) {\n                _menu_dismiss(Mx, menu);\n            }\n        } else if (event.type === \"mousedown\") {\n            event.preventDefault();\n            if (event.which === 1) {\n                if (Mx.xpos > menu.x && Mx.xpos < (menu.x + menu.w) && Mx.ypos > menu.y && Mx.ypos < (menu.y + Mx.text_h * 1.5)) {\n                    menu.drag_x = Mx.xpos;\n                    menu.drag_y = Mx.ypos;\n                }\n            } else if (event.which === 2) {\n                _menu_takeaction(Mx, menu);\n            }\n        } else if (event.type === \"keydown\") {\n            // Remember that keydown triggers periodically while a key is held\n            if (Mx.menu) {\n                var menu = Mx.menu;\n                event.preventDefault();\n                var keyCode = common.getKeyCode(event);\n                if (keyCode === 13) { // enter\n                    _menu_takeaction(Mx, menu);\n                } else if (keyCode === 38) { // up arrow\n                    for (var i = i_begin; i < i_end; i++) {\n                        var item = menu.items[i];\n                        if (item.selected) {\n                            item.selected = false;\n                            if (menu.items[i - 1] !== undefined) {\n                                menu.items[i - 1].selected = true;\n                            }\n                            break;\n                        } else if (i === i_begin && i_begin !== 0) {\n                            // we are at the end of the list and nothing was selected so pick the last element\n                            //item.selected = true;\n                            menu.queue.pop();\n                            menu.queue.unshift(i_begin - 1);\n                            _menu_redraw(Mx, menu);\n                            menu.items[i_end - 1].selected = true;\n\n                        } else if (i_begin === 0 && menu.items[i_begin].selected === true) {\n                            _menu_redraw(Mx, menu);\n                            menu.items[0].selected = true;\n                        }\n                    }\n                    _menu_redraw(Mx, menu);\n                } else if (keyCode === 40) { // down arrow\n                    for (var i = i_begin; i < i_end; i++) {\n                        var item = menu.items[i];\n                        if (item.selected) {\n                            item.selected = false;\n                            if (menu.items[i + 1] !== undefined) {\n                                menu.items[i + 1].selected = true;\n                            }\n                            break;\n                        } else if (i === (i_end - 1)) {\n                            // nothing was selected so select the top\n                            var next_item = i_end + 1;\n\n                            if (i_end + 1 === menu.items.length) {\n                                next_item = 0;\n                            }\n\n                            menu.queue.shift();\n                            menu.queue.push(next_item);\n                            menu.items[i_end].selected = false;\n                            menu.items[next_item].selected = true;\n                            _menu_redraw(Mx, menu);\n                        }\n                    }\n                    _menu_redraw(Mx, menu);\n                } else if ((keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 90)) {\n                    var inp = String.fromCharCode(keyCode).toUpperCase();\n\n                    if (menu.keypresses === undefined) {\n                        menu.keypresses = inp;\n                    } else {\n                        menu.keypresses = menu.keypresses + inp;\n                    }\n\n                    var matches = 0;\n                    for (var i = 0; i < menu.items.length; i++) {\n                        var item = menu.items[i];\n                        item.selected = false;\n                        if (!item.text) {\n                            continue;\n                        }\n\n                        if (item.text.toUpperCase().indexOf(menu.keypresses) === 0) {\n                            if (matches === 0) {\n                                item.selected = true;\n                            }\n                            matches++;\n                        }\n                    }\n\n                    if (matches === 0) {\n                        menu.keypresses = undefined;\n                        _menu_redraw(Mx, menu);\n                    } else if (matches === 1) {\n                        _menu_takeaction(Mx, menu);\n                    } else {\n                        _menu_redraw(Mx, menu);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    mx.menu = function(Mx, menu) {\n        if (Mx.useDomMenu) {\n            new mx.DomMenu(Mx, menu);\n            return;\n        }\n        var yb = Mx.text_h * 1.5;\n        //MENU_CONSTANTS.n_show = menu.items.length;\n\n        var plot_height = Mx.canvas.height;\n        var buffer_sz = 35; // estimate of how much of the canvas is spacing around plot\n        var avail_space = plot_height - 2 * buffer_sz;\n        // Calculate how many menu items can fit inside that space\n        var menu_item_height = Mx.text_h * 1.5;\n        var n_items = Math.floor(avail_space / menu_item_height);\n        if (n_items >= menu.items.length) {\n            MENU_CONSTANTS.n_show = menu.items.length;\n        } else {\n            MENU_CONSTANTS.n_show = n_items;\n        }\n\n        if (menu) {\n            if (!Mx.widget) {\n                menu.x = Mx.xpos;\n                menu.y = Mx.ypos;\n                menu.val = 0;\n\n                menu.h = MENU_CONSTANTS.GBorder * 2 + yb * MENU_CONSTANTS.n_show + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder) - 1;\n                menu.y = menu.y - ((MENU_CONSTANTS.toplab + (Math.max(1, menu.val)) - 0.5) * yb + (1 + MENU_CONSTANTS.toplab) * MENU_CONSTANTS.GBorder) + 1;\n\n                var xb = menu.title.length;\n                var yadj = 0;\n                for (var i = 0; i < menu.items.length; i++) {\n                    var item = menu.items[i];\n                    xb = Math.max(xb, item.text.length);\n                    if (item.style === \"checkbox\") {\n                        xb += 2;\n                    }\n                    if (item.style === \"separator\") {\n                        xb += 2;\n                    }\n                    if (item.checked && item.style !== \"checkbox\") {\n                        yadj = yb * i;\n                    }\n                }\n\n                menu.queue = [];\n\n                for (var q = 0; q < MENU_CONSTANTS.n_show; q++) {\n                    menu.queue.push(q);\n\n                }\n\n                menu.y = menu.y - yadj;\n                xb += 2;\n                xb = xb * Mx.text_w;\n\n                menu.w = MENU_CONSTANTS.GBorder * 2 + Math.abs(MENU_CONSTANTS.sidelab) + xb - 1;\n                menu.x = menu.x - menu.w / 2;\n\n                Mx.menu = menu;\n\n                Mx.widget = {\n                    type: \"MENU\",\n                    callback: function(event) {\n                        _menu_callback(Mx, menu, event);\n                    }\n                };\n            }\n            _menu_redraw(Mx, menu);\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param inx\n     * @param iny\n     * @param inw\n     * @param inh\n     * @param name\n     * @private\n     */\n    mx.widgetbox = function(Mx, x, y, w, h, inx, iny, inw, inh, name) {\n        var GBorder = 3;\n        mx.shadowbox(Mx, x, y, w, h, 1, 2, \"\", 0.75);\n        if (name) {\n            var length = name.length;\n            length = Math.min(length, w / Mx.text_w);\n            length = Math.max(length, 1);\n            var xt = x + (w - length * Mx.text_w) / 2;\n            y += GBorder;\n            var yt = y + (iny - y + 0.7 * Mx.text_h) / 2;\n\n            mx.text(Mx, xt, yt, name, Mx.xwfg);\n        }\n        if (inw > 0 && inh > 0) {\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            if (mx.LEGACY_RENDER) {\n                ctx.fillStyle = Mx.bg;\n                ctx.fillRect(inx, iny, inw, inh);\n            } else {\n                ctx.save();\n                ctx.globalAlpha = 0.1;\n                ctx.fillStyle = Mx.bg;\n                ctx.fillRect(inx, iny, inw, inh);\n                ctx.restore();\n            }\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param lbl\n     * @param color\n     * @private\n     */\n    //\n    // ~= MX$TEXT\n    //\n    mx.text = function(Mx, x, y, lbl, color) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        x = Math.max(0, x);\n        y = Math.max(0, y);\n        if ((x < 0) || (y < 0)) {\n            throw \"On No!\";\n        }\n        ctx.textBaseline = \"bottom\";\n        ctx.textAlign = \"left\";\n        ctx.font = Mx.font.font;\n        if (color === undefined) {\n            ctx.fillStyle = Mx.fg;\n        } else {\n            ctx.fillStyle = color;\n        }\n\n        ctx.fillText(lbl, x, y);\n    };\n\n    /**\n     * @method clipt\n     * @param denom\n     * @param num\n     * @param o\n     * @private\n     */\n    // ~= glibf1.for CLIPT\n    function clipt(denom, num, o) {\n        var accept = true;\n        var t;\n\n        t = num / denom;\n        if (denom > 0) {\n            if (t > o.tL) {\n                accept = false;\n            } else if (t > o.tE) {\n                o.tE = t;\n            }\n        } else if (denom < 0) {\n            if (t < o.tE) {\n                accept = false;\n            } else if (t < o.tL) {\n                o.tL = t;\n            }\n        } else {\n            if (num > 0) {\n                accept = false;\n            }\n        }\n\n        return accept;\n    }\n\n    /**\n     * Method which draws a line in a graphics context.\n     * In the graphics context provided, draws a line.\n     * Mimics XLib's XDrawLines method in at least the basic functionality.\n     * @method draw_line\n     * @param ctx\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     * @param style\n     * @param color\n     * @param width\n     * @private\n     */\n    function draw_line(ctx, x1, y1, x2, y2, style, color, width) {\n        // For odd width lines (i.e. 1,3,5...) if you draw right\n        // on the pixel boundry the canvas will actually draw a slightly\n        // grey line 2 px wide.  You have to add .5 to get what you want.\n\n        // Handle boundary cases - instead of throwing an exception, just bound\n        // the value to 0\n        if (x1 < 0) {\n            x1 = 0;\n        }\n        if (y1 < 0) {\n            y1 = 0;\n        }\n        if (x2 < 0) {\n            x2 = 0;\n        }\n        if (y2 < 0) {\n            y2 = 0;\n        }\n\n        if (width) {\n            ctx.lineWidth = width;\n        }\n        if (color) {\n            ctx.strokeStyle = color;\n        }\n\n        if (ctx.lineWidth % 2 === 1) {\n            if (x1 === x2) {\n                x1 = Math.floor(x1) + 0.5;\n                x2 = x1;\n            }\n            if (y1 === y2) {\n                y1 = Math.floor(y1) + 0.5;\n                y2 = y1;\n            }\n        }\n\n        if (!style || !style.mode) {\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.stroke();\n            ctx.beginPath();\n        } else if (style.mode === \"dashed\") {\n            var dash_supported = common.dashOn(ctx, style.on, style.off);\n            if (dash_supported) {\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n                common.dashOff(ctx);\n                ctx.beginPath();\n            } else {\n                // Fallback that only supports vertical/horizontal\n                ctx.beginPath();\n                if (y1 === y2) {\n                    var x = Math.min(x1, x2);\n                    x2 = Math.max(x1, x2);\n                    while (x < x2) {\n                        ctx.moveTo(x, y1);\n                        ctx.lineTo(x + style.on, y1);\n                        ctx.stroke();\n                        x += (style.on + style.off);\n                    }\n                } else if (x1 === x2) {\n                    // vertical line\n                    var y = Math.min(y1, y2);\n                    y2 = Math.max(y1, y2);\n                    while (y < y2) {\n                        ctx.moveTo(x1, y);\n                        ctx.lineTo(x1, y + style.on);\n                        ctx.stroke();\n                        y += (style.on + style.off);\n                    }\n                } else {\n                    throw \"Only horizontal or vertical dashed lines are supported\";\n                }\n                ctx.beginPath();\n            }\n        } else if (style.mode === \"xor\") {\n            if (typeof Uint8ClampedArray === 'undefined') {\n                // we don't have typed arrays, so canvas getImageData operations\n                // will be very slow, so use color instead\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n                ctx.beginPath();\n            } else {\n                // currently xor-style is only supported for horizontal or vertical lines\n                var w = 0;\n                var h = 0;\n                if (y1 === y2) {\n                    w = Math.abs(x2 - x1);\n                    h = width;\n                    x1 = Math.min(x1, x2);\n                } else if (x1 === x2) {\n                    w = width;\n                    h = Math.abs(y2 - y1);\n                    y1 = Math.min(y1, y2);\n                } else {\n                    throw \"Only horizontal and vertical lines can be drawn with XOR\";\n                }\n\n                if ((w === 0) || (h === 0)) {\n                    return;\n                }\n\n                x1 = Math.floor(x1);\n                y1 = Math.floor(y1);\n                var imgd = ctx.getImageData(x1, y1, w, h);\n                var pix = imgd.data;\n                // Loop over each pixel and invert the color.\n                for (var i = 0, n = pix.length; i < n; i += 4) {\n                    pix[i] = 255 - pix[i]; // red\n                    pix[i + 1] = 255 - pix[i + 1]; // green\n                    pix[i + 2] = 255 - pix[i + 2]; // blue\n                    pix[i + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x1, y1);\n                ctx.clearRect(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * Method which draws a polygon in a graphics context.\n     * In the graphics context provided, draws a polygon.\n     * Mimics XLib's XDrawLines method in at least the basic functionality.\n     * @method draw_poly\n     * @param ctx - The graphics context to draw in\n     * @param pix - Defined as [\\{\"x\": xval, y: \"y\": yval\\}, \\{\"x\": xval, \"y\":yval\\}...].\n     *              xval and yval represent their respective coordinate values in the tuples\n     *\t\t\t\tnumber of points in the structure can be retrieved via pix.length.\n     * @param color - The color of the rectangle\n     * @param width - The line width to set.\n     * @private\n     */\n    function draw_poly(ctx, pix, color, width) { // TODO Should this be a public method?\n        start_poly(ctx, pix, width);\n\n        if (color) {\n            ctx.strokeStyle = color;\n        }\n\n        ctx.stroke(); // draw the shape outlined in the path\n        ctx.closePath();\n    }\n\n    /**\n     * Method which draws a filled polygon in a graphics context.\n     * In the graphics context provided draws a polygon, then fills it.\n     * Mimics XLib's XFillPolygon method in at least the basic functionality.\n     * Some differences between this and Xlib's method are:\n     *  -no way to specify convex/non-convex\n     *  -no way to specify CoordModeOrigin\n     *  -no need to specify the number of points to draw (plots all points in pix)\n     * @method fill_poly\n     * @param ctx - The graphics context to draw in\n     * @param pix - Defined as [\\{\"x\": xval, y: \"y\": yval\\}, \\{\"x\": xval, \"y\":yval\\}...].\n     *              xval and yval represent their respective coordinate values in the tuples\n     *\t\t\t\tnumber of points in the structure can be retrieved via pix.length.\n     * @param lineColor - The line color of the polygon\n     * @param fillColor - The fill color of the polygon\n     * @param lineWidth - The line width to set\n     * @private\n     */\n    function fill_poly(ctx, pix, lineColor, fillColor, width) { // TODO Should this be a public method?\n        start_poly(ctx, pix, width);\n\n        if (lineColor) {\n            ctx.strokeStyle = lineColor;\n        }\n        if (fillColor) {\n            ctx.fillStyle = fillColor;\n        }\n\n        ctx.fill(); // fill in the shape only, no outline drawn\n        ctx.closePath();\n    }\n\n    /**\n     * Helper method which starts drawing a polygon in a graphics context.\n     * In the graphics context provided, begins a path at the first point in pix,\n     * then draws lines from each point in pix to the next. It also sets the width\n     * of the line.\n     * @method start_poly\n     * @param ctx - The graphics context to draw in\n     * @param pix - Defined as [\\{\"x\": xval, y: \"y\": yval\\}, \\{\"x\": xval, \"y\":yval\\}...].\n     *              xval and yval represent their respective coordinate values in the tuples\n     *\t\t\t\tnumber of points in the structure can be retrieved via pix.length.\n     * @param width - The line width to set.\n     * @private\n     */\n    function start_poly(ctx, pix, width) {\n        if (pix.length < 1) {\n            return;\n        }\n\n        var x = pix[0].x;\n        var y = pix[0].y;\n\n        if (width) {\n            ctx.lineWidth = width;\n        } else {\n            ctx.lineWidth = 1; // Default\n        }\n\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n\n        for (var i = 0; i < pix.length; i++) {\n            x = pix[i].x;\n            y = pix[i].y;\n            ctx.lineTo(x, y);\n        }\n    }\n\n    /**\n     * Method which draws a rectangle (hollowed) in a graphics context.\n     * In the graphics context provided, draws a hollow rectangle.\n     * Mimics XLib's XDrawRectangle method in at least the basic functionality.\n     * @method draw_rectangle\n     * @param ctx - The graphics context to draw in\n     * @param x - The x coordinate\n     * @param y - The y coordinate\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param color - The color of the rectangle\n     * @param lineWidth - The line width to set.\n     * @private\n     */\n    function draw_rectangle(ctx, x, y, width, height, color, lineWidth) { // TODO Should this be a public method?\n        if (lineWidth) {\n            ctx.lineWidth = lineWidth;\n        }\n        if (color) {\n            ctx.strokeStyle = color;\n        }\n\n        ctx.strokeRect(x, y, width, height);\n    }\n\n    /**\n     * Method which draws a rectangle (filled) in a graphics context.\n     * In the graphics context provided, draws a filled rectangle.\n     * Mimics XLib's XFillRectangle method in at least the basic functionality.\n     * @method fill_rectangle\n     * @param ctx - The graphics context to draw in\n     * @param x - The x coordinate\n     * @param y - The y coordinate\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param fillColor - The fill color of the rectangle\n     * @param strokeColor - The line color of the rectangle\n     * @param lineWidth - The line width to set.\n     * @private\n     */\n    function fill_rectangle(ctx, x, y, width, height, fillColor, strokeColor, lineWidth) { // TODO Should this be a public method?\n        if (lineWidth) {\n            ctx.lineWidth = lineWidth;\n        }\n        if (strokeColor) {\n            ctx.strokeStyle = strokeColor;\n        }\n        if (fillColor) {\n            ctx.fillStyle = fillColor;\n        }\n\n        ctx.fillRect(x, y, width, height);\n    }\n\n    /**\n     * @method pc2px\n     * @param perc\n     * @private\n     */\n    function pc2px(perc) {\n        return Math.floor(Math.round(255 * (perc / 100)));\n    }\n\n    /**\n     * @method to_rgb\n     * @param red\n     * @param green\n     * @param blue\n     * @private\n     */\n    function to_rgb(red, green, blue) {\n        return \"rgb(\" + Math.round(red) + \", \" + Math.round(green) + \", \" + Math.round(blue) + \")\";\n    }\n\n    /**\n     *\n     * Instead of dealing with color tables and stuff, all we really need\n     * is the ability to on-the-fly generate a color from the map\n     * @param Mx\n     * @param map\n     * @param z\n     * @private\n     */\n    mx.getcolor = function(Mx, map, z) {\n        var iz = 0;\n        for (; iz < 6 && map[iz + 1].pos === 0; iz++) {}\n\n        while (z > map[iz].pos && iz < 6) {\n            iz++;\n        }\n        if ((iz === 0) || (z >= map[iz].pos)) {\n            // above, below, or directly on boundry\n            return to_rgb(\n                pc2px(map[iz].red),\n                pc2px(map[iz].green),\n                pc2px(map[iz].blue));\n        } else {\n            // interpolation my dear watson\n            var pf = (z - map[iz - 1].pos) / (map[iz].pos - map[iz - 1].pos);\n            var zf = pc2px(pf * 100);\n            var zf1 = 255 - zf;\n            return to_rgb(\n                (zf * (map[iz].red / 100) + zf1 * (map[iz - 1].red / 100)), (zf * (map[iz].green / 100) + zf1 * (map[iz - 1].green / 100)), (zf * (map[iz].blue / 100) + zf1 * (map[iz - 1].blue / 100)));\n        }\n    };\n\n    /**\n     * @method trimlabel\n     * @param lbl\n     * @param inside\n     * @private\n     */\n    // ~= glibf1.for TRIMLABEL\n    function trimlabel(lbl, inside) {\n        var k;\n        var j;\n        if (lbl.substring(5, 8) === \".000000\") { // this line seems to always evaluate to false\n            k = 4;\n        } else {\n            k = lbl.length - 1;\n            while (lbl[k] === \"0\") {\n                k = k - 1;\n            }\n        }\n        j = 0;\n        while ((lbl[j] === \" \") && ((k - j + 1 > 5) || inside)) {\n            j = j + 1;\n        }\n        var res = lbl.substring(j, k + 1);\n        if (res.indexOf(\".\") === -1) {\n            res += \".\";\n        }\n        return res;\n    }\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.redraw_warpbox = function(Mx) {\n        if (Mx.warpbox) {\n            if (Mx._animationFrameHandle) {\n                cancelAnimFrame(Mx._animationFrameHandle);\n            }\n            Mx._animationFrameHandle = requestAnimFrame(function() {\n                display_warpbox(Mx);\n            });\n        }\n    };\n\n    /**\n     * @method display_warpbox\n     * @param Mx\n     * @private\n     */\n    function display_warpbox(Mx) {\n        Mx._animationFrameHandle = undefined;\n        var warpbox = Mx.warpbox;\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!warpbox) {\n            return;\n        }\n\n        if (((Mx.xpos >= warpbox.xmin) && (Mx.xpos <= warpbox.xmax)) &&\n            ((Mx.ypos >= warpbox.ymin) && (Mx.ypos <= warpbox.ymax))) {\n\n            // Update the position\n            warpbox.xl = Mx.xpos;\n            warpbox.yl = Mx.ypos;\n\n            // Draw the current box\n            var x = Math.min(warpbox.xo, warpbox.xl);\n            var y = Math.min(warpbox.yo, warpbox.yl);\n            var w = Math.abs(warpbox.xl - warpbox.xo);\n            var h = Math.abs(warpbox.yl - warpbox.yo);\n\n            if ((w === 0) || (h === 0)) {\n                // Nothing to draw\n                return;\n            }\n\n            if (warpbox.mode === \"vertical\") {\n                x = Mx.l;\n                w = Mx.r - Mx.l;\n            } else if (warpbox.mode === \"horizontal\") {\n                y = Mx.t;\n                h = Mx.b - Mx.t;\n            } // else box\n\n            mx.onWidgetLayer(Mx, function() {\n                mx.erase_window(Mx);\n                mx.draw_box(Mx, \"xor\", x, y, w, h, warpbox.style.opacity, warpbox.style.fill_color);\n            });\n        }\n\n    }\n\n    /**\n     * @method log10\n     * @param val\n     * @private\n     */\n    function log10(val) {\n        return Math.log(val) / Math.log(10);\n    }\n\n\n    /**\n     * Attempts to format a number in the same manner\n     * as the FORTRAN format code 1p1g16.9\n     * 1p1g16.9\n     * 16 character fields\n     * 9 for decimals\n     * 3 for exponent (E)\n     * 1 for sign\n     * 1 for starting 0\n     * 1 for decimal point\n     * 1 for blank space\n     *\n     * The E format code is used for scientific (exponential) notation.\n     * The value is rounded to d decimal positions and right-justified\n     * into an external field that is w characters wide. The value of w\n     * must be large enough to include a minus sign when necessary, at least\n     * one digit to the left of the decimal point, the decimal point,\n     * d digits to the right of the decimal point, a plus or minus sign for\n     * the exponent, the character \"e\" or \"E\", and at least two characters for the exponent.\n     *\n     * The G format code uses the F output style when reasonable and\n     * E for other values, but displays exactly d significant digits\n     * rather than d digits following the decimal point.\n     *\n     * @param num\n     * @param w\n     * @param d\n     * @param leading_nonzer\n     * @private\n     */\n    mx.format_g = function(num, w, d, leading_nonzero) {\n        var w = Math.min(w, d + 7);\n        var f = Math.abs(num).toString();\n\n        var decloc = f.indexOf(\".\");\n        // If there is no decimal point, add one at the end.\n        if (decloc === -1) {\n            f = f + \".\";\n            decloc = f.length;\n        }\n\n        var exp = 0;\n        var eloc = f.indexOf(\"e\");\n        // If there is already an 'e' in the string parse it out\n        if (eloc !== -1) {\n            exp = parseInt(f.slice(eloc + 1, f.length), 10);\n            f = f.slice(0, eloc);\n        }\n\n        // Add zero's to the end if necessary\n        var dz = Math.min(d - (f.length - decloc) + 1, d);\n        for (var i = 0; i < dz; i++) {\n            f = f + \"0\";\n        }\n\n        if (num !== 0) {\n            if (Math.abs(num) < 1.0) {\n                if (f.slice(0, 2) === \"0.\") {\n                    // Shift to the left until the first number is non-zero\n                    for (var i = 2; i < f.length; i++) {\n                        if (f[i] === \"0\") {\n                            exp -= 1;\n                        } else {\n                            f = \"0.\" + f.slice(i, i + d);\n                            break;\n                        }\n                    }\n                } else {\n                    f = f.slice(0, d + 2);\n                }\n            } else if (decloc > d) {\n                var exp = Math.max(0, decloc - 1);\n                f = f[0] + \".\" + f.slice(1, d + 1);\n            } else {\n                f = f.slice(0, d + 2);\n            }\n        }\n\n        if (exp === 0) {\n            f = f + \"    \";\n        } else {\n            var e = mx.pad(Math.abs(exp).toString(), 2, \"0\");\n            if (exp < 0) {\n                f = f + \"E-\" + e;\n            } else {\n                f = f + \"E+\" + e;\n            }\n        }\n\n        if (num < 0) {\n            f = \"-\" + f;\n        } else {\n            f = \" \" + f;\n        }\n        return f;\n    };\n\n    /**\n     *\n     * Behave like fortran format code\n     * fs.d\n     * @param num the number to format\n     * @param s the width of digits\n     * @param d number of digits after the decimal\n     * @private\n     */\n    mx.format_f = function(num, s, d) {\n        d = Math.max(Math.min(d, 20), 0);\n        var f = num.toFixed(d).toString();\n        f = mx.pad(f, (s + d), \" \");\n        return f;\n    };\n\n    /**\n     * @param s\n     * @param size\n     * @param c\n     * @private\n     */\n    mx.pad = function(s, size, c) {\n        while (s.length < size) {\n            s = c + s;\n        }\n        return s;\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param shape\n     * @param func\n     * @param label\n     * @private\n     */\n    // ~= MX$SHADOWBOX\n    mx.legacy_shadowbox = function(Mx, x, y, w, h, shape, func, label) {\n        var length = label.length; // Original method declaration includes a length - but it only represents the length of the label\n\n        var xt = 0; // Originally an int\n        var yt = 0; // Originally an int\n        var bw = 0; // Originally an int\n\n        var pix = []; // Originally declared as a size 11 XPoint array\n        for (var cnt = 0; cnt < 11; cnt++) { // initializing 11 points in the array\n            pix[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n        var fill = !(func === 1 || func === -1); // Originally a bool\n\n        // Removed the G.BW section - since we don't need to support black & white displays\n\n        var j = (shape === mx.L_ArrowLeft || shape === mx.L_ArrowUp) ? 1 : 2;\n\n        if (func !== 0 && mx.GBorder > 0) {\n            bw = m.trunc(Math.min(w, h) / 3);\n            bw = Math.max(1, Math.min(bw, mx.GBorder));\n        }\n\n        if (bw > 0) {\n            /* outer shape */\n            pix[0].x = pix[1].x = x;\n            pix[8].x = pix[9].x = x + w;\n            pix[1].y = pix[8].y = y;\n            pix[0].y = pix[9].y = y + h;\n\n            switch (shape) {\n                case mx.L_ArrowLeft:\n                    pix[0].y = pix[1].y = y + m.trunc(h / 2);\n                    x += 2;\n                    --w;\n                    break;\n                case mx.L_ArrowRight:\n                    pix[8].y = pix[9].y = y + m.trunc(h / 2);\n                    --x;\n                    --w;\n                    break;\n                case mx.L_ArrowUp:\n                    pix[1].x = pix[8].x = x + m.trunc(w / 2);\n                    y += 2;\n                    --h;\n                    break;\n                case mx.L_ArrowDown:\n                    pix[0].x = pix[9].x = x + m.trunc(w / 2);\n                    --y;\n                    --h;\n                    break;\n            }\n            pix[2] = pix[8];\n            pix[10] = pix[0];\n\n            x += bw;\n            y += bw;\n            w -= 2 * bw;\n            h -= 2 * bw;\n        }\n\n        /* inner shape */\n        pix[4].x = pix[5].x = x;\n        pix[3].x = pix[6].x = x + w;\n        pix[3].y = pix[4].y = y;\n        pix[5].y = pix[6].y = y + h;\n        switch (shape) {\n            case mx.L_ArrowLeft:\n                pix[4].y = pix[5].y = y + m.trunc(h / 2);\n                break;\n            case mx.L_ArrowRight:\n                pix[3].y = pix[6].y = y + m.trunc(h / 2);\n                break;\n            case mx.L_ArrowUp:\n                pix[3].x = pix[4].x = x + m.trunc(w / 2);\n                break;\n            case mx.L_ArrowDown:\n                pix[5].x = pix[6].x = x + m.trunc(w / 2);\n                break;\n        }\n        pix[7] = pix[3];\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (bw > 0) {\n            ctx.fillStyle = (func > 0) ? Mx.xwts : Mx.xwbs; // Set foreground color\n            fill_poly(ctx, pix.slice(0, 7));\n            //\tif (shape !== 1) { draw_poly(ctx, pix.slice(0,7)); } // TODO what shape is this neccessary with - causes an issue with arrows\n\n            ctx.fillStyle = (func < 0) ? Mx.xwts : Mx.xwbs; // Set foreground color\n            fill_poly(ctx, pix.slice(5, 11));\n            //if (shape !== 1) { draw_poly(ctx, pix.slice(5, 11)); } // TODO what shape is this neccessary with - causes an issue with arrows\n        }\n\n        if (fill) {\n            ctx.fillStyle = Mx.xwbg; // Set foreground color\n            fill_poly(ctx, pix.slice(3, 8));\n            //if (shape !== 1) { draw_poly(ctx, pix.slice(3, 8)); } // TODO what shape is this neccessary with - causes an issue with arrows\n        }\n\n        ctx.fillStyle = Mx.xwfg; // Set foreground color\n        ctx.textBaseline = \"alphabetic\"; // Reset vertical text alignment\n\n        if (fill && length > 0) {\n            length = Math.min(length, m.trunc(w / Mx.text_w));\n            length = Math.max(length, 1);\n            xt = x + m.trunc((w - length * Mx.text_w) / 2);\n            yt = y + m.trunc((h + 0.7 * Mx.text_h) / 2);\n            ctx.fillText(label, xt, yt); // Draw a string\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param shape\n     * @param func\n     * @param label\n     * @private\n     */\n    // ~= MX$SHADOWBOX\n    mx.sigplot_shadowbox = function(Mx, x, y, w, h, shape, func, label, alpha) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        var length = label.length; // Original method declaration includes a length - but it only represents the length of the label\n\n        var color = (func < 0) ? Mx.xwts : Mx.xwbs;\n\n        alpha = alpha || 1.0;\n\n        var pix = []; // Originally declared as a size 11 XPoint array\n        for (var cnt = 0; cnt < 11; cnt++) { // initializing 11 points in the array\n            pix[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n\n        switch (shape) {\n            case mx.L_ArrowLeft:\n            case mx.L_ArrowRight:\n            case mx.L_ArrowUp:\n            case mx.L_ArrowDown:\n                var pix = mx.chevron(shape, x, y, w, h);\n                ctx.fillStyle = (func > 0) ? Mx.xwts : Mx.xwbs;\n                fill_poly(ctx, pix.slice(0, 6));\n                break;\n            default:\n                mx.draw_round_box(Mx, color, x, y, w, h, alpha, Mx.xwbg, 5, Mx.xwbs);\n                break;\n        }\n\n        ctx.fillStyle = Mx.xwfg; // Set foreground color\n        ctx.textBaseline = \"alphabetic\"; // Reset vertical text alignment\n\n        var fill = !(func === 1 || func === -1); // Originally a bool\n        if (fill && length > 0) {\n            length = Math.min(length, m.trunc(w / Mx.text_w));\n            length = Math.max(length, 1);\n            var xt = x + m.trunc((w - length * Mx.text_w) / 2);\n            var yt = y + m.trunc((h + 0.7 * Mx.text_h) / 2);\n            ctx.fillText(label, xt, yt); // Draw a string\n        }\n    };\n\n    if (mx.LEGACY_RENDER) { // TODO new-style conditional\n        mx.shadowbox = mx.legacy_shadowbox;\n    } else {\n        mx.shadowbox = mx.sigplot_shadowbox;\n    }\n\n    mx.chevron = function(shape, x, y, w, h, e) {\n        // Figure out the largest square dimension\n        var q = Math.min(w, h);\n\n        // if the edge width isn't provided use a decent one\n        if (!e) {\n            e = q * 0.25;\n        }\n\n\n\n        // Initialize the pixel array\n        var pix = [];\n        for (var cnt = 0; cnt < 6; cnt++) { // initializing 11 points in the array\n            pix[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n\n        var x_offset = m.trunc(((w - q) / 2) + (q / 4) - (e / (2 * 1.414)));\n        var y_offset = m.trunc(((h - q) / 2) + (q / 4) - (e / (2 * 1.414)));\n        switch (shape) {\n            case mx.L_ArrowLeft:\n                // Chevron points from the tip around the edge clockwise\n                pix[0].x = x + x_offset;\n                pix[0].y = y + m.trunc(q / 2);\n                pix[1].x = x + x_offset + m.trunc(q / 2);\n                pix[1].y = y;\n                pix[2].x = x + x_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[2].y = y + m.trunc(e / 1.414);\n                pix[3].x = x + x_offset + m.trunc((2 * e) / 1.414);\n                pix[3].y = y + m.trunc(q / 2);\n                pix[4].x = x + x_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[4].y = y + h - m.trunc(e / 1.414);\n                pix[5].x = x + x_offset + m.trunc(q / 2);\n                pix[5].y = y + q;\n                break;\n            case mx.L_ArrowRight:\n                // Chevron points from the tip around the edge clockwise\n                pix[0].x = x + w - x_offset;\n                pix[0].y = y + m.trunc(q / 2);\n                pix[1].x = x + w - x_offset - m.trunc(q / 2);\n                pix[1].y = y;\n                pix[2].x = x + w - x_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[2].y = y + m.trunc(e / 1.414);\n                pix[3].x = x + w - x_offset - m.trunc((2 * e) / 1.414);\n                pix[3].y = y + m.trunc(q / 2);\n                pix[4].x = x + w - x_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[4].y = y + h - m.trunc(e / 1.414);\n                pix[5].x = x + w - x_offset - m.trunc(q / 2);\n                pix[5].y = y + q;\n                break;\n            case mx.L_ArrowUp:\n                // Chevron points from the tip around the edge counter-clockwise\n                pix[0].x = x + m.trunc(q / 2);\n                pix[0].y = y + y_offset;\n                pix[1].x = x;\n                pix[1].y = y + y_offset + m.trunc(q / 2);\n                pix[2].x = x + m.trunc(e / 1.414);\n                pix[2].y = y + y_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[3].x = x + m.trunc(q / 2);\n                pix[3].y = y + y_offset + m.trunc((2 * e) / 1.414);\n                pix[4].x = x + w - m.trunc(e / 1.414);\n                pix[4].y = y + y_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[5].x = x + q;\n                pix[5].y = y + y_offset + m.trunc(q / 2);\n                break;\n            case mx.L_ArrowDown:\n                // Chevron points from the tip around the edge counter-clockwise\n                pix[0].x = x + m.trunc(q / 2);\n                pix[0].y = y + h - y_offset;\n                pix[1].x = x;\n                pix[1].y = y + h - y_offset - m.trunc(q / 2);\n                pix[2].x = x + m.trunc(e / 1.414);\n                pix[2].y = y + h - y_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[3].x = x + m.trunc(q / 2);\n                pix[3].y = y + h - y_offset - m.trunc((2 * e) / 1.414);\n                pix[4].x = x + w - m.trunc(e / 1.414);\n                pix[4].y = y + h - y_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[5].x = x + q;\n                pix[5].y = y + h - y_offset - m.trunc(q / 2);\n                break;\n        }\n\n        return pix;\n    };\n\n    /**\n     * @param Mx\n     * @param mouseEvent\n     * @private\n     */\n    // ~= mx_ifevent\n    mx.ifevent = function(Mx, mouseEvent) {\n        Mx.button_press = 0;\n        Mx.button_release = 0;\n        Mx.state_mask = 0;\n\n        var rect = mouseEvent.target.getBoundingClientRect();\n        var eventXPos = (mouseEvent.offsetX === undefined) ? (mouseEvent.pageX - rect.left - window.scrollX) : mouseEvent.offsetX;\n        var eventYPos = (mouseEvent.offsetX === undefined) ? (mouseEvent.pageY - rect.top - window.scrollY) : mouseEvent.offsetY;\n\n        //\t\tvar eventXPos = (mouseEvent.offsetX === undefined) ? mouseEvent.layerX : mouseEvent.offsetX;\n        //\t\tvar eventYPos = (mouseEvent.offsetY === undefined) ? mouseEvent.layerY : mouseEvent.offsetY;\n\n        switch (mouseEvent.type) {\n            case \"mousedown\":\n                Mx.xpos = m.bound(eventXPos, 0, Mx.width);\n                Mx.ypos = m.bound(eventYPos, 0, Mx.height);\n                switch (mouseEvent.which) {\n                    case 1:\n                        Mx.button_press = 1;\n                        break;\n                    case 2:\n                        Mx.button_press = 2;\n                        break;\n                    case 3:\n                        Mx.button_press = 3;\n                        break;\n                    case 4:\n                        Mx.button_press = 4;\n                        break;\n                    case 5:\n                        Mx.button_press = 5;\n                }\n                //Mx.state_mask = TODO\n                break;\n            case \"mouseup\":\n                Mx.xpos = m.bound(eventXPos, 0, Mx.width);\n                Mx.ypos = m.bound(eventYPos, 0, Mx.height);\n                switch (mouseEvent.which) {\n                    case 1:\n                        Mx.button_release = 1;\n                        break;\n                    case 2:\n                        Mx.button_release = 2;\n                        break;\n                    case 3:\n                        Mx.button_release = 3;\n                        break;\n                    case 4:\n                        Mx.button_release = 4;\n                        break;\n                    case 5:\n                        Mx.button_release = 5;\n                }\n                //Mx.state_mask = TODO\n                break;\n        }\n    };\n\n    /**\n     * @param sv\n     * @private\n     */\n    //\n    // ~= scroll_real2pix\n    //\n    // TODO Refactor real2pix to return an object instead of sending in reference vars?\n    mx.scroll_real2pix = function(sv) {\n        // Param types:\n        // sv - mx.SCROLLBAR\n\n        if (sv.range === 0.0) {\n            return {\n                s1: sv.a1,\n                sw: sv.a2 - sv.a1\n            };\n            //\t\t\tout.s1 = sv.a1;\n            //\t\t\tout.sw = sv.a2 - sv.a1;\n        } else {\n            var dv; // real_8\n            var ts1; // int_2\n            var ts2; // int_2\n\n            dv = (sv.a2 - sv.a1) / sv.trange;\n\n            ts1 = sv.a1 + Math.floor(0.5 + (sv.smin - sv.tmin) * dv);\n            ts2 = ts1 + Math.floor(0.5 + sv.srange * dv);\n\n            if (ts1 > sv.a2 - sv.swmin) {\n                ts1 = sv.a2 - sv.swmin;\n            } else {\n                ts1 = Math.max(ts1, sv.a1);\n            }\n\n            if (ts2 < sv.a1 + sv.swmin) {\n                ts2 = sv.a1 + sv.swmin;\n            } else {\n                ts2 = Math.min(ts2, sv.a2);\n            }\n\n            return {\n                s1: ts1,\n                sw: Math.max(ts2 - ts1, sv.swmin)\n            };\n            //\t\t\tout.s1 = ts1;\n            //\t\t\tout.sw = Math.max(ts2 - ts1, sv.swmin);\n        }\n    };\n\n    /**\n     * Method to re-draw a scrollbar after update. Logic taken from mx.scroll's UPDATE section.\n     * @param sv The scrollbar to work with.\n     * @param Mx The Mx context to work with.\n     * @param op Optional op-code for XW_DRAW\n     * @private\n     */\n    mx.redrawScrollbar = function(sv, Mx, op) {\n        var x;\n        var y;\n        var xcc;\n        var ycc;\n        var xss;\n        var yss;\n        var p1;\n        var op1; // int\n        var s1;\n        var sw; // int_2\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        var scrollReal2PixOut = mx.scroll_real2pix(sv);\n        s1 = scrollReal2PixOut.s1;\n        sw = scrollReal2PixOut.sw;\n\n        p1 = s1;\n        op1 = sv.s1;\n\n        xcc = sv.x;\n        ycc = sv.y;\n        xss = sv.w;\n        yss = sv.h;\n\n        // horizontal scroll bar\n        if (sv.origin & 1) {\n            y = ycc + yss / 2;\n            if (sv.origin & 2) {\n                op1 = xss - op1 - sv.sw;\n                p1 = xss - p1 - sw;\n            }\n            if (op === mx.XW_DRAW) {\n                var arrow = sv.arrow; // int\n\n                mx.shadowbox(Mx, xcc, ycc, arrow, yss - 1, mx.L_ArrowLeft, 2, \"\", 0);\n                mx.shadowbox(Mx, xcc + xss - arrow, ycc, arrow - 1, yss, mx.L_ArrowRight, 2, \"\", 0);\n            }\n\n\n            if (mx.LEGACY_RENDER) {\n                mx.draw_line(Mx, Mx.fg, xcc + sv.a1, y, xcc + sv.a2, y);\n                mx.shadowbox(Mx, xcc + p1, ycc, sw + 1, yss, 1, 2, \"\", 0);\n            } else {\n                // Veritical gradiant\n                var lingrad = ctx.createLinearGradient(xcc + sv.a1, 0, xcc + sv.a2, 0);\n                lingrad.addColorStop(0, Mx.xwbs);\n                lingrad.addColorStop(0.5, Mx.xwts);\n                lingrad.addColorStop(1, Mx.xwbs);\n                mx.draw_line(Mx, lingrad, xcc + sv.a1, y, xcc + sv.a2, y, 1);\n\n                var lingrad = ctx.createLinearGradient(0, ycc, 0, ycc + yss);\n                lingrad.addColorStop(0.1, Mx.xwts);\n                lingrad.addColorStop(0.75, Mx.xwbs);\n                mx.draw_round_box(Mx, Mx.xwbg, xcc + p1, ycc, sw + 1, yss, 1, lingrad, 8, Mx.xwbs);\n            }\n\n            // else vertical scroll bar\n        } else {\n            x = xcc + m.trunc(xss / 2);\n            if (sv.origin <= 2) {\n                op1 = yss - op1 - sv.sw;\n                p1 = yss - p1 - sw;\n            }\n            if (op === mx.XW_DRAW) {\n                var arrow = sv.arrow; // int\n                mx.shadowbox(Mx, xcc, ycc, xss - 1, arrow, mx.L_ArrowUp, 2, \"\", 0);\n                mx.shadowbox(Mx, xcc, ycc + yss - arrow, xss - 1, arrow, mx.L_ArrowDown, 2, \"\", 0);\n            }\n\n            if (mx.LEGACY_RENDER) {\n                mx.draw_line(Mx, Mx.fg, x, ycc + sv.a1, x, ycc + sv.a2);\n                mx.shadowbox(Mx, xcc, ycc + p1, xss, sw + 1, 1, 2, \"\", 0);\n            } else {\n                // Horizontal gradiant\n                var lingrad = ctx.createLinearGradient(0, ycc + sv.a1, 0, ycc + sv.a2);\n                lingrad.addColorStop(0, Mx.xwbs);\n                lingrad.addColorStop(0.5, Mx.xwts);\n                lingrad.addColorStop(1, Mx.xwbs);\n                mx.draw_line(Mx, lingrad, x, ycc + sv.a1, x, ycc + sv.a2, 1);\n\n                var lingrad = ctx.createLinearGradient(xcc, 0, xcc + xss, 0);\n                lingrad.addColorStop(0.1, Mx.xwts);\n                lingrad.addColorStop(0.75, Mx.xwbs);\n                mx.draw_round_box(Mx, Mx.xwbg, xcc - 1, ycc + p1, xss, sw + 1, 1, lingrad, 8, Mx.xwbs);\n            }\n\n        }\n\n        sv.s1 = s1;\n        sv.sw = sw;\n    };\n\n    /**\n     * @param {Object} Mx - the Mx object\n     * @param {number} x - the real-world x coordinate\n     * @param {number} y - the real-world y coordinate\n     * @param {boolean} [clip=false] set to clip the returned value to the plot area\n     * @returns {Object} pixel - the x,y coordinates in pixel coordinate space\n     * @returns {number} pixel.clipped - true if the point would have or has been clipped\n     * @private\n     */\n    mx.real_to_pixel = function(Mx, x, y, clip) {\n        var stk4 = mx.origin(Mx.origin, 4, Mx.stk[Mx.level]);\n        if ((stk4.xscl === 0.0) || (stk4.yscl === 0.0)) {\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n\n        var left = stk4.x1;\n        var top = stk4.y1;\n\n        var xxmin = stk4.xmin;\n        var xscl = 1.0 / stk4.xscl;\n\n        var yymin = stk4.ymin;\n        var yscl = 1.0 / stk4.yscl;\n\n        var clipped_x = false;\n        var clipped_y = false;\n\n        if (x !== null) {\n            clipped_x = ((x > stk4.xmax) || (x < stk4.xmin));\n            if (clip) {\n                x = Math.min(x, stk4.xmax);\n                x = Math.max(x, stk4.xmin);\n            }\n            x = Math.round((x - xxmin) * xscl) + left;\n        }\n        if (y !== null) {\n            clipped_y = ((y > stk4.ymin) || (y < stk4.ymax));\n            if (clip) {\n                y = Math.min(y, stk4.ymin);\n                y = Math.max(y, stk4.ymax);\n            }\n            y = Math.round((y - yymin) * yscl) + top;\n        }\n\n        x = Math.round(x);\n        y = Math.round(y);\n\n        return {\n            x: x,\n            y: y,\n            clipped_x: clipped_x,\n            clipped_y: clipped_y,\n            clipped: (clipped_x || clipped_y)\n        };\n    };\n\n    /**\n     * @param Mx\n     * @param xpos\n     * @param ypos\n     * @private\n     */\n    mx.pixel_to_real = function(Mx, xpos, ypos) {\n        var iretx = Math.min(Mx.r, Math.max(Mx.l, xpos));\n        var irety = Math.min(Mx.b, Math.max(Mx.t, ypos));\n        var retx;\n        var rety;\n\n        var k = Mx.level;\n        if ((Mx.origin !== 2) && (Mx.origin !== 3)) {\n            retx = Mx.stk[k].xmin + (iretx - Mx.stk[k].x1) * Mx.stk[k].xscl;\n        } else {\n            retx = Mx.stk[k].xmin + (Mx.stk[k].x2 - iretx) * Mx.stk[k].xscl;\n        }\n        if (Mx.origin > 2) {\n            rety = Mx.stk[k].ymin + (irety - Mx.stk[k].y1) * Mx.stk[k].yscl;\n        } else {\n            rety = Mx.stk[k].ymin + (Mx.stk[k].y2 - irety) * Mx.stk[k].yscl;\n        }\n\n        return {\n            x: retx,\n            y: rety\n        };\n    };\n\n    /**\n     * @param Mx\n     * @param map\n     * @param ncolors\n     * @private\n     */\n    mx.colormap = function(Mx, map, ncolors) {\n        Mx.pixel = new ColorMap(map, {\n            ncolors: ncolors\n        });\n        return;\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @private\n     */\n    mx.colorbar = function(Mx, x, y, w, h) {\n        if (!Mx.pixel) {\n            m.log.warn(\"COLORMAP not initialized, cannot draw colorbar\");\n            return;\n        }\n        Mx.pixel.setRange(0, Mx.pixel.map.length);\n        for (var j = 1; j < h; j++) {\n            var cidx = Math.floor(Mx.pixel.map.length * (j - 1) / h);\n            mx.draw_line(Mx, cidx, x, y + h - j, x + w, y + h - j);\n        }\n        mx.draw_box(Mx, Mx.fg, x + 0.5, y, w, h);\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @private\n     */\n    mx.legend_colorbar = function(Mx, x, y, w, h) {\n        for (var j = 1; j < w; j++) {\n            var cidx = Math.floor(Mx.pixel.length * (j - 1) / w);\n            mx.draw_line(Mx, cidx, x + w - j, y, x + w - j, y + h);\n        }\n        mx.draw_box(Mx, Mx.fg, x + 0.5, y, w, h);\n    };\n\n    /**\n     * Render image buffer to canvas.\n     *\n     * If we don't have access to Uint8ClampedArray (i.e. Firefox 3.6)\n     * use a slower approach that only supports rasters up to the size\n     * limit of the canvas\n     * @private\n     *\n     * @param ctx\n     *   {context} a canvas 2d context\n     * @param buf\n     *   {ArrayBuffer} a buffer of 32-bit image data\n     * @param opacity\n     *   the opacity to render the image with\n     * @param smoothing\n     *   if image smoothing should be enabled\n     * @param sx\n     *   source x position\n     * @param sy\n     *   source y position\n     * @param sw\n     *   source width\n     * @param sh\n     *   source height\n     * @param x\n     *   optional x canvas dest\n     * @param y\n     *   optional y canvas dest\n     * @param w\n     *   optional width\n     * @param h\n     *   optional height\n     */\n    function renderImageNoTypedArrays(Mx, ctx, buf, opacity, smoothing, x, y, w, h, sx, sy, sw, sh) {\n        if (sx === undefined) {\n            sx = 0;\n        }\n        if (sy === undefined) {\n            sy = 0;\n        }\n        if (sw === undefined) {\n            sw = buf.width - sx;\n        }\n        if (sh === undefined) {\n            sh = buf.height - sy;\n        }\n\n        // If the source buffer is small enough to be directly rendered, do that\n        Mx._renderCanvas.width = buf.width;\n        Mx._renderCanvas.height = buf.height;\n\n        var imgctx = Mx._renderCanvas.getContext(\"2d\");\n        var imgd = imgctx.createImageData(Mx._renderCanvas.width, Mx._renderCanvas.height);\n        var buf8 = new Uint8Array(buf);\n        for (var yy = 0; yy < buf.height; ++yy) {\n            for (var xx = 0; xx < buf.width; ++xx) {\n                var index = ((yy * buf.width) + xx) * 4;\n                imgd.data[index] = buf8[index]; // red\n                imgd.data[index + 1] = buf8[index + 1]; // green\n                imgd.data[index + 2] = buf8[index + 2]; // blue\n                imgd.data[index + 3] = 255; // alpha\n            }\n        }\n        imgctx.putImageData(imgd, 0, 0);\n\n        // Render the image to the destination\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        if (!smoothing) {\n            ctx.imageSmoothingEnabled = false;\n            ctx.mozImageSmoothingEnabled = false;\n            ctx.webkitImageSmoothingEnabled = false;\n        }\n        ctx.drawImage(Mx._renderCanvas, sx, sy, sw, sh, x, y, w, h);\n        ctx.restore();\n    }\n\n    /**\n     * @private\n     *\n     * @param ctx\n     *   {context} a canvas 2d context\n     * @param buf\n     *   {ArrayBuffer} a buffer of 32-bit image data\n     * @param opacity\n     *   the opacity to render the image with\n     * @param smoothing\n     *   if image smoothing should be enabled\n     * @param sx\n     *   source x position\n     * @param sy\n     *   source y position\n     * @param sw\n     *   source width\n     * @param sh\n     *   source height\n     * @param x\n     *   optional x canvas dest\n     * @param y\n     *   optional y canvas dest\n     * @param w\n     *   optional width\n     * @param h\n     *   optional height\n     */\n    function renderImageTypedArrays(Mx, ctx, buf, opacity, smoothing, x, y, w, h, sx, sy, sw, sh) {\n        if (sx === undefined) {\n            sx = 0;\n        }\n        if (sy === undefined) {\n            sy = 0;\n        }\n        if (sw === undefined) {\n            sw = buf.width - sx;\n        }\n        if (sh === undefined) {\n            sh = buf.height - sy;\n        }\n\n        if ((buf.width < 32768) && (buf.height < 32768)) {\n            // If the source buffer is small enough to be directly rendered, do that\n            Mx._renderCanvas.width = buf.width;\n            Mx._renderCanvas.height = buf.height;\n\n            var imgctx = Mx._renderCanvas.getContext(\"2d\");\n            var imgd = imgctx.createImageData(Mx._renderCanvas.width, Mx._renderCanvas.height);\n\n            // TODO - This may not be portable to all browsers, if not\n            // we need to choose between this approach and the traditional\n            // for-loop based approach\n            var buf8 = new Uint8ClampedArray(buf);\n            imgd.data.set(buf8);\n            imgctx.putImageData(imgd, 0, 0);\n        } else {\n            if ((sw < 32768) && (sh < 32768)) {\n                // The clipped image is small enough to directly render\n                Mx._renderCanvas.width = sw;\n                Mx._renderCanvas.height = sh;\n                scaleImage(Mx._renderCanvas, buf, sx, sy, sw, sh);\n            } else {\n                // Downscale to twice the destination size\n                Mx._renderCanvas.width = Math.min(w * 2, buf.width);\n                Mx._renderCanvas.height = Math.min(h * 2, buf.height);\n                scaleImage(Mx._renderCanvas, buf, sx, sy, sw, sh);\n                sw = Mx._renderCanvas.width;\n                sh = Mx._renderCanvas.height;\n            }\n            sx = 0;\n            sy = 0;\n        }\n\n        // Render the image to the destination\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        if (!smoothing) {\n            ctx.imageSmoothingEnabled = false;\n            ctx.mozImageSmoothingEnabled = false;\n            ctx.webkitImageSmoothingEnabled = false;\n        }\n        ctx.drawImage(Mx._renderCanvas, sx, sy, sw, sh, x, y, w, h);\n        ctx.restore();\n    }\n\n    /**\n     * Scale the image data (represented by buf) into the destination canvas\n     * using nearest neighbor.  In genearl, you should just use the scaling\n     * provided by drawImage...but if the buf is greater than 32767 pixels in\n     * either dimension that won't work and you have to use this.\n     *\n     * @param img\n     *   A canvas object\n     * @param buf\n     *   An ArrayBuf with .width and .height elements\n     *\n     * @private\n     */\n    function scaleImage(img, buf, sx, sy, sw, sh) {\n        // Source buffer, expected to have .width and .height elements\n        var src = new Uint32Array(buf);\n\n        if (!sw) {\n            sw = buf.width;\n        }\n        if (!sh) {\n            sh = buf.height;\n        }\n        if (!sx) {\n            sx = 0;\n        }\n        if (!sy) {\n            sy = 0;\n        }\n\n        // Cache to avoid get width calls in tight loop\n        var w = img.width;\n        var h = img.height;\n\n        // Destination element\n        var imgctx = img.getContext(\"2d\");\n        var imgd = imgctx.createImageData(w, h);\n        var ibuf = new ArrayBuffer(imgd.data.length);\n        var buf8 = new Uint8ClampedArray(ibuf);\n        var dest = new Uint32Array(ibuf);\n\n        // Scaling factor\n        var width_scaling = sw / w;\n        var height_scaling = sh / h;\n\n        // Perform the scaling\n        var xx = 0;\n        var yy = 0;\n        var jj = 0;\n        for (var i = 0; i < dest.length; i++) {\n            xx = Math.round(Math.floor(i % w) * width_scaling) + sx;\n            yy = Math.round(Math.floor(i / w) * height_scaling) + sy;\n            jj = Math.floor((yy * buf.width) + xx);\n            dest[i] = src[jj];\n        }\n\n        // Set the data\n        imgd.data.set(buf8);\n        imgctx.putImageData(imgd, 0, 0);\n    }\n\n    var renderImage = (typeof Uint8ClampedArray === 'undefined') ? renderImageNoTypedArrays : renderImageTypedArrays;\n\n    /**\n     * @param Mx\n     * @param img\n     * @param shift\n     * @private\n     */\n    mx.shift_image_rows = function(Mx, buf, shift) {\n        var imgd = new Uint32Array(buf);\n        if (shift > 0) { // shift down\n            shift = shift * buf.width;\n            imgd.set(imgd.subarray(0, imgd.length - shift), shift);\n        } else if (shift < 0) { // shift up\n            shift = Math.abs(shift) * buf.width;\n            imgd.set(imgd.subarray(shift));\n        }\n\n        return buf;\n    };\n\n    /**\n     * @param Mx\n     * @param img\n     * @param data\n     * @param row\n     * @param zmin\n     * @param zmax\n     * @private\n     */\n    mx.update_image_row = function(Mx, buf, data, row, zmin, zmax, xcompression) {\n        var imgd = new Uint32Array(buf, row * buf.width * 4, buf.width);\n\n        Mx.pixel.setRange(zmin, zmax);\n\n        var xc = Math.max(1, data.length / buf.width);\n        for (var i = 0; i < buf.width; i++) {\n            var didx = Math.floor(i * xc);\n            var value = data[didx];\n            if (xc > 1) {\n                if (xcompression === 1) { // average\n                    for (var j = 1; j < xc; j++) {\n                        value += data[didx + j];\n                    }\n                    value = (value / xc);\n                } else if (xcompression === 2) { // min\n                    for (var j = 1; j < xc; j++) {\n                        value = Math.min(value, data[didx + j]);\n                    }\n                } else if (xcompression === 3) { // max\n                    for (var j = 1; j < xc; j++) {\n                        value = Math.max(value, data[didx + j]);\n                    }\n                } else if (xcompression === 4) { // first\n                    value = data[i];\n                } else if (xcompression === 5) { // max abs\n                    for (var j = 1; j < xc; j++) {\n                        value = Math.max(Math.abs(value), Math.abs(data[didx + j]));\n                    }\n                }\n            }\n            var color = Mx.pixel.getColor(value);\n            if (color) {\n                imgd[i] = color.color;\n\n            }\n        }\n\n        return imgd;\n    };\n\n    /**\n     * @param Mx\n     * @param data\n     * @param w\n     * @param h\n     * @param Mx\n     * @param zmin\n     * @param zmax\n     * @private\n     */\n    mx.create_image = function(Mx, data, subsize, w, h, zmin, zmax, xcompression) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!Mx.pixel) {\n            console.log(\"COLORMAP not initialized, defaulting to foreground\");\n            Mx.pixel = new ColorMap(m.Mc.colormap[1].colors);\n        }\n\n\n        Mx.pixel.setRange(zmin, zmax);\n        w = Math.ceil(w);\n        h = Math.ceil(h);\n        var buf = new ArrayBuffer(w * h * 4);\n        buf.width = w;\n        buf.height = h;\n\n        var nxc = Math.max(1, subsize / w);\n\n        var imgd = new Uint32Array(buf);\n        if (data) {\n            for (var i = 0; i < imgd.length; i++) {\n                var ix;\n                var iy;\n                if ((Mx.origin === 1) || (Mx.origin === 4)) {\n                    ix = Math.floor(i % w);\n                } else {\n                    ix = w - Math.floor(i % w) - 1;\n                }\n                if ((Mx.origin === 3) || (Mx.origin === 4)) {\n                    iy = Math.floor(i / w);\n                } else {\n                    iy = h - Math.floor(i / w) - 1;\n                }\n                if (iy === 1) {\n                    var test = 1;\n                }\n                var didx = (iy * subsize) + Math.floor(ix * nxc);\n                var value = data[didx];\n                if (nxc > 1) {\n                    if (xcompression === 1) { // average\n                        for (var j = 1; j < nxc; j++) {\n                            value += data[didx + j];\n                        }\n                        value = value / nxc;\n                    } else if (xcompression === 2) { // min\n                        for (var j = 1; j < nxc; j++) {\n                            value = Math.min(value, data[didx + j]);\n                        }\n                    } else if (xcompression === 3) { // max\n                        for (var j = 1; j < nxc; j++) {\n                            value = Math.max(value, data[didx + j]);\n                        }\n                    } else if (xcompression === 4) { // first\n                        value = data[didx];\n                    } else if (xcompression === 5) { // max abs\n                        for (var j = 1; j < nxc; j++) {\n                            value = Math.max(Math.abs(value), Math.abs(data[didx + j]));\n                        }\n                    }\n                }\n\n\n                var color = Mx.pixel.getColor(value);\n                if (color) {\n                    imgd[i] = color.color;\n                }\n            }\n        }\n\n        // Return the image in case the caller wishes to cache it\n        return buf;\n    };\n\n    /**\n     * @param Mx\n     * @param data\n     * @param nx\n     * @param ny\n     * @param nex\n     * @param ney\n     * @param xd\n     * @param yd\n     * @param level\n     * @param opacity\n     * @param smoothing\n     * @private\n     */\n    mx.put_image = function(Mx, data, nx, ny, nex, ney, xd, yd, level, opacity, smoothing) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!Mx.pixel) {\n            m.log.warn(\"COLORMAP not initialized, defaulting to foreground\");\n            Mx.pixel = new ColorMap(m.Mc.colormap[1].colors);\n        }\n\n        var w;\n        var h;\n\n        if (nex > 0) {\n            w = nx * nex;\n        } else {\n            w = -nex;\n        }\n        w = Math.floor(w);\n        h = Math.floor(ny * ney);\n\n        var buf = new ArrayBuffer(w * h * 4);\n        buf.width = w;\n        buf.height = h;\n\n        var imgd = new Uint32Array(buf);\n        for (var i = 0; i < imgd.length; i++) {\n            var color = Mx.pixel.getColor(data[i]);\n            if (color) {\n                imgd[i] = color.color;\n            }\n        }\n\n        //render the buffered canvas onto the original canvas element\n        renderImage(Mx, ctx, buf, opacity, smoothing, xd, yd, w, h);\n\n        // Return the image in case the caller wishes to cache it\n        return buf;\n    };\n\n    /**\n     * @param Mx\n     * @param buf\n     * @param xmin\n     * @param ymin\n     * @param xmax\n     * @param ymax\n     * @param opacity\n     * @param smoothing\n     * @private\n     */\n    mx.draw_image = function(Mx, buf, xmin, ymin, xmax, ymax, opacity, smoothing) {\n        var view_xmin = Math.max(xmin, Mx.stk[Mx.level].xmin);\n        var view_xmax = Math.min(xmax, Mx.stk[Mx.level].xmax);\n        var view_ymin = Math.max(ymin, Mx.stk[Mx.level].ymin);\n        var view_ymax = Math.min(ymax, Mx.stk[Mx.level].ymax);\n\n\n        if ((buf.width <= 1) || Math.abs(xmax - xmin) === 0) {\n            return;\n        }\n        if ((buf.height <= 1) || Math.abs(ymax - ymin) === 0) {\n            return;\n        }\n        var rx = buf.width / (xmax - xmin);\n        var ry = buf.height / (ymax - ymin);\n\n        // Ensure we are on buffer pixel boundaries, later we use clipping\n        // to constrain to the proper area\n        view_xmin = Math.floor(view_xmin * rx) / rx;\n        view_xmax = Math.ceil(view_xmax * rx) / rx;\n        view_ymin = Math.floor(view_ymin * ry) / ry;\n        view_ymax = Math.ceil(view_ymax * ry) / ry;\n\n        var ul, lr;\n        var sy, sx, sw, sh;\n        if (Mx.origin === 1) {\n            // regular x, regular y\n            sy = Math.max(0, Math.floor((ymax - view_ymax) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.floor((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmin, view_ymax);\n            lr = mx.real_to_pixel(Mx, view_xmax, view_ymin);\n        } else if (Mx.origin === 2) {\n            // inverted x, regular y\n            sy = Math.max(0, Math.floor((ymax - view_ymax) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.ceil((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmax, view_ymax);\n            lr = mx.real_to_pixel(Mx, view_xmin, view_ymin);\n        } else if (Mx.origin === 3) {\n            // inverted x, inverted y\n            sy = Math.max(0, Math.ceil((view_ymin - ymin) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.ceil((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmax, view_ymin);\n            lr = mx.real_to_pixel(Mx, view_xmin, view_ymax);\n        } else if (Mx.origin === 4) {\n            // regular x, inverted y\n            sy = Math.max(0, Math.ceil((view_ymin - ymin) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.floor((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmin, view_ymin);\n            lr = mx.real_to_pixel(Mx, view_xmax, view_ymax);\n        }\n\n        var iw = lr.x - ul.x;\n        var ih = lr.y - ul.y;\n\n        // Always include at least one pixel from the source\n        sw = Math.max(1, sw);\n        sh = Math.max(1, sh);\n\n        // See if smart smoothing is requested\n        if (typeof smoothing === \"number\") {\n            // calculate the ratio of displayed pixels over\n            // displayed data-points\n            var ratio = (Mx.r - Mx.l) / sw;\n            // if the ratio is greater than the smoothing value\n            // turn on smoothing\n            smoothing = (ratio <= smoothing);\n        }\n\n        //render the buffered canvas onto the original canvas element\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(Mx.l, Mx.t, Mx.r - Mx.l, Mx.b - Mx.t);\n        ctx.clip();\n        renderImage(Mx, ctx, buf, opacity, smoothing, ul.x, ul.y, iw, ih, sx, sy, sw, sh);\n        ctx.restore();\n    };\n\n    // Node: Export function\n    module.exports = mx;\n\n}());\n\n///////////////////////////////////////////////////////////////////////////////\n","/**\n * @license\n * File: bluefile.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n/**\n * Bluefiles are a binary format directly supported by SigPlot.  A Bluefile consists of a 512-byte header\n * followed by binary data.\n * For more information on BLUEFILES, please visit http://nextmidas.techma.com/nm/htdocs/usersguide/BlueFiles.html\n *\n * Offset   Name        Size    Type        Description\n * -----------------------------------------------------------------------------\n * 0        version     4   char[4]     Header version\n * 4        head_rep    4   char[4]     Header representation\n * 8        data_rep    4   char[4]     Data representation\n *12        detached    4   int_4       Detached header\n *16        protected   4   int_4       Protected from overwrite\n *20        pipe        4   int_4       Pipe mode (N/A)\n *24        ext_start   4   int_4       Extended header start, in 512-byte blocks\n *28        ext_size    4   int_4       Extended header size in bytes\n *32        data_start  8   real_8      Data start in bytes\n *40        data_size   8   real_8      Data size in bytes\n *48        type        4   int_4       File type code\n *52        format      2   char[2]     Data format code\n *54        flagmask    2   int_2       16-bit flagmask (1=flagbit)\n *56        timecode    8   real_8      Time code field\n *64        inlet       2   int_2       Inlet owner\n *66        outlets     2   int_2       Number of outlets\n *68        outmask     4   int_4       Outlet async mask\n *72        pipeloc     4   int_4       Pipe location\n *76        pipesize    4   int_4       Pipe size in bytes\n *80        in_byte     8   real_8      Next input byte\n *88        out_byte    8   real_8      Next out byte (cumulative)\n *96        outbytes    64  real_8[8]   Next out byte (each outlet)\n *160       keylength   4   int_4       Length of keyword string\n *164       keywords    92  char[92]    User defined keyword string\n *256       Adjunct     256     char[256]   Type-specific adjunct union (See below for 1000 and 2000 type bluefiles)\n *\n *\n * Type-1000 Adjunct\n * 0        xstart      8   real_8      Abscissa value for first sample\n *8         xdelta      8   real_8      Abscissa interval between samples\n *16        xunits      4   int_4       Units for abscissa values\n *\n * Type-2000 Adjunct\n *0         xstart      8   real_8      Frame (column) starting value\n *8         xdelta      8   real_8      Increment between samples in frame\n *16        xunits      4   int_4       Frame (column) units\n *20        subsize     4   int_4       Number of data points per frame (row)\n *24        ystart      8   real_8      Abscissa (row) start\n *32        ydelta      8   real_8      Increment between frames\n *36        yunits      4   int_4       Abscissa (row) unit code\n *\n * @namespace bluefile\n */\n\n/* global module */\n/* global require */\n/* global Proxy */\n\n(function() {\n    'use strict';\n    var BitArray = function(buf, offset, length) {\n        if (!(buf instanceof ArrayBuffer) && typeof buf === \"number\") {\n            this.buffer = new ArrayBuffer(buf / 8);\n            this.u8 = new Uint8Array(this.buffer);\n        } else {\n            if (offset && length) {\n                this.buffer = buf.slice(offset, offset + (length / 8));\n            } else {\n                this.buffer = buf;\n            }\n            this.u8 = new Uint8Array(this.buffer);\n        }\n        return new Proxy(this, {\n            get(obj, prop) {\n                if (!obj[prop]) {\n                    return obj.getBit(prop);\n                } else {\n                    return obj[prop];\n                }\n            }\n        });\n    };\n\n    BitArray.prototype.getBit = function(idx) {\n        var v = this.u8[idx >> 3];\n        var off = idx & 0x7;\n        return (v >> (7 - off)) & 1;\n    };\n    Object.defineProperty(BitArray.prototype, \"length\", {\n        get: function length() {\n            return this.u8.byteLength * 8;\n        }\n    });\n    BitArray.prototype.setBit = function(idx, val) {\n        var off = idx & 0x7;\n        if (val) {\n            this.u8[idx >> 3] |= (0x80 >> off);\n        } else {\n            this.u8[idx >> 3] &= ~(0x80 >> off);\n        }\n    };\n    BitArray.prototype.set = function(array) {\n        for (let i = 0, len = array.length; i < len; i++) {\n            this.setBit(i, array[i]);\n        }\n    };\n    BitArray.prototype.subarray = function(start, stop) {\n        let sub = [];\n        start = start || 0;\n        stop = stop || this.length;\n        stop = stop > this.length ? this.length : stop;\n        for (let i = start; i < stop; i++) {\n            sub.push(this.getBit(i));\n        }\n        return sub;\n    };\n\n\n\n    var common = require(\"./common\");\n\n    function bluefile() {}\n\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);\n    // https://gist.github.com/TooTallNate/4750953\n    /**\n     * @memberof bluefile\n     * @private\n     */\n    function endianness() {\n        var b = new ArrayBuffer(4);\n        var a = new Uint32Array(b);\n        var c = new Uint8Array(b);\n        a[0] = 0xdeadbeef;\n        if (c[0] === 0xef) {\n            return 'LE';\n        }\n        if (c[0] === 0xde) {\n            return 'BE';\n        }\n        throw new Error('unknown endianness');\n    }\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var ARRAY_BUFFER_ENDIANNESS = endianness();\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _SPA = {\n        'S': 1,\n        'C': 2,\n        'V': 3,\n        'Q': 4,\n        'M': 9,\n        'X': 10,\n        'T': 16,\n        'U': 1,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9\n    };\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _BPS = {\n        'P': 0.125,\n        'A': 1,\n        'O': 1,\n        'B': 1,\n        'I': 2,\n        'L': 4,\n        'X': 8,\n        'F': 4,\n        'D': 8\n    };\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _XM_TO_TYPEDARRAY = {\n        'P': BitArray,\n        'A': null,\n        'O': Uint8Array,\n        'B': Int8Array,\n        'I': Int16Array,\n        'L': Int32Array,\n        'X': null,\n        'F': Float32Array,\n        'D': Float64Array\n    };\n    /**\n     * @memberof bluefile\n     * @param   {array}     buf         Data bffer\n     * @param number\n     * @param bool\n     * @private\n     */\n    function getInt64(dataView, index, littleEndian) {\n        var highIndex, lowIndex;\n        var MAX_INT = Math.pow(2, 53);\n        if (littleEndian) {\n            highIndex = 4;\n            lowIndex = 0;\n        } else {\n            highIndex = 0;\n            lowIndex = 4;\n        }\n        var high = dataView.getInt32(index + highIndex, littleEndian);\n        var low = dataView.getInt32(index + lowIndex, littleEndian);\n        var rv = low + pow2(32) * high;\n        if (rv >= MAX_INT) {\n            window.console.info(\"Int is bigger than JS can represent.\");\n            return Infinity;\n        }\n        return rv;\n    }\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _XM_TO_DATAVIEW = {\n        'P': null,\n        'A': null,\n        'O': \"getUint8\",\n        'B': \"getInt8\",\n        'I': \"getInt16\",\n        'L': \"getInt32\",\n        'X': getInt64,\n        'F': \"getFloat32\",\n        'D': \"getFloat64\"\n    };\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _applySupportsTypedArray = true;\n    try {\n        var uintbuf = new Uint8Array(new ArrayBuffer(4));\n        uintbuf[0] = 66;\n        uintbuf[1] = 76;\n        uintbuf[2] = 85;\n        uintbuf[3] = 69;\n        var test = String.fromCharCode.apply(null, uintbuf);\n        if (test !== \"BLUE\") {\n            _applySupportsTypedArray = false;\n        }\n    } catch (error) {\n        _applySupportsTypedArray = false;\n    }\n    /**\n     * Convert an ArrayBuffer to a string\n     *\n     * @private\n     * @memberof bluefile\n     * @param   {array}     buf         Data bffer\n     */\n    function ab2str(buf) {\n        var uintbuf = new Uint8Array(buf);\n        // Firefox 3.6 nor iOS devices can use ArrayBuffers with .apply\n        if (_applySupportsTypedArray) {\n            return String.fromCharCode.apply(null, uintbuf);\n        } else {\n            var str = \"\";\n            for (var i = 0; i < uintbuf.length; i++) {\n                str += String.fromCharCode(uintbuf[i]);\n            }\n            return str;\n        }\n    }\n    /**\n     * Convert a string to an ArrayBuffer\n     *\n     * @private\n     * @memberof bluefile\n     * @param   {string}\n     */\n    function str2ab(str) {\n        var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        var bufView = new Uint16Array(buf);\n        for (var i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    }\n    /**\n     * Calculate 2^n\n     *\n     * If 31 > n >= 0 then a left-shift is used, otherwise Math.pow is used.\n     *\n     * @private\n     * @memberof bluefile\n     * @param   {number}\n     */\n    function pow2(n) {\n        return (n >= 0 && n < 31) ? (1 << n) : (pow2[n] || (pow2[n] = Math.pow(2, n)));\n    }\n    /**\n     * Constructor for a BlueHeader that extracts paramters from the 512-byte\n     * Bluefile binary header.  If the data segment of the bluefile is also\n     * included in the provided buffer it will be accessible as well\n     * via the dview property.\n     *\n     * @memberof bluefile\n     * @param {array} buf\n     *   - An existing ArrayBuffer of Bluefile data.\n     * @param {Object} options\n     *     - options that affect how the bluefile is read\n     * @param {string} [\"dict\"] options.ext_header_type\n     *     - if the BlueFile contains extended header keywords,\n     *       extract them either as a dictionary (\"dict\", \"json\", \n     *       {}, \"XMTable\", \"JSON\", \"DICT\") or as a list of \n     *       key value pairs.  The extended header keywords\n     *       will be accessible on the hdr.ext_header property\n     *       after the file has been read.\n     *\n     * See http://nextmidas.techma.com/nm/nxm/sys/docs/MidasBlueFileFormat.pdf for\n     * more details on header properties.\n     *\n     * @property {ArrayBuffer} buf\n     * @property {String} version - the header version extracted from the file, always 'BLUE'\n     * @property {String} headrep - endianness of header 'IEEE' or 'EEEI'\n     * @property {String} datarep - endianness of data 'IEEE' or 'EEEI'\n     * @property {Number} ext_start - byte offset for extended header binary data\n     * @property {Number} ext_size - byte size for extended header data\n     * @property {Number} type - the BLUEFILE type (1000 = 1-D data, 2000 = 2-D data)\n     * @property {Number} class - the BLUEFILE class (i.e. type/1000)\n     * @property {String} format - the BLUEFILE format, the format is a two character diagraph, such as SF.\n     * @property {Number} timecode - absolute time reference for the file (in seconds since Jan 1st 1950)\n     * @property {Number} xstart - relative offset for the first sample on the x-axis\n     * @property {Number} xdelta - delta between points on the x-axis \n     * @property {Number} xunits - the unitcode for the x-axis (see m.UNITS)\n     * @property {Number} ystart - relative offset for the first sample on the y-axis\n     * @property {Number} ydelta - delta between points on the y-axis \n     * @property {Number} yunits - the unitcode for the y-axis (see m.UNITS)\n     * @property {Number} subsize - the number of columns for a 2-D data file\n     * @property {Number} data_start - byte offset for data\n     * @property {Number} data_size - byte size for data\n     * @property {Object} ext_header - extracted extended header keywords\n     * @property {Number} spa - scalars per atom\n     * @property {Number} bps - bytes per scalar\n     * @property {Number} bpa - bytes per atom\n     * @property {Number} ape - atoms per element\n     * @property {Number} bpe - bytes per element\n     * @property {Number} size - number of elements in dview\n     * @property {DataView} dview - a Data\n     */\n    bluefile.BlueHeader = function(buf, options) {\n        this.options = {\n            ext_header_type: \"dict\"\n        };\n        common.update(this.options, options);\n        this.buf = buf;\n        if (this.buf != null) {\n            var dvhdr = new DataView(this.buf);\n            this.version = ab2str(this.buf.slice(0, 4));\n            this.headrep = ab2str(this.buf.slice(4, 8));\n            this.datarep = ab2str(this.buf.slice(8, 12));\n            var littleEndianHdr = (this.headrep === \"EEEI\");\n            var littleEndianData = (this.datarep === \"EEEI\");\n            this.ext_start = dvhdr.getInt32(24, littleEndianHdr);\n            this.ext_size = dvhdr.getInt32(28, littleEndianHdr);\n            this.type = dvhdr.getUint32(48, littleEndianHdr);\n            this[\"class\"] = this.type / 1000;\n            this.format = ab2str(this.buf.slice(52, 54));\n            this.timecode = dvhdr.getFloat64(56, littleEndianHdr);\n            // the adjunct starts at offset 0x100\n            if (this[\"class\"] === 1) {\n                this.xstart = dvhdr.getFloat64(0x100, littleEndianHdr);\n                this.xdelta = dvhdr.getFloat64(0x100 + 8, littleEndianHdr);\n                this.xunits = dvhdr.getInt32(0x100 + 16, littleEndianHdr);\n                this.yunits = dvhdr.getInt32(0x100 + 40, littleEndianHdr);\n                this.subsize = 1;\n            } else if (this[\"class\"] === 2) {\n                this.xstart = dvhdr.getFloat64(0x100, littleEndianHdr);\n                this.xdelta = dvhdr.getFloat64(0x100 + 8, littleEndianHdr);\n                this.xunits = dvhdr.getInt32(0x100 + 16, littleEndianHdr);\n                this.subsize = dvhdr.getInt32(0x100 + 20, littleEndianHdr);\n                this.ystart = dvhdr.getFloat64(0x100 + 24, littleEndianHdr);\n                this.ydelta = dvhdr.getFloat64(0x100 + 32, littleEndianHdr);\n                this.yunits = dvhdr.getInt32(0x100 + 40, littleEndianHdr);\n            }\n            this.data_start = dvhdr.getFloat64(32, littleEndianHdr);\n            this.data_size = dvhdr.getFloat64(40, littleEndianHdr);\n            var ds = this.data_start;\n            var de = this.data_start + this.data_size;\n            if (this.ext_size) {\n                this.ext_header = this.unpack_keywords(this.buf, this.ext_size, this.ext_start * 512, littleEndianHdr);\n            }\n            this.setData(this.buf, ds, de, littleEndianData);\n        }\n    };\n\n    bluefile.BlueHeader.prototype = {\n        /**\n         * Internal method that sets the dview up based off the\n         * provided buffer and fields extracted from the header.\n         *\n         * @memberof bluefile\n         * @private\n         * @param   buf\n         * @param   offset\n         * @param   data_end\n         * @param   littleEndian\n         */\n        setData: function(buf, offset, data_end, littleEndian) {\n            if (this[\"class\"] === 1) {\n                this.spa = _SPA[this.format[0]];\n                this.bps = _BPS[this.format[1]];\n                this.bpa = this.spa * this.bps;\n                this.ape = 1;\n                this.bpe = this.ape * this.bpa;\n            } else if (this[\"class\"] === 2) {\n                this.spa = _SPA[this.format[0]];\n                this.bps = _BPS[this.format[1]];\n                this.bpa = this.spa * this.bps;\n                this.ape = this.subsize;\n                this.bpe = this.ape * this.bpa;\n            }\n            if (littleEndian === undefined) {\n                littleEndian = (ARRAY_BUFFER_ENDIANNESS === \"LE\");\n            }\n            // TODO handle mismatch between host and data endianness using arrayBufferEndianness\n            if (ARRAY_BUFFER_ENDIANNESS === \"LE\" && !littleEndian) {\n                throw (\"Not supported \" + ARRAY_BUFFER_ENDIANNESS + \" \" + littleEndian);\n            } else if (ARRAY_BUFFER_ENDIANNESS === \"BE\" && this.littleEndianData) {\n                throw (\"Not supported \" + ARRAY_BUFFER_ENDIANNESS + \" \" + littleEndian);\n            }\n            if (buf) {\n                if ((offset) && (data_end)) {\n                    this.dview = this.createArray(buf, offset, (data_end - offset) / this.bps);\n                } else {\n                    this.dview = this.createArray(buf);\n                }\n                this.size = this.dview.length / (this.spa * this.ape);\n            } else {\n                this.dview = this.createArray(null, null, this.size);\n            }\n        },\n        /**\n         * Internal method that unpacks the extended header keywords into\n         * either a object (i.e. dictionary) or a list of key-value pairs\n         * depending on this.options.ext_header_type.\n         *\n         * @author Sean Sullivan https://github.com/desean1625\n         * @private\n         * @memberof bluefile\n         * @param   buf\n         * @param   lbuf\n         * @param   offset\n         * @param   littleEndian\n         */\n        unpack_keywords: function(buf, lbuf, offset, littleEndian) {\n            var lkey, lextra, ltag, format, tag, data, ldata, itag, idata;\n            var keywords = [];\n            var dic_index = {};\n            var dict_keywords = {};\n            var ii = 0;\n            window.buf = buf;\n            buf = buf.slice(offset, buf.byteLength);\n            var dvhdr = new DataView(buf);\n            buf = ab2str(buf);\n            while (ii < lbuf) {\n                idata = ii + 8;\n                lkey = dvhdr.getUint32(ii, littleEndian);\n                lextra = dvhdr.getInt16(ii + 4, littleEndian);\n                ltag = dvhdr.getInt8(ii + 6, littleEndian);\n                format = buf.slice(ii + 7, ii + 8);\n                ldata = lkey - lextra;\n                itag = idata + ldata;\n                tag = buf.slice(itag, itag + ltag);\n                if (format === \"A\") {\n                    data = buf.slice(idata, idata + ldata);\n                } else {\n                    if (_XM_TO_DATAVIEW[format]) {\n                        if (typeof _XM_TO_DATAVIEW[format] === \"string\") {\n                            data = dvhdr[_XM_TO_DATAVIEW[format]](idata, littleEndian);\n                        } else {\n                            data = _XM_TO_DATAVIEW[format](dvhdr, idata, littleEndian);\n                        }\n                    } else {\n                        //Should never get here now.\n                        window.console.info(\"Unsupported keyword format \" + format + \" for tag \" + tag);\n                    }\n                }\n                if (typeof dic_index[tag] === \"undefined\") {\n                    dic_index[tag] = 1;\n                } else {\n                    dic_index[tag]++;\n                    tag = \"\" + tag + dic_index[tag]; //Force to string just incase the tag is interpreted as a number\n                }\n                dict_keywords[tag] = data;\n                keywords.push({\n                    tag: tag,\n                    value: data\n                });\n                ii += lkey;\n            }\n            var dictTypes = ['dict', 'json', {}, 'XMTable', 'JSON', 'DICT'];\n            for (var k in dictTypes) {\n                if (dictTypes[k] === this.options.ext_header_type) {\n                    return dict_keywords;\n                }\n            }\n            return keywords;\n        },\n        /**\n         * Internal method to create typed array for the data based on the\n         * format extracted from the header.\n         *\n         * @private\n         * @memberof bluefile\n         * @param   buf\n         * @param   offset\n         * @param   length (in elements, not bytes)\n         * @returns -\n         */\n        createArray: function(buf, offset, length) {\n            var TypedArray = _XM_TO_TYPEDARRAY[this.format[1]];\n            if (TypedArray === undefined) {\n                throw (\"unknown format \" + this.format[1]);\n            }\n            // backwards compatibility with some implementations of typed array\n            // requires this\n            if (offset === undefined) {\n                offset = 0;\n            }\n            if (length === undefined) {\n                length = buf.length || (buf.byteLength / _BPS[this.format[1]]);\n            }\n            if (buf) {\n                // Flatten 2-D array into 1-D\n                if (Array.isArray(buf) && Array.isArray(buf[0])) {\n                    buf = [].concat.apply([], buf);\n                }\n                return new TypedArray(buf, offset, length);\n            } else {\n                return new TypedArray(length);\n            }\n        }\n    };\n\n    /**\n     * Internal method to create a new anchor element and uses location\n     * properties (inherent) to get the desired URL data. Some String\n     * operations are used (to normalize results across browsers).\n     *\n     * @private\n     * @memberof bluefile\n     * @param   url\n     * @returns -\n     *\n     * Based off http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\n     */\n    function parseURL(url) {\n        var a = document.createElement('a');\n        a.href = url;\n        return {\n            source: url,\n            protocol: a.protocol.replace(':', ''),\n            host: a.hostname,\n            port: a.port,\n            query: a.search,\n            params: (function() {\n                var ret = {},\n                    seg = a.search.replace(/^\\?/, '').split('&'),\n                    len = seg.length,\n                    i = 0,\n                    s;\n                for (; i < len; i++) {\n                    if (!seg[i]) {\n                        continue;\n                    }\n                    s = seg[i].split('=');\n                    ret[s[0]] = s[1];\n                }\n                return ret;\n            })(),\n            file: (a.pathname.match(/\\/([^\\/?#]+)$/i) || [null, ''])[1],\n            hash: a.hash.replace('#', ''),\n            path: a.pathname.replace(/^([^\\/])/, '/$1'),\n            relative: (a.href.match(/tps?:\\/\\/[^\\/]+(.+)/) || [null, ''])[1],\n            segments: a.pathname.replace(/^\\//, '').split('/')\n        };\n    }\n    /**\n     * Internal method to convert text from an HTTP response\n     * into an ArrayBuffer.\n     *\n     * @private\n     * @memberof bluefile\n     * @param   text\n     * @param   oncomplete\n     * @param   blocksize\n     */\n    function text2buffer(text, oncomplete, blocksize) {\n        blocksize = blocksize || 1024;\n        var i = 0;\n        var arrayBuffer = new ArrayBuffer(text.length);\n        var bufView = new Uint8Array(arrayBuffer);\n        var worker = function() {\n            var end = i + blocksize;\n            for (; i < end; i++) {\n                bufView[i] = (text.charCodeAt(i) & 0xff);\n            }\n            if (i >= text.length) {\n                oncomplete(arrayBuffer);\n            } else {\n                setTimeout(worker, 0);\n            }\n        };\n        setTimeout(worker, 0);\n    }\n    /**\n     * Bluefile Reader constructor.\n     *\n     * @memberof bluefile\n     * @param {Object} options\n     *     - options that affect how the bluefile is read\n     * @param {string} [\"dict\"] options.ext_header_type\n     *     - if the BlueFile contains extended header keywords,\n     *       extract them either as a dictionary (\"dict\", \"json\", \n     *       {}, \"XMTable\", \"JSON\", \"DICT\") or as a list of \n     *       key value pairs.  The extended header keywords\n     *       will be accessible on the hdr.ext_header property\n     *       after the file has been read.\n     */\n    bluefile.BlueFileReader = function(options) {\n        this.options = options;\n    };\n\n    bluefile.BlueFileReader.prototype = {\n        /**\n         * @callback readCallback\n         * @param {BlueHeader}\n         *     - the extracted header, or null on failure\n         */\n\n        /**\n         * Read only the header from a local Bluefile.\n         *\n         * @memberof bluefile\n         * @param {File} theFile\n         *     - a File object for the bluefile\n         * @param {readCallback} onload\n         *     - callback when the header has been read\n         */\n        readheader: function readheader(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            var blob = theFile.webkitSlice(0, 512); // Chrome specific\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var rawhdr = reader.result;\n                    var hdr = new bluefile.BlueHeader(rawhdr, that.options);\n                    hdr.file = theFile;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(blob);\n        },\n        /**\n         * Read a local Bluefile on disk.\n         *\n         * @memberof bluefile\n         * @param {File} theFile\n         *     - a File object for the bluefile\n         * @param {readCallback} onload\n         *     - callback when the header has been read\n         */\n        read: function read(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var raw = reader.result;\n                    var hdr = new bluefile.BlueHeader(raw, that.options);\n                    hdr.file = theFile;\n                    hdr.file_name = theFile.name;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(theFile);\n        },\n        /**\n         * Read a Bluefile from a URL\n         *\n         * @memberof bluefile\n         * @param {string} href\n         *     - the URL for the bluefile\n         * @param {readCallback} onload\n         *     - callback when the header has been read\n         */\n        read_http: function read_http(href, onload) {\n            var that = this;\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"GET\", href, true);\n            oReq.responseType = \"arraybuffer\";\n            oReq.overrideMimeType('text\\/plain; charset=x-user-defined');\n            oReq.onload = function(oEvent) {\n                if (oReq.readyState === 4) {\n                    if ((oReq.status === 200) || (oReq.status === 0)) { // status = 0 is necessary for file URL\n                        var arrayBuffer = null; // Note: not oReq.responseText\n                        if (oReq.response) {\n                            arrayBuffer = oReq.response;\n                            var hdr = new bluefile.BlueHeader(arrayBuffer, that.options);\n                            parseURL(href);\n                            var fileUrl = parseURL(href);\n                            hdr.file_name = fileUrl.file;\n                            onload(hdr);\n                        } else if (oReq.responseText) {\n                            text2buffer(oReq.responseText, function(arrayBuffer) {\n                                var hdr = new bluefile.BlueHeader(arrayBuffer, that.options);\n                                parseURL(href);\n                                var fileUrl = parseURL(href);\n                                hdr.file_name = fileUrl.file;\n                                onload(hdr);\n                            });\n                        }\n                        return;\n                    }\n                }\n                onload(null);\n            };\n            oReq.onerror = function(oEvent) {\n                onload(null);\n            };\n            oReq.send(null);\n        }\n    };\n\n    // Node: Export function\n    module.exports = bluefile;\n\n}());\n","// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/** @license React v16.8.6\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var k=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.concurrent_mode\"):60111,y=n?Symbol.for(\"react.forward_ref\"):60112,z=n?Symbol.for(\"react.suspense\"):60113,aa=n?Symbol.for(\"react.memo\"):\n60115,ba=n?Symbol.for(\"react.lazy\"):60116,A=\"function\"===typeof Symbol&&Symbol.iterator;function ca(a,b,d,c,e,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var l=[d,c,e,g,h,f],m=0;a=Error(b.replace(/%s/g,function(){return l[m++]}));a.name=\"Invariant Violation\"}a.framesToPop=1;throw a;}}\nfunction B(a){for(var b=arguments.length-1,d=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=0;c<b;c++)d+=\"&args[]=\"+encodeURIComponent(arguments[c+1]);ca(!1,\"Minified React error #\"+a+\"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \",d)}var C={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},D={};\nfunction E(a,b,d){this.props=a;this.context=b;this.refs=D;this.updater=d||C}E.prototype.isReactComponent={};E.prototype.setState=function(a,b){\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a?B(\"85\"):void 0;this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,d){this.props=a;this.context=b;this.refs=D;this.updater=d||C}var H=G.prototype=new F;\nH.constructor=G;k(H,E.prototype);H.isPureReactComponent=!0;var I={current:null},J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,d){var c=void 0,e={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,c)&&!L.hasOwnProperty(c)&&(e[c]=b[c]);var f=arguments.length-2;if(1===f)e.children=d;else if(1<f){for(var l=Array(f),m=0;m<f;m++)l[m]=arguments[m+2];e.children=l}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===e[c]&&(e[c]=f[c]);return{$$typeof:p,type:a,key:g,ref:h,props:e,_owner:J.current}}\nfunction da(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var O=/\\/+/g,P=[];function Q(a,b,d,c){if(P.length){var e=P.pop();e.result=a;e.keyPrefix=b;e.func=d;e.context=c;e.count=0;return e}return{result:a,keyPrefix:b,func:d,context:c,count:0}}\nfunction R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a)}\nfunction S(a,b,d,c){var e=typeof a;if(\"undefined\"===e||\"boolean\"===e)a=null;var g=!1;if(null===a)g=!0;else switch(e){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return d(c,a,\"\"===b?\".\"+T(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var h=0;h<a.length;h++){e=a[h];var f=b+T(e,h);g+=S(e,f,d,c)}else if(null===a||\"object\"!==typeof a?f=null:(f=A&&a[A]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),h=\n0;!(e=a.next()).done;)e=e.value,f=b+T(e,h++),g+=S(e,f,d,c);else\"object\"===e&&(d=\"\"+a,B(\"31\",\"[object Object]\"===d?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":d,\"\"));return g}function U(a,b,d){return null==a?0:S(a,\"\",b,d)}function T(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function ea(a,b){a.func.call(a.context,b,a.count++)}\nfunction fa(a,b,d){var c=a.result,e=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?V(a,c,d,function(a){return a}):null!=a&&(N(a)&&(a=da(a,e+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(O,\"$&/\")+\"/\")+d)),c.push(a))}function V(a,b,d,c,e){var g=\"\";null!=d&&(g=(\"\"+d).replace(O,\"$&/\")+\"/\");b=Q(b,g,c,e);U(a,fa,b);R(b)}function W(){var a=I.current;null===a?B(\"321\"):void 0;return a}\nvar X={Children:{map:function(a,b,d){if(null==a)return a;var c=[];V(a,c,null,b,d);return c},forEach:function(a,b,d){if(null==a)return a;b=Q(null,null,b,d);U(a,ea,b);R(b)},count:function(a){return U(a,function(){return null},null)},toArray:function(a){var b=[];V(a,b,null,function(a){return a});return b},only:function(a){N(a)?void 0:B(\"143\");return a}},createRef:function(){return{current:null}},Component:E,PureComponent:G,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,\n_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a},forwardRef:function(a){return{$$typeof:y,render:a}},lazy:function(a){return{$$typeof:ba,_ctor:a,_status:-1,_result:null}},memo:function(a,b){return{$$typeof:aa,type:a,compare:void 0===b?null:b}},useCallback:function(a,b){return W().useCallback(a,b)},useContext:function(a,b){return W().useContext(a,b)},useEffect:function(a,b){return W().useEffect(a,b)},useImperativeHandle:function(a,\nb,d){return W().useImperativeHandle(a,b,d)},useDebugValue:function(){},useLayoutEffect:function(a,b){return W().useLayoutEffect(a,b)},useMemo:function(a,b){return W().useMemo(a,b)},useReducer:function(a,b,d){return W().useReducer(a,b,d)},useRef:function(a){return W().useRef(a)},useState:function(a){return W().useState(a)},Fragment:r,StrictMode:t,Suspense:z,createElement:M,cloneElement:function(a,b,d){null===a||void 0===a?B(\"267\",a):void 0;var c=void 0,e=k({},a.props),g=a.key,h=a.ref,f=a._owner;if(null!=\nb){void 0!==b.ref&&(h=b.ref,f=J.current);void 0!==b.key&&(g=\"\"+b.key);var l=void 0;a.type&&a.type.defaultProps&&(l=a.type.defaultProps);for(c in b)K.call(b,c)&&!L.hasOwnProperty(c)&&(e[c]=void 0===b[c]&&void 0!==l?l[c]:b[c])}c=arguments.length-2;if(1===c)e.children=d;else if(1<c){l=Array(c);for(var m=0;m<c;m++)l[m]=arguments[m+2];e.children=l}return{$$typeof:p,type:a.type,key:g,ref:h,props:e,_owner:f}},createFactory:function(a){var b=M.bind(null,a);b.type=a;return b},isValidElement:N,version:\"16.8.6\",\nunstable_ConcurrentMode:x,unstable_Profiler:u,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:I,ReactCurrentOwner:J,assign:k}},Y={default:X},Z=Y&&X||Y;module.exports=Z.default||Z;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","//fgnass.github.com/spin.js#v1.2.5\n/**\n * Copyright (c) 2011 Felix Gnass [fgnass at neteye dot de]\n * Licensed under the MIT license\n */\n\nvar prefixes = ['webkit', 'Moz', 'ms', 'O']; /* Vendor prefixes */\nvar animations = {}; /* Animation rules keyed by their name */\nvar useCssAnimations;\n\n/**\n * Utility function to create elements. If no tag name is given,\n * a DIV is created. Optionally properties can be passed.\n */\nfunction createEl(tag, prop) {\n  var el = document.createElement(tag || 'div');\n  var n;\n\n  for(n in prop) {\n    el[n] = prop[n];\n  }\n  return el;\n}\n\n/**\n * Appends children and returns the parent.\n */\nfunction ins(parent /* child1, child2, ...*/) {\n  for (var i=1, n=arguments.length; i<n; i++) {\n    parent.appendChild(arguments[i]);\n  }\n  return parent;\n}\n\n/**\n * Insert a new stylesheet to hold the @keyframe or VML rules.\n */\nvar sheet = function() {\n  var el = createEl('style');\n  ins(document.getElementsByTagName('head')[0], el);\n  return el.sheet || el.styleSheet;\n}();\n\n/**\n * Creates an opacity keyframe animation rule and returns its name.\n * Since most mobile Webkits have timing issues with animation-delay,\n * we create separate rules for each line/segment.\n */\nfunction addAnimation(alpha, trail, i, lines) {\n  var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-');\n  var start = 0.01 + i/lines*100;\n  var z = Math.max(1-(1-alpha)/trail*(100-start) , alpha);\n  var prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase();\n  var pre = prefix && '-'+prefix+'-' || '';\n\n  if (!animations[name]) {\n    sheet.insertRule(\n      '@' + pre + 'keyframes ' + name + '{' +\n      '0%{opacity:'+z+'}' +\n      start + '%{opacity:'+ alpha + '}' +\n      (start+0.01) + '%{opacity:1}' +\n      (start+trail)%100 + '%{opacity:'+ alpha + '}' +\n      '100%{opacity:'+ z + '}' +\n      '}', 0);\n    animations[name] = 1;\n  }\n  return name;\n}\n\n/**\n * Tries various vendor prefixes and returns the first supported property.\n **/\nfunction vendor(el, prop) {\n  var s = el.style;\n  var pp;\n  var i;\n\n  if(s[prop] !== undefined) return prop;\n  prop = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for(i=0; i<prefixes.length; i++) {\n    pp = prefixes[i]+prop;\n    if(s[pp] !== undefined) return pp;\n  }\n}\n\n/**\n * Sets multiple style properties at once.\n */\nfunction css(el, prop) {\n  for (var n in prop) {\n    el.style[vendor(el, n)||n] = prop[n];\n  }\n  return el;\n}\n\n/**\n * Fills in default values.\n */\nfunction merge(obj) {\n  for (var i=1; i < arguments.length; i++) {\n    var def = arguments[i];\n    for (var n in def) {\n      if (obj[n] === undefined) obj[n] = def[n];\n    }\n  }\n  return obj;\n}\n\n/**\n * Returns the absolute page-offset of the given element.\n */\nfunction pos(el) {\n  var o = {x:el.offsetLeft, y:el.offsetTop};\n  while((el = el.offsetParent)) {\n    o.x+=el.offsetLeft;\n    o.y+=el.offsetTop;\n  }\n  return o;\n}\n\nvar defaults = {\n  lines: 12,            // The number of lines to draw\n  length: 7,            // The length of each line\n  width: 5,             // The line thickness\n  radius: 10,           // The radius of the inner circle\n  rotate: 0,            // rotation offset\n  color: '#000',        // #rgb or #rrggbb\n  speed: 1,             // Rounds per second\n  trail: 100,           // Afterglow percentage\n  opacity: 1/4,         // Opacity of the lines\n  fps: 20,              // Frames per second when using setTimeout()\n  zIndex: 2e9,          // Use a high z-index by default\n  className: 'spinner', // CSS class to assign to the element\n  top: 'auto',          // center vertically\n  left: 'auto'          // center horizontally\n};\n\n/** The constructor */\nvar Spinner = function Spinner(o) {\n  if (!this.spin) return new Spinner(o);\n  this.opts = merge(o || {}, Spinner.defaults, defaults);\n};\n\nSpinner.defaults = {};\nmerge(Spinner.prototype, {\n  spin: function(target) {\n    this.stop();\n    var self = this;\n    var o = self.opts;\n    var el = self.el = css(createEl(0, {className: o.className}), {position: 'relative', zIndex: o.zIndex});\n    var mid = o.radius+o.length+o.width;\n    var ep; // element position\n    var tp; // target position\n\n    if (target) {\n      target.insertBefore(el, target.firstChild||null);\n      tp = pos(target);\n      ep = pos(el);\n      css(el, {\n        left: (o.left == 'auto' ? tp.x-ep.x + (target.offsetWidth >> 1) : o.left+mid) + 'px',\n        top: (o.top == 'auto' ? tp.y-ep.y + (target.offsetHeight >> 1) : o.top+mid)  + 'px'\n      });\n    }\n\n    el.setAttribute('aria-role', 'progressbar');\n    self.lines(el, self.opts);\n\n    if (!useCssAnimations) {\n      // No CSS animation support, use setTimeout() instead\n      var i = 0;\n      var fps = o.fps;\n      var f = fps/o.speed;\n      var ostep = (1-o.opacity)/(f*o.trail / 100);\n      var astep = f/o.lines;\n\n      !function anim() {\n        i++;\n        for (var s=o.lines; s; s--) {\n          var alpha = Math.max(1-(i+s*astep)%f * ostep, o.opacity);\n          self.opacity(el, o.lines-s, alpha, o);\n        }\n        self.timeout = self.el && setTimeout(anim, ~~(1000/fps));\n      }();\n    }\n    return self;\n  },\n  stop: function() {\n    var el = this.el;\n    if (el) {\n      clearTimeout(this.timeout);\n      if (el.parentNode) el.parentNode.removeChild(el);\n      this.el = undefined;\n    }\n    return this;\n  },\n  lines: function(el, o) {\n    var i = 0;\n    var seg;\n\n    function fill(color, shadow) {\n      return css(createEl(), {\n        position: 'absolute',\n        width: (o.length+o.width) + 'px',\n        height: o.width + 'px',\n        background: color,\n        boxShadow: shadow,\n        transformOrigin: 'left',\n        transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',\n        borderRadius: (o.width>>1) + 'px'\n      });\n    }\n    for (; i < o.lines; i++) {\n      seg = css(createEl(), {\n        position: 'absolute',\n        top: 1+~(o.width/2) + 'px',\n        transform: o.hwaccel ? 'translate3d(0,0,0)' : '',\n        opacity: o.opacity,\n        animation: useCssAnimations && addAnimation(o.opacity, o.trail, i, o.lines) + ' ' + 1/o.speed + 's linear infinite'\n      });\n      if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}));\n      ins(el, ins(seg, fill(o.color, '0 0 1px rgba(0,0,0,.1)')));\n    }\n    return el;\n  },\n  opacity: function(el, i, val) {\n    if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////\n// VML rendering for IE\n/////////////////////////////////////////////////////////////////////////\n\n/**\n * Check and init VML support\n */\n!function() {\n\n  function vml(tag, attr) {\n    return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr);\n  }\n\n  var s = css(createEl('group'), {behavior: 'url(#default#VML)'});\n\n  if (!vendor(s, 'transform') && s.adj) {\n\n    // VML support detected. Insert CSS rule ...\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)');\n\n    Spinner.prototype.lines = function(el, o) {\n      var r = o.length+o.width;\n      var s = 2*r;\n\n      function grp() {\n        return css(vml('group', {coordsize: s +' '+s, coordorigin: -r +' '+-r}), {width: s, height: s});\n      }\n\n      var margin = -(o.width+o.length)*2+'px';\n      var g = css(grp(), {position: 'absolute', top: margin, left: margin});\n\n      var i;\n\n      function seg(i, dx, filter) {\n        ins(g,\n          ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),\n            ins(css(vml('roundrect', {arcsize: 1}), {\n                width: r,\n                height: o.width,\n                left: o.radius,\n                top: -o.width>>1,\n                filter: filter\n              }),\n              vml('fill', {color: o.color, opacity: o.opacity}),\n              vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change\n            )\n          )\n        );\n      }\n\n      if (o.shadow) {\n        for (i = 1; i <= o.lines; i++) {\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)');\n        }\n      }\n      for (i = 1; i <= o.lines; i++) seg(i);\n      return ins(el, g);\n    };\n    Spinner.prototype.opacity = function(el, i, val, o) {\n      var c = el.firstChild;\n      o = o.shadow && o.lines || 0;\n      if (c && i+o < c.childNodes.length) {\n        c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild;\n        if (c) c.opacity = val;\n      }\n    };\n  }\n  else {\n    useCssAnimations = vendor(s, 'animation');\n  }\n}();\n\nmodule.exports = Spinner;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @license\n * File: matfile.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * MAT-files are a binary format directly supported by SigPlot.  A MAT-file consists of a 132-byte header\n * followed by binary data.\n * For more information on MAT-files, please visit https://www.mathworks.com/help/pdf_doc/matlab/matfile_format.pdf\n *\n * Offset   Name        Size    Type        Description\n * -----------------------------------------------------------------------------\n * 0        header     115   char[115]     Header\n * 116      subsys       7   char[7]\n * 124      version      2   int_2\n * 126      endianness   2   char[2]\n * 128      data_offset  4   int_4\n * 132      byte_offset  4   int_4\n *\n * @namespace matfile\n */\n\n/* global module */\n/* global require */\n\n(function() {\n    'use strict';\n\n    var common = require(\"./common\");\n\n    function matfile() {}\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);\n\n    // Descriptive text field\n    var headerTextBegin = 1;\n    var headerTextEnd = 116;\n\n    // Subsystem data offset field\n    var subsysOffsetBegin = 117;\n    var subsysOffsetEnd = 124;\n\n    // Version field\n    var versionOffsetBegin = 125;\n    var versionOffsetEnd = 126;\n\n    // Two character endian indicator. If the value reads \"MI\" then native computer\n    // has written the file in Big Endian, so no byte translation must occur.\n    // If value reads \"IM\" then native computer has written the file in Little Endian\n    // so byte-wise translation must be used on all data elements larger than 1 byte.\n    var endianCharsBegin = 127;\n    var endianCharsEnd = 128;\n\n    // Outermost data type and number of bytes. For data plottable in SigPlot this will\n    // most likely be a 1D array. The associated MATLAB type will most likely be \"miMATRIX\".\n\n    // WARNING: type \"miCOMPRESSED\" is the default for MATLAB files above version 6. These\n    // compressed files are currently UNREADABLE by this program as the file must be\n    // decompressed before reading.\n    var firstDataTypeOffsetBegin = 129;\n    var firstDataTypeOffsetEnd = 132;\n\n    var numBytesOffsetBegin = 133;\n    var numBytesOffsetEnd = 136;\n\n    // https://gist.github.com/TooTallNate/4750953\n    /**\n     * Returns the endianness of the browser\n     *\n     * @memberof matfile\n     * @private\n     */\n    function endianness() {\n        var b = new ArrayBuffer(4);\n        var a = new Uint32Array(b);\n        var c = new Uint8Array(b);\n        a[0] = 0xdeadbeef;\n        if (c[0] === 0xef) {\n            return 'LE';\n        }\n        if (c[0] === 0xde) {\n            return 'BE';\n        }\n        throw new Error('unknown endianness');\n    }\n\n    function getDataField(fileData, firstByte, lastByte) {\n        return fileData.slice(firstByte - 1, lastByte);\n    }\n\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var ARRAY_BUFFER_ENDIANNESS = endianness();\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var versionNames = {\n        256: \"MAT-file\"\n    };\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var dataTypeNames = {\n        1: {\n            name: \"miINT8\",\n            size: 1\n        },\n        2: {\n            name: \"miUINT8\",\n            size: 1\n        },\n        3: {\n            name: \"miINT16\",\n            size: 2\n        },\n        4: {\n            name: \"miUINT16\",\n            size: 2\n        },\n        5: {\n            name: \"miINT32\",\n            size: 4\n        },\n        6: {\n            name: \"miUINT32\",\n            size: 4\n        },\n        7: {\n            name: \"miSINGLE\",\n            size: 4\n        },\n        // 8 is reserved\n        9: {\n            name: \"miDOUBLE\",\n            size: 8\n        },\n        // 10 and 11 are reserved\n        12: {\n            name: \"miINT64\",\n            size: 8\n        },\n        13: {\n            name: \"miUINT64\",\n            size: 8\n        },\n        14: {\n            name: \"miMATRIX\",\n            size: null\n        },\n        15: {\n            name: \"miCOMPRESSED\",\n            size: null\n        },\n        16: {\n            name: \"miUTF8\",\n            size: null\n        },\n        17: {\n            name: \"miUTF16\",\n            size: null\n        },\n        18: {\n            name: \"miUTF32\",\n            size: null\n        }\n    };\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var arrayClassNames = {\n        1: \"mxCELL_CLASS\",\n        2: \"mxSTRUCT_CLASS\",\n        3: \"mxOBJECT_CLASS\",\n        4: \"mxCHAR_CLASS\",\n        5: \"mxSPARSE_CLASS\",\n        6: \"mxDOUBLE_CLASS\",\n        7: \"mxSINGLE_CLASS\",\n        8: \"mxINT8_CLASS\",\n        9: \"mxUINT8_CLASS\",\n        10: \"mxINT16_CLASS\",\n        11: \"mxUINT16_CLASS\",\n        12: \"mxINT32_CLASS\",\n        13: \"mxUINT32_CLASS\",\n        14: \"mxINT64_CLASS\",\n        15: \"mxUINT64_CLASS\"\n    };\n\n    /**\n     * @memberOf matfilee\n     * @private\n     */\n    var _SPA = {\n        'S': 1,\n        'C': 2,\n        'V': 3,\n        'Q': 4,\n        'M': 9,\n        'X': 10,\n        'T': 16,\n        'U': 1,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9\n    };\n\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _BPS = {\n        'P': 0.125,\n        'A': 1,\n        'O': 1,\n        'B': 1,\n        'I': 2,\n        'L': 4,\n        'X': 8,\n        'F': 4,\n        'D': 8\n    };\n\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _XM_TO_TYPEDARRAY = {\n        'P': null,\n        'A': null,\n        'O': Uint8Array,\n        'B': Int8Array,\n        'I': Int16Array,\n        'L': Int32Array,\n        'X': null,\n        'F': Float32Array,\n        'D': Float64Array\n    };\n\n    /**\n     * @memberof matfile\n     * @param   {array}     buf         Data bffer\n     * @param number\n     * @param bool\n     * @private\n     */\n    function getInt64(dataView, index, littleEndian) {\n        var highIndex, lowIndex;\n        var MAX_INT = Math.pow(2, 53);\n        if (littleEndian) {\n            highIndex = 4;\n            lowIndex = 0;\n        } else {\n            highIndex = 0;\n            lowIndex = 4;\n        }\n        var high = dataView.getInt32(index + highIndex, littleEndian);\n        var low = dataView.getInt32(index + lowIndex, littleEndian);\n        var rv = low + pow2(32) * high;\n        if (rv >= MAX_INT) {\n            window.console.info(\"Int is bigger than JS can represent.\");\n            return Infinity;\n        }\n        return rv;\n    }\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var _applySupportsTypedArray = true;\n    try {\n        var uintbuf = new Uint8Array(new ArrayBuffer(4));\n        uintbuf[0] = 66;\n        uintbuf[1] = 76;\n        uintbuf[2] = 85;\n        uintbuf[3] = 69;\n        var test = String.fromCharCode.apply(null, uintbuf);\n        if (test !== \"BLUE\") {\n            _applySupportsTypedArray = false;\n        }\n    } catch (error) {\n        _applySupportsTypedArray = false;\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {array}     buf         Data bffer\n     * @private\n     */\n    function ab2str(buf) {\n        var uintbuf = new Uint8Array(buf);\n        // Firefox 3.6 nor iOS devices can use ArrayBuffers with .apply\n        if (_applySupportsTypedArray) {\n            return String.fromCharCode.apply(null, uintbuf);\n        } else {\n            var str = \"\";\n            for (var i = 0; i < uintbuf.length; i++) {\n                str += String.fromCharCode(uintbuf[i]);\n            }\n            return str;\n        }\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {string}\n     * @private\n     */\n    function str2ab(str) {\n        var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        var bufView = new Uint16Array(buf);\n        for (var i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {number}\n     * @private\n     */\n    function pow2(n) {\n        return (n >= 0 && n < 31) ? (1 << n) : (pow2[n] || (pow2[n] = Math.pow(2, n)));\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {array}\n     * @param   {number}\n     * @param   {number}\n     * @param   {string}\n     * @param   {endian}\n     * @private\n     */\n    function getArray(arrayBuff, startByte, byteLength, type) {\n        // Get a JS array from MATLAB array\n        // TODO: big endian implemenation\n\n        var outArr = [];\n        var dv = new DataView(arrayBuff, startByte, byteLength);\n\n        var array;\n        if (type === \"miINT8\") {\n            array = new Int8Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miUINT8\") {\n            array = new Uint8Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miINT16\") {\n            array = new Int16Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miUINT16\") {\n            array = new Uint16Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miINT32\") {\n            array = new Int32Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miUINT32\") {\n            array = new Uint32Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miDOUBLE\") {\n            array = new Float64Array(arrayBuff, startByte, byteLength);\n        } else {\n            window.console.warn(\"Array data type not supported yet.\");\n            return;\n        }\n\n        array.forEach(function(element) {\n            outArr.push(element);\n        });\n\n        return outArr;\n    }\n\n    function getDataWithType(dv, typeName, offset, littleEndian) {\n        var output;\n        switch (typeName) {\n            case \"miINT8\":\n                output = dv.getInt8(offset, littleEndian);\n                break;\n            case \"miUINT8\":\n                output = dv.getInt8(offset, littleEndian);\n                break;\n            case \"miINT16\":\n                output = dv.getInt16(offset, littleEndian);\n                break;\n            case \"miUINT16\":\n                output = dv.getUint16(offset, littleEndian);\n                break;\n            case \"miINT32\":\n                output = dv.getInt32(offset, littleEndian);\n                break;\n            case \"miUINT32\":\n                output = dv.getUint32(offset, littleEndian);\n                break;\n            case \"miSINGLE\":\n                output = dv.getFloat32(offset, littleEndian);\n                break;\n            case \"miDOUBLE\":\n                output = dv.getFloat64(offset, littleEndian);\n                break;\n            case \"miINT64\":\n                output = getInt64(dv, offset, littleEndian);\n                break;\n            default:\n                window.console.warn(typeName + \" not supported at thsi time\");\n                break;\n                /* TODO:           \n                case \"miUINT64\":\n                    break;\n                case \"miMATRIX\":\n                    break;\n                case \"miCOMPRESSED\":\n                    break;\n                case \"miUTF8\":\n                    break;\n                case \"miUTF16\":\n                    break;\n                case \"miUTF32\":\n                    break;*/\n        }\n        return output;\n    }\n\n    /**\n     * Create matfile header and attach data buffer\n     * @memberof matfile\n     * @param   {array}     buf         Data bffer\n     */\n    matfile.MatHeader = function(buf, options) {\n        this.file = null;\n        this.file_name = null;\n        this.buf = buf;\n        if (this.buf != null) {\n            var dvhdr = new DataView(this.buf);\n            this.headerStr = ab2str(this.buf.slice(headerTextBegin - 1, headerTextEnd));\n\n            // get endianness\n            this.datarep = ab2str(this.buf.slice(endianCharsBegin - 1, endianCharsEnd));\n            var littleEndianHdr = (this.datarep === \"IM\");\n            var littleEndianData = (this.datarep === \"IM\");\n\n            this.headerList = this.headerStr.split(\",\").map(function(str) {\n                return str.trim();\n            });\n            this.matfile = this.headerList[0];\n            this.platform = this.headerList[1];\n            this.createdOn = this.headerList[2];\n            this.subsystemOffset = ab2str(this.buf.slice(subsysOffsetBegin - 1, subsysOffsetEnd));\n            this.version = dvhdr.getUint16(versionOffsetBegin - 1, littleEndianHdr);\n            this.versionName = versionNames[this.version];\n\n            this.dataType = dvhdr.getUint32(firstDataTypeOffsetBegin - 1, littleEndianHdr);\n            this.dataTypeName = dataTypeNames[this.dataType].name;\n            this.arraySize = dvhdr.getUint32(numBytesOffsetBegin - 1, littleEndianHdr);\n\n            var beginArray = numBytesOffsetEnd + 1;\n\n            // Start reading the file linearly from beginning and inc index as you go...\n            var currIndex = numBytesOffsetEnd + 1;\n            var typeNum = dvhdr.getUint32(currIndex - 1, littleEndianHdr);\n            var typeName = dataTypeNames[typeNum].name;\n            var typeSize = dataTypeNames[typeNum].size;\n            currIndex += 4;\n\n            // bytes per ``typeName``\n            var flagLength = getDataWithType(dvhdr, typeName, currIndex - 1, littleEndianData);\n            currIndex += typeSize;\n\n            // Array flags\n            // If bit is set:\n            // - complex: the data element includes an imaginary part\n            // - global: \"MATLAB loads the data element as a global variable in the base workspace\"\n            // - logical: indicates the array is used for logical indexing.\n            var arrayFlag = getDataWithType(dvhdr, typeName, currIndex - 1, littleEndianData);\n            currIndex += typeSize;\n\n            // TODO: use flags for future implementation\n            var complexFlag = arrayFlag & 0x80;\n            var globalFlag = arrayFlag & 0x40;\n            var logicalFlag = arrayFlag & 0x20;\n\n            // Find array class\n            var arrayClassNum = arrayFlag & 0xF;\n            var arrayClassName = arrayClassNames[arrayClassNum];\n\n            // TODO: sparse array data format implementation: which uses next 4 bytes\n            // Skip to next type field (array dimensions)\n            currIndex += typeSize;\n\n            // Dimensions type:\n            var dimTypeNum = dvhdr.getUint32(currIndex - 1, littleEndianData);\n            currIndex += 4;\n\n            var dimTypeName = dataTypeNames[dimTypeNum].name;\n            var dimTypeSize = dataTypeNames[dimTypeNum].size;\n\n            // Dimensions size:\n            var arrayDimTotalSize = dvhdr.getUint32(currIndex - 1, littleEndianData);\n            currIndex += 4;\n\n            // Get number of rows\n            var rows = getDataWithType(dvhdr, dimTypeName, currIndex - 1, littleEndianData);\n            currIndex += dimTypeSize;\n\n            // TODO: support for >= 2D array types\n            if (rows > 1) {\n                window.console.warn(\"Only 1D arrays are currently supported.\");\n            }\n\n            // Get number of columns\n            var cols = getDataWithType(dvhdr, dimTypeName, currIndex - 1, littleEndianData);\n            currIndex += typeSize;\n\n            // array name type\n            var arrayNameTypeNum = dvhdr.getUint32(currIndex - 1, littleEndianData);\n            currIndex += 4;\n\n            var nameSize = 0;\n            var small = false;\n            if (arrayNameTypeNum > 15) {\n                arrayNameTypeNum &= 0x00FF;\n                small = true;\n                nameSize = dvhdr.getUint16(currIndex - 5, littleEndianData);\n            }\n\n            var arrayNameTypeName = dataTypeNames[arrayNameTypeNum].name;\n            var arrayNameTypeSize = dataTypeNames[arrayNameTypeNum].size;\n\n            if (!small) {\n                nameSize = getDataWithType(dvhdr, arrayNameTypeName, currIndex - 1, littleEndianData);\n                currIndex += 4;\n            }\n\n            var arrayName = ab2str(this.buf.slice(currIndex - 1, currIndex + nameSize - 1));\n\n            // Pad to end of 64 bit word if necessary\n            var rndUp;\n            if (small) {\n                // Pad from the middle to the end of a 64 bit word\n                rndUp = (4 - (nameSize % 4)) % 4;\n            } else {\n                // Pad from the start of a new word\n                rndUp = (8 - (nameSize % 8)) % 8;\n            }\n\n            var jumpTo = nameSize + rndUp;\n            currIndex += jumpTo;\n\n            // set the data field in the header\n            this.setData(this.buf, dvhdr, currIndex, littleEndianData);\n        }\n    };\n\n    matfile.MatHeader.prototype = {\n        /**\n         * @memberof bluefile\n         * @param   buf\n         * @param   dvhdr\n         * @param   data_end\n         * @param   littleEndian\n         *\n         */\n        setData: function(buf, dvhdr, currIndex, littleEndian) {\n            var arrayValSize;\n\n            // Array value(s) type:\n            var typeNum = dvhdr.getUint32(currIndex - 1, littleEndian);\n\n            // Check for MATLAB \"small element type\"\n            var small = false;\n            if (typeNum > 15) {\n                typeNum &= 0x00FF;\n                small = true;\n                arrayValSize = dvhdr.getUint16(currIndex + 1, 2, littleEndian);\n            } else {\n                currIndex += 4;\n            }\n\n            var typeName = dataTypeNames[typeNum].name;\n            var typeSize = dataTypeNames[typeNum].size;\n\n            if (!small) {\n                arrayValSize = dvhdr.getUint32(currIndex - 1, littleEndian);\n                small = false;\n            }\n\n            currIndex += 4;\n\n            // Get JS array from MATLAB array\n            this.dview = getArray(buf, currIndex - 1, arrayValSize / typeSize, typeName);\n        }\n    };\n\n    // Internal method from http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\n    /**\n     * This function creates a new anchor element and uses location\n     * properties (inherent) to get the desired URL data. Some String\n     * operations are used (to normalize results across browsers).\n     *\n     * @memberof bluefile\n     * @private\n     * @param   url\n     * @returns -\n     */\n    function parseURL(url) {\n        var a = document.createElement('a');\n        a.href = url;\n        return {\n            source: url,\n            protocol: a.protocol.replace(':', ''),\n            host: a.hostname,\n            port: a.port,\n            query: a.search,\n            params: (function() {\n                var ret = {},\n                    seg = a.search.replace(/^\\?/, '').split('&'),\n                    len = seg.length,\n                    i = 0,\n                    s;\n                for (; i < len; i++) {\n                    if (!seg[i]) {\n                        continue;\n                    }\n                    s = seg[i].split('=');\n                    ret[s[0]] = s[1];\n                }\n                return ret;\n            })(),\n            file: (a.pathname.match(/\\/([^\\/?#]+)$/i) || [null, ''])[1],\n            hash: a.hash.replace('#', ''),\n            path: a.pathname.replace(/^([^\\/])/, '/$1'),\n            relative: (a.href.match(/tps?:\\/\\/[^\\/]+(.+)/) || [null, ''])[1],\n            segments: a.pathname.replace(/^\\//, '').split('/')\n        };\n    }\n\n    /**\n     * @memberof bluefile\n     * @private\n     * @param   text\n     * @param   oncomplete\n     * @param   blocksize\n     */\n    function text2buffer(text, oncomplete, blocksize) {\n        blocksize = blocksize || 1024;\n        var i = 0;\n        var arrayBuffer = new ArrayBuffer(text.length);\n        var bufView = new Uint8Array(arrayBuffer);\n        var worker = function() {\n            var end = i + blocksize;\n            for (; i < end; i++) {\n                bufView[i] = (text.charCodeAt(i) & 0xff);\n            }\n            if (i >= text.length) {\n                oncomplete(arrayBuffer);\n            } else {\n                setTimeout(worker, 0);\n            }\n        };\n        setTimeout(worker, 0);\n    }\n\n    /**\n     * Matfile Reader\n     * @memberof    matfile\n     * @param   options\n     */\n    matfile.MatFileReader = function(options) {\n        this.options = options;\n    };\n\n    matfile.MatFileReader.prototype = {\n        /**\n         * @memberof matfile\n         * @param   theFile\n         * @param   onload\n         *\n         */\n        readheader: function readheader(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            var blob = theFile.webkitSlice(0, 116); // Chrome specific\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var rawhdr = reader.result;\n                    var hdr = new matfile.MatHeader(rawhdr, that.options);\n                    hdr.file = theFile;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(blob);\n        },\n\n        /**\n         *\n         * @memberof matfile\n         * @param   theFile\n         * @param   onload\n         *\n         */\n        read: function read(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var raw = reader.result;\n                    var hdr = new matfile.MatHeader(raw, that.options);\n                    hdr.file = theFile;\n                    hdr.file_name = theFile.name;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(theFile);\n        },\n\n        /**\n         *\n         * @memberof matfile\n         * @param   href\n         * @param   onload\n         *\n         */\n        read_http: function read_http(href, onload) {\n            var that = this;\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"GET\", href, true);\n            oReq.responseType = \"arraybuffer\";\n            oReq.overrideMimeType('text\\/plain; charset=x-user-defined');\n            oReq.onload = function(oEvent) {\n                if (oReq.readyState === 4) {\n                    if ((oReq.status === 200) || (oReq.status === 0)) { // status = 0 is necessary for file URL\n                        var arrayBuffer = null; // Note: not oReq.responseText\n                        if (oReq.response) {\n                            arrayBuffer = oReq.response;\n                            var hdr = new matfile.MatHeader(arrayBuffer, that.options);\n                            parseURL(href);\n                            var fileUrl = parseURL(href);\n                            hdr.file_name = fileUrl.file;\n                            onload(hdr);\n                        } else if (oReq.responseText) {\n                            text2buffer(oReq.responseText, function(arrayBuffer) {\n                                var hdr = new matfile.MatHeader(arrayBuffer, that.options);\n                                parseURL(href);\n                                var fileUrl = parseURL(href);\n                                hdr.file_name = fileUrl.file;\n                                onload(hdr);\n                            });\n                        }\n                        return;\n                    }\n                }\n                onload(null);\n            };\n            oReq.onerror = function(oEvent) {\n                onload(null);\n            };\n            oReq.send(null);\n        }\n    };\n\n    module.exports = matfile;\n}(this));\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n","/* global module */\n/* global require */\n (function() {\n     var tinycolor = require(\"tinycolor2\");\n     if (typeof Object.assign !== 'function') {\n         // Must be writable: true, enumerable: false, configurable: true\n         Object.defineProperty(Object, \"assign\", {\n             value: function assign(target, varArgs) { // .length of function is 2\n                 'use strict';\n                 if (target == null) { // TypeError if undefined or null\n                     throw new TypeError('Cannot convert undefined or null to object');\n                 }\n                 var to = Object(target);\n                 for (var index = 1; index < arguments.length; index++) {\n                     var nextSource = arguments[index];\n                     if (nextSource != null) { // Skip over if undefined or null\n                         for (var nextKey in nextSource) {\n                             // Avoid bugs when hasOwnProperty is shadowed\n                             if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                                 to[nextKey] = nextSource[nextKey];\n                             }\n                         }\n                     }\n                 }\n                 return to;\n             },\n             writable: true,\n             configurable: true\n         });\n     }\n     var ColorMap = window.ColorMap = function(colors, options) {\n         this.options = {\n             ncolors: 500,\n             alpha: 255\n         };\n         this.options = Object.assign(this.options, options);\n         this.map = [];\n         var _min = 0;\n         this._low = 0;\n         this._high = 1;\n         var ncolors = this.options.ncolors;\n         this._fscale = ncolors / (this._high - this._low);\n         var colorindex = 1;\n         var colorBlockIndex = 1;\n         colors = JSON.parse(JSON.stringify(colors)); //make a copy so we dont change the original colors\n         colors = this._parseColors(colors);\n         this.colors = colors;\n         var col1 = colors[0];\n         var col2 = colors[1];\n         var colorStop = colors[1].pos - colors[0].pos;\n         var colorsInBlock = ncolors * (colorStop / 100);\n         this.colorsInBlock = colorsInBlock;\n         var factorStep = 1 / colorsInBlock;\n         for (var n = 0; n < ncolors - 2; n++) {\n             if (colorBlockIndex > colorsInBlock) {\n                 col1 = colors[colorindex];\n                 col2 = colors[colorindex + 1];\n                 if (col2 === undefined) {\n                     break;\n                 }\n                 var colorStop = col2.pos - col1.pos;\n                 var colorsInBlock = ncolors * (colorStop / 100);\n                 this.colorsInBlock = colorsInBlock;\n                 var factorStep = 1 / colorsInBlock;\n                 var colorBlockIndex = 1;\n                 colorindex += 1;\n             }\n             this._addColor(this.interpolate(col1, col2, factorStep * colorBlockIndex));\n             colorBlockIndex += 1;\n         }\n         \n        this._addColor(colors[colors.length -1]);\n        this._addColor(colors[0], true);\n         \n     };\n     ColorMap.prototype = {\n         _addColor: function(color, front) {\n             color.hex = this._rgbToHex(color.red, color.green, color.blue);\n             color.color = (color.alpha << 24) | // alpha\n                 (color.blue << 16) | // blue\n                 (color.green << 8) | // green\n                 (color.red);\n             if (front) {\n                 this.map.unshift(color);\n             } else {\n                 this.map.push(color);\n             }\n         },\n         _parseColors: function(colors) {\n             for (var i = 0, c = colors.length; i < c; i++) {\n                 var color = colors[i];\n                 if (typeof color === \"string\") {\n                     colors[i] = this._hexToRgb(color);\n                     color = tinycolor(color);\n                     color = color.toRgb();\n                     colors[i] = {red:color.r,green:color.g,blue:color.b,alpha:this.options.alpha};\n\n                 } else if (color.hasOwnProperty(\"color\")) {\n                     var newColor = tinycolor(color.color);\n                     newColor = newColor.toRgb();\n                     newColor = {red:newColor.r,green:newColor.g,blue:newColor.b,alpha:this.options.alpha};\n                     if (color.hasOwnProperty(\"pos\")) {\n                         newColor.pos = color.pos;\n                     }\n                     colors[i] = newColor;\n                 } else {\n                     //assume if it has rgb values it is a percentage\n                     colors[i].red = Math.floor(Math.round(255 * (color.red / 100)));\n                     colors[i].green = Math.floor(Math.round(255 * (color.green / 100)));\n                     colors[i].blue = Math.floor(Math.round(255 * (color.blue / 100)));\n                 }\n                 if (!colors[i].hasOwnProperty(\"alpha\")) {\n                     colors[i].alpha = this.options.alpha;\n                 }\n             }\n             return this._checkColorStops(colors);\n         },\n         _checkColorStops: function(colors) {\n             var lastStop = 0;\n             var colorsWithNoStops = 0;\n             for (var i = 0, c = colors.length; i < c; i++) {\n                 var color = colors[i];\n                 if (!color.hasOwnProperty(\"pos\")) {\n                     colorsWithNoStops += 1;\n                 } else {\n                     if (colorsWithNoStops) {\n                         var stopSize = (color.pos - lastStop) / colorsWithNoStops;\n                         var currentPos = color.pos;\n                         for (var z = 1; z <= colorsWithNoStops; z++) {\n                             colors[i - z].pos = currentPos - stopSize;\n                             currentPos -= stopSize;\n                         }\n                     }\n                     colorsWithNoStops = 0;\n                 }\n             }\n             if (colorsWithNoStops) {\n                 var currentPos = 100;\n                 colors[colors.length - 1].pos = currentPos;\n                 if (lastStop === 0) {\n                     colors[0].pos = 0;\n                     colorsWithNoStops -= 1;\n                 }\n                 var stopSize = (currentPos - lastStop) / colorsWithNoStops;\n                 var i = colors.length - 1;\n                 for (var z = 1; z < colorsWithNoStops; z++) {\n                     colors[i - z].pos = currentPos - stopSize;\n                     currentPos -= stopSize;\n                 }\n             }\n             return colors;\n         },\n         _componentToHex: function(c) {\n             var hex = c.toString(16);\n             return hex.length === 1 ? \"0\" + hex : hex;\n         },\n         _rgbToHex: function(r, g, b) {\n             return \"#\" + this._componentToHex(r) + this._componentToHex(g) + this._componentToHex(b);\n         },\n         _hexToRgb: function(hex) {\n             var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n             return result ? {\n                 red: parseInt(result[1], 16),\n                 green: parseInt(result[2], 16),\n                 blue: parseInt(result[3], 16)\n             } : null;\n         },\n         getColor: function(number) {\n             var n = (number - this._low) * this._fscale;\n             var colorindex = ~~n; //make int fastest method\n             if (colorindex > this.map.length - 1) {\n                 colorindex = this.map.length - 1;\n             } else if (colorindex < 0) {\n                 colorindex = 0;\n             }\n             return this.map[colorindex];\n         },\n         setRange: function(low, high) {\n             // only recalculate if a value has changed\n             if ((this._low !== low) || (this._high !== high)) {\n                 this._low = low;\n                 this._high = high;\n                 this._fscale = this.map.length / Math.abs(this._high - this._low);\n             }\n         },\n         interpolate: function(col1, col2, factor) {\n             return {\n                 red: col1.red + factor * (col2.red - col1.red),\n                 green: col1.green + factor * (col2.green - col1.green),\n                 blue: col1.blue + factor * (col2.blue - col1.blue),\n                 alpha: col1.alpha + factor * (col2.alpha - col1.alpha)\n             };\n         }\n     };\n     module.exports = ColorMap;\n })();","/**\n * @license\n * File: CanvasInput.js\n *  CanvasInput v1.0.10\n *  http://goldfirestudios.com/blog/108/CanvasInput-HTML5-Canvas-Text-Input\n *\n *  (c) 2013, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  (c) 2013, Axios, Inc.\n *  Modifications made by Axios, Inc.\n *  axiosengineering.com\n *\n *  MIT License\n */\n\n/* global module */\n/* global require */\n\n(function() {\n    // create a buffer that stores all inputs so that tabbing\n    // between them is made possible.\n    var inputs = [];\n\n    // initialize the Canvas Input\n    var CanvasInput = window.CanvasInput = function(o) {\n        var self = this;\n\n        o = o ? o : {};\n\n        // setup the defaults\n        self._canvas = o.canvas || null;\n        self._ctx = self._canvas ? self._canvas.getContext('2d') : null;\n        self._x = o.x || 0;\n        self._y = o.y || 0;\n        self._extraX = o.extraX || 0;\n        self._extraY = o.extraY || 0;\n        self._fontSize = o.fontSize || 14;\n        self._fontFamily = o.fontFamily || 'Arial';\n        self._fontColor = o.fontColor || '#000';\n        self._placeHolderColor = o.placeHolderColor || '#bfbebd';\n        self._fontWeight = o.fontWeight || 'normal';\n        self._fontStyle = o.fontStyle || 'normal';\n        self._readonly = o.readonly || false;\n        self._maxlength = o.maxlength || null;\n        self._width = o.width || 150;\n        self._height = o.height || self._fontSize;\n        self._padding = o.padding >= 0 ? o.padding : 5;\n        self._borderWidth = o.borderWidth >= 0 ? o.borderWidth : 1;\n        self._borderColor = o.borderColor || '#959595';\n        self._borderRadius = o.borderRadius >= 0 ? o.borderRadius : 3;\n        self._backgroundImage = o.backgroundImage || '';\n        self._boxShadow = o.boxShadow || '1px 1px 0px rgba(255, 255, 255, 1)';\n        self._innerShadow = o.innerShadow || '0px 0px 4px rgba(0, 0, 0, 0.4)';\n        self._selectionColor = o.selectionColor || 'rgba(179, 212, 253, 0.8)';\n        self._placeHolder = o.placeHolder || '';\n        self._value = o.value || self._placeHolder;\n        self._onsubmit = o.onsubmit || function() {};\n        self._onkeydown = o.onkeydown || function() {};\n        self._onkeyup = o.onkeyup || function() {};\n        self._onfocus = o.onfocus || function() {};\n        self._onblur = o.onblur || function() {};\n        self._cursor = false;\n        self._cursorPos = 0;\n        self._hasFocus = false;\n        self._selection = [0, 0];\n        self._wasOver = false;\n        self._renderOnReturn = (o.renderOnReturn !== undefined ? o.renderOnReturn : true);\n        self._disableBlur = o.disableBlur || false;\n        self._tabToClear = o.tabToClear || false;\n\n        // parse box shadow\n        self.boxShadow(self._boxShadow, true);\n\n        // calculate the full width and height with padding, borders and shadows\n        self._calcWH();\n\n        // setup the off-DOM canvas\n        self._renderCanvas = document.createElement('canvas');\n        self._renderCanvas.setAttribute('width', self.outerW);\n        self._renderCanvas.setAttribute('height', self.outerH);\n        self._renderCtx = self._renderCanvas.getContext('2d');\n\n        // setup another off-DOM canvas for inner-shadows\n        self._shadowCanvas = document.createElement('canvas');\n        self._shadowCanvas.setAttribute('width', self._width + self._padding * 2);\n        self._shadowCanvas.setAttribute('height', self._height + self._padding * 2);\n        self._shadowCtx = self._shadowCanvas.getContext('2d');\n\n        // setup the background color\n        if (typeof o.backgroundGradient !== 'undefined') {\n            self._backgroundColor = self._renderCtx.createLinearGradient(\n                0,\n                0,\n                0,\n                self.outerH\n            );\n            self._backgroundColor.addColorStop(0, o.backgroundGradient[0]);\n            self._backgroundColor.addColorStop(1, o.backgroundGradient[1]);\n        } else {\n            self._backgroundColor = o.backgroundColor || '#fff';\n        }\n\n        // setup main canvas events\n        if (self._canvas) {\n            self.mousemoveCanvasListener = function(e) {\n                e = e || window.event;\n                self.mousemove(e, self);\n            };\n            self._canvas.addEventListener('mousemove', self.mousemoveCanvasListener, false);\n\n            self.mousedownCanvasListener = function(e) {\n                e = e || window.event;\n                self.mousedown(e, self);\n            };\n            self._canvas.addEventListener('mousedown', self.mousedownCanvasListener, false);\n\n            self.mouseupCanvasListener = function(e) {\n                e = e || window.event;\n                self.mouseup(e, self);\n            };\n            self._canvas.addEventListener('mouseup', self.mouseupCanvasListener, false);\n        }\n\n        // setup a global mouseup to blur the input outside of the canvas\n        self.mouseupWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus && !self._mouseDown) {\n                self.blur();\n            }\n        };\n        window.addEventListener('mouseup', self.mouseupWindowListener, true);\n\n        // setup the keydown listener\n        self.keydownWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus) {\n                self.keydown(e, self);\n            }\n        };\n        window.addEventListener('keydown', self.keydownWindowListener, false);\n\n        // setup the keyup listener\n        self.keyupWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus) {\n                self._onkeyup(e, self);\n            }\n        };\n        window.addEventListener('keyup', self.keyupWindowListener, false);\n\n        // setup the 'paste' listener\n        self.pasteWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus) {\n                var text = e.clipboardData.getData('text/plain'),\n                    startText = self._value.substr(0, self._cursorPos),\n                    endText = self._value.substr(self._cursorPos);\n                self._value = startText + text + endText;\n                self._cursorPos += text.length;\n\n                self.render();\n            }\n        };\n        window.addEventListener('paste', self.pasteWindowListener, false);\n\n        // add this to the buffer\n        inputs.push(self);\n        self._inputsIndex = inputs.length - 1;\n\n        // draw the text box\n        self.render();\n    };\n\n    // setup the prototype\n    CanvasInput.prototype = {\n        /**\n         * Get/set the main canvas.\n         * @param  {Object} data Canvas reference.\n         * @return {Mixed}      CanvasInput or current canvas.\n         */\n        canvas: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._canvas = data;\n                self._ctx = self._canvas.getContext('2d');\n\n                return self.render();\n            } else {\n                return self._canvas;\n            }\n        },\n\n        /**\n         * Get/set the x-position.\n         * @param  {Number} data The pixel position along the x-coordinate.\n         * @return {Mixed}      CanvasInput or current x-value.\n         */\n        x: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._x = data;\n\n                return self.render();\n            } else {\n                return self._x;\n            }\n        },\n\n        /**\n         * Get/set the y-position.\n         * @param  {Number} data The pixel position along the y-coordinate.\n         * @return {Mixed}      CanvasInput or current y-value.\n         */\n        y: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._y = data;\n\n                return self.render();\n            } else {\n                return self._y;\n            }\n        },\n\n        /**\n         * Get/set the extra x-position (generally used when no canvas is specified).\n         * @param  {Number} data The pixel position along the x-coordinate.\n         * @return {Mixed}      CanvasInput or current x-value.\n         */\n        extraX: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._extraX = data;\n\n                return self.render();\n            } else {\n                return self._extraX;\n            }\n        },\n\n        /**\n         * Get/set the extra y-position (generally used when no canvas is specified).\n         * @param  {Number} data The pixel position along the y-coordinate.\n         * @return {Mixed}      CanvasInput or current y-value.\n         */\n        extraY: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._extraY = data;\n\n                return self.render();\n            } else {\n                return self._extraY;\n            }\n        },\n\n        /**\n         * Get/set the font size.\n         * @param  {Number} data Font size.\n         * @return {Mixed}      CanvasInput or current font size.\n         */\n        fontSize: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontSize = data;\n\n                return self.render();\n            } else {\n                return self._fontSize;\n            }\n        },\n\n        /**\n         * Get/set the font family.\n         * @param  {String} data Font family.\n         * @return {Mixed}      CanvasInput or current font family.\n         */\n        fontFamily: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontFamily = data;\n\n                return self.render();\n            } else {\n                return self._fontFamily;\n            }\n        },\n\n        /**\n         * Get/set the font color.\n         * @param  {String} data Font color.\n         * @return {Mixed}      CanvasInput or current font color.\n         */\n        fontColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontColor = data;\n\n                return self.render();\n            } else {\n                return self._fontColor;\n            }\n        },\n\n        /**\n         * Get/set the place holder font color.\n         * @param  {String} data Font color.\n         * @return {Mixed}      CanvasInput or current place holder font color.\n         */\n        placeHolderColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._placeHolderColor = data;\n\n                return self.render();\n            } else {\n                return self._placeHolderColor;\n            }\n        },\n\n        /**\n         * Get/set the font weight.\n         * @param  {String} data Font weight.\n         * @return {Mixed}      CanvasInput or current font weight.\n         */\n        fontWeight: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontWeight = data;\n\n                return self.render();\n            } else {\n                return self._fontWeight;\n            }\n        },\n\n        /**\n         * Get/set the font style.\n         * @param  {String} data Font style.\n         * @return {Mixed}      CanvasInput or current font style.\n         */\n        fontStyle: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontStyle = data;\n\n                return self.render();\n            } else {\n                return self._fontStyle;\n            }\n        },\n\n        /**\n         * Get/set the width of the text box.\n         * @param  {Number} data Width in pixels.\n         * @return {Mixed}      CanvasInput or current width.\n         */\n        width: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._width = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._width;\n            }\n        },\n\n        /**\n         * Get/set the height of the text box.\n         * @param  {Number} data Height in pixels.\n         * @return {Mixed}      CanvasInput or current height.\n         */\n        height: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._height = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._height;\n            }\n        },\n\n        /**\n         * Get/set the padding of the text box.\n         * @param  {Number} data Padding in pixels.\n         * @return {Mixed}      CanvasInput or current padding.\n         */\n        padding: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._padding = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._padding;\n            }\n        },\n\n        /**\n         * Get/set the border width.\n         * @param  {Number} data Border width.\n         * @return {Mixed}      CanvasInput or current border width.\n         */\n        borderWidth: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._borderWidth = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._borderWidth;\n            }\n        },\n\n        /**\n         * Get/set the border color.\n         * @param  {String} data Border color.\n         * @return {Mixed}      CanvasInput or current border color.\n         */\n        borderColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._borderColor = data;\n\n                return self.render();\n            } else {\n                return self._borderColor;\n            }\n        },\n\n        /**\n         * Get/set the border radius.\n         * @param  {Number} data Border radius.\n         * @return {Mixed}      CanvasInput or current border radius.\n         */\n        borderRadius: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._borderRadius = data;\n\n                return self.render();\n            } else {\n                return self._borderRadius;\n            }\n        },\n\n        /**\n         * Get/set the background color.\n         * @param  {Number} data Background color.\n         * @return {Mixed}      CanvasInput or current background color.\n         */\n        backgroundColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._backgroundColor = data;\n\n                return self.render();\n            } else {\n                return self._backgroundColor;\n            }\n        },\n\n        /**\n         * Get/set the background gradient.\n         * @param  {Number} data Background gradient.\n         * @return {Mixed}      CanvasInput or current background gradient.\n         */\n        backgroundGradient: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._backgroundColor = self._renderCtx.createLinearGradient(\n                    0,\n                    0,\n                    0,\n                    self.outerH\n                );\n                self._backgroundColor.addColorStop(0, data[0]);\n                self._backgroundColor.addColorStop(1, data[1]);\n\n                return self.render();\n            } else {\n                return self._backgroundColor;\n            }\n        },\n\n        /**\n         * Get/set the box shadow.\n         * @param  {String} data     Box shadow in CSS format (1px 1px 1px rgba(0, 0, 0.5)).\n         * @param  {Boolean} doReturn (optional) True to prevent a premature render.\n         * @return {Mixed}          CanvasInput or current box shadow.\n         */\n        boxShadow: function(data, doReturn) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                // parse box shadow\n                var boxShadow = data.split('px ');\n                self._boxShadow = {\n                    x: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[0], 10),\n                    y: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[1], 10),\n                    blur: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[2], 10),\n                    color: self._boxShadow === 'none' ? '' : boxShadow[3]\n                };\n\n                // take into account the shadow and its direction\n                if (self._boxShadow.x < 0) {\n                    self.shadowL = Math.abs(self._boxShadow.x) + self._boxShadow.blur;\n                    self.shadowR = self._boxShadow.blur + self._boxShadow.x;\n                } else {\n                    self.shadowL = Math.abs(self._boxShadow.blur - self._boxShadow.x);\n                    self.shadowR = self._boxShadow.blur + self._boxShadow.x;\n                }\n                if (self._boxShadow.y < 0) {\n                    self.shadowT = Math.abs(self._boxShadow.y) + self._boxShadow.blur;\n                    self.shadowB = self._boxShadow.blur + self._boxShadow.y;\n                } else {\n                    self.shadowT = Math.abs(self._boxShadow.blur - self._boxShadow.y);\n                    self.shadowB = self._boxShadow.blur + self._boxShadow.y;\n                }\n\n                self.shadowW = self.shadowL + self.shadowR;\n                self.shadowH = self.shadowT + self.shadowB;\n\n                self._calcWH();\n\n                if (!doReturn) {\n                    self._updateCanvasWH();\n\n                    return self.render();\n                }\n            } else {\n                return self._boxShadow;\n            }\n        },\n\n        /**\n         * Get/set the inner shadow.\n         * @param  {String} data In the format of a CSS box shadow (1px 1px 1px rgba(0, 0, 0.5)).\n         * @return {Mixed}          CanvasInput or current inner shadow.\n         */\n        innerShadow: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._innerShadow = data;\n\n                return self.render();\n            } else {\n                return self._innerShadow;\n            }\n        },\n\n        /**\n         * Get/set the text selection color.\n         * @param  {String} data Color.\n         * @return {Mixed}      CanvasInput or current selection color.\n         */\n        selectionColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._selectionColor = data;\n\n                return self.render();\n            } else {\n                return self._selectionColor;\n            }\n        },\n\n        /**\n         * Get/set the place holder text.\n         * @param  {String} data Place holder text.\n         * @return {Mixed}      CanvasInput or current place holder text.\n         */\n        placeHolder: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._placeHolder = data;\n\n                return self.render();\n            } else {\n                return self._placeHolder;\n            }\n        },\n\n        /**\n         * Get/set the current text box value.\n         * @param  {String} data Text value.\n         * @return {Mixed}      CanvasInput or current text value.\n         */\n        value: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._value = data;\n\n                return self.focus();\n            } else {\n                return self._value;\n            }\n        },\n\n        /**\n         * Set or fire the onsubmit event.\n         * @param  {Function} fn Custom callback.\n         */\n        onsubmit: function(fn) {\n            var self = this;\n\n            if (typeof fn !== 'undefined') {\n                self._onsubmit = fn;\n\n                return self;\n            } else {\n                self._onsubmit();\n            }\n        },\n\n        /**\n         * Set or fire the onkeydown event.\n         * @param  {Function} fn Custom callback.\n         */\n        onkeydown: function(fn) {\n            var self = this;\n\n            if (typeof fn !== 'undefined') {\n                self._onkeydown = fn;\n\n                return self;\n            } else {\n                self._onkeydown();\n            }\n        },\n\n        /**\n         * Set or fire the onkeyup event.\n         * @param  {Function} fn Custom callback.\n         */\n        onkeyup: function(fn) {\n            var self = this;\n\n            if (typeof fn !== 'undefined') {\n                self._onkeyup = fn;\n\n                return self;\n            } else {\n                self._onkeyup();\n            }\n        },\n\n        /**\n         * Place focus on the CanvasInput box, placing the cursor\n         * either at the end of the text or where the user clicked.\n         * @param  {Number} pos (optional) The position to place the cursor.\n         * @return {CanvasInput}\n         */\n        focus: function(pos) {\n            var self = this,\n                input;\n\n            // if this is readonly, don't allow it to get focus\n            if (self._readonly) {\n                return;\n            }\n\n            // only fire the focus event when going from unfocussed\n            if (!self._hasFocus) {\n                self._onfocus(self);\n            }\n\n            // remove selection\n            if (!self._selectionUpdated) {\n                self._selection = [0, 0];\n            } else {\n                delete self._selectionUpdated;\n            }\n\n            // update the cursor position\n            self._cursorPos = (typeof pos === 'number') ? pos : self._clipText().length;\n\n            // clear the place holder\n            if (self._placeHolder === self._value) {\n                self._value = '';\n            }\n\n            self._hasFocus = true;\n            self._cursor = true;\n\n            // setup cursor interval\n            if (self._cursorInterval) {\n                clearInterval(self._cursorInterval);\n            }\n            self._cursorInterval = setInterval(function() {\n                self._cursor = !self._cursor;\n                self.render();\n            }, 500);\n\n            // check if this is Chrome for Android (there is a bug with returning incorrect character key codes)\n            var nav = navigator.userAgent.toLowerCase(),\n                isChromeMobile = (nav.indexOf('chrome') >= 0 && nav.indexOf('mobile') >= 0 && nav.indexOf('android') >= 0);\n\n            // add support for mobile\n            var isMobile = (typeof window.orientation !== 'undefined');\n            if (isMobile && !isChromeMobile && document && document.createElement && (input = document.createElement('input'))) {\n                input.type = 'text';\n                input.style.opacity = 0;\n                input.style.position = 'absolute';\n                input.style.left = (self._x + self._extraX + (self._canvas ? self._canvas.offsetLeft : 0)) + 'px';\n                input.style.top = (self._y + self._extraY + (self._canvas ? self._canvas.offsetTop : 0)) + 'px';\n                input.style.width = self._width;\n                input.style.height = 0;\n                document.body.appendChild(input);\n                input.focus();\n                input.addEventListener('blur', function() {\n                    self.blur(self);\n                }, false);\n            } else if (isMobile) {\n                self.value(prompt(self._placeHolder) || '');\n            }\n\n            return self.render();\n        },\n\n        /**\n         * Removes focus from the CanvasInput box.\n         * @param  {Object} _this Reference to this.\n         * @return {CanvasInput}\n         */\n        blur: function(_this) {\n            var self = _this || this;\n\n            if (!self._disableBlur) {\n                self._onblur(self);\n\n                if (self._cursorInterval) {\n                    clearInterval(self._cursorInterval);\n                }\n                self._hasFocus = false;\n                self._cursor = false;\n                self._selection = [0, 0];\n\n                // fill the place holder\n                if (self._value === '') {\n                    self._value = self._placeHolder;\n                }\n            }\n\n            return self.render();\n        },\n\n        /**\n         * Maintains continual focus on the CanvasInput by disabling blur.\n         * @param {Object} _this Reference to this.\n         */\n        disableBlur: function(_this) {\n            var self = _this || this;\n            self._disableBlur = true;\n        },\n\n        /**\n         * Allows the CanvasInput to blur or focus by re-enabling blur.\n         * @param {Object} _this Reference to this.\n         */\n        enableBlur: function(_this) {\n            var self = _this || this;\n            self._disableBlur = false;\n        },\n\n        /**\n         * Fired with the keydown event to draw the typed characters.\n         * @param  {Event}       e    The keydown event.\n         * @param  {CanvasInput} self\n         * @return {CanvasInput}\n         */\n        keydown: function(e, self) {\n            var keyCode = e.which,\n                isShift = e.shiftKey,\n                key = null,\n                startText, endText;\n\n            // make sure the correct text field is being updated\n            if (!self._hasFocus) {\n                return;\n            }\n\n            // fire custom user event\n            self._onkeydown(e, self);\n\n            // add support for Ctrl/Cmd+A selection\n            if (keyCode === 65 && (e.ctrlKey || e.metaKey)) {\n                self._selection = [0, self._value.length];\n                e.preventDefault();\n                return self.render();\n            }\n\n            // block keys that shouldn't be processed\n            if (keyCode === 17 || e.metaKey || e.ctrlKey) {\n                return self;\n            }\n\n            // prevent the default action\n            e.preventDefault();\n\n            if (keyCode === 8) { // backspace\n                if (!self._clearSelection()) {\n                    if (self._cursorPos > 0) {\n                        startText = self._value.substr(0, self._cursorPos - 1);\n                        endText = self._value.substr(self._cursorPos, self._value.length);\n                        self._value = startText + endText;\n                        self._cursorPos--;\n                    }\n                }\n            } else if (keyCode === 37) { // left arrow key\n                if (self._cursorPos > 0) {\n                    self._cursorPos--;\n                    self._cursor = true;\n                    self._selection = [0, 0];\n                }\n            } else if (keyCode === 39) { // right arrow key\n                if (self._cursorPos < self._value.length) {\n                    self._cursorPos++;\n                    self._cursor = true;\n                    self._selection = [0, 0];\n                }\n            } else if (keyCode === 13) { // enter key\n                self._onsubmit(e, self);\n            } else if (keyCode === 9) { // tab key\n                if (self._tabToClear) {\n                    self._value = \"\";\n                    self._cursorPos = 0;\n                } else {\n                    var next = (inputs[self._inputsIndex + 1]) ? self._inputsIndex + 1 : 0;\n                    if (next !== self._inputsIndex) {\n                        self.blur();\n                        setTimeout(function() {\n                            inputs[next].focus();\n                        }, 10);\n                    }\n                }\n            } else if (key = self._mapCodeToKey(isShift, keyCode)) {\n                self._clearSelection();\n\n                // enforce the max length\n                if (self._maxlength && self._maxlength <= self._value.length) {\n                    return;\n                }\n\n                startText = (self._value) ? self._value.substr(0, self._cursorPos) : '';\n                endText = (self._value) ? self._value.substr(self._cursorPos) : '';\n                self._value = startText + key + endText;\n                self._cursorPos++;\n            }\n\n            if ((keyCode == 13 && self._renderOnReturn) || keyCode !== 13) {\n                return self.render();\n            } else {\n                return function() {};\n            }\n        },\n\n        /**\n         * Fired with the click event on the canvas, and puts focus on/off\n         * based on where the user clicks.\n         * @param  {Event}       e    The click event.\n         * @param  {CanvasInput} self\n         * @return {CanvasInput}\n         */\n        click: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y;\n\n            if (self._endSelection) {\n                delete self._endSelection;\n                delete self._selectionUpdated;\n                return;\n            }\n\n            if (self._canvas && self._overInput(x, y) || !self._canvas) {\n                if (self._mouseDown) {\n                    self._mouseDown = false;\n                    self.click(e, self);\n                    return self.focus(self._clickPos(x, y));\n                }\n            } else {\n                return self.blur();\n            }\n        },\n\n        /**\n         * Fired with the mousemove event to update the default cursor.\n         * @param  {Event}       e    The mousemove event.\n         * @param  {CanvasInput} self\n         * @return {CanvasInput}\n         */\n        mousemove: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y,\n                isOver = self._overInput(x, y);\n\n            if (isOver && self._canvas) {\n                self._canvas.style.cursor = 'text';\n                self._wasOver = true;\n            } else if (self._wasOver && self._canvas) {\n                self._canvas.style.cursor = 'default';\n                self._wasOver = false;\n            }\n\n            if (self._hasFocus && self._selectionStart >= 0) {\n                var curPos = self._clickPos(x, y),\n                    start = Math.min(self._selectionStart, curPos),\n                    end = Math.max(self._selectionStart, curPos);\n\n                if (!isOver) {\n                    self._selectionUpdated = true;\n                    self._endSelection = true;\n                    delete self._selectionStart;\n                    self.render();\n                    return;\n                }\n\n                if (self._selection[0] !== start || self._selection[1] !== end) {\n                    self._selection = [start, end];\n                    self.render();\n                }\n            }\n        },\n\n        /**\n         * Fired with the mousedown event to start a selection drag.\n         * @param  {Event} e    The mousedown event.\n         * @param  {CanvasInput} self\n         */\n        mousedown: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y,\n                isOver = self._overInput(x, y);\n\n            // setup the 'click' event\n            self._mouseDown = isOver;\n\n            // start the selection drag if inside the input\n            if (self._hasFocus && isOver) {\n                self._selectionStart = self._clickPos(x, y);\n            }\n        },\n\n        /**\n         * Fired with the mouseup event to end a selection drag.\n         * @param  {Event} e    The mouseup event.\n         * @param  {CanvasInput} self\n         */\n        mouseup: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y;\n\n            // update selection if a drag has happened\n            var isSelection = self._clickPos(x, y) !== self._selectionStart;\n            if (self._hasFocus && self._selectionStart >= 0 && self._overInput(x, y) && isSelection) {\n                self._selectionUpdated = true;\n                delete self._selectionStart;\n                self.render();\n            } else {\n                delete self._selectionStart;\n            }\n\n            self.click(e, self);\n        },\n\n        /**\n         * Helper method to get the off-DOM canvas.\n         * @return {Object} Reference to the canvas.\n         */\n        renderCanvas: function() {\n            return this._renderCanvas;\n        },\n\n        /**\n         * Helper method to remove all event listeners, stop the blinking cursor and\n         * reset the cursor style.\n         */\n        cleanup: function() {\n            this._canvas.removeEventListener(\"mouseup\", this.mouseupCanvasListener, false);\n            this._canvas.removeEventListener(\"mousedown\", this.mousedownCanvasListener, false);\n            this._canvas.removeEventListener(\"mousemove\", this.mousemoveCanvasListener, false);\n            window.removeEventListener(\"keydown\", this.keydownWindowListener, false);\n            window.removeEventListener(\"keyup\", this.keyupWindowListener, false);\n            window.removeEventListener(\"mouseup\", this.mouseupWindowListener, true);\n            window.removeEventListener(\"paste\", this.pasteWindowListener, false);\n            clearInterval(this._cursorInterval);\n\n            this._canvas.style.cursor = 'default';\n            for (var i = (inputs.length- 1); i >= 0 ; i--) {\n                if (inputs[i] === this) {\n                    inputs.splice(i, 1);\n                }\n            }\n        },\n\n        /**\n         * Clears and redraws the CanvasInput on an off-DOM canvas,\n         * and if a main canvas is provided, draws it all onto that.\n         * @return {CanvasInput}\n         */\n        render: function() {\n            var self = this,\n                ctx = self._renderCtx,\n                w = self.outerW,\n                h = self.outerH,\n                br = self._borderRadius,\n                bw = self._borderWidth,\n                sw = self.shadowW,\n                sh = self.shadowH;\n\n            // clear the canvas\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n            // setup the box shadow\n            ctx.shadowOffsetX = self._boxShadow.x;\n            ctx.shadowOffsetY = self._boxShadow.y;\n            ctx.shadowBlur = self._boxShadow.blur;\n            ctx.shadowColor = self._boxShadow.color;\n\n            // draw the border\n            if (self._borderWidth > 0) {\n                ctx.fillStyle = self._borderColor;\n                self._roundedRect(ctx, self.shadowL, self.shadowT, w - sw, h - sh, br);\n                ctx.fill();\n\n                ctx.shadowOffsetX = 0;\n                ctx.shadowOffsetY = 0;\n                ctx.shadowBlur = 0;\n            }\n\n            // draw the text box background\n            self._drawTextBox(function() {\n                // make sure all shadows are reset\n                ctx.shadowOffsetX = 0;\n                ctx.shadowOffsetY = 0;\n                ctx.shadowBlur = 0;\n\n                // clip the text so that it fits within the box\n                var text = self._clipText();\n\n                // draw the selection\n                var paddingBorder = self._padding + self._borderWidth + self.shadowT;\n                if (self._selection[1] > 0) {\n                    var selectOffset = self._textWidth(text.substring(0, self._selection[0])),\n                        selectWidth = self._textWidth(text.substring(self._selection[0], self._selection[1]));\n\n                    ctx.fillStyle = self._selectionColor;\n                    ctx.fillRect(paddingBorder + selectOffset, paddingBorder, selectWidth, self._height);\n                }\n\n                // draw the cursor\n                ctx.fillStyle = (self._placeHolder === self._value && self._value !== '') ? self._placeHolderColor : self._fontColor;\n                if (self._cursor) {\n                    var cursorOffset = self._textWidth(text.substring(0, self._cursorPos));\n\n                    ctx.fillRect(paddingBorder + cursorOffset, paddingBorder, 1, self._height);\n                }\n\n                // draw the text\n                var textX = self._padding + self._borderWidth + self.shadowL,\n                    textY = Math.round(paddingBorder + self._height / 2);\n\n                ctx.font = self._fontStyle + ' ' + self._fontWeight + ' ' + self._fontSize + 'px ' + self._fontFamily;\n                ctx.textAlign = 'left';\n                ctx.textBaseline = 'middle';\n                ctx.fillText(text, textX, textY);\n\n                // parse inner shadow\n                var innerShadow = self._innerShadow.split('px '),\n                    isOffsetX = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[0], 10),\n                    isOffsetY = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[1], 10),\n                    isBlur = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[2], 10),\n                    isColor = self._innerShadow === 'none' ? '' : innerShadow[3];\n\n                // draw the inner-shadow (damn you canvas, this should be easier than this...)\n                if (isBlur > 0) {\n                    var shadowCtx = self._shadowCtx,\n                        scw = shadowCtx.canvas.width,\n                        sch = shadowCtx.canvas.height;\n\n                    shadowCtx.clearRect(0, 0, scw, sch);\n                    shadowCtx.shadowBlur = isBlur;\n                    shadowCtx.shadowColor = isColor;\n\n                    // top shadow\n                    shadowCtx.shadowOffsetX = 0;\n                    shadowCtx.shadowOffsetY = isOffsetY;\n                    shadowCtx.fillRect(-1 * w, -100, 3 * w, 100);\n\n                    // right shadow\n                    shadowCtx.shadowOffsetX = isOffsetX;\n                    shadowCtx.shadowOffsetY = 0;\n                    shadowCtx.fillRect(scw, -1 * h, 100, 3 * h);\n\n                    // bottom shadow\n                    shadowCtx.shadowOffsetX = 0;\n                    shadowCtx.shadowOffsetY = isOffsetY;\n                    shadowCtx.fillRect(-1 * w, sch, 3 * w, 100);\n\n                    // left shadow\n                    shadowCtx.shadowOffsetX = isOffsetX;\n                    shadowCtx.shadowOffsetY = 0;\n                    shadowCtx.fillRect(-100, -1 * h, 100, 3 * h);\n\n                    // create a clipping mask on the main canvas\n                    self._roundedRect(ctx, bw + self.shadowL, bw + self.shadowT, w - bw * 2 - sw, h - bw * 2 - sh, br);\n                    ctx.clip();\n\n                    // draw the inner-shadow from the off-DOM canvas\n                    ctx.drawImage(self._shadowCanvas, 0, 0, scw, sch, bw + self.shadowL, bw + self.shadowT, scw, sch);\n                }\n\n                // draw to the visible canvas\n                if (self._ctx) {\n                    self._ctx.clearRect(self._x, self._y, ctx.canvas.width, ctx.canvas.height);\n                    self._ctx.drawImage(self._renderCanvas, self._x, self._y);\n                }\n\n                return self;\n\n            });\n        },\n\n        /**\n         * Draw the text box area with either an image or background color.\n         * @param  {Function} fn Callback.\n         */\n        _drawTextBox: function(fn) {\n            var self = this,\n                ctx = self._renderCtx,\n                w = self.outerW,\n                h = self.outerH,\n                br = self._borderRadius,\n                bw = self._borderWidth,\n                sw = self.shadowW,\n                sh = self.shadowH;\n\n            // only draw the background shape if no image is being used\n            if (self._backgroundImage === '') {\n                ctx.fillStyle = self._backgroundColor;\n                self._roundedRect(ctx, bw + self.shadowL, bw + self.shadowT, w - bw * 2 - sw, h - bw * 2 - sh, br);\n                ctx.fill();\n\n                fn();\n            } else {\n                var img = new Image();\n                img.src = self._backgroundImage;\n                img.onload = function() {\n                    ctx.drawImage(img, 0, 0, img.width, img.height, bw + self.shadowL, bw + self.shadowT, w, h);\n\n                    fn();\n                };\n            }\n        },\n\n        /**\n         * Deletes selected text in selection range and repositions cursor.\n         * @return {Boolean} true if text removed.\n         */\n        _clearSelection: function() {\n            var self = this;\n\n            if (self._selection[1] > 0) {\n                // clear the selected contents\n                var start = self._selection[0],\n                    end = self._selection[1];\n\n                self._value = self._value.substr(0, start) + self._value.substr(end);\n                self._cursorPos = start;\n                self._cursorPos = (self._cursorPos < 0) ? 0 : self._cursorPos;\n                self._selection = [0, 0];\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Clip the text string to only return what fits in the visible text box.\n         * @param  {String} value The text to clip.\n         * @return {String} The clipped text.\n         */\n        _clipText: function(value) {\n            var self = this;\n            value = (typeof value === 'undefined') ? self._value : value;\n\n            var textWidth = self._textWidth(value),\n                fillPer = textWidth / (self._width - self._padding),\n                text = fillPer > 1 ? value.substr(-1 * Math.floor(value.length / fillPer)) : value;\n\n            return text + '';\n        },\n\n        /**\n         * Gets the pixel with of passed text.\n         * @param  {String} text The text to measure.\n         * @return {Number}      The measured width.\n         */\n        _textWidth: function(text) {\n            var self = this,\n                ctx = self._renderCtx;\n\n            ctx.font = self._fontStyle + ' ' + self._fontWeight + ' ' + self._fontSize + 'px ' + self._fontFamily;\n            ctx.textAlign = 'left';\n\n            return ctx.measureText(text).width;\n        },\n\n        /**\n         * Recalculate the outer with and height of the text box.\n         */\n        _calcWH: function() {\n            var self = this;\n\n            // calculate the full width and height with padding, borders and shadows\n            self.outerW = self._width + self._padding * 2 + self._borderWidth * 2 + self.shadowW;\n            self.outerH = self._height + self._padding * 2 + self._borderWidth * 2 + self.shadowH;\n        },\n\n        /**\n         * Update the width and height of the off-DOM canvas when attributes are changed.\n         */\n        _updateCanvasWH: function() {\n            var self = this,\n                oldW = self._renderCanvas.width,\n                oldH = self._renderCanvas.height;\n\n            // update off-DOM canvas\n            self._renderCanvas.setAttribute('width', self.outerW);\n            self._renderCanvas.setAttribute('height', self.outerH);\n            self._shadowCanvas.setAttribute('width', self._width + self._padding * 2);\n            self._shadowCanvas.setAttribute('height', self._height + self._padding * 2);\n\n            // clear the main canvas\n            if (self._ctx) {\n                self._ctx.clearRect(self._x, self._y, oldW, oldH);\n            }\n        },\n\n        /**\n         * Creates the path for a rectangle with rounded corners.\n         * Must call ctx.fill() after calling this to draw the rectangle.\n         * @param  {Object} ctx Canvas context.\n         * @param  {Number} x   x-coordinate to draw from.\n         * @param  {Number} y   y-coordinate to draw from.\n         * @param  {Number} w   Width of rectangle.\n         * @param  {Number} h   Height of rectangle.\n         * @param  {Number} r   Border radius.\n         */\n        _roundedRect: function(ctx, x, y, w, h, r) {\n            if (w < 2 * r) r = w / 2;\n            if (h < 2 * r) r = h / 2;\n\n            ctx.beginPath();\n\n            ctx.moveTo(x + r, y);\n            ctx.lineTo(x + w - r, y);\n            ctx.quadraticCurveTo(x + w, y, x + w, y + r);\n            ctx.lineTo(x + w, y + h - r);\n            ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n            ctx.lineTo(x + r, y + h);\n            ctx.quadraticCurveTo(x, y + h, x, y + h - r);\n            ctx.lineTo(x, y + r);\n            ctx.quadraticCurveTo(x, y, x + r, y);\n\n            ctx.closePath();\n        },\n\n        /**\n         * Checks if a coordinate point is over the input box.\n         * @param  {Number} x x-coordinate position.\n         * @param  {Number} y y-coordinate position.\n         * @return {Boolean}   True if it is over the input box.\n         */\n        _overInput: function(x, y) {\n            var self = this,\n                xLeft = x >= self._x + self._extraX,\n                xRight = x <= self._x + self._extraX + self._width + self._padding * 2,\n                yTop = y >= self._y + self._extraY,\n                yBottom = y <= self._y + self._extraY + self._height + self._padding * 2;\n\n            return xLeft && xRight && yTop && yBottom;\n        },\n\n        /**\n         * Use the mouse's x & y coordinates to determine\n         * the position clicked in the text.\n         * @param  {Number} x X-coordinate.\n         * @param  {Number} y Y-coordinate.\n         * @return {Number}   Cursor position.\n         */\n        _clickPos: function(x, y) {\n            var self = this,\n                value = self._value;\n\n            // don't count placeholder text in this\n            if (self._value === self._placeHolder) {\n                value = '';\n            }\n\n            // determine where the click was made along the string\n            var text = self._clipText(value),\n                totalW = 0,\n                pos = text.length;\n\n            if (x - (self._x + self._extraX) < self._textWidth(text)) {\n                // loop through each character to identify the position\n                for (var i = 0; i < text.length; i++) {\n                    totalW += self._textWidth(text[i]);\n                    if (totalW >= x - (self._x + self._extraX)) {\n                        pos = i;\n                        break;\n                    }\n                }\n            }\n\n            return pos;\n        },\n\n        /**\n         * Calculate the mouse position based on the event callback and the elements on the page.\n         * @param  {Event} e\n         * @return {Object}   x & y values\n         */\n        _mousePos: function(e) {\n            var elm = e.target,\n                style = document.defaultView.getComputedStyle(elm, undefined),\n                paddingLeft = parseInt(style['paddingLeft'], 10) || 0,\n                paddingTop = parseInt(style['paddingLeft'], 10) || 0,\n                borderLeft = parseInt(style['borderLeftWidth'], 10) || 0,\n                borderTop = parseInt(style['borderLeftWidth'], 10) || 0,\n                htmlTop = document.body.parentNode.offsetTop || 0,\n                htmlLeft = document.body.parentNode.offsetLeft || 0,\n                offsetX = 0,\n                offsetY = 0,\n                x, y;\n\n            // calculate the total offset\n            if (typeof elm.offsetParent !== 'unefined') {\n                do {\n                    offsetX += elm.offsetLeft;\n                    offsetY += elm.offsetTop;\n                } while ((elm = elm.offsetParent));\n            }\n\n            // take into account borders and padding\n            offsetX += paddingLeft + borderLeft + htmlLeft;\n            offsetY += paddingTop + borderTop + htmlTop;\n\n            return {\n                x: e.pageX - offsetX,\n                y: e.pageY - offsetY\n            };\n        },\n\n        /**\n         * Translate a keycode into the correct keyboard character.\n         * @param  {Boolean} isShift True if the shift key is being pressed.\n         * @param  {Number}  keyCode The character code.\n         * @return {String}          The translated character.\n         */\n        _mapCodeToKey: function(isShift, keyCode) {\n            var self = this,\n                blockedKeys = [8, 9, 13, 16, 17, 18, 20, 27, 91, 92],\n                key = '';\n\n            // block keys that we don't want to type\n            for (var i = 0; i < blockedKeys.length; i++) {\n                if (keyCode === blockedKeys[i]) {\n                    return;\n                }\n            }\n\n            // make sure we are getting the correct input\n            if (typeof isShift !== 'boolean' || typeof keyCode !== 'number') {\n                return;\n            }\n\n            var charMap = {\n                32: ' ',\n                48: ')',\n                49: '!',\n                50: '@',\n                51: '#',\n                52: '$',\n                53: '%',\n                54: '^',\n                55: '&',\n                56: '*',\n                57: '(',\n                59: ':',\n                107: '+',\n                173: '_', // firefox uses 173 instead of 189\n                189: '_',\n                186: ':',\n                187: '+',\n                188: '<',\n                190: '>',\n                191: '?',\n                192: '~',\n                219: '{',\n                220: '|',\n                221: '}',\n                222: '\"'\n            };\n\n            // convert the code to a character\n            if (isShift) {\n                key = (keyCode >= 65 && keyCode <= 90) ? String.fromCharCode(keyCode) : charMap[keyCode];\n            } else {\n                if (keyCode >= 65 && keyCode <= 90) {\n                    key = String.fromCharCode(keyCode).toLowerCase();\n                } else {\n                    if (keyCode === 96) {\n                        key = '0';\n                    } else if (keyCode === 97) {\n                        key = '1';\n                    } else if (keyCode === 98) {\n                        key = '2';\n                    } else if (keyCode === 99) {\n                        key = '3';\n                    } else if (keyCode === 100) {\n                        key = '4';\n                    } else if (keyCode === 101) {\n                        key = '5';\n                    } else if (keyCode === 102) {\n                        key = '6';\n                    } else if (keyCode === 103) {\n                        key = '7';\n                    } else if (keyCode === 104) {\n                        key = '8';\n                    } else if (keyCode === 105) {\n                        key = '9';\n                    } else if (keyCode === 188) {\n                        key = ',';\n                    } else if (keyCode === 190) {\n                        key = '.';\n                    } else if (keyCode === 191) {\n                        key = '/';\n                    } else if (keyCode === 192) {\n                        key = '`';\n                    } else if (keyCode === 220) {\n                        key = '\\\\';\n                    } else if (keyCode === 187) {\n                        key = '=';\n                    } else if ((keyCode === 189)  || (keyCode === 173)) {\n                        // firefox maps the minus key to 173, rather\n                        // then trying to use browser detection we\n                        // simply accept 173 as well...which means that\n                        // for Chrome using the mute button would\n                        // cause minus sign to appear\n                        key = '-';\n                    } else if (keyCode === 222) {\n                        key = '\\'';\n                    } else if (keyCode === 186) {\n                        key = ';';\n                    } else if (keyCode === 219) {\n                        key = '[';\n                    } else if (keyCode === 221) {\n                        key = ']';\n                    } else {\n                        key = String.fromCharCode(keyCode);\n                    }\n                }\n            }\n\n            return key;\n        }\n    };\n\n    module.exports = CanvasInput;\n})();\n","/* global module */\n/* global require */\n\n(function() {\n    var common = require(\"./common\");\n\n   var DomMenu = function(Mx, menu, options) {\n        this.options = {\n            itemClass: \"sigplot-menu-item\"\n        };\n        common.update(this.options, options);\n        this._Mx = Mx;\n        this._container = Mx.root;\n        this._menu = document.createElement(\"div\");\n        var style = \"z-index:2;float:left;position:relative;left:\" + Mx.xpos + \"px;top:\" + Mx.ypos + \"px;\";\n        this._menu.classList.add(\"sigplot-menu\");\n        var d = new Date();\n        this._menuId = \"menu-\" + d.getSeconds() + d.getMilliseconds();\n        this._menu.classList.add(this._menuId);\n        this._menu.style = style;\n        this._items = [];\n        this.setCSS();\n        this.createMenu(menu);\n    };\n    DomMenu.prototype = {\n        createMenu: function(menu) {\n            var self = this;\n            var Mx = this._Mx;\n            var originalFinalize = menu.finalize;\n            menu.finalize = function() {\n                self.remove();\n                originalFinalize();\n            };\n            this.finalize = menu.finalize;\n            var title = document.createElement(\"div\");\n            title.addEventListener(\"mousedown\", function(e) {\n                e.preventDefault();\n                self._movingOffsetX = e.offsetX;\n                self._movingOffsetY = e.offsetY;\n                self._moving = true;\n            });\n            title.addEventListener(\"mouseup\", function(e) {\n                e.preventDefault();\n                self._moving = false;\n            });\n            self._moveMenu = function(e) {\n                if (self._moving) {\n                    self._menu.style.position = 'fixed';\n                    self._menu.style.top = e.clientY - self._movingOffsetY + 'px';\n                    self._menu.style.left = e.clientX - self._movingOffsetX + 'px';\n                }\n            };\n            document.body.addEventListener(\"mousemove\", self._moveMenu);\n            title.classList.add(\"sigplot-menu-title\");\n            title.innerText = menu.title;\n            this._menu.append(title);\n            var list = document.createElement(\"ul\");\n            list.classList.add(\"sigplot-menu-list\");\n            menu.items.forEach(function(item) {\n                var li = self._createMenuItem(item, menu);\n                list.append(li);\n            });\n            this._menu.append(list);\n            this._container.append(this._menu);\n            this._menu.addEventListener(\"contextmenu\", function(e) {\n                e.preventDefault();\n                self.finalize();\n            });\n            Mx.menu = this;\n            Mx.widget = {\n                type: \"MENU\",\n                callback: function(event) {\n                    if (event.type === \"mousedown\") {\n                        if (event.which === 1 || event.which === 2 || event.which === 3) {\n                            if ((self._Mx.menu === self) && (!event.target.classList.contains(self.options.itemClass))) {\n                                self.finalize();\n                            }\n                            if (!self._Mx.menu) {\n                                self.finalize();\n                            }\n                        }\n                    }\n                    if (event.type === \"mouseup\") {\n                        self._moving = false;\n                    }\n                    if (event.type === \"keydown\") {\n                        self._handleKeyEvents(event);\n                    }\n                }\n            };\n        },\n        _handleKeyEvents: function(event) {\n            var self = this;\n            if (event.key === \"ArrowDown\") {\n                event.preventDefault();\n                if (!self._active) {\n                    self._setActive(self._items[0]);\n                } else {\n                    var target = self._items.indexOf(self._active) + 1;\n\n                    if (target > self._items.length - 1) {\n                        return; //Last item in the list keep it active\n                    }\n                    self._setActive(self._items[target]);\n                }\n            }\n            if (event.key === \"ArrowUp\") {\n                event.preventDefault();\n                if (!self._active) {\n                    self._setActive(self._items[0]);\n                } else {\n                    var target = self._items.indexOf(self._active) - 1;\n                    if (target < 0) {\n                        return; // First item in the list keep it active\n                    }\n                    self._setActive(self._items[target]);\n                }\n            }\n\n            if (event.key === \"Enter\") {\n                event.preventDefault();\n                if (!self._active) {\n                    self._setActive(self._items[0]);\n                }\n\n                var el = self._active;\n                if (el.onclick) {\n                    el.onclick();\n                } else if (el.click) {\n                    el.click();\n                }\n            }\n        },\n        _setActive: function(li) {\n            if (this._active) {\n                this._clearActive();\n            }\n            this._active = li;\n            li.classList.add('active');\n        },\n        _clearActive: function() {\n            this._active.classList.remove('active');\n            this._active = null;\n        },\n        _createMenuItem: function(item, menu) {\n            var self = this;\n            var Mx = this._Mx;\n            var li = document.createElement(\"li\");\n            li.className += \" \" + self.options.itemClass;\n            li.innerText = item.text;\n            if (item.style) {\n                li.className += \" \" + item.style;\n            }\n            if (item.hasOwnProperty(\"checked\")) {\n                li.className += \" sigplot-menu-checkbox\";\n                if (item.checked) {\n                    li.className += \" checked\";\n                }\n            }\n            li.addEventListener(\"click\", function() {\n                self.remove();\n                Mx.menu = undefined;\n                Mx.widget = null;\n                if (item.handler) {\n                    item.handler();\n                } else if (item.menu) {\n                    var newmenu = item.menu;\n                    if (typeof item.menu === 'function') {\n                        newmenu = item.menu();\n                    }\n                    newmenu.finalize = menu.finalize;\n                    new DomMenu(Mx, newmenu);\n                }\n\n                if ((!Mx.menu) && (menu.finalize)) {\n                    menu.finalize();\n                }\n            });\n            li.addEventListener(\"mouseenter\", function(e) {\n                self._setActive(e.target);\n            });\n            li.addEventListener(\"mouseleave\", function(e) {\n                self._clearActive();\n            });\n            self._items.push(li);\n            return li;\n        },\n        remove: function() {\n\n            var Mx = this._Mx;\n            Mx.menu = undefined;\n            Mx.widget = null;\n            this._menu.remove();\n            document.body.removeEventListener(\"mousemove\", this._moveMenu);\n        },\n        setCSS: function() {\n            var Mx = this._Mx;\n            var cssId = \"mx-menu-css\"; // id so we can always replace the css if we want to update this with mx.setTheme..\n            var style = document.createElement('style');\n            var textContent;\n            style.id = cssId;\n            //This really sucks...... and I hate it. -Sean\n            /* jshint ignore:start */\n            textContent = \"\" +\n                \".\" + this._menuId + \"{\\n\" +\n                \"background-color: \" + Mx.xwbg + \";\\n\" +\n                \"font: \" + Mx.font.font + \";\\n\" +\n                \"color:\" + Mx.xwfg + \"\\n\" +\n                \"}   \\n\" +\n                \".sigplot-menu-list {\\n\" +\n                \"    margin: 0px;\\n\" +\n                \"    list-style: none;\\n\" +\n                \"    padding: 0px;\\n\" +\n                \"}\\n\" +\n                \".\" + this._menuId + \">div {\\n\" +\n                \"    cursor: move;\\n\" +\n                \"    text-align: center;\\n\" +\n                \"    border-bottom: 2px solid \" + Mx.xwts + \";\\n\" +\n                \"}\\n\" +\n                \".\" + this._menuId + \">ul>li{\\n\" +\n                \"    border-top: 2px solid \" + Mx.bg + \";\\n\" +\n                \"    background-color: \" + Mx.xwlo + \";\\n\" +\n                \"    padding: 1px;\\n\" +\n                \"    padding-right: 5px;\\n\" +\n                \"    padding-left: 5px;\\n\" +\n                \"    cursor:default;\\n\" +\n                \"}\\n\" +\n                \".\" + this._menuId + \">ul>li.active{\\n\" +\n                \"    background-color: \" + Mx.hi + \";\\n\" +\n                \"}\\n\" +\n                \".\" + this._menuId + \" {\\n\" +\n                \"    position: relative;\\n\" +\n                \"    color: white;\\n\" +\n                \"    float: left;\\n\" +\n                \"    border-radius: 5px;\\n\" +\n                \"    padding: 3px;\\n\" +\n                \"    font: \" + Mx.font.font + \";\\n\" +\n                \"    color:\" + Mx.xwfg + \"\\n\" +\n                \"}\\n\" +\n                \".\" + this._menuId + \">ul>li.separator {\\n\" +\n                \"    background-color: \" + Mx.xwbs + \";\\n\" +\n                \"}\\n\" +\n                \".sigplot-menu-checkbox:before{\\n\" +\n                \"    margin-right: 3px; \\n\" +\n                \"}\\n\" +\n                \".sigplot-menu-checkbox.checked:before {\\n\" +\n                \"    content: '\\\\25b8';\\n\" +\n                \"    width: 2px;\\n\" +\n                \"    height: 3px;\\n\" +\n                \"}\\n\" +\n                \".sigplot-menu-checkbox.checkbox:before {\\n\" +\n                \"    content: '\\\\25A1';\\n\" +\n                \"    width: 2px;\\n\" +\n                \"    height: 3px;\\n\" +\n                \"}\\n\" +\n                \".sigplot-menu-checkbox.checkbox.checked:before {\\n\" +\n                \"    content: '\\\\25A3';\\n\" +\n                \"    width: 2px;\\n\" +\n                \"    height: 3px;\\n\" +\n                \"}\\n\";\n\n            /* jshint ignore:end */\n            if (!this._container.getElementsByTagName(\"style\").length) {\n                var style = document.createElement('style');\n                style.textContent = textContent;\n                this._container.appendChild(style);\n            } else {\n                var style = this._container.getElementsByTagName(\"style\")[0];\n                style.textContent = textContent;\n            }\n        }\n    };\n\n        module.exports = DomMenu;\n\n}());\n\n","/**\n * @license\n * File: sigplot.layer1d.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* global module */\n/* global require */\n\n(function() {\n\n    var m = require(\"./m\");\n    var mx = require(\"./mx\");\n\n    /**\n     * @constructor\n     * @param plot\n     */\n\n    var Layer1D = function(plot) {\n        this.plot = plot;\n\n        this.xbuf = undefined; // raw (ArrayBuffer) of ABSC data\n        this.ybuf = undefined; // raw (ArrayBuffer) of ORD data\n\n        this.offset = 0.0;\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n        this.imin = 0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.name = \"\";\n        this.cx = false;\n        this.hcb = undefined; // index in Gx.HCB\n        // xbufn = xbuf.byteLength\n        // ybufn = ybuf.byteLength\n        this.size = 0;\n\n        this.display = true;\n        this.color = 0;\n        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting\n        this.thick = 1; // negative for dashed\n        this.symbol = 0;\n        this.radius = 3;\n\n        this.skip = 0; // number of elements between ord values\n        this.xsub = 0;\n        this.ysub = 0;\n        this.xdata = false; // true if X data is data from file\n        this.modified = false;\n        this.opacity = 1.0;\n        this.fillStyle = null;\n        this.preferred_origin = 1;\n\n        this.pointbufsize = 0;\n        this.xptr = null;\n        this.yptr = null;\n        this.xpoint = null; // PointArray backed by memory in xptr\n        this.ypoint = null; // PointArray backed by memory in yptr\n\n        this.options = {};\n    };\n\n    Layer1D.prototype = {\n\n        /**\n         * Initializes the layer to display the provided data.\n         *\n         * @param hcb\n         *            {BlueHeader} an opened BlueHeader file\n         * @param lyrn\n         *          the index of the added layer\n         *\n         * @memberOf Layer1D\n         * @private\n         */\n        init: function(hcb, options) {\n            var Gx = this.plot._Gx;\n\n            this.hcb = hcb;\n            this.hcb.buf_type = \"D\";\n\n            this.offset = 0;\n            this.size = 0;\n            this.xbufn = 0;\n            this.ybufn = 0;\n\n            if (!this.hcb.pipe) {\n                if (hcb[\"class\"] === 2) {\n                    m.force1000(hcb);\n                    this.size = hcb.subsize;\n                } else {\n                    this.size = hcb.size;\n                }\n            } else {\n                if (hcb[\"class\"] === 2) {\n                    m.force1000(hcb);\n                    this.size = hcb.subsize;\n                }\n            }\n\n            if (options.framesize) {\n                this.size = options.framesize;\n            }\n\n            // pipe data requires a valid size on overlay, but\n            // other data can work without a valid size because\n            // the reload() function will correctly update the size\n            if (this.hcb.pipe && !this.size) {\n                throw \"1D layer could not determine appropriate size for pipe, use framesize option\";\n            }\n\n            if (hcb[\"class\"] <= 2) {\n                this.xsub = -1;\n                this.ysub = 1;\n                this.cx = (hcb.format[0] === 'C');\n            } else {\n                // TODO\n            }\n\n            this.skip = 1;\n            if (this.cx) {\n                this.skip = 2;\n            }\n\n            this.xstart = hcb.xstart;\n            this.xdelta = hcb.xdelta;\n            var d = hcb.xstart + hcb.xdelta * (this.size - 1.0);\n            this.xmin = Math.min(hcb.xstart, d);\n            this.xmax = Math.max(hcb.xstart, d);\n\n            this.xlab = hcb.xunits;\n            this.ylab = hcb.yunits; // might be undefined\n\n            if (this.hcb.pipe) {\n                this.drawmode = \"scrolling\";\n                this.position = 0;\n                this.tle = options.tl;\n\n                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                this.ybuf = new ArrayBuffer(this.ybufn);\n\n                var self = this;\n                m.addPipeWriteListener(this.hcb, function() {\n                    self._onpipewrite();\n                });\n            }\n        },\n\n        _onpipewrite: function() {\n            var ybuf = new m.PointArray(this.ybuf);\n\n            var tle = this.tle; // in scalars\n            if (tle === undefined) {\n                // if the transfer length wasn't set then we read\n                // all the elements that are available\n                tle = Math.floor(m.pavail(this.hcb)) / this.hcb.spa;\n            }\n\n            // Calculate transfer length in scalars\n            var tl = tle * this.hcb.spa;\n            while (m.pavail(this.hcb) >= tl) {\n\n                if (this.drawmode === \"lefttoright\") {\n                    this.position = 0;\n                    ybuf.set(ybuf.subarray(0, this.size - tl), tl);\n                } else if (this.drawmode === \"righttoleft\") {\n                    this.position = this.size - tle;\n                    ybuf.set(ybuf.subarray(tl), 0);\n                } else if (this.drawmode === \"scrolling\") {\n                    // Nothing to do\n                } else {\n                    throw \"Invalid draw mode\";\n                }\n\n                // transfer length is adjusted to the remaining size \n                // before wrapping\n                var ngot = m.grabx(\n                    this.hcb, ybuf,\n                    Math.min(tle, this.size - this.position) * this.hcb.spa,\n                    this.position * this.hcb.spa\n                );\n                if (ngot === 0) {\n                    break;\n                }\n\n                // update the position\n                this.position = (this.position + tle) % this.size;\n\n                if (this.tle === undefined) {\n                    tle = Math.floor(m.pavail(this.hcb)) / this.hcb.spa;\n                }\n                tl = tle * this.hcb.spa;\n            }\n\n            if (this.plot._Gx.autol !== 0) {\n                this.plot.rescale();\n            }\n        },\n\n        get_data: function(xmin, xmax) {\n            var Gx = this.plot._Gx;\n            var HCB = this.hcb;\n\n            var skip = this.skip;\n\n            var size;\n            if (HCB[\"class\"] === 2) {\n                size = HCB.subsize;\n            } else {\n                size = HCB.size;\n            }\n\n            var imin = 0;\n            var imax = 0;\n            if (Gx.index) {\n                imin = Math.floor(xmin);\n                imax = Math.floor(xmax + 0.5);\n            } else if (HCB.xdelta >= 0.0) {\n                imin = Math.floor((xmin - HCB.xstart) / HCB.xdelta) - 1;\n                imax = Math.floor((xmax - HCB.xstart) / HCB.xdelta + 0.5);\n            } else {\n\n                imin = Math.floor((xmax - HCB.xstart) / HCB.xdelta) - 1;\n                imax = Math.floor((xmin - HCB.xstart) / HCB.xdelta + 0.5);\n            }\n            imin = Math.max(0.0, imin);\n            imax = Math.min(size, imax);\n\n            var npts = Math.max(0.0, Math.min(imax - imin + 1, Gx.bufmax));\n            if (HCB.xdelta < 0) {\n                imin = imax - npts + 1;\n            }\n\n            if ((imin >= this.imin) && (imin + npts <= this.imin + this.size) && (this.ybuf !== undefined)) {\n                // data already in buffers\n            } else if (this.modified) {\n                // modified data not yet saved off\n\n            } else if (HCB[\"class\"] <= 2) {\n                // load new data\n                var start = this.offset + imin;\n                var skip = this.skip;\n                this.ybufn = npts * Math.max(skip * m.PointArray.BYTES_PER_ELEMENT,\n                    m.PointArray.BYTES_PER_ELEMENT);\n                if ((this.ybuf === undefined) || (this.ybuf.byteLength < this.ybufn)) {\n                    this.ybuf = new ArrayBuffer(this.ybufn);\n                }\n                var ybuf = new m.PointArray(this.ybuf);\n                var ngot = m.grab(HCB, ybuf, start, npts);\n                this.imin = imin;\n                this.xstart = HCB.xstart + (imin) * this.xdelta;\n                this.size = ngot;\n            } else {\n                // type 3000, 4000, 5000\n                // TODO yeah right\n            }\n\n        },\n\n        change_settings: function(settings) {\n            if (settings.index !== undefined) {\n                if (settings.index) {\n                    this.xstart = 1.0;\n                    this.xdelta = 1.0;\n                    this.xmin = 1.0;\n                    this.xmax = this.size;\n                } else {\n                    this.xstart = this.hcb.xstart + (this.imin) * this.xdelta;\n                    this.xdelta = this.hcb.xdelta;\n                    var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);\n                    this.xmin = Math.min(this.hcb.xstart, d);\n                    this.xmax = Math.max(this.hcb.xstart, d);\n                }\n            }\n\n            if (settings.drawmode !== undefined) {\n                this.drawmode = settings.drawmode;\n                // Reset the buffer\n                this.position = 0;\n                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                this.ybuf = new ArrayBuffer(this.ybufn);\n            }\n\n            if (settings.framesize !== undefined) {\n                this.size = settings.framesize;\n                this.xstart = this.hcb.xstart + (this.imin) * this.xdelta;\n                this.xdelta = this.hcb.xdelta;\n                var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);\n                this.xmin = Math.min(this.hcb.xstart, d);\n                this.xmax = Math.max(this.hcb.xstart, d);\n                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                this.ybuf = new ArrayBuffer(this.ybufn);\n            }\n        },\n\n        reload: function(data, hdrmod) {\n            if (this.hcb.pipe) {\n                throw \"reload cannot be used with pipe, use push instead\";\n            }\n            var axis_change = (this.hcb.dview.length !== data.length) || hdrmod;\n            if (hdrmod) {\n                for (var k in hdrmod) {\n                    this.hcb[k] = hdrmod[k];\n                    if (k === \"xstart\" || k === \"xdelta\") {\n                        axis_change = true;\n                    }\n                }\n            }\n            this.hcb.setData(data);\n\n            // Setting these causes refresh() to refetch\n            this.imin = 0;\n            this.xstart = undefined;\n            this.size = 0;\n\n            var xmin = this.xmin;\n            var xmax = this.xmax;\n\n            if (axis_change) {\n                if (this.hcb[\"class\"] === 2) {\n                    m.force1000(this.hcb);\n                }\n                var d = this.hcb.xstart + this.hcb.xdelta * (this.hcb.size - 1.0);\n                this.xmin = Math.min(this.hcb.xstart, d);\n                this.xmax = Math.max(this.hcb.xstart, d);\n                this.xdelta = this.hcb.xdelta;\n                this.xstart = this.hcb.xstart;\n                xmin = undefined;\n                xmax = undefined;\n            }\n\n            return {\n                xmin: xmin,\n                xmax: xmax\n            };\n        },\n\n        push: function(data, hdrmod, sync) {\n            if (hdrmod) {\n                for (var k in hdrmod) {\n                    this.hcb[k] = hdrmod[k];\n                    if (k === \"type\") {\n                        this.hcb[\"class\"] = hdrmod[k] / 1000;\n                    }\n                }\n\n                if (hdrmod.subsize) {\n                    if (this.hcb[\"class\"] === 2) {\n                        m.force1000(this.hcb);\n                        this.size = this.hcb.subsize;\n                        // Reset the buffer\n                        this.position = null;\n                        this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                        this.ybuf = new ArrayBuffer(this.ybufn);\n                    }\n                }\n\n                var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);\n                this.xmin = this.hcb.xmin || Math.min(this.hcb.xstart, d);\n                this.xmax = this.hcb.xmax || Math.max(this.hcb.xstart, d);\n                this.xdelta = this.hcb.xdelta;\n                this.xstart = this.hcb.xstart;\n            }\n\n            if (data.length > 0) {\n                m.filad(this.hcb, data, sync);\n            }\n\n            return hdrmod ? true : false;\n\n        },\n\n        prep: function(xmin, xmax) {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            var npts = Math.ceil(this.size);\n\n            var skip = this.skip;\n\n            if (npts === 0) {\n                return {\n                    num: 0,\n                    start: 0,\n                    end: 0\n                };\n            }\n\n            if (npts * m.PointArray.BYTES_PER_ELEMENT > this.pointbufsize) {\n                this.pointbufsize = npts * m.PointArray.BYTES_PER_ELEMENT;\n                this.xptr = new ArrayBuffer(this.pointbufsize);\n                this.yptr = new ArrayBuffer(this.pointbufsize);\n                this.xpoint = new m.PointArray(this.xptr);\n                this.ypoint = new m.PointArray(this.yptr);\n            }\n\n            var dbuf = new m.PointArray(this.ybuf);\n            var qmin = this.xmin;\n            var qmax = this.xmax;\n            var n1, n2;\n            var mxmn;\n            // xsub isn't really used yet, so it can largely be ignored\n            if ((Gx.cmode === 5) || (this.xsub > 0)) {\n                if (npts <= 0) {\n                    // This is a degenerate case when there are no points\n                    qmin = Gx.panxmin;\n                    qmax = Gx.panxmax;\n                } else if (Gx.cmode !== 5) {\n                    // Largely unused code since xsub isn't used\n                    this.xpoint = new m.PointArray(this.xbuf);\n                } else if (this.cx) {\n                    // This is the pre-dominate condition\n                    m.vmov(dbuf, skip, this.xpoint, 1, npts);\n                } else if (this.line !== 0) {\n                    // If we have been asked to plot Real vs. Imaginary\n                    // for real data and there is a line being drawn\n                    // we take the min x and max x and then plot it\n                    // later on against the first two ypoints...it's\n                    // not clear if this is correct or not, but since\n                    // it's a degenerate case it is tolerated\n                    mxmn = m.vmxmn(dbuf, npts);\n                    this.xpoint[0] = mxmn.smax;\n                    this.xpoint[1] = mxmn.smin;\n                    n1 = 0;\n                    n2 = 2;\n                    npts = 2;\n                } else {\n                    // Otherwise we just plot the y-values\n                    this.xpoint = dbuf;\n                }\n                if (npts > 0) {\n                    mxmn = m.vmxmn(this.xpoint, npts);\n                    qmax = mxmn.smax;\n                    qmin = mxmn.smin;\n                    n1 = 0;\n                    n2 = npts;\n                }\n            } else if (npts > 0) {\n                var xstart = this.xstart;\n                var xdelta = this.xdelta;\n                var d = npts;\n                if (Gx.index) {\n                    n1 = 0;\n                    n2 = npts - 1;\n                } else if (xdelta >= 0.0) {\n                    n1 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta))) - 1.0;\n                    n2 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) + 2.0)) - 1.0;\n                } else {\n                    n1 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) - 1.0)) - 1.0;\n                    n2 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta) + 2.0)) - 1.0;\n                }\n\n                npts = n2 - n1 + 1;\n                if (npts < 0) {\n                    m.log.debug(\"Nothing to plot\");\n                    npts = 0;\n                }\n                dbuf = new m.PointArray(this.ybuf).subarray(n1 * skip);\n                xstart = xstart + xdelta * (n1);\n                for (var i = 0; i < npts; i++) {\n                    if (Gx.index) {\n                        this.xpoint[i] = this.imin + i + 1;\n                    } else {\n                        this.xpoint[i] = xstart + i * xdelta;\n                    }\n                }\n            }\n\n            if (Gx.panxmin > Gx.panxmax) {\n                Gx.panxmin = qmin;\n                Gx.panxmax = qmax;\n            } else {\n                Gx.panxmin = Math.min(Gx.panxmin, qmin);\n                Gx.panxmax = Math.max(Gx.panxmax, qmax);\n            }\n\n            if (npts <= 0) {\n                m.log.debug(\"Nothing to plot\");\n                return {\n                    num: npts,\n                    start: n1,\n                    end: n2\n                };\n            }\n            if (this.cx) {\n                if (Gx.cmode === 1) {\n                    m.cvmag(dbuf, this.ypoint, npts);\n                } else if (Gx.cmode === 2) {\n                    if (Gx.plab === 25) {\n                        m.cvpha(dbuf, this.ypoint, npts);\n                        m.vsmul(this.ypoint, 1.0 / (2 * Math.PI), this.ypoint, npts);\n                    } else if (Gx.plab !== 24) {\n                        m.cvpha(dbuf, this.ypoint, npts);\n                    } else {\n                        m.cvphad(dbuf, this.ypoint, npts);\n                    }\n                } else if (Gx.cmode === 3) {\n                    m.vmov(dbuf, skip, this.ypoint, 1, npts);\n                } else if (Gx.cmode >= 6) {\n                    m.cvmag2(dbuf, this.ypoint, npts);\n                } else if (Gx.cmode >= 4) {\n                    m.vmov(dbuf.subarray(1), skip, this.ypoint, 1, npts);\n                }\n            } else {\n                if (Gx.cmode === 5) { // I vs. R\n                    m.vfill(this.ypoint, 0, npts);\n                } else if ((Gx.cmode === 1) || (Gx.cmode >= 6)) { // Mag, log\n                    for (var i = 0; i < npts; i++) {\n                        this.ypoint[i] = Math.abs(dbuf[i]);\n                    }\n                } else {\n                    for (var i = 0; i < npts; i++) {\n                        this.ypoint[i] = dbuf[i];\n                    }\n                }\n            }\n\n            if (Gx.cmode >= 6) {\n                m.vlog10(this.ypoint, Gx.dbmin, this.ypoint);\n                var dbscale = 10.0;\n                if (Gx.cmode === 7) {\n                    dbscale = 20.0;\n                }\n                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                    dbscale = dbscale / 2.0;\n                }\n                m.vsmul(this.ypoint, dbscale, this.ypoint);\n            }\n            mxmn = m.vmxmn(this.ypoint, npts);\n\n            qmax = mxmn.smax;\n            qmin = mxmn.smin;\n\n            var yran = qmax - qmin;\n            if (yran < 0.0) {\n                qmax = qmin;\n                qmin = qmax + yran;\n                yran = -yran;\n            }\n            if (yran <= 1.0e-20) {\n                qmin = qmin - 1.0;\n                qmax = qmax + 1.0;\n            } else {\n                qmin = qmin - 0.02 * yran;\n                qmax = qmax + 0.02 * yran;\n            }\n\n            if (Mx.level === 0) {\n                if (Gx.panymin > Gx.panymax) {\n                    Gx.panymin = qmin;\n                    Gx.panymax = qmax;\n                } else {\n                    Gx.panymin = Math.min(Gx.panymin, qmin);\n                    Gx.panymax = Math.max(Gx.panymax, qmax);\n                }\n\n                if (Gx.autol > 1) {\n                    var fac = 1.0 / (Math.max(Gx.autol, 1));\n                    Gx.panymin = Gx.panymin * fac + Mx.stk[0].ymin * (1.0 - fac);\n                    Gx.panymax = Gx.panymax * fac + Mx.stk[0].ymax * (1.0 - fac);\n                }\n            }\n\n            return {\n                num: npts,\n                start: n1,\n                end: n2\n            };\n        },\n\n        draw: function() {\n            var Mx = this.plot._Mx;\n            var Gx = this.plot._Gx;\n\n            var ic = this.color;\n            var symbol = this.symbol;\n            var rad = this.radius;\n            var mask = 0;\n            var line = 0;\n            var traceoptions = {};\n\n            if (this.fillStyle) {\n                traceoptions.fillStyle = this.fillStyle;\n            } else if (Gx.fillStyle) {\n                traceoptions.fillStyle = Gx.fillStyle;\n            }\n            if (this.options) {\n                traceoptions.highlight = this.options.highlight;\n                traceoptions.noclip = this.options.noclip;\n            }\n\n            if (this.line === 0) {\n                line = 0;\n            } else {\n                line = 1;\n                if (this.thick > 0) {\n                    line = this.thick;\n                } else if (this.thick < 0) {\n                    line = Math.abs(this.thick);\n                    traceoptions.dashed = true;\n                }\n                if (this.line === 1) {\n                    traceoptions.vertsym = true;\n                }\n                if (this.line === 2) {\n                    traceoptions.horzsym = true;\n                }\n                if (this.line === 4) {\n                    traceoptions.horzsym = true;\n                    traceoptions.vertsym = true;\n                }\n            }\n\n            var segment = (Gx.segment) && (Gx.cmode !== 5) && (this.xsub > 0) && (mask === 0);\n            var xdelta = this.xdelta;\n\n            var xmin;\n            var xmax;\n            if (this.xdata) {\n                xmin = this.xmin;\n                xmax = this.xmax;\n            } else {\n                xmin = Math.max(this.xmin, Mx.stk[Mx.level].xmin);\n                xmax = Math.min(this.xmax, Mx.stk[Mx.level].xmax);\n                if (xmin >= xmax) { // no data but do scaling\n                    Gx.panxmin = Math.min(Gx.panxmin, this.xmin);\n                    Gx.panxmax = Math.max(Gx.panxmax, this.xmax);\n                }\n            }\n\n            if (!Gx.all) {\n                var xran = (Gx.bufmax - 1.0) * xdelta;\n                if (xran >= -0.0) {\n                    xmax = Math.min(xmax, xmin + xran);\n                } else {\n                    xmin = Math.max(xmin, xmax + xran);\n                }\n            }\n\n            if ((line === 0) && (symbol === 0)) {\n                // Nothing to draw\n                return;\n            }\n            while (xmin < xmax) {\n                //if (Gx.all) {\n                // TODO allow interrupt of all by mouse clicks\n                //}\n\n                if (!this.hcb.pipe) {\n                    // get_data fills in the layer xbuf/ybuf with data\n                    this.get_data(xmin, xmax);\n                }\n\n                // sigplot_prep fills in this.xptr and this.yptr (both m.PointArray)\n                // with the data to be plotted\n\n                var pts = this.prep(xmin, xmax);\n                if (pts.num > 0) {\n                    if (segment) {\n                        // TODO\n                    } else {\n                        mx.trace(Mx,\n                            ic,\n                            new m.PointArray(this.xptr),\n                            new m.PointArray(this.yptr),\n                            pts.num,\n                            pts.start,\n                            1,\n                            line,\n                            symbol,\n                            rad,\n                            traceoptions);\n                    }\n                }\n\n                if (Gx.all) {\n                    if (this.size === 0) {\n                        xmin = xmax;\n                    } else {\n                        if (Gx.index) {\n                            xmin = xmin + pts.num;\n                        } else {\n                            if (xdelta >= 0) {\n                                xmin = xmin + (this.size * xdelta);\n                            } else {\n                                xmax = xmax + (this.size * xdelta);\n                            }\n                        }\n                    }\n                } else {\n                    xmin = xmax;\n                }\n            }\n\n            if ((this.position) && (this.drawmode === \"scrolling\")) {\n                var pnt = mx.real_to_pixel(Mx, this.position * this.xdelta, 0);\n                if ((pnt.x > Mx.l) && (pnt.x < Mx.r)) {\n                    mx.draw_line(Mx, \"white\", pnt.x, Mx.t, pnt.x, Mx.b);\n                }\n            }\n        },\n\n        /**\n         * Add a highlight to a specific layer.\n         *\n         * @param {Number}\n         *            n the layer to add the highlight to\n         * @param highlight\n         *            the highlight to add\n         * @param {Number}\n         *            highlight.xstart x value to start the highlight\n         *            at\n         * @param {Number}\n         *            highlight.xend the maximum x value to end the highlight\n         *            at\n         * @param {String}\n         *            hightlight.color the color to use for the highlight\n         *\n         * @param {String}\n         *            hightlight.id the id for the highlight\n         */\n        add_highlight: function(highlight) {\n            if (!this.options.highlight) {\n                this.options.highlight = [];\n            }\n            // Check for nans\n\n            var xmin = highlight.xstart;\n            var xmax = highlight.xend;\n            var min_nan = isNaN(xmin);\n            var max_nan = isNaN(xmax);\n\n            if ((min_nan === true) || (xmin === null) || (xmin === undefined)) {\n\n                this.options.highlight = [];\n            }\n            if ((max_nan === true) || (xmax === null) || (xmax === undefined)) {\n\n                this.options.highlight = [];\n            }\n\n            if (highlight instanceof Array) {\n                this.options.highlight.push.apply(\n                    this.options.highlight, highlight);\n            } else {\n                this.options.highlight.push(highlight);\n            }\n            this.plot.refresh();\n        },\n\n        /**\n         * Remove a highlight from the layer.\n         *\n         * @param {String} {Object}\n         *             the id of the highlight to remove\n         *             or the highlight object itself\n         */\n        remove_highlight: function(highlight) {\n            if (this.options.highlight) {\n                var i = this.options.highlight.length;\n                while (i--) {\n                    if ((highlight === this.options.highlight[i]) || (highlight === this.options.highlight[i].id)) {\n                        this.options.highlight.splice(i, 1);\n                    }\n                }\n                this.plot.refresh();\n            }\n        },\n\n        get_highlights: function() {\n            if (this.options.highlight) {\n                return this.options.highlight.slice(0);\n            } else {\n                return [];\n            }\n        },\n\n        /**\n         * Clear all highlights from the layer.\n         */\n        clear_highlights: function() {\n            if (this.options.highlight) {\n                this.options.highlight = undefined;\n                this.plot.refresh();\n            }\n        }\n    };\n\n    /**\n     * Color positions for the various layers\n     *\n     * These magic numbers were conjured up by a wizard somewhere.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var mixc = [0, 53, 27, 80, 13, 40, 67, 93, 7, 60, 33, 87, 20, 47, 73, 100];\n\n    /**\n     * Factory to overlay the given file onto the given plot.\n     *\n     * @private\n     */\n    Layer1D.overlay = function(plot, hcb, layerOptions) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (hcb[\"class\"] === 2) {\n            m.force1000(hcb);\n        }\n        hcb.buf_type = \"D\";\n\n        // If the input is type 2000, each row becomes\n        // it's own layer\n        var n1 = 0;\n        var n2 = 1;\n        if ((hcb[\"class\"] === 2) && (hcb.size > 0)) {\n            var num_rows = hcb.size / hcb.subsize;\n            n2 = Math.min(num_rows, 16 - Gx.lyr.length);\n        }\n\n        // Extract the layer_name before enter the loop\n        var layer_name_override = layerOptions[\"name\"];\n        delete layerOptions[\"name\"];\n\n        var layers = [];\n        for (var i = n1; i < n2; i++) {\n            // This is logic from within sigplot.for LOAD_FILES\n            var layer = new Layer1D(plot);\n            layer.init(hcb, layerOptions);\n\n            // Provide a default color for the layer\n            var n = (Gx.lyr.length) % mixc.length;\n            layer.color = mx.getcolor(Mx, m.Mc.colormap[3].colors, mixc[n]);\n\n            // Provide the layer name\n            if (hcb[\"class\"] === 2) {\n                if (layer_name_override !== undefined) {\n                    // If you get an array of names, pull the name\n                    // from this list...if we run out of names before\n                    // we run out of layers fall back\n                    if (Array.isArray(layer_name_override)) {\n                        layer.name = layer_name_override[i];\n                    } else {\n                        layer.name = layer_name_override;\n                        layer.name = layer.name + \".\" + mx.pad((i + 1).toString(), 3, \"0\");\n                    }\n                }\n                // If a name hasn't been assigned yet\n                if (!layer.name) {\n                    if (hcb.file_name) {\n                        layer.name = m.trim_name(hcb.file_name);\n                    } else {\n                        layer.name = \"layer_\" + Gx.lyr.length;\n                    }\n                    layer.name = layer.name + \".\" + mx.pad((i + 1).toString(), 3, \"0\");\n                }\n                layer.offset = i * hcb.subsize;\n            } else {\n                if (layer_name_override !== undefined) {\n                    layer.name = layer_name_override;\n                } else if (hcb.file_name) {\n                    layer.name = m.trim_name(hcb.file_name);\n                } else {\n                    layer.name = \"layer_\" + Gx.lyr.length;\n                }\n                layer.offset = 0;\n            }\n\n            for (var layerOption in layerOptions) {\n                if (layer[layerOption] !== undefined) {\n                    layer[layerOption] = layerOptions[layerOption];\n                }\n            }\n            if (plot.add_layer(layer)) {\n                layers.push(layer);\n            }\n        }\n\n        return layers;\n    };\n\n    module.exports = Layer1D;\n\n}());\n","/**\n * @license\n * File: sigplot.layer2d.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License\n */\n\n/* global module */\n/* global require */\n\n(function() {\n\n    var m = require(\"./m\");\n    var mx = require(\"./mx\");\n\n    /**\n     * @constructor\n     * @param plot\n     */\n    var Layer2D = function(plot) {\n        this.plot = plot;\n\n        this.offset = 0.0;\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n        this.ystart = 0.0;\n        this.ydelta = 0.0;\n        this.imin = 0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.name = \"\";\n        this.cx = false;\n        this.hcb = undefined; // index in Gx.HCB\n\n        this.display = true;\n        this.color = 0;\n        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting\n        this.thick = 1; // negative for dashed\n        this.symbol = 0;\n        this.radius = 3;\n\n        this.skip = 0; // number of elements between ord values\n        this.xsub = 0;\n        this.ysub = 0;\n        this.xdata = false; // true if X data is data from file\n        this.modified = false;\n\n        this.preferred_origin = 4;\n        this.opacity = 1;\n        this.xcompression = plot._Gx.xcompression; // default is Gx.xcompression\n\n        // LPB is kinda odd right now, since we read the entire file into memory anyways...\n        // given that often we are loading from an HREF so there is no downside to this...\n        // however, we keep LPB around (for now) so that the scaling behaves identical to\n        // the original code\n        this.lpb = undefined;\n\n        this.yc = 1; // y-compression factor...not yet used\n\n        this.options = {};\n    };\n\n    Layer2D.prototype = {\n\n        /**\n         * Initializes the layer to display the provided data.\n         *\n         * @param hcb\n         *            {BlueHeader} an opened BlueHeader file\n         * @param lyrn\n         *          the index of the added layer\n         *\n         * @memberOf Layer2D\n         * @private\n         */\n        init: function(hcb) {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            this.hcb = hcb;\n            this.hcb.buf_type = \"D\";\n\n            if (this.hcb.pipe) {\n                var self = this;\n                this.position = 0;\n                this.frame = 0;\n\n\n                this.lps = this.hcb.lps || Math.ceil(Math.max(1, (Mx.b - Mx.t)));\n                m.addPipeWriteListener(this.hcb, function() {\n                    self._onpipewrite();\n                });\n            } else {\n                this.lps = this.hcb.lps || Math.ceil(hcb.size);\n            }\n\n            this.offset = 0;\n            this.xbufn = 0;\n            this.ybufn = 0;\n            this.drawmode = \"scrolling\"; // \"falling\", \"rising\"\n\n\n            if (hcb[\"class\"] <= 2) {\n                this.xsub = -1;\n                this.ysub = 1;\n                this.cx = (hcb.format[0] === 'C');\n            } else {\n                // TODO\n            }\n\n            this.skip = 1;\n            if (this.cx) {\n                this.skip = 2;\n            }\n\n            if (Gx.index) {\n                this.xstart = 1.0;\n                this.xdelta = 1.0;\n                this.xmin = 1.0;\n                this.xmax = hcb.subsize;\n                this.ystart = 1.0;\n                this.ydelta = 1.0;\n                this.ymin = 1.0;\n                this.ymax = this.size;\n            } else {\n                this.xstart = hcb.xstart;\n                this.xdelta = hcb.xdelta;\n                var d = hcb.xstart + (hcb.xdelta * hcb.subsize);\n                this.xmin = this.hcb.xmin || Math.min(hcb.xstart, d);\n                this.xmax = this.hcb.xmax || Math.max(hcb.xstart, d);\n                this.ystart = hcb.ystart;\n                this.ydelta = hcb.ydelta;\n                var d = hcb.ystart + (hcb.ydelta * this.lps);\n                this.ymin = this.hcb.ymin || Math.min(hcb.ystart, d);\n                this.ymax = this.hcb.ymax || Math.max(hcb.ystart, d);\n            }\n\n            // TODO make this work with force 1000 applied\n            this.xframe = this.hcb.subsize;\n            this.yframe = (this.lps * this.hcb.subsize) / this.xframe;\n\n            if (this.lpb === 0) {\n                this.lpb = this.yframe;\n            }\n            if (!this.lpb || (this.lpb <= 0)) {\n                this.lpb = 16;\n            }\n            this.lpb = Math.max(1, this.lpb / this.yc) * this.yc;\n\n            this.xlab = hcb.xunits;\n            this.ylab = hcb.yunits; // might be undefined\n\n        },\n\n        _onpipewrite: function() {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            while (m.pavail(this.hcb) >= (this.hcb.subsize * this.hcb.spa)) {\n\n                // if we aren't scrolling, than update the values\n                // so that the axis scrolls with the data.  The below\n                // code might seem counter intuitive, but given the\n                // the behavior of other rendering code it is configured\n                // to have ymin always be the history (i.e prior to ystart)\n                // and ystart is always the relative \"now\" which is equivalent\n                // to ymax\n                if (this.drawmode !== \"scrolling\") {\n                    this.hcb.ystart += this.hcb.ydelta;\n                    this.ystart = this.hcb.ystart;\n                    this.ymin = this.hcb.ystart - (this.hcb.ydelta * (this.lps));\n                    this.ymax = this.hcb.ystart;\n                }\n\n                if (this.drawmode === \"falling\") {\n                    this.position = 0;\n                    if (this.img) {\n                        mx.shift_image_rows(Mx, this.img, 1);\n                    }\n                } else if (this.drawmode === \"rising\") {\n                    this.position = this.lps - 1;\n                    if (this.img) {\n                        mx.shift_image_rows(Mx, this.img, -1);\n                    }\n                } else if (this.drawmode === \"scrolling\") {\n                    var ylength = Math.abs(this.ymax - this.ymin);\n                    this.ystart = 0;\n                    this.ymin = 0;\n                    this.ymax = ylength;\n                    if (this.position >= this.lps) { // if lps got resized make sure we don't go out of bounds\n                        this.position = 0;\n                    }\n                } else {\n                    throw \"Invalid draw mode\";\n                }\n\n                if (!this.buf) {\n                    // the layer isn't setup correctly yet\n                    return;\n                }\n\n                // grab one row worth of data\n                var ngot = m.grabx(this.hcb, this.buf, this.hcb.subsize * this.hcb.spa);\n                if (ngot === 0) { // shouldn't happen because of the pavail check\n                    m.log.error(\"Internal error\");\n                    return;\n                }\n\n                var zpoint = new m.PointArray(this.hcb.subsize);\n                if (this.cx) {\n                    if (Gx.cmode === 1) {\n                        m.cvmag(this.buf, zpoint, zpoint.length);\n                    } else if (Gx.cmode === 2) {\n                        if (Gx.plab === 25) {\n                            m.cvpha(this.buf, zpoint, zpoint.length);\n                            m.vsmul(zpoint, 1.0 / (2 * Math.PI), zpoint, zpoint.length);\n                        } else if (Gx.plab !== 24) {\n                            m.cvpha(this.buf, zpoint, zpoint.length);\n                        } else {\n                            m.cvphad(this.buf, zpoint, zpoint.length);\n                        }\n                    } else if (Gx.cmode === 3) {\n                        m.vmov(this.buf, this.skip, zpoint, 1, zpoint.length);\n                    } else if (Gx.cmode === 4) {\n                        m.vmov(this.buf.subarray(1), this.skip, zpoint, 1, zpoint.length);\n                    } else if (Gx.cmode === 5) { // IR\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 10.0, zpoint);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 20.0, zpoint);\n                    }\n                } else {\n                    if (Gx.cmode === 1) { // mag\n                        m.vabs(this.buf, zpoint);\n                    } else if (Gx.cmode === 2) { // phase\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 3) { // real\n                        m.vmov(this.buf, this.skip, zpoint, 1, zpoint.length);\n                    } else if (Gx.cmode === 4) { // imag\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 5) { // IR\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.vlogscale(this.buf, Gx.dbmin, 10.0, zpoint);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.vlogscale(this.buf, Gx.dbmin, 20.0, zpoint);\n                    }\n                }\n\n                var min = zpoint[0];\n                var max = zpoint[0];\n                for (var i = 0; i < zpoint.length; i++) {\n                    if (zpoint[i] < min) {\n                        min = zpoint[i];\n                    }\n                    if (zpoint[i] > max) {\n                        max = zpoint[i];\n                    }\n                }\n\n                var zmin, zmax;\n                if (Gx.autol === 1) {\n                    zmin = min;\n                    zmax = max;\n                } else if (Gx.autol > 1) {\n                    var fac = 1.0 / (Math.max(Gx.autol, 1));\n                    zmin = Gx.zmin * fac + min * (1.0 - fac);\n                    zmax = Gx.zmax * fac + max * (1.0 - fac);\n                } else if (Gx.autol < 0) {\n                    // -1 means autol wasn't set so default to\n                    // 5 like the original XRTRASTER; however,\n                    // don't actually override Gx.autol since\n                    // other layers may behave differently\n                    var fac = 1.0 / (Math.max(5, 1));\n                    zmin = Gx.zmin * fac + min * (1.0 - fac);\n                    zmax = Gx.zmax * fac + max * (1.0 - fac);\n                }\n\n                if (((Gx.autoz & 1) !== 0)) {\n                    Gx.zmin = zmin;\n                }\n                if (((Gx.autoz & 2) !== 0)) {\n                    Gx.zmax = zmax;\n                }\n                if (Gx.p_cuts) {\n                    if (this.drawmode === \"scrolling\") {\n                        //fill in the next row of data.\n                        var start_write = this.position * this.hcb.subsize;\n                        var stop_write = start_write + this.hcb.subsize;\n                        var b = 0;\n                        for (var i = start_write; i < stop_write; i++) {\n                            this.zbuf[i] = zpoint[b];\n                            b++;\n                        }\n\n                    }\n                    if (this.drawmode === \"falling\") {\n                        //shift and fill in the next row of data.\n                        var cut_off = (this.lps - 1) * this.hcb.subsize;\n                        var tmp = this.zbuf.slice(0, cut_off);\n                        this.zbuf = [];\n                        for (var i = 0; i < this.hcb.subsize; i++) {\n                            this.zbuf.push(zpoint[i]);\n                        }\n                        this.zbuf.push.apply(this.zbuf, tmp);\n                        tmp = [];\n                    }\n                    if (this.drawmode === \"rising\") {\n                        //shift and fill in the next row of data.\n                        var cut_off = this.lps * this.hcb.subsize;\n                        var tmp = this.zbuf.slice(this.hcb.subsize, cut_off);\n                        this.zbuf = [];\n                        this.zbuf.push.apply(this.zbuf, tmp);\n                        for (var i = 0; i < this.hcb.subsize; i++) {\n                            this.zbuf.push(zpoint[i]);\n                        }\n                        tmp = [];\n                    }\n                }\n\n                if (this.img) {\n                    mx.update_image_row(Mx, this.img, zpoint, this.position, Gx.zmin, Gx.zmax, this.xcompression);\n                }\n                this.frame += 1;\n                if (this.drawmode === \"scrolling\") {\n                    this.position = (this.position + 1) % this.lps;\n                }\n\n                if (Mx.level === 0) {\n                    Gx.panymin = this.ymin;\n                    Gx.panymax = this.ymax;\n                    Mx.stk[0].ymin = this.ymin;\n                    Mx.stk[0].ymax = this.ymax;\n                }\n            }\n        },\n\n        get_data: function() {\n            var HCB = this.hcb;\n\n            if (!this.buf) {\n                if (this.hcb.pipe) {\n                    // For pipes, we allocate buf and zbuf to only hold one line of\n                    // data\n                    this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.hcb.subsize);\n                } else {\n                    // Otherwise, we allocate for the entire image\n                    this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                }\n            }\n\n            if (!this.hcb.pipe) {\n                m.grab(HCB, this.buf, 0, HCB.subsize);\n            }\n        },\n\n        /**\n         * Provisional API\n         *\n         * @private\n         * @param x\n         * @param y\n         */\n        get_z: function(x, y) {\n            var ix = Math.floor(x / this.hcb.xdelta);\n            var iy = Math.floor(y / this.hcb.ydelta);\n            var zidx = (iy * this.hcb.subsize) + ix;\n            return this.zbuf[zidx];\n        },\n\n        change_settings: function(settings) {\n            var Gx = this.plot._Gx;\n            if (settings.subsize) {\n                this.hcb.subsize = settings.subsize;\n                this.hcb.ape = settings.subsize;\n                this.hcb.size = this.hcb.dview.length / (this.hcb.spa * this.hcb.ape);\n                this.lps = Math.ceil(this.hcb.size);\n                var d = this.hcb.ystart + (this.hcb.ydelta * this.lps);\n                this.ymin = this.hcb.ymin || Math.min(this.hcb.ystart, d);\n                this.ymax = this.hcb.ymax || Math.max(this.hcb.ystart, d);\n            }\n            if (settings.cmode !== undefined) {\n                this.img = undefined;\n                if (((Gx.autoz & 1) !== 0)) {\n                    Gx.zmin = undefined;\n                }\n                if (((Gx.autoz & 2) !== 0)) {\n                    Gx.zmax = undefined;\n                }\n            }\n            if ((settings.zmin !== undefined) ||\n                (settings.zmax !== undefined) ||\n                (settings.autoz !== undefined)) {\n                this.img = undefined;\n            }\n            if (settings.cmap !== undefined) {\n                this.img = undefined;\n            }\n            if ((settings.drawmode !== undefined) || (settings.xmin !== undefined) ||\n                (settings.xmax !== undefined) || (settings.xdelta !== undefined) ||\n                (settings.xstart !== undefined)) {\n                if (settings.drawmode === undefined) {\n                    settings.drawmode = this.drawmode;\n                }\n                this.drawmode = settings.drawmode;\n                // Reset the buffer\n                this.position = 0;\n                this.frame = 0;\n                if (this.hcb.pipe) {\n                    this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.hcb.subsize);\n                } else {\n                    this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                }\n                this.img = undefined;\n\n                if (this.drawmode === \"falling\") {\n                    this.plot._Mx.origin = 1;\n                    this.preferred_origin = 1;\n                } else {\n                    this.plot._Mx.origin = 4;\n                    this.preferred_origin = 4;\n                }\n            }\n            if (settings.opacity !== undefined) {\n                this.opacity = settings.opacity;\n            }\n            if (settings.p_cuts !== undefined) {\n                var p_cuts = Gx.p_cuts;\n                if (settings.p_cuts === null) {\n                    p_cuts = !p_cuts;\n                } else {\n                    p_cuts = settings.p_cuts;\n                }\n\n                // If p_cuts are enabled from streams, we need to keep the entire zbuf in memory\n                if (this.hcb.pipe) {\n                    if (!p_cuts) {\n                        this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                    } else {\n                        this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.hcb.subsize);\n                    }\n                }\n            }\n\n            if (settings.xcmp !== undefined) {\n                if (settings.xcmp === \"smooth\") {\n                    this.xcompression = 0;\n                } else if (settings.xcmp === \"avg\") {\n                    this.xcompression = 1;\n                } else if (settings.xcmp === \"min\") {\n                    this.xcompression = 2;\n                } else if (settings.xcmp === \"max\") {\n                    this.xcompression = 3;\n                } else if (settings.xcmp === \"first\") {\n                    this.xcompression = 4;\n                } else if (settings.xcmp === \"maxabs\") {\n                    this.xcompression = 5;\n                } else {\n                    this.xcompression = settings.xcmp;\n                }\n            }\n        },\n\n        reload: function(data, hdrmod) {\n            if (this.hcb.pipe) {\n                throw \"reload cannot be used with pipe, use push instead\";\n            }\n            var axis_change = (this.hcb.dview.length !== data.length) || hdrmod;\n            if (hdrmod) {\n                for (var k in hdrmod) {\n                    this.hcb[k] = hdrmod[k];\n                    if (k === \"xstart\" || k === \"xdelta\" | k === \"ystart\" || k === \"ydelta\" || k === \"subsize\") {\n                        axis_change = true;\n                    }\n                }\n            }\n            if (Array.isArray(data) && Array.isArray(data[0])) {\n                this.hcb.type = 2000;\n                this.hcb[\"class\"] = 2;\n                this.hcb.subsize = data[0].length;\n                this.hcb.size = data.length;\n                axis_change = true;\n            }\n            this.hcb.setData(data);\n\n            // Setting these causes refresh() to refetch\n            this.init(this.hcb);\n            this.img = null;\n            this.buf = null;\n\n            var xmin = this.xmin;\n            var xmax = this.xmax;\n\n            if (axis_change) {\n                var d = this.hcb.xstart + (this.hcb.xdelta * this.hcb.subsize);\n                this.xmin = Math.min(this.hcb.xstart, d);\n                this.xmax = Math.max(this.hcb.xstart, d);\n                this.xdelta = this.hcb.xdelta;\n                this.xstart = this.hcb.xstart;\n                xmin = undefined;\n                xmax = undefined;\n            }\n\n            return {\n                xmin: xmin,\n                xmax: xmax\n            };\n        },\n\n        push: function(data, hdrmod, sync) {\n            var Gx = this.plot._Gx;\n            var rescale = false;\n            var timestamp = null;\n            if (hdrmod) {\n                // handle timestamps in a unique manner\n                if (hdrmod.timestamp) {\n                    timestamp = hdrmod.timestamp;\n                    delete hdrmod[\"timestamp\"];\n                }\n\n                // If the subsize changes, we need to invalidate the buffer\n                if ((hdrmod.subsize) && (hdrmod.subsize !== this.hcb.subsize)) {\n                    this.hcb.subsize = hdrmod.subsize;\n                    if (this.hcb.pipe && !Gx.p_cuts) {\n                        this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.hcb.subsize);\n\n                    } else {\n                        this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                    }\n                    rescale = true;\n                }\n\n                for (var k in hdrmod) {\n                    if (this.hcb[k] !== hdrmod[k]) {\n                        this.hcb[k] = hdrmod[k];\n                        if (k === \"type\") {\n                            this.hcb[\"class\"] = hdrmod[k] / 1000;\n                        }\n                        rescale = true;\n                    }\n                }\n\n                if (hdrmod.lps) {\n                    this.lps = hdrmod.lps;\n                }\n\n                if (rescale) {\n                    var d = this.hcb.xstart + (this.hcb.xdelta * this.hcb.subsize);\n                    this.xmin = Math.min(this.hcb.xstart, d);\n                    this.xmax = Math.max(this.hcb.xstart, d);\n                    this.xdelta = this.hcb.xdelta;\n                    this.xstart = this.hcb.xstart;\n\n                    this.ystart = this.hcb.ystart;\n                    this.ydelta = this.hcb.ydelta;\n                    var d = this.hcb.ystart + (this.hcb.ydelta * this.lps);\n                    this.ymin = Math.min(this.hcb.ystart, d);\n                    this.ymax = Math.max(this.hcb.ystart, d);\n                }\n\n            }\n\n            if ((this.hcb.yunits === 1) || (this.hcb.yunits === 4)) {\n                if ((!this.hcb[\"timecode\"]) && (timestamp)) {\n                    // if we don't have a timecode set, we can use\n                    // the timestamp and reset ystart\n                    this.hcb.timecode = m.j1970toj1950(timestamp);\n                    this.hcb.ystart = 0;\n                    rescale = true;\n                } else {\n                    // otherwise, we need to look at timecode, ystart,\n                    // and ydelta to see if the timestamp indicates\n                    // any data drops...and then zero-fill accordingly\n                    // TODO\n                }\n            }\n\n            if (data.length > 0) {\n                m.filad(this.hcb, data, sync);\n            }\n\n            return rescale;\n\n        },\n\n        prep: function(xmin, xmax) {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            var npts = this.lps;\n\n            var skip = this.skip;\n\n            var qmin = this.xmin;\n            var qmax = this.xmax;\n            var n1, n2;\n\n            var xsize = this.hcb.subsize;\n            if (this.xcompression > 0) {\n                xsize = Math.ceil(Mx.r - Mx.l);\n            }\n\n            this.get_data(xmin, xmax);\n\n            if (!this.hcb.pipe) {\n                // if we aren't a pipe we do a full prep\n\n                if ((Gx.cmode === 5) || (this.xsub > 0)) {\n                    // TODO - is this mode supported in rasters?\n                } else if (npts > 0) {\n                    var xstart = this.xstart;\n                    var xdelta = this.xdelta;\n                    var d = npts;\n                    if (Gx.index) {\n                        n1 = 0;\n                        n2 = npts - 1;\n                    } else if (xdelta >= 0.0) {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta))) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) + 2.0)) - 1.0;\n                    } else {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) - 1.0)) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta) + 2.0)) - 1.0;\n                    }\n\n                    npts = n2 - n1 + 1;\n                    if (npts < 0) {\n                        m.log.debug(\"Nothing to plot\");\n                        npts = 0;\n                    }\n                }\n\n                if (Gx.panxmin > Gx.panxmax) {\n                    Gx.panxmin = qmin;\n                    Gx.panxmax = qmax;\n                } else {\n                    Gx.panxmin = Math.min(Gx.panxmin, qmin);\n                    Gx.panxmax = Math.max(Gx.panxmax, qmax);\n                }\n\n                if (npts <= 0) {\n                    m.log.debug(\"Nothing to plot\");\n                    return;\n                }\n\n                if ((Gx.cmode === 5) || (this.ysub > 0)) {\n                    // TODO - is this mode supported in rasters?\n                } else if (npts > 0) {\n                    var ystart = this.ystart;\n                    var ydelta = this.ydelta;\n                    var d = npts;\n                    if (Gx.index) {\n                        n1 = 0;\n                        n2 = npts - 1;\n                    } else if (ydelta >= 0.0) {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmin - ystart) / ydelta))) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmax - ystart) / ydelta) + 2.0)) - 1.0;\n                    } else {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmax - ystart) / ydelta) - 1.0)) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmin - ystart) / ydelta) + 2.0)) - 1.0;\n                    }\n\n                    npts = n2 - n1 + 1;\n                    if (npts < 0) {\n                        m.log.debug(\"Nothing to plot\");\n                        npts = 0;\n                    }\n                }\n\n                if (Gx.panymin > Gx.panymax) {\n                    Gx.panymin = this.ymin;\n                    Gx.panymax = this.ymax;\n                } else {\n                    Gx.panymin = Math.min(Gx.panymin, this.ymin);\n                    Gx.panymax = Math.max(Gx.panymax, this.ymax);\n                }\n\n                if (this.cx) {\n                    if (Gx.cmode === 1) { // mag\n                        m.cvmag(this.buf, this.zbuf, this.zbuf.length);\n                    } else if (Gx.cmode === 2) { // phase\n                        if (Gx.plab === 25) {\n                            m.cvpha(this.buf, this.zbuf, this.zbuf.length);\n                            m.vsmul(this.zbuf, 1.0 / (2 * Math.PI), this.zbuf, this.zbuf.length);\n                        } else if (Gx.plab !== 24) {\n                            m.cvpha(this.buf, this.zbuf, this.zbuf.length);\n                        } else {\n                            m.cvphad(this.buf, this.zbuf, this.zbuf.length);\n                        }\n                    } else if (Gx.cmode === 3) { // real\n                        m.vmov(this.buf, this.skip, this.zbuf, 1, this.zbuf.length);\n                    } else if (Gx.cmode === 4) { // imag\n                        m.vmov(this.buf.subarray(1), this.skip, this.zbuf, 1, this.zbuf.length);\n                    } else if (Gx.cmode === 5) { // IR - what does this mean for a raster?\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 10.0, this.zbuf);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 20.0, this.zbuf);\n                    }\n                } else {\n                    if (Gx.cmode === 1) { // mag\n                        m.vabs(this.buf, this.zbuf);\n                    } else if (Gx.cmode === 2) { // phase\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 3) { // real\n                        m.vmov(this.buf, this.skip, this.zbuf, 1, this.zbuf.length);\n                    } else if (Gx.cmode === 4) { // imag\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 5) { // IR\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.vlogscale(this.buf, Gx.dbmin, 10.0, this.zbuf);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.vlogscale(this.buf, Gx.dbmin, 20.0, this.zbuf);\n                    }\n                }\n\n                // find z-min/z-max\n                // this is equivalent to setting XRASTER /LPB=0\n                var zpoint = this.zbuf;\n\n                var min = 0;\n                var max = 0;\n\n                if ((Gx.autol <= 0) || this.hcb.pipe) {\n                    // If autol is not used or the layer is rendering\n                    // a pipe, then use the basic z-scaling method\n                    if (zpoint.length > 0) {\n                        min = zpoint[0];\n                        max = zpoint[0];\n                        for (var i = 0; i < zpoint.length; i++) {\n                            if ((i / this.xframe) >= this.lpb) {\n                                break;\n                            }\n                            if (zpoint[i] < min) {\n                                min = zpoint[i];\n                            }\n                            if (zpoint[i] > max) {\n                                max = zpoint[i];\n                            }\n                        }\n                    }\n\n                    if (((Gx.autoz & 1) !== 0)) {\n                        if (Gx.zmin !== undefined) {\n                            Gx.zmin = Math.min(Gx.zmin, min);\n                        } else {\n                            Gx.zmin = min;\n                        }\n                    }\n                    if (((Gx.autoz & 2) !== 0)) {\n                        if (Gx.zmax !== undefined) {\n                            Gx.zmax = Math.min(Gx.zmax, max);\n                        } else {\n                            Gx.zmax = max;\n                        }\n                    }\n\n                    this.img = mx.create_image(Mx,\n                        this.zbuf,\n                        this.hcb.subsize,\n                        xsize,\n                        this.lps,\n                        Gx.zmin + Gx.zoff,\n                        Gx.zmax + Gx.zoff,\n                        this.xcompression);\n                } else {\n                    // otherwise autol > 1\n                    var nny = this.hcb.size;\n                    var fac = 1.0 / (Math.max(Gx.autol, 1));\n\n                    // If the image isn't yet created, make one now\n                    if (!this.img) {\n                        this.img = mx.create_image(Mx,\n                            this.zbuf,\n                            this.hcb.subsize,\n                            xsize,\n                            this.lps,\n                            Gx.zmin + Gx.zoff,\n                            Gx.zmax + Gx.zoff);\n                    }\n\n                    Gx.zmin = 0;\n                    Gx.zmax = 0;\n                    if (zpoint.length > 0) {\n                        for (var yy = 0; yy < nny; yy++) {\n                            var noff = yy * this.xframe;\n                            var min = zpoint[noff];\n                            var max = zpoint[noff];\n                            for (var i = 0; i < this.xframe; i++) {\n                                min = Math.min(zpoint[noff + i], min);\n                                max = Math.max(zpoint[noff + i], max);\n                            }\n\n                            // Auto-scale this raster line\n                            if ((Gx.autoz !== 2) && (min !== undefined)) {\n                                Gx.zmin = (min * fac) + (Gx.zmin * (1.0 - fac));\n                            }\n                            if ((Gx.autoz !== 1) && (max !== undefined)) {\n                                Gx.zmax = (max * fac) + (Gx.zmax * (1.0 - fac));\n                            }\n\n                            // Render the row\n                            mx.update_image_row(Mx,\n                                this.img,\n                                zpoint.subarray(noff, noff + this.xframe),\n                                yy,\n                                Gx.zmin,\n                                Gx.zmax);\n\n                        }\n                    }\n                }\n            } else {\n                // Setup image for pipe-mode\n                if (Gx.panxmin > Gx.panxmax) {\n                    Gx.panxmin = qmin;\n                    Gx.panxmax = qmax;\n                } else {\n                    Gx.panxmin = Math.min(Gx.panxmin, qmin);\n                    Gx.panxmax = Math.max(Gx.panxmax, qmax);\n                }\n                if (Gx.panymin > Gx.panxmax) {\n                    Gx.panymin = this.ymin;\n                    Gx.panymax = this.ymax;\n                } else {\n                    Gx.panymin = Math.min(Gx.panymin, this.ymin);\n                    Gx.panymax = Math.max(Gx.panymax, this.ymax);\n                }\n\n                if (!this.img) {\n                    if (Gx.zmin === undefined) {\n                        Gx.zmin = 0;\n                    }\n                    if (Gx.zmax === undefined) {\n                        Gx.zmax = 0;\n                    }\n                    this.img = mx.create_image(Mx,\n                        null,\n                        this.hcb.subsize,\n                        xsize,\n                        this.lps,\n                        Gx.zmin + Gx.zoff,\n                        Gx.zmax + Gx.zoff,\n                        this.xcompression);\n                }\n            }\n\n            this.img.cmode = Gx.cmode;\n            this.img.cmap = Gx.cmap;\n            this.img.origin = Mx.origin;\n\n            // Make the parts without data transparent\n            if (this.hcb.pipe && (this.frame < this.lps)) {\n                var imgd = new Uint32Array(this.img);\n                if (this.drawmode === \"rising\") {\n                    for (var i = 0; i < imgd.length - (this.frame * xsize); i++) {\n                        imgd[i] = 0;\n                    }\n                } else {\n                    for (var i = this.frame * xsize; i < imgd.length; i++) {\n                        imgd[i] = 0;\n                    }\n                }\n            }\n\n            return npts;\n        },\n\n        draw: function() {\n            var Mx = this.plot._Mx;\n            var Gx = this.plot._Gx;\n            var HCB = this.hcb;\n\n            if (this.hcb.pipe) {\n                var lps = this.hcb.lps || Math.ceil(Math.max(1, (Mx.b - Mx.t)));\n                if ((lps !== this.lps) && this.buf) {\n                    this.lps = lps;\n                    if (this.position >= this.lps) { // if lps got resized make sure we don't go out of bounds\n                        this.position = 0;\n                    }\n                    var d = HCB.ystart + (HCB.ydelta * this.lps);\n                    this.ymin = Math.min(HCB.ystart, d);\n                    this.ymax = Math.max(HCB.ystart, d);\n                    // reset the image since we now have more lines to render\n                    // TODO - can we preserve the image data rather than resetting?\n                    this.img = null;\n                    this.plot.rescale();\n                }\n            }\n\n            var xmin = Math.max(this.xmin, Mx.stk[Mx.level].xmin);\n            var xmax = Math.min(this.xmax, Mx.stk[Mx.level].xmax);\n            if (xmin >= xmax) { // no data but do scaling\n                Gx.panxmin = Math.min(Gx.panxmin, this.xmin);\n                Gx.panxmax = Math.max(Gx.panxmax, this.xmax);\n                return;\n            }\n            var ymin = Math.max(this.ymin, Mx.stk[Mx.level].ymin);\n            var ymax = Math.min(this.ymax, Mx.stk[Mx.level].ymax);\n\n            var w = Math.abs(xmax - xmin) + 1;\n            var h = Math.abs(ymax - ymin) + 1;\n\n            w = Math.floor(w / HCB.xdelta);\n            h = Math.floor(h / HCB.ydelta);\n\n            w = Math.min(w, HCB.subsize);\n            h = Math.min(h, HCB.size);\n\n            var ul = mx.real_to_pixel(Mx, xmin, ymin);\n            var lr = mx.real_to_pixel(Mx, xmax, ymax);\n\n            var iw = lr.x - ul.x;\n            var ih = lr.y - ul.y;\n\n            var rx = iw / w;\n            var ry = ih / h;\n\n            Gx.xe = Math.max(1, Math.round(rx));\n            Gx.ye = Math.max(1, Math.round(ry));\n\n            // we might need to prep in certian situations\n            if ((!this.img) || (!this.buf) || (Gx.cmode !== this.img.cmode) || (Gx.cmap !== this.img.cmap) || (Mx.origin !== this.img.origin)) {\n                this.prep(xmin, xmax);\n            }\n\n            // if there is an image, render it\n            if (this.img) {\n                mx.draw_image(Mx, this.img, this.xmin, this.ymin, this.xmax, this.ymax, this.opacity, Gx.rasterSmoothing);\n            }\n\n            // render the scrolling pipe line\n            if (this.position !== null && this.drawmode === \"scrolling\") {\n                var pnt = mx.real_to_pixel(Mx, 0, this.position * this.ydelta);\n                if ((pnt.y > Mx.t) && (pnt.y < Mx.b)) {\n                    mx.draw_line(Mx, \"white\", Mx.l, pnt.y, Mx.r, pnt.y);\n                }\n            }\n        }\n    };\n\n    /**\n     * Factory to overlay the given file onto the given plot.\n     *\n     * @private\n     */\n    Layer2D.overlay = function(plot, hcb, layerOptions) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        hcb.buf_type = \"D\";\n        if (!hcb.ystart) {\n            hcb.ystart = 0.0;\n        }\n        if (!hcb.ydelta) {\n            hcb.ydelta = 1.0;\n        }\n\n        var layer = new Layer2D(plot);\n        layer.init(hcb);\n\n        if (hcb.file_name) {\n            layer.name = m.trim_name(hcb.file_name);\n        } else {\n            layer.name = \"layer_\" + Gx.lyr.length;\n        }\n\n        layer.change_settings(layerOptions);\n\n        var layers = [];\n        if (plot.add_layer(layer)) {\n            layers.push(layer);\n        }\n\n        return layers;\n    };\n\n    module.exports = Layer2D;\n\n}());\n"],"sourceRoot":""}