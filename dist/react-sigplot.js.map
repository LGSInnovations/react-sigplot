{"version":3,"sources":["webpack://react-sigplot/webpack/universalModuleDefinition","webpack://react-sigplot/webpack/bootstrap","webpack://react-sigplot/./node_modules/react/index.js","webpack://react-sigplot/./node_modules/prop-types/index.js","webpack://react-sigplot/./node_modules/sigplot/js/sigplot.js","webpack://react-sigplot/./node_modules/sigplot/js/m.js","webpack://react-sigplot/./src/sigplot.js","webpack://react-sigplot/./src/layer.js","webpack://react-sigplot/./src/arraylayer.js","webpack://react-sigplot/./src/pipelayer.js","webpack://react-sigplot/./src/hreflayer.js","webpack://react-sigplot/./src/index.js","webpack://react-sigplot/./node_modules/sigplot/js/common.js","webpack://react-sigplot/./node_modules/sigplot/js/mx.js","webpack://react-sigplot/./node_modules/sigplot/js/bluefile.js","webpack://react-sigplot/./node_modules/tinycolor2/tinycolor.js","webpack://react-sigplot/./node_modules/object-assign/index.js","webpack://react-sigplot/./node_modules/react/cjs/react.production.min.js","webpack://react-sigplot/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://react-sigplot/./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://react-sigplot/./node_modules/spin/spin.js","webpack://react-sigplot/./node_modules/sigplot/js/matfile.js","webpack://react-sigplot/./node_modules/loglevel/lib/loglevel.js","webpack://react-sigplot/./node_modules/sigplot/js/ColorMap.js","webpack://react-sigplot/./node_modules/sigplot/js/CanvasInput.js","webpack://react-sigplot/./node_modules/sigplot/js/sigplot.layer1d.js","webpack://react-sigplot/./node_modules/sigplot/js/sigplot.layer2d.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Spinner","common","bluefile","matfile","mx","Layer1D","Layer2D","sigplot","element","options","this","Plot","version","KEYPRESS_HELP","SPINNER_OPTS","lines","length","width","radius","corners","rotate","color","speed","trail","shadow","hwaccel","className","zIndex","top","left","browserIsCompatible","hascanvas","document","createElement","hasarraybuf","_Mx","open","Mx","_Gx","xptr","undefined","yptr","retx","rety","xmrk","ymrk","aretx","arety","xstart","xdelta","panxmin","panxmax","panymin","panymax","xmin","xmax","xmult","ymin","ymax","ymult","zmin","zmax","zoff","dbmin","pxscl","pyscl","pmt","note","format","pl","pr","pt","pb","px1","px2","py1","py2","pyl","pthk","modlayer","modsource","modified","modmode","xdiv","ydiv","all","expand","cross","grid","gridBackground","index","pan","specs","legend","xdata","show_x_axis","show_y_axis","show_readout","hide_note","autohide_readout","autohide_panbars","panning","panmode","hold","sections","iysec","nsec","isec","xlab","xlabel","ylab","ylabel","xcompression","default_rubberbox_action","default_rubberbox_mode","wheelscroll_mode_natural","scroll_time_interval","repeatPanning","stillPanning","autol","lineSmoothing","rasterSmoothing","wheelZoom","wheelZoomPercent","inContinuousZoom","lyr","HCB","plugins","plotData","valid","lg_colorbar","cbb_top_x1","cbb_top_y1","cbb_bot_x1","cbb_bot_y1","cbb_width","cbb_height","p_cuts","x_box_x","x_box_y","x_box_h","x_box_w","y_box_x","y_box_y","y_box_h","y_box_w","p_cuts_xpos","p_cuts_ypos","x_cut_data","y_cut_data","xcut","xcut_layer","x_cut_press_on","xcut_now","ycut","ycut_layer","y_cut_press_on","ycut_now","ylabel_stash","xlabel_stash","element1","element2","xyKeys","x_pop_now","y_pop_now","old_drawmode","old_autol","parent","mouseOnCanvas","plot","Gx","unit_lookup","havexmin","havexmax","address","cmode","toUpperCase","line","haveymin","haveymax","havezmin","havezmax","colors","setbgfg","bg","fg","xi","invertbgfg","forcelab","segment","plab","phunits","xcmp","smoothing","origin","yinv","bufmax","anno_type","xfmt","yfmt","imode","slice","always_show_marker","vstype","inputs","basefile","alert","basemode","change_settings","dbscale","Math","max","log10","min","pow","level","autox","autoy","autoz","scale_base","get_data","stk","font_family","font_width","font_scaled","set_font","ncolors","cmap","xc","setup_cmap","xcnt","cntrls","rubberbox_mode","rubberbox_action","default_rightclick_rubberbox_mode","rightclick_rubberbox_mode","default_rightclick_rubberbox_action","rightclick_rubberbox_action","nogrid","fillStyle","gridStyle","no_legend_button","legendBtnLocation","nopan","nomenu","mod","nmark","iabsc","nospecs","x_scrollbar_location","noxaxis","noyaxis","noreadout","nodragdrop","addEventListener","evt","preventDefault","files","dataTransfer","load_files","plot_init","mimicListeners","other","listeners","zoom","unzoom","xpan","ypan","_refresh","onmousemove","e","rect","target","getBoundingClientRect","xpos","offsetX","pageX","scrollX","ypos","pageY","scrollY","offsetY","re","pixel_to_real","x","y","widget","display_specs","createEvent","initEvent","dispatchEvent","warpbox","cross_xpos","rubberline","b","cross_ypos","draw_crosshairs","hcb","draw_p_cuts","throttledOnMouseMove","throttle","onmouseout","event","draw_panbars","prompt","input","enableBlur","onmouseover","disableBlur","onmousedown","type","refresh","ifevent","which","inPan","inPanRegion","command","scrollbar","position","scrollbar_x","scrollbar_y","onScrollbar","removeEventListener","menu","title","finalize","items","text","handler","middleClickScrollMenuAction","SB_EXPAND","SB_SHRINK","SB_FULL","sigplot_scrollScaleMenu","repeatPan","clearInterval","setTimeout","setInterval","lButtonPressed","rect_x","rect_y","rect_width","rect_height","coordsInRectangle","height","mouse_x","mouse_y","top_x1","top_y1","coordsInTriangle","cur_cmap","get_layer","img","console","log","Mc","colormap","current_map","pos","bot_x1","bot_y1","zoom_style","opacity","return_value","select_style","fill_color","hi","rubberbox","rubberbox_cb","sigplot_mainmenu","ontouchstart","targetTouches","touchClear","touches","clearTimeout","touchEvent","bound","touch_distance","ontouchmove","k","touchStart","new_xpos","new_ypos","delta_xpos","delta_ypos","xscl","ydelta","yscl","cur_distance","scaling","xran","yran","throttledOnTouchMove","ontouchend","action","widget_callback","docMouseUp","mouseup","inCenter","inCenterRegion","th","text_h","tw","text_w","trunc","inPanCenterRegion","mtagevt","clientX","clientY","w","h","shift","shiftKey","redraw","stopPropagation","cancelBubble","emit_hidemenu","hideMenuEvt","mouseclick","mousedblclick","dragMouseDownHandler","axis","screenX","screenY","dragMouseMoveHandler","scrollAction","flag","rangeOut","range","SB_DRAG","scaleFactor","trange","mouseOffset","realOffset","drag_updateRange","smin","srange","redrawScrollbar","updateViewbox","drag_scrollbar","err","throttledDragOnMouseMove","dragMouseUpHandler","onresize","checkresize","wheelHandler","throttledPan","deltaY","SB_WHEELDOWN","SB_WHEELUP","step","page","scroll","XW_COMMAND","throttledZoom","zoomperc","percent_zoom","addWheelListener","nokeypress","onkeypress","keyCode","getKeyCode","ctrlKey","altKey","metaKey","redraw_warpbox","display","delete_layer","rescale","drawmode","sigplot_show_x","start","finish","plot_height","plot_width","lps","xframe","floor","zbuf","cx","UNITS","overlay_array","j","sigplot_show_y","push","ystart","msg","get_z","toString","message","sigplot_show_z","xunits","yunits","sec2tod","timecode","sigplot_show_timecode","fullscreen","invert","show_marker","setKeypressHandler","add_plugin","plugin","zorder","Number","MAX_VALUE","init","canvas","impl","sort","a","remove_plugin","dispose","parentNode","removeElement","splice","addListener","what","callback","removeListener","settings","changemode","newphunits","newplab","phscale","PI","dscl","changephunits","reread","oldLayerData","origHCB","deoverlay","overlay_bluefile","symbol","cleanup","reload","data","hdrmod","rsync","xbnds","force","headermod","sync","hdrmod_clone","JSON","parse","stringify","overrides","layerOptions","debug","initialize","overlay_pipe","pipe","overlay_websocket","wsurl","ws","WebSocket","binaryType","layer_n","onopen","onmessage","ArrayBuffer","createArray","warning","newHdr","overlay_href","href","onload","show_spinner","handleHeader","endsWith","overlay_matfile","hide_spinner","MatFileReader","BlueFileReader","read_http","error","spinner","xwfg","spin","stop","add_layer","layer","mfile","file_name","dview","basefiles","layerType","overlay","user_data","resize","preferred_origin","draw_layer","form_plotnote","hdr","f","read","remove_layer","fileName","pixel_zoom","x1","y1","x2","y2","continuous","r1","r2","xperc","yperc","xadj","abs","yadj","ul","lr","xtmp","ytmp","zstk","inZoom","levels","pop","mimic","mask","self","unmimic","xzoom","yzoom","that","keys","forEach","ctx","getContext","drawImage","draw_plugins","draw_marker","render","enable_listeners","onmouseup","onkeydown","onkeyup","disable_listeners","addColorMaps","colormaps","ytimecode","lbtn","prev_Mx_r","prev_Mx_b","clear_window","drawaxis_flags","noxtlab","noxtics","noxplab","noytics","noytlab","noyplab","xtimecode","drawaxis","shadowbox","noaxisbox","layers","draw_layers","ln","ix","iy","yc","xs","ys","thk","ic","legendPos","maxLabelWidth","labelOffset","labelLength","measureText","strokeStyle","fillRect","strokeRect","sign","thick","L_dashed","draw_line","on","off","draw_symbol","legend_colorbar","layerheight","sigplot_legend_menu","draw_legend","draw_accessories","cxm","cam","Array","isArray","custom_cmap","ls","CONTROLS_MENU","checked","CXMODE_MENU","SCALING_MENU","style","setupPrompt","floatValidator","finalValue","parseFloat","GRID_MENU","SETTINGS_MENU","isValid","intValidator","maxXDIV","reason","maxYDIV","COLORMAP_MENU","colormap_handler","item","menuitem","traceoptionsmenu","ii","hexValidator","sym","rad","thickness","MAINMENU","tracemenu","deoverlaymenu","result","active_canvas","toDataURL","link","download","Date","getTime","body","appendChild","click","removeChild","DASHED","COLORS","SOLID","TOGGLE","SYMBOLS","LINE_TYPE","THICKNESS","OPACITY","LEGEND_TRACE","triggerEvent","xo","yo","xl","yl","takeAction","rwh","wpxl","hpxl","plugin_index","clearRect","plotnote","join","draw_pcut_x","draw_box","beginPath","lineWidth","z","zrt","zpx","round","xrt","xpx","xnew","ynew","moveTo","lineTo","stroke","draw_pcut_y","yrt","ypx","draw","ybufn","ybuf","yframe","pix","real_to_pixel","clipped","clipped_x","clipped_y","arc","textBaseline","textAlign","font","format_g","fillText","newmode","oldmode","out","ps","pe","need_y_scrollbar","need_x_scrollbar","mouseEvent","scrollbarState","sbx","SCROLLBAR","sby","SIGPLOT_PAN","substring","XW_UPDATE","promptText","onSuccess","inputValue","disableListeners","enableListeners","realOnSuccess","dretx","drety","xval","yval","sec2tspec","chara","charb","substr","LEGACY_RENDER","colorbar_height","button_width","button_height","button_x","button_y","fill","button_y_2","colorbar","xxmin","xxmax","load","noxmin","noxmax","npts","prep","size","dpts","ret","tri_x1","tri_y1","tri_x2","tri_y2","tri_x3","tri_y3","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","inv_denom","u","v","coord","outside_right_border","above_top_border","below_bottom_border","between_top_and_bottom","between_left_and_right","has_bottom_scrollbar","s1","sw","scrollReal2PixOut","scroll_real2pix","direction","scale","newMin","newMax","loglevel","navigator","userAgent","match","Float64Array","BYTES_PER_ELEMENT","PointArray","Float32Array","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","60","61","62","63","red","green","blue","reverse","PIPESIZE","unitInput","first","second","comparer1","comparer2","BlueHeader","field","subsize","enabled_streaming_pcut","in_byte","out_byte","pipesize","buf","setData","data_free","force1000","bpe","ape","grab","bufview","nget","ngot","set","subarray","filad","sidx","eidx","head","tail","byteLength","onwritelisteners","pavail","grabx","offset","navail","addPipeWriteListener","onwrite","indexOf","units_name","units","trim_name","pathfilename","label","mult","prefix","mult_prefix","touchA","touchB","xd","yd","sqrt","VECTOR","MV","MS","nbpt","view","pad2","number","ctype","lo_thresh","vlog10","src","dst","vlogscale","cvmag2logscale","vsmul","mul","count","vmxmn","vec","smax","imax","imin","vmov","sstride","dest","dstride","vfill","inpval","vabs","cvmag","cxvec","cvmag2","cvpha","im","atan2","cvphad","a1","a2","sec","trim_trailing_zeros","tod","j1950","UTC","j1949","midnightToday","getFullYear","getMonth","getDate","millisecs","getHours","getMinutes","getSeconds","days","ceil","secMilli","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toPrecision","dloc","zloc","sec2tod_j1970","j1970toj1950","j1950toj1970","delay","previousCall","time","apply","arguments","SigPlot","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","state","Component","setState","_this2","_this$props","propChildren","children","React","Children","map","child","cloneElement","react_default","ref","childContextTypes","PropTypes","instanceOf","propTypes","node","defaultProps","Layer","context","contextTypes","arrayOf","ArrayLayer","nextProps","PipeLayer","HrefLayer","string","func","__webpack_exports__","sigplot_SigPlot","end","Uint8Array","resultArray","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","cancelAnimFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCanelAnimationFrame","timeoutID","dashOn","setLineDash","mozDash","webkitLineDash","dashOff","charCode","attachEvent","obj","buffer","byteOffset","dv","DataView","maxlength","getFloat64","begin","info","warn","Int8Array","constructor","Int16Array","Uint16Array","Int32Array","Uint32Array","cls","_addEventListener","support","_addWheelListener","elem","eventName","useCapture","originalEvent","srcElement","deltaMode","deltaX","delatZ","returnValue","wheelDelta","wheelDeltaX","detail","onmousewheel","update","prop","val","tinycolor","ColorMap","CanvasInput","in_fill_range","ele","range_begin","range_end","right","isLeft","p_x","p_y","e_x1","e_y1","e_x2","e_y2","update_winding_number","wn","XW_INIT","XW_DRAW","XW_EVENT","SB_STEPINC","SB_STEPDEC","SB_PAGEINC","SB_PAGEDEC","L_ArrowLeft","L_ArrowRight","L_ArrowUp","L_ArrowDown","GBorder","L_RModeOff","L_RModeOn","L_PixelSymbol","L_CircleSymbol","L_SquareSymbol","L_PlusSymbol","L_XSymbol","L_TriangleSymbol","L_ITriangleSymbol","L_HLineSymbol","L_VLineSymbol","STKSTRUCT","tmin","dragoutline","initial_pause","repeat_pause","swmin","soff","arrow","mxevent","repeat_count","clientWidth","clientHeight","wid_canvas","event_cb","rmode","linewidth","button_release","button_press","state_mask","pixel","_renderCanvas","oncontextmenu","_ctx","alt_style","def_style","onWidgetLayer","erase_window","old_warpbox","offsetParent","offsetLeft","offsetTop","onCanvas","current_active","withWidgetLayer","_animationFrameHandle","mixcolor","color1","color2","perc1to2","c1","toRgb","c2","mix","g","toHexString","linear_gradient","step_size","lingrad","createLinearGradient","addColorStop","equals","xwbg","xwts","xwbs","xwms","xwlo","clr","settheme","theme","close","sb","xe","ye","qs","qe","stat","sblocal","scroll_loc","scroll_vals","sv","op","btn","rr","d2","tri","cnt","fillColor","strokeColor","fill_rectangle","draw_rectangle","tempTri","fill_poly","start_poly","closePath","draw_poly","draw_symbols","pixx","pixy","npix","istart","trace","xpoint","ypoint","skip","symb","dashed","stk4","yymin","noclip","clip","dx","dy","bufsize","ib","lvisible","vertsym","horzsym","sn","highlight","xend","rxs","rxe","cn","mid_x","mid_y","ie","visible","lx","ly","tL","tE","clipt","draw_lines","fillMin","fillMax","fill_trace","x_start","x_end","xstart_pixel_value","xend_pixel_value","pi_start","pi_end","pixx_new","pixy_new","q","this_point","this_point_y","draw_mode","isNaN","to_rgb","getColor","current_color","newcolor","save","restore","inorigin","outorigin","instk","outstk","diff","sum","end1","end2","absmax","kengr","onsubmit","errorTimeout","inputValid","pxIndex","fontIndex","fontSize","fontFamily","canvasInput","backgroundColor","fontColor","borderWidth","borderRadius","padding","boxShadow","innerShadow","renderOnReturn","tabToClear","subHandlerCreator","messageX","messageY","newValue","redrawPrompt","xssPrompt","xcc","ycc","yPos","inputXPos","widgetbox","inputYPos","redrawPromptCreator","focus","strict","isFinite","parseInt","test","render_message_box","textColor","center","linel","beg","split","cur","brk","endinreturn","replace","winlines","lastline","draw_round_box","fill_opacity","quadraticCurveTo","oldAlpha","globalAlpha","Uint8ClampedArray","dctx","imgd","getImageData","putImageData","ctx_wid","font_size","textline","yend","tics","dmin","dmax","ndiv","dtic","dtic1","nsig","df","sig","nseg","ddf","dft","flags","stk1","iscl","isct","iscr","iscb","exactbox","xTIC","yTIC","_xmult","_ymult","xticlabels","yticlabels","ontop","Function","fact","fmul","itext","jtext","inside","last_xlbl","endtic","ylbl","xlbl_maxlen","sp","xlbl","format_f","trimlabel","itexti","yonright","sep","inrect","MENU_CONSTANTS","sidelab","toplab","n_show","_menu_redraw","animationFrameHandle","avail_space","menu_item_height","n_items","yb","xss","yss","i_begin","queue","i_end","menu_counter","selected","_menu_takeaction","newmenu","_menu_callback","drag_x","drag_y","_menu_dismiss","unshift","next_item","inp","String","fromCharCode","keypresses","matches","denom","num","accept","lineColor","pc2px","perc","lbl","res","scaleImage","sx","sy","sh","imgctx","createImageData","ibuf","buf8","width_scaling","height_scaling","xx","yy","jj","xb","inx","iny","inw","inh","xt","yt","getcolor","iz","zf","zf1","display_warpbox","leading_nonzero","decloc","exp","eloc","dz","pad","toFixed","legacy_shadowbox","shape","bw","sigplot_shadowbox","alpha","chevron","x_offset","y_offset","eventXPos","eventYPos","ts2","ts1","p1","op1","iretx","irety","setRange","cidx","renderImage","imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","shift_image_rows","update_image_row","row","didx","create_image","nxc","put_image","nx","ny","nex","ney","draw_image","view_xmin","view_xmax","view_ymin","view_ymax","rx","ry","iw","ih","ARRAY_BUFFER_ENDIANNESS","Error","endianness","_SPA","S","C","V","Q","M","X","T","U","_BPS","P","A","O","B","I","L","F","D","_XM_TO_TYPEDARRAY","_XM_TO_DATAVIEW","dataView","littleEndian","highIndex","lowIndex","MAX_INT","high","getInt32","rv","pow2","Infinity","_applySupportsTypedArray","uintbuf","ab2str","str","parseURL","url","source","protocol","host","hostname","port","query","search","params","seg","len","file","pathname","hash","path","relative","segments","ext_header_type","dvhdr","headrep","datarep","littleEndianHdr","littleEndianData","ext_start","ext_size","getUint32","data_start","data_size","ds","de","ext_header","unpack_keywords","data_end","spa","bps","bpa","lbuf","lkey","lextra","ltag","tag","ldata","itag","idata","keywords","dic_index","dict_keywords","getInt16","getInt8","dictTypes","TypedArray","concat","readheader","theFile","reader","FileReader","blob","webkitSlice","onloadend","rawhdr","readAsArrayBuffer","raw","oReq","XMLHttpRequest","responseType","overrideMimeType","oEvent","readyState","status","arrayBuffer","response","fileUrl","responseText","oncomplete","blocksize","bufView","worker","charCodeAt","text2buffer","onerror","send","__WEBPACK_AMD_DEFINE_RESULT__","trimLeft","trimRight","tinyCounter","mathRound","mathMin","mathMax","mathRandom","random","opts","rgb","ok","toLowerCase","named","names","matchers","exec","rgba","hsl","hsla","hsv","hsva","hex8","parseIntFromHex","convertHexToDecimal","hex6","hex4","hex3","stringInputToObject","isValidCSSUnit","bound01","rgbToRgb","convertToPercentage","hsvToRgb","hue2rgb","hslToRgb","boundAlpha","inputToRGB","_originalInput","_r","_g","_b","_a","_roundA","_format","_gradientType","gradientType","_ok","_tc_id","rgbToHsl","rgbToHsv","rgbToHex","allow3Char","hex","charAt","rgbaToArgbHex","convertDecimalToHex","desaturate","amount","toHsl","clamp01","saturate","greyscale","lighten","brighten","darken","hue","complement","triad","tetrad","splitcomplement","analogous","results","slices","part","monochromatic","toHsv","modification","isDark","getBrightness","isLight","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","setAlpha","toHsvString","toHslString","toHex","toHex8","allow4Char","rgbaToHex","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","clone","_applyModification","fn","args","_applyCombination","fromRatio","newColor","rgb1","rgb2","readability","isReadable","wcag2","wcag2Parms","parms","validateWCAG2Parms","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","flipped","flip","isOnePointZero","processPercent","isPercentage","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","getOwnPropertySymbols","propIsEnumerable","propertyIsEnumerable","assign","test1","getOwnPropertyNames","test2","test3","letter","shouldUseNative","from","symbols","to","TypeError","toObject","for","iterator","encodeURIComponent","framesToPop","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","E","refs","updater","G","isReactComponent","forceUpdate","H","isPureReactComponent","current","currentDispatcher","J","K","__self","__source","$$typeof","_owner","N","keyPrefix","R","next","done","=",":","escape","aa","W","toArray","only","createRef","PureComponent","createContext","_calculateChangedBits","_currentValue","_currentValue2","Provider","Consumer","unstable_read","_context","readContext","forwardRef","Fragment","StrictMode","unstable_AsyncMode","unstable_Profiler","createFactory","isValidElement","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","Y","default","Z","ReactPropTypesSecret","emptyFunction","shim","propName","componentName","location","propFullName","secret","getShim","isRequired","ReactPropTypes","array","bool","any","objectOf","oneOf","oneOfType","exact","checkPropTypes","useCssAnimations","prefixes","animations","createEl","el","ins","sheet","getElementsByTagName","styleSheet","addAnimation","pre","insertRule","vendor","pp","css","merge","def","defaults","fps","ep","tp","mid","insertBefore","firstChild","offsetWidth","offsetHeight","setAttribute","ostep","astep","anim","timeout","background","transformOrigin","transform","animation","childNodes","vml","attr","behavior","adj","addRule","grp","coordsize","coordorigin","margin","filter","rotation","arcsize","global","headerTextBegin","headerTextEnd","subsysOffsetBegin","subsysOffsetEnd","versionOffsetBegin","endianCharsBegin","endianCharsEnd","firstDataTypeOffsetBegin","numBytesOffsetBegin","numBytesOffsetEnd","versionNames","256","dataTypeNames","arrayClassNames","getDataWithType","typeName","output","getUint16","getFloat32","getInt64","MatHeader","headerStr","headerList","trim","platform","createdOn","subsystemOffset","versionName","dataType","dataTypeName","arraySize","currIndex","typeNum","typeSize","arrayFlag","dimTypeNum","dimTypeName","dimTypeSize","rows","arrayNameTypeNum","nameSize","small","arrayNameTypeName","arrayValSize","arrayBuff","startByte","outArr","getArray","__WEBPACK_AMD_DEFINE_FACTORY__","definition","noop","undefinedType","logMethods","bindMethod","methodName","method","replaceLoggingMethods","loggerName","methodFactory","defaultMethodFactory","realMethod","Logger","defaultLevel","currentLevel","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","TRACE","DEBUG","INFO","WARN","ERROR","SILENT","getLevel","setLevel","persist","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","enableAll","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","logger","_log","noConflict","getLoggers","varArgs","nextSource","nextKey","writable","configurable","_low","_high","_fscale","colorindex","colorBlockIndex","_parseColors","col1","col2","colorsInBlock","factorStep","_addColor","interpolate","front","_rgbToHex","_hexToRgb","_checkColorStops","colorsWithNoStops","stopSize","currentPos","_componentToHex","low","factor","_canvas","_x","_y","_extraX","extraX","_extraY","extraY","_fontSize","_fontFamily","_fontColor","_placeHolderColor","placeHolderColor","_fontWeight","fontWeight","_fontStyle","fontStyle","_readonly","readonly","_maxlength","_width","_height","_padding","_borderWidth","_borderColor","borderColor","_borderRadius","_backgroundImage","backgroundImage","_boxShadow","_innerShadow","_selectionColor","selectionColor","_placeHolder","placeHolder","_value","_onsubmit","_onkeydown","_onkeyup","_onfocus","onfocus","_onblur","onblur","_cursor","_cursorPos","_hasFocus","_selection","_wasOver","_renderOnReturn","_disableBlur","_tabToClear","_calcWH","outerW","outerH","_renderCtx","_shadowCanvas","_shadowCtx","backgroundGradient","_backgroundColor","mousemoveCanvasListener","mousemove","mousedownCanvasListener","mousedown","mouseupCanvasListener","mouseupWindowListener","_mouseDown","blur","keydownWindowListener","keydown","keyupWindowListener","pasteWindowListener","clipboardData","getData","startText","endText","_inputsIndex","_updateCanvasWH","doReturn","shadowL","shadowR","shadowT","shadowB","shadowW","shadowH","_selectionUpdated","_clipText","_cursorInterval","nav","isChromeMobile","isMobile","orientation","isShift","_clearSelection","_mapCodeToKey","mouse","_mousePos","_endSelection","_overInput","_clickPos","isOver","cursor","_selectionStart","curPos","isSelection","renderCanvas","br","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","_roundedRect","_drawTextBox","paddingBorder","selectOffset","_textWidth","selectWidth","cursorOffset","textX","textY","isOffsetX","isOffsetY","isBlur","isColor","shadowCtx","scw","sch","Image","fillPer","oldW","oldH","xLeft","xRight","yTop","yBottom","totalW","elm","defaultView","getComputedStyle","paddingLeft","paddingTop","borderLeft","borderTop","htmlTop","htmlLeft","blockedKeys","56","57","59","107","173","189","186","187","188","190","191","192","219","220","221","222","xbuf","xsub","ysub","pointbufsize","buf_type","xbufn","framesize","tle","tl","_onpipewrite","axis_change","n1","n2","mxmn","dbuf","qmin","qmax","fac","traceoptions","pts","pnt","add_highlight","min_nan","max_nan","remove_highlight","id","get_highlights","clear_highlights","mixc","num_rows","layer_name_override","layerOption","lpb","frame","ylength","zpoint","start_write","stop_write","cut_off","tmp","zidx","timestamp","xsize","nny","noff"],"mappings":"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","file":"react-sigplot.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-sigplot\"] = factory();\n\telse\n\t\troot[\"react-sigplot\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * @license\n * File: sigplot.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jslint nomen: true, browser: true, devel: true */\n\n/* global module */\n/* global require */\n\n(function() {\n\n    var version = \"version-PLACEHOLDER\";\n\n    var Spinner = require(\"spin\");\n    var common = require(\"./common\");\n    var bluefile = require(\"./bluefile\");\n    var matfile = require(\"./matfile\");\n    var m = require(\"./m\");\n    var mx = require(\"./mx\");\n    var Layer1D = require(\"./sigplot.layer1d\");\n    var Layer2D = require(\"./sigplot.layer2d\");\n\n    function sigplot(element, options) {\n        if (!(this instanceof sigplot)) {\n            return new sigplot.Plot(element, options);\n        }\n    }\n\n    sigplot.bluefile = bluefile;\n    sigplot.matfile = matfile;\n    sigplot.m = m;\n    sigplot.mx = mx;\n    sigplot.Layer1D = Layer1D;\n    sigplot.Layer2D = Layer2D;\n    sigplot.version = version;\n\n    /**\n     * Text of the keypress help dialog.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var KEYPRESS_HELP = \"Keypress Table:\\n\" +\n        \"--------------\\n\" +\n        \"?       - Main help box.\\n\" +\n        \"A       - Toggle display x,y readouts:\\n\" +\n        \"          (absc) -> (index) -> (1/absc) -> (time).\\n\" +\n        \"B       - Toggle LM Drag Mode:\\n\" +\n        \"          (box) -> (horizontal) -> (vertical).\\n\" +\n        \"C       - Toggle controls.\\n\" +\n        \"K       - Show Marker.\\n\" +\n        \"L       - Toggle legend.\\n\" +\n        \"M       - Pops up main menu\\n\" +\n        \"R       - Toggle display specs (x/y readout)\\n\" +\n        \"S       - Toggle display specs and axes.\\n\" +\n        \"T       - Popup box with timecode value at mouse.\\n\" +\n        \"X       - In 1D mode, popup box with X value at mouse.\\n\" +\n        \"        - In 2D mode, toggle x-cut display.\\n\" +\n        \"Y       - In 1D mode, popup box with Y value at mouse.\\n\" +\n        \"        - In 2D mode, toggle y-cut display.\\n\" +\n        \"P       - In 2D mode, displays p-cuts along side and bottom.\\n\" +\n        \"F       - Toggle fullscreen.\\n\" +\n        \"Cntrl+I - Invert colors.\";\n\n    /**\n     * Text of the main help dialog.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var MAIN_HELP = \"To zoom, press and drag the left mouse (LM) over the region of interest and release. \" +\n        \"To unzoom, press right mouse (RM).  Press the middle mouse (MM) button or press the 'M' key to open the main menu.\" +\n        \"View the function of all keypresses by selecting 'Keypress Info' from the main menu.\";\n\n    /**\n     * Options used when displaying the spinner.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var SPINNER_OPTS = {\n        lines: 13, // The number of lines to draw\n        length: 7, // The length of each line\n        width: 4, // The line thickness\n        radius: 10, // The radius of the inner circle\n        corners: 1, // Corner roundness (0..1)\n        rotate: 0, // The rotation offset\n        color: '#FFF', // #rgb or #rrggbb\n        speed: 1, // Rounds per second\n        trail: 60, // Afterglow percentage\n        shadow: false, // Whether to render a shadow\n        hwaccel: false, // Whether to use hardware acceleration\n        className: 'spinner', // The CSS class to assign to the spinner\n        zIndex: 2e9, // The z-index (defaults to 2000000000)\n        top: 'auto', // Top position relative to parent in px\n        left: 'auto' // Left position relative to parent in px\n    };\n\n    /**\n     * Attempts basic checks to determine if the browser is compatible with\n     * sigplot.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    sigplot.browserIsCompatible = function browserIsCompatible() {\n        // We need a Canvas\n        var test_canvas = document.createElement('canvas');\n        var hascanvas = (test_canvas.getContext) ? true : false;\n\n        // We need ArrayBuffer\n        var hasarraybuf = (\"ArrayBuffer\" in window);\n\n        // File and FileReader are optional...and only\n        // required if the user wants to plot local files\n        return (hascanvas && hasarraybuf);\n    };\n\n\n\n    /**\n     * Construct and render a plot.\n     *\n     * @constructor sigplot.Plot\n     *\n     * @example plot = new sigplot.Plot(document.getElementById('plot'), {[options]});\n     *\n     * @param element\n     *            a 'div' DOM element\n     * @param [options]\n     *            Key-value pairs whose values alter the behavior of the plot.\n     *\n     * @param {String}\n     *            options.cmode the plot rendering mode \"IN\" = Index, \"AB\" =\n     *            Abscissa (both of these, along with \"__\" can be added as prefixes to the other modes),\n     *            \"MA\", \"Magnitude\" = Magnitude, \"PH\", \"Phase\" = Phase, \"RE\", \"Real\" = Real,\n     *            \"IM\",\"Imaginary\" = Imaginary, \"LO\", \"D1\", \"10*log10\" = 10*log, \"L2\" or \"D2\"\n     *            , \"20*log10\" = 20*log, \"RI\", \"Real/Imag\", \"Imag/Real\",\"IR\" = Real vs. Imaginary\n     *\n     * @param {String}\n     *            options.phunits the phase units \"D\" = Degrees, \"R\" = Radians,\n     *            \"C\" = Cycles\n     *\n     * @param {Boolean}\n     *            options.cross display cross hairs on the plot\n     *\n     * @param {Boolean}\n     *            options.nogrid hide the background grid\n     *\n     * @param {Boolean}\n     *            options.legend set to false to hide the legend\n     *\n     * @param {Boolean}\n     *            options.no_legend_button set to true to hide the legend button\n     *\n     * @param {Boolean}\n     *            options.nopan disable panning on the plot\n     *\n     * @param {Boolean}\n     *            options.nomenu disable the middle-click menu\n     *\n     * @param {Boolean}\n     *            options.nospec hide all plot specification displays\n     *\n     * @param {Boolean}\n     *            options.noxaxis hide the x-axis\n     *\n     * @param {Boolean}\n     *            options.noyaxis hide the y-axis\n     *\n     * @param {Boolean}\n     *            options.noreadout hide the plot readout area\n     *\n     * @param {Boolean}\n     *            options.nodragdrop prevent file drag drop\n     *\n     * @param {Number}\n     *            options.scroll_time_interval set the time interval for scrolling\n     *\n     * @param {Boolean}\n     *            options.index use the data-index in the X axis\n     *\n     * @param {Number}\n     *            options.autox auto-scaling settings for X axis !!!!CHANGED\n     *\n     * @param {Number}\n     *            options.xmin the minimum range to display on the X axis\n     *\n     * @param {Number}\n     *            options.xmax the maximum range to display on the X axis\n     *\n     * @param {Number}\n     *            options.xlab the units that X-axis uses (see m.UNITS)\n     *\n     * @param {Object}\n     *            options.xlabel function or string for custom X-axis label\n     *\n     * @param {Number}\n     *            options.xdiv the number of divisions on the X axis\n     *\n     * @param {Number}\n     *            options.xcnt configure the mtag mouse controls 0 = Off, 1\n     *            (default) = LM Click, 2 = Continuous\n     *\n     * @param {String}\n     *            options.rubberbox_mode controls the behavior of the rubberbox\n     *            \"zoom\" (default) = zoom to the selected area \"box\" = trigger\n     *            an mtag action on the selected area\n     *\n     * @param {String}\n     *            options.rightclick_rubberbox_mode controls the behavior of the rubberbox\n     *            \"zoom\" = zoom to the selected area \"box\" = trigger\n     *            an mtag action on the selected area.  By default is null to disable\n     *            right-click boxes\n     *\n     * @param {Number}\n     *            options.line the line type to draw 0 = None, 1 = Verticals, 2 =\n     *            Horizontals, 3 (default) = Connecting\n     *\n     * @param {Number}\n     *            options.autoy auto-scaling settings for Y axis !!!! CHANGED\n     *            0 = Fix , 1 = Auto Min , 2 = Auto Max, 3 = Full Auto\n     *\n     * @param {Number}\n     *            options.ylab the units that Y-axis uses (see m.UNITS)\n     *\n     * @param {Object}\n     *            options.ylabel function or string for custom Y-axis label\n     *\n     * @param {Number}\n     *            options.ymin the minimum range to display on the Y axis\n     *\n     * @param {Number}\n     *            options.ymax the maximum range to display on the Y axis\n     *\n     * @param {Number}\n     *            options.ydiv the number of divisions on the Y axis\n     *\n     * @param {Number}\n     *            options.zmin the minimum range to display on the Z axis\n     *\n     * @param {Number}\n     *            options.zmax the maximum range to display on the Z axis\n     *\n     * @param {Boolean}\n     *            options.yinv invert the y-axis\n     *\n     * @param {String}\n     *            options.colors.fg the foreground color as a CSS color\n     *\n     * @param {String}\n     *            options.colors.bg the background color as a CSS color\n     *\n     * @param {Boolean}\n     *            options.xi invert the foreground/background colors\n     *\n     * @param {Boolean}\n     *            options.all show all of the data on the plot instead of just\n     *            one buffer\n     *\n     * @param {Boolean}\n     *            options.expand auto-scale the plot based on all the data (when\n     *            combined with the all option)\n     *\n     * @param {Number}\n     *            options.origin 1 = x1:xmin, x2:xmax, y1:ymax, y2:ymin\n     *            (default), 2 = x1:xmax, x2:xmin, y1:ymax, y2:ymin (x\n     *            inverted), 3 = x1:xmax, x2:xmin, y1:ymin, y2:ymax (x & y\n     *            inverted), 4 = x1:xmin, x2:xmax, y1:ymin, y2:ymax (y inverted)\n     *\n     * @param {Number}\n     *            options.bufmax the buffer size to use\n     *\n     * @param {Boolean}\n     *            options.nokeypress disable key press actions\n     *\n     * @param options.font_family\n     *            the font family to use for text rendered on the plot.  Monospace\n     *            font will generally work best.\n     *\n     * @param {Boolean}\n     *            options.font_scaled mimic the MIDAS plotting behaviour where the\n     *            plot font-size is scaled relative to the width of the\n     *\n     * @param {Boolean}\n     *            options.font_width sets the font width (default=8); if scaled_font\n     *            is set to true, then the font width will be the minimum of font_width\n     *            or plot width/64.\n     *\n     * @returns {sigplot.Plot}\n     */\n    sigplot.Plot = function(element, options) {\n        if (!sigplot.browserIsCompatible()) {\n            throw \"Browser is not compatible\";\n        }\n        // Register with the Mx structure - Step #4\n        this._Mx = mx.open(element);\n        var Mx = this._Mx;\n\n        this._Gx = new GX();\n        this._Gx.parent = element;\n\n        // Variable which stores state of mouse position relative to the canvas\n        this.mouseOnCanvas = false;\n\n        if (!options) {\n            options = {};\n        }\n\n        plot_init(this, options);\n\n        this.mimicListeners = {\n            other: null,\n            listeners: {\n                zoom: null,\n                unzoom: null,\n                xpan: null,\n                ypan: null\n            }\n        };\n\n        this._refresh(); // Draw immediately\n\n        this.onmousemove = (function(plot) {\n            return function(e) {\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n\n                var rect = e.target.getBoundingClientRect();\n                var xpos = (e.offsetX === undefined) ? (e.pageX - rect.left - window.scrollX) : e.offsetX;\n                var ypos = (e.offsetX === undefined) ? (e.pageY - rect.top - window.scrollY) : e.offsetY;\n\n                // var xpos = (e.offsetX === undefined) ? e.layerX : e.offsetX;\n                // var ypos = (e.offsetY === undefined) ? e.layerY : e.offsetY;\n                var re = pixel_to_real(plot, xpos, ypos);\n                Gx.retx = re.x;\n                Gx.rety = re.y;\n\n                if (Mx.widget) {\n                    return;\n                }\n                display_specs(plot);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mmove', true, true);\n                evt.xpos = xpos;\n                evt.ypos = ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                var executeDefault = mx.dispatchEvent(Mx, evt);\n                if (!executeDefault) {\n                    return;\n                }\n\n                // The crosshair logic in websigplot is different\n                // because we need to clear the previous position\n                // of the line (via XOR) and then draw the new line\n                //\n                // The Mx.xpos and Mx.ypos may have already been\n                // updated to their new location so we need to store\n                // the crosshair position in the Gx structure\n                if (Gx.cross) {\n                    if (Mx.warpbox) {\n                        // during zoom operations undraw the crosshairs\n                        if (Gx.cross_xpos !== undefined) {\n                            mx.rubberline(Mx, Gx.cross_xpos, Mx.t,\n                                Gx.cross_xpos, Mx.b);\n                        }\n                        if (Gx.cross_ypos !== undefined) {\n                            mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r,\n                                Gx.cross_ypos);\n                        }\n                        Gx.cross_xpos = undefined;\n                        Gx.cross_ypos = undefined;\n                    } else {\n                        if (plot.mouseOnCanvas) {\n                            draw_crosshairs(plot);\n                            if (Gx.p_cuts && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                                if (!Gx.y_cut_press_on && !Gx.x_cut_press_on) {\n                                    draw_p_cuts(plot);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (Gx.cntrls === 2) {\n                    var evt = document.createEvent('Event');\n                    evt.initEvent('mtag', true, true);\n                    evt.x = Gx.retx;\n                    evt.y = Gx.rety;\n                    evt.xpos = xpos;\n                    evt.ypos = ypos;\n                    mx.dispatchEvent(Mx, evt);\n                }\n            };\n        }(this));\n\n        this.throttledOnMouseMove = m.throttle(this._Gx.scroll_time_interval,\n            this.onmousemove);\n\n        mx.addEventListener(Mx, \"mousemove\", this.throttledOnMouseMove, false);\n\n        this.onmouseout = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n                if (plot.mouseOnCanvas) {\n                    plot.mouseOnCanvas = false;\n\n                    if (Gx.autohide_readout) {\n                        display_specs(plot);\n                    }\n                    if (Gx.autohide_panbars) {\n                        draw_panbars(plot);\n                    }\n                    if (Mx.prompt) {\n                        Mx.prompt.input.enableBlur();\n                    }\n                }\n            };\n        }(this));\n        mx.addEventListener(Mx, \"mouseout\", this.onmouseout, false);\n\n        this.onmouseover = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n                plot.mouseOnCanvas = true;\n                if (Gx.autohide_panbars) {\n                    draw_panbars(plot);\n                }\n                if (Mx.prompt) {\n                    Mx.prompt.input.disableBlur();\n                }\n            };\n        }(this));\n        mx.addEventListener(Mx, \"mouseover\", this.onmouseover, false);\n\n        this.onmousedown = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // mouse down on the canvas should never do a browser default action\n\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n\n                if (Mx.widget && (Mx.widget.type === \"ONESHOT\")) {\n                    Mx.widget = null;\n                    plot.refresh();\n                }\n\n                // Update Mx event fields\n                mx.ifevent(Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mdown', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which;\n                var executeDefault = mx.dispatchEvent(Mx, evt);\n                if (!executeDefault) {\n                    return false;\n                }\n\n                // Check if event occured in the pan region\n                var inPan = inPanRegion(plot);\n\n                // Event processing\n                if (inPan.inPanRegion) { // Mouse position lies in a pan\n                    // region\n                    event.preventDefault();\n                    if (inPan.command !== ' ') {\n                        var scrollbar = null;\n                        var position = null;\n                        if (inPan.command === \"XPAN\") {\n                            scrollbar = Mx.scrollbar_x;\n                        } else if (inPan.command === \"YPAN\") {\n                            scrollbar = Mx.scrollbar_y;\n                        }\n\n                        if (event.which === 2) {\n                            position = {\n                                x: Mx.xpos,\n                                y: Mx.ypos\n                            };\n                            if ((scrollbar !== undefined) && (onScrollbar(position, scrollbar))) {\n                                // Only show menu if on the scrollbar itself\n                                sigplot_scrollScaleMenu(plot, inPan.command);\n                            }\n                        } else {\n                            if (inPan.command !== ' ') {\n                                position = {\n                                    x: Mx.xpos,\n                                    y: Mx.ypos\n                                };\n                                if (!onScrollbar(position, scrollbar) && event.which === 1) { // Left-clicking\n                                    // not on a\n                                    // scrollbar -\n                                    // handle\n                                    // typical pan\n                                    pan(plot, inPan.command, 0, event); // Execute\n                                    // the\n                                    // first\n                                    // pan\n                                    var repeatPan = function() {\n                                        if (!onScrollbar({\n                                                \"x\": Mx.xpos,\n                                                \"y\": Mx.ypos\n                                            }, scrollbar)) {\n                                            pan(plot, inPan.command, 0, event);\n                                            // execute\n                                            // a\n                                            // pan\n                                            // on\n                                            // every\n                                            // interval\n                                        } else {\n                                            // stop\n                                            // panning\n                                            // once you\n                                            // hit the\n                                            // scrollbar\n                                            if (Gx.stillPanning) {\n                                                window.clearInterval(Gx.stillPanning);\n                                                Gx.repeatPanning = undefined;\n                                            }\n                                        }\n                                    };\n\n                                    // Make scrolling smooth, the longer initial prevents\n                                    // a single click from counting twice\n                                    Gx.stillPanning = window.setTimeout(\n\n                                        function() {\n                                            Gx.repeatPanning = window.setInterval(repeatPan, 50);\n                                        }, 250);\n                                }\n                            }\n                        }\n                    }\n                } else { // Mouse not in a pan region, handle other cases\n                    if (event.which === 1 || event.which === 3) {\n                        var lButtonPressed = false;\n                        if (Gx.legendBtnLocation) {\n                            lButtonPressed = coordsInRectangle(Mx.xpos,\n                                Mx.ypos, Gx.legendBtnLocation.x,\n                                Gx.legendBtnLocation.y,\n                                Gx.legendBtnLocation.width,\n                                Gx.legendBtnLocation.height);\n                        }\n\n                        // If we have a large colorbar, we also have buttons:\n                        if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                            if (event.which === 1 || event.which === 3) {\n                                var mouse_x = Mx.xpos;\n                                var mouse_y = Mx.ypos;\n\n                                // Find vertex positions of top and bottom buttons\n                                var top_x1 = Gx.cbb_top_x1;\n                                var top_y1 = Gx.cbb_top_y1;\n                                var top_x2 = top_x1 + Gx.cbb_width;\n                                var top_y2 = top_y1;\n                                var top_x3 = top_x1 + (1 / 2) * Gx.cbb_width;\n                                var top_y3 = top_y1 - Gx.cbb_height;\n\n                                var topButtonPressed = coordsInTriangle(mouse_x, mouse_y, top_x1, top_y1, top_x2, top_y2, top_x3, top_y3);\n                                //console.log(\"Top \", topButtonPressed);\n\n                                if (topButtonPressed) {\n                                    var cur_cmap = Gx.cmap;\n                                    //console.log(\"I'm the top button and I don't do anything\");\n                                    plot.get_layer(0).img = undefined;\n                                    console.log(m.Mc.colormap[cur_cmap]);\n                                    var current_map = m.Mc.colormap[cur_cmap];\n\n                                    for (var i = 0; i < current_map.colors.length; i++) {\n                                        current_map.colors[i].pos += 5.0;\n                                    }\n                                    mx.colormap(Mx, current_map.colors, 16);\n                                    //Gx.zoff += (1/10)*(Gx.zmax - Gx.zmin);\n                                    plot.refresh();\n                                }\n\n                                // bottom\n                                var bot_x1 = Gx.cbb_bot_x1;\n                                var bot_y1 = Gx.cbb_bot_y1;\n                                var bot_x2 = bot_x1 + Gx.cbb_width;\n                                var bot_y2 = bot_y1;\n                                var bot_x3 = bot_x1 + (1 / 2) * Gx.cbb_width;\n                                var bot_y3 = bot_y1 + Gx.cbb_height;\n\n                                var botButtonPressed = coordsInTriangle(mouse_x, mouse_y, bot_x1, bot_y1, bot_x2, bot_y2, bot_x3, bot_y3);\n                                //console.log(\"Bot \", botButtonPressed);\n\n                                if (botButtonPressed) {\n                                    //console.log(\"I'm the bottom button and I don't do anything\");\n                                    //Gx.zoff -= (1/10)*(Gx.zmax - Gx.zmin);\n                                    var cur_cmap = Gx.cmap;\n                                    var current_map = m.Mc.colormap[cur_cmap];\n                                    plot.get_layer(0).img = undefined;\n                                    for (var i = 0; i < current_map.colors.length; i++) {\n                                        current_map.colors[i].pos -= 5.0;\n                                    }\n                                    mx.colormap(Mx, current_map.colors, 16);\n                                    plot.refresh();\n                                }\n\n                            }\n\n                        }\n\n                        if (lButtonPressed) {\n                            plot.change_settings({\n                                legend: !Gx.legend\n                            }); // toggle the legend\n                        } else {\n                            display_specs(plot);\n\n                            // Styles for rubberbox\n                            var zoom_style = {\n                                opacity: 0,\n                                return_value: \"zoom\"\n                            };\n\n                            var select_style = {\n                                opacity: 0.4,\n                                fill_color: Mx.hi,\n                                return_value: \"select\"\n                            };\n\n                            if (event.which === 1) {\n                                if (Gx.default_rubberbox_action === \"zoom\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rubberbox_mode, zoom_style,\n                                        select_style);\n                                } else if (Gx.default_rubberbox_action === \"select\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rubberbox_mode,\n                                        select_style, zoom_style);\n                                } // otherwise rubber-box is considered disabled\n                            } else if (event.which === 3) {\n                                if (Gx.default_rightclick_rubberbox_action === \"zoom\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rightclick_rubberbox_mode, zoom_style,\n                                        select_style);\n                                } else if (Gx.default_rightclick_rubberbox_action === \"select\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rightclick_rubberbox_mode,\n                                        select_style, zoom_style);\n                                } // otherwise right-click rubber-box is considered disabled\n                            }\n                        }\n                    } else if (event.which === 2) {\n                        if (!Gx.nomenu) {\n                            sigplot_mainmenu(plot);\n                        }\n                    }\n                }\n                return false;\n            };\n        }(this));\n        mx.addEventListener(Mx, \"mousedown\", this.onmousedown, false);\n\n        // Putting a finger on the screen and moving it, simulates\n        // pan.\n        this.ontouchstart = (function(plot) {\n            return function(event) {\n                event.preventDefault();\n\n                // See how many fingers are on the screen\n                // 1 finger == pan and/or unzoom\n                if (event.targetTouches.length === 1) {\n\n                    // See if this is a double-tap\n                    if (Mx.touchClear && Mx.touches) {\n                        // Double tap unzooms to L=0 and fully expands the plot\n                        window.clearTimeout(Mx.touchClear);\n                        plot.unzoom();\n                        middleClickScrollMenuAction(plot, mx.SB_FULL, \"XPAN\");\n                        middleClickScrollMenuAction(plot, mx.SB_FULL, \"YPAN\");\n                    } else {\n                        // Normal touch prepares for panning\n                        var touchEvent = event.targetTouches[0];\n                        // Determine the touch position, relative to the canvas\n                        var rect = touchEvent.target.getBoundingClientRect();\n                        var position = {\n                            x: (touchEvent.pageX - rect.left - window.scrollX),\n                            y: (touchEvent.pageY - rect.top - window.scrollY)\n                        };\n\n                        // Update the Mx coordinates\n                        Mx.xpos = m.bound(position.x, 0, Mx.width);\n                        Mx.ypos = m.bound(position.y, 0, Mx.height);\n\n                        // See if the finger lies on the pan-bars\n                        var inPan = inPanRegion(plot, position);\n                        if (!inPan.inPanRegion) {\n                            Mx.touches = event.targetTouches;\n                        } // TODO support touch 'pan' on the panbars\n                    }\n                } else if (event.targetTouches.length === 2) {\n                    Mx.touch_distance = m.touch_distance(event.targetTouches[0], event.targetTouches[1]);\n                }\n            };\n        }(this));\n\n        mx.addEventListener(Mx, \"touchstart\", this.ontouchstart, false);\n\n        this.ontouchmove = (function(plot) {\n            return function(event) {\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n                var k = Mx.level;\n\n                event.preventDefault();\n                if (event.targetTouches.length === 1) {\n                    // Determine the touch event position\n                    var touchStart = Mx.touches[0];\n                    var rect = touchStart.target.getBoundingClientRect();\n                    var startPosition = {\n                        x: (touchStart.pageX - rect.left - window.scrollX),\n                        y: (touchStart.pageY - rect.top - window.scrollY)\n                    };\n\n                    var touchEvent = event.targetTouches[0];\n                    var rect = touchEvent.target.getBoundingClientRect();\n                    var position = {\n                        x: (touchEvent.pageX - rect.left - window.scrollX),\n                        y: (touchEvent.pageY - rect.top - window.scrollY)\n                    };\n\n                    var new_xpos = m.bound(position.x, 0, Mx.width);\n                    var new_ypos = m.bound(position.y, 0, Mx.height);\n                    var delta_xpos = new_xpos - Mx.xpos;\n                    var delta_ypos = new_ypos - Mx.ypos;\n                    Mx.xpos = new_xpos;\n                    Mx.ypos = new_ypos;\n\n                    var inPan = inPanRegion(plot, position);\n                    // If we are in the pan region, don't take any action\n                    if (inPan.inPanRegion) {\n                        return;\n                    }\n\n                    // Pan proportionally to the movement of the touch\n                    var xdelta = (Mx.stk[k].xscl * delta_xpos);\n                    var ydelta = (Mx.stk[k].yscl * delta_ypos);\n\n                    if (Mx.origin === 1) {\n                        // regular x, regular y\n                        xdelta *= -1;\n                    } else if (Mx.origin === 2) {\n                        // inverted x, regular y\n                        ydelta *= -1;\n                    } else if (Mx.origin === 3) {\n                        // inverted x, inverted y\n                        ydelta *= -1;\n                    } else if (Mx.origin === 4) {\n                        // regular x, inverted y\n                        xdelta *= -1;\n                        ydelta *= -1;\n                    }\n\n                    var xmin = Mx.stk[k].xmin + xdelta;\n                    var xmax = Mx.stk[k].xmax + xdelta;\n                    var ymin = Mx.stk[k].ymin + ydelta;\n                    var ymax = Mx.stk[k].ymax + ydelta;\n\n                    if ((xmin >= Gx.xmin) && (xmax <= Gx.xmax)) {\n                        Mx.stk[k].xmin = xmin;\n                        Mx.stk[k].xmax = xmax;\n                    }\n\n                    if ((ymin >= Gx.ymin) && (ymax <= Gx.ymax)) {\n                        Mx.stk[k].ymin = ymin;\n                        Mx.stk[k].ymax = ymax;\n                    }\n\n                    if (Gx.cmode === Gx.basemode && Mx.level === 1) {\n                        Gx.xmin = Math.min(Gx.xmin, xmin);\n                        Gx.xmax = Math.max(Gx.xmax, xmax);\n                        Gx.ymin = Math.min(Gx.ymin, ymin);\n                        Gx.ymax = Math.max(Gx.ymax, ymax);\n                    }\n                    plot.refresh();\n                } else if (event.targetTouches.length === 2) {\n                    var cur_distance = m.touch_distance(event.targetTouches[0], event.targetTouches[1]);\n                    var scaling = (1 - (Mx.touch_distance / cur_distance)) * 0.05;\n\n                    var xran = Mx.stk[k].xmax - Mx.stk[k].xmin;\n                    var yran = Mx.stk[k].ymax - Mx.stk[k].ymin;\n\n                    var xmin = Mx.stk[k].xmin + (scaling * xran);\n                    var xmax = Mx.stk[k].xmax - (scaling * xran);\n                    var ymin = Mx.stk[k].ymin + (scaling * yran);\n                    var ymax = Mx.stk[k].ymax - (scaling * yran);\n\n                    Mx.stk[k].xmin = Math.max(Gx.xmin, xmin);\n                    Mx.stk[k].xmax = Math.min(Gx.xmax, xmax);\n                    Mx.stk[k].ymin = Math.max(Gx.ymin, ymin);\n                    Mx.stk[k].ymax = Math.min(Gx.ymax, ymax);\n\n                    plot.refresh();\n                }\n            };\n        }(this));\n\n        this.throttledOnTouchMove = m.throttle(\n            this._Gx.scroll_time_interval,\n            this.ontouchmove);\n\n        mx.addEventListener(Mx, \"touchmove\", this.throttledOnTouchMove, false);\n\n        this.ontouchend = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                event.preventDefault();\n                console.log(\"on touch end \", event.targetTouches.length);\n                Gx.panning = undefined;\n                plot._Mx.scrollbar_x.action = 0;\n                plot._Mx.scrollbar_y.action = 0;\n                Mx.touch_distance = undefined;\n\n                mx.widget_callback(Mx, event);\n                // Only clear the touches after a slight delay so we can\n                // detect double-tap\n                Mx.touchClear = window.setTimeout(\n\n                    function() {\n                        Mx.touches = undefined;\n                        Mx.touchClear = undefined;\n                    }, 100);\n            };\n        }(this));\n\n        mx.addEventListener(Mx, \"touchend\", this.ontouchend, false);\n\n        this.docMouseUp = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n\n                if (event.which === 1) {\n                    // in general, you shouldn't put anything in here\n                    // ...instead it should go into rubberbox_cb\n                    Gx.panning = undefined;\n                    plot._Mx.scrollbar_x.action = 0; // TODO Is this\n                    // necessary?\n                    plot._Mx.scrollbar_y.action = 0;\n                } //else if (event.which === 2) {\n                // nothing\n                //} else if (event.which === 3) {\n                // nothing\n                //}\n                if (Gx.stillPanning) {\n                    window.clearTimeout(Gx.stillPanning);\n                    Gx.stillPanning = undefined;\n                }\n                if (Gx.repeatPanning) { // Clear the panning interval on any\n                    // mouse up in the document\n                    window.clearInterval(Gx.repeatPanning);\n                    Gx.repeatPanning = undefined;\n                }\n                return false;\n            };\n        }(this));\n        document.addEventListener(\"mouseup\", this.docMouseUp, false);\n\n        this.mouseup = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // mouse up on the canvas should never do a browser default action\n\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                // Update Mx event fields\n                mx.ifevent(plot._Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mup', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which;\n                var executeDefault = mx.dispatchEvent(Mx, evt);\n\n                if (executeDefault) {\n                    if (Mx.warpbox || Mx.widget || Mx.prompt) {\n                        // If any of these are true, the mouseup is going\n                        // to be handled by them...but this is a fragile approach\n                        // because it relies upon implicit ordering of event dispatch\n                        // for mouseup events.  It should be improved/refactored at some point\n                        return;\n                    }\n\n                    // Normal mouse up handling\n                    if (event.which === 1) {\n                        // If we are in the pan region, perform the pan\n                        // otherwise emit an mtag\n                        var inCenter = inPanCenterRegion(plot);\n                        if (inCenter.inCenterRegion) {\n                            if (inCenter.command !== ' ') {\n                                pan(plot, inCenter.command, 0, event); // pan\n                            }\n                        } else if (Gx.cntrls === 1) {\n                            // Update the mark\n                            Gx.xmrk = Gx.retx;\n                            Gx.ymrk = Gx.rety;\n\n                            var mtagevt = document.createEvent('Event');\n                            mtagevt.initEvent('mtag', true, true);\n                            mtagevt.x = Gx.xmrk;\n                            mtagevt.y = Gx.ymrk;\n                            mtagevt.xpos = event.x || event.clientX;\n                            mtagevt.ypos = event.y || event.clientY;\n                            mtagevt.w = undefined;\n                            mtagevt.h = undefined;\n                            mtagevt.shift = event.shiftKey;\n                            mx.dispatchEvent(Mx, mtagevt);\n\n                            // Refresh to draw the new marker position\n                            //if (Gx.always_show_marker || Gx.show_marker) {\n                            plot.redraw();\n                            //}\n                        }\n                    } else if (event.which === 2) {\n                        if (Gx.nomenu) {\n                            // Send an event so that a custom menu can be displayed\n                            // if desired\n                            var evt = document.createEvent('Event');\n                            evt.initEvent('showmenu', true, true);\n                            evt.x = event.x || event.clientX;\n                            evt.y = event.y || event.clientY;\n                            var executeDefault = mx.dispatchEvent(Mx, evt);\n\n                            if (executeDefault) {\n                                if (event.stopPropagation) {\n                                    event.stopPropagation();\n                                }\n                                event.cancelBubble = true;\n                                mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n                                var emit_hidemenu = function() {\n                                    try {\n                                        var hideMenuEvt = document.createEvent('Event');\n                                        hideMenuEvt.initEvent('hidemenu', true, true);\n                                        if (mx.dispatchEvent(Mx, hideMenuEvt)) {\n                                            mx.addEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n                                        }\n                                    } finally {\n                                        document.removeEventListener(\"mouseup\", emit_hidemenu, false);\n                                    }\n                                };\n                                document.addEventListener(\"mouseup\", emit_hidemenu, false);\n                            }\n                        }\n                    } else if (event.which === 3) { // unzoom only happens on\n                        // right-clicks on plot\n                        // unzoom/expand\n                        event.preventDefault();\n\n                        plot.unzoom(1);\n                        plot.refresh();\n                    }\n                }\n\n            };\n        }(this));\n\n        mx.addEventListener(Mx, \"mouseup\", this.mouseup, false);\n\n        this.mouseclick = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // alway prevent any default browser actions on the plot\n\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                // Update Mx event fields\n                mx.ifevent(plot._Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mclick', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which; // not always available on all browser\n                if (mx.dispatchEvent(Mx, evt)) {\n                    // currently there isn't a default for mouseclick to cancel\n                }\n                return false;\n            };\n        }(this));\n        mx.addEventListener(Mx, \"click\", this.mouseclick, false);\n\n        this.mousedblclick = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // alway prevent any default browser actions on the plot\n\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                // Update Mx event fields\n                mx.ifevent(plot._Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mdblclick', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which; // not always available on all browser\n                if (mx.dispatchEvent(Mx, evt)) {\n                    // currently there isn't a default for mouseclick to cancel\n                }\n                return false;\n            };\n        }(this));\n        mx.addEventListener(Mx, \"dblclick\", this.mousedblclick, false);\n\n        // PANBAR DRAGGING mouse event handlers:\n        this.dragMouseDownHandler = (function(plot) {\n            return function(event) {\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n\n                // Check if event occured in the pan region\n                var inPan = inPanRegion(plot);\n\n                // Event processing\n                if (inPan.inPanRegion) { // Mouse position lies in a pan\n                    // region\n                    event.preventDefault();\n                    if (inPan.command !== ' ') {\n                        var scrollbar;\n                        if (inPan.command === \"XPAN\") {\n                            scrollbar = Mx.scrollbar_x;\n                        } else if (inPan.command === \"YPAN\") {\n                            scrollbar = Mx.scrollbar_y;\n                        }\n\n                        var position = {\n                            x: Mx.xpos,\n                            y: Mx.ypos\n                        };\n                        if (scrollbar !== undefined && onScrollbar(position, scrollbar) && event.which === 1) { // On scrollbar, set up\n                            // a DRAG\n                            Gx.panning = {\n                                axis: inPan.command,\n                                xpos: event.screenX, // Use screen-relative\n                                // values here instead\n                                // of div/page-relative\n                                // values\n                                ypos: event.screenY,\n                                xmin: Mx.stk[Mx.level].xmin,\n                                xmax: Mx.stk[Mx.level].xmax,\n                                ymin: Mx.stk[Mx.level].ymin,\n                                ymax: Mx.stk[Mx.level].ymax\n                            };\n                        }\n                    }\n                }\n            };\n        }(this));\n        window.addEventListener(\"mousedown\", this.dragMouseDownHandler, false);\n\n        this.dragMouseMoveHandler = (function(plot) {\n            return function(e) {\n                var Gx = plot._Gx;\n\n                if (Gx.panning !== undefined) { // execute a scrollbar DRAG\n                    try {\n                        drag_scrollbar(plot, Gx.panning.axis, e);\n                    } catch (err) {\n                        console.log(\"Error: \" + err); // TODO Eventually come\n                        // up with better error\n                        // handling here\n                    }\n                }\n            };\n        }(this));\n\n        this.throttledDragOnMouseMove = m.throttle(this._Gx.scroll_time_interval,\n            this.dragMouseMoveHandler);\n\n        window.addEventListener(\"mousemove\", this.throttledDragOnMouseMove,\n            false);\n\n        this.dragMouseUpHandler = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n\n                if (event.which === 1) {\n                    Gx.panning = undefined; // Panbar dragging completed - clear\n                    // the state variable\n                }\n            };\n        }(this));\n        window.addEventListener(\"mouseup\", this.dragMouseUpHandler, false);\n\n        // TODO this may need to be throttled or debounced\n        this.onresize = (function(plot) {\n            return function(event) {\n                if (mx.checkresize(plot._Mx)) {\n                    plot.refresh();\n                }\n            };\n        }(this));\n\n        // Mouse Wheel logic\n        this.wheelHandler = (function(plot) {\n\n            var Mx = plot._Mx;\n            var Gx = plot._Gx;\n\n            var throttledPan = m.throttle(100, function(inPan) {\n                // Mouse wheel\n                // event over a\n                // panning\n                // region\n\n                var scrollbar;\n                if (inPan.command === \"XPAN\") {\n                    scrollbar = Mx.scrollbar_x;\n                } else if (inPan.command === \"YPAN\") {\n                    scrollbar = Mx.scrollbar_y;\n                }\n\n                // For now, vertical mouse scrolling is the only action that\n                // will trigger a pan\n                // Later, we can add horizontal mouse scrolling if we choose\n                if (Gx.wheelscroll_mode_natural) { // Original Sig-Plot\n                    // orientation\n                    scrollbar.action = (event.deltaY < 0 ? mx.SB_WHEELDOWN : mx.SB_WHEELUP);\n                } else { // Inverted/\"un-natural\" orientation\n                    scrollbar.action = (event.deltaY < 0 ? mx.SB_WHEELUP : mx.SB_WHEELDOWN);\n                }\n\n                scrollbar.step = 0.1 * scrollbar.srange;\n                scrollbar.page = 9 * scrollbar.step;\n\n                // Execute wheel action on the scrollbar\n                mx.scroll(Mx, scrollbar, mx.XW_COMMAND, undefined,\n                    scrollbar);\n\n                // Update the viewbox\n                updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange, inPan.command.slice(0, 1));\n            });\n\n            var throttledZoom = m.throttle(100, function() {\n                var zoomperc = Gx.wheelZoomPercent || 0.2;\n                if (Gx.wheelscroll_mode_natural) {\n                    if (event.deltaY > 0) {\n                        zoomperc = -1 * zoomperc;\n                    }\n                } else { // Inverted/\"un-natural\" orientation\n                    if (event.deltaY < 0) {\n                        zoomperc = -1 * zoomperc;\n                    }\n                }\n\n                if (Gx.wheelZoom === \"x\") {\n                    plot.percent_zoom(zoomperc, 1, true);\n                } else if (Gx.wheelZoom === \"y\") {\n                    plot.percent_zoom(1, zoomperc, true);\n                } else {\n                    plot.percent_zoom(zoomperc, zoomperc, true);\n                }\n            });\n\n            return function(event) {\n                // Update Mx event fields\n                mx.ifevent(Mx, event);\n\n                // Check if event occured in the pan region\n                var inPan = inPanRegion(plot);\n\n                // Event processing\n                if (plot.mouseOnCanvas) {\n                    event.preventDefault();\n\n                    if (inPan.inPanRegion) {\n                        throttledPan(inPan);\n                    } else if (Gx.wheelZoom) {\n                        throttledZoom();\n                    }\n                }\n            };\n        }(this));\n\n        window.addWheelListener(window, this.wheelHandler, false);\n\n        window.addEventListener(\"resize\", this.onresize, false);\n\n        // If multiple plots are in the same window, then it\n        // may be desired to disable keypress behavior and implement\n        // it at a higher-level...by default keypress behavior\n        // is enabled and only works if the mouse if over the plot\n        if (!options.nokeypress) {\n            this.onkeypress = (function(plot) {\n                return function(event) {\n                    var Mx = plot._Mx;\n                    var Gx = plot._Gx;\n                    if (plot.mouseOnCanvas) {\n\n                        if (Mx.widget && (Mx.widget.type === \"MENU\")) {\n                            return; // The menu absorbs the keypress\n                        }\n\n                        if (Mx.widget && (Mx.widget.type === \"ONESHOT\")) {\n                            Mx.widget = null;\n                            plot.refresh();\n                            return;\n                        }\n\n                        var keyCode = common.getKeyCode(event);\n\n                        // Since the mouse is in the plot area, send a keypress event\n                        var evt = document.createEvent('Event');\n                        evt.initEvent('plotkeypress', true, true);\n                        evt.keyCode = keyCode;\n                        evt.shiftKey = event.shiftKey;\n                        evt.ctrlKey = event.ctrlKey;\n                        evt.altKey = event.altKey;\n                        evt.metaKey = event.metaKey;\n                        var executeDefault = mx.dispatchEvent(Mx, evt);\n                        if (!executeDefault) {\n                            return;\n                        }\n\n                        // Only respond to keypresses if the mouse is\n                        // in the plot area....\n\n                        if (keyCode === 97) { // 'a'\n                            Gx.iabsc = (Gx.iabsc + 1) % 4;\n                            // It's kinda up in the air if changing the 'specs'\n                            // area should also change the plotting mode itself...\n                            // on one hand, if you have multiple layers with different\n                            // xdeta's then switching the specs area to index mode will\n                            // give you only the index of the baselayer...on the other hand\n                            // the use may only want to change the readout and not the x-axis\n                            // or the plot...for now this is commented out to behave in the same\n                            // manner as SIGPLOT.\n                            //plot.change_settings({\n                            //\tindex : Gx.iabsc === 1\n                            //});\n                            display_specs(plot);\n                        } else if (keyCode === 108) { // 'l'\n                            plot.change_settings({\n                                legend: !Gx.legend\n                            }); // toggle the legend\n                        } else if (keyCode === 103) { // 'g'\n                            plot.change_settings({\n                                grid: !Gx.grid\n                            }); // toggle the grid\n                        } else if ((keyCode === 98) || (keyCode === 2)) { // 'b' and CTRL-'b'\n                            if (Mx.warpbox) {\n                                if (Mx.warpbox.mode === \"box\") {\n                                    Mx.warpbox.mode = \"horizontal\";\n                                } else if (Mx.warpbox.mode === \"horizontal\") {\n                                    Mx.warpbox.mode = \"vertical\";\n                                } else {\n                                    Mx.warpbox.mode = \"box\";\n                                }\n                                mx.redraw_warpbox(Mx);\n                            }\n                        } else if (keyCode === 99) { // 'c'\n                            plot.change_settings({\n                                xcnt: -1 * Gx.cntrls\n                            });\n                        } else if (keyCode === 114) { // 'r'\n                            plot.change_settings({\n                                show_readout: !Gx.show_readout\n                            });\n                        } else if (keyCode === 115) { // 's'\n                            plot.change_settings({\n                                specs: !Gx.specs\n                            });\n                        } else if (keyCode === 112) { // 'p'\n                            plot.change_settings({\n                                p_cuts: !Gx.p_cuts\n                            });\n                        } else if (keyCode === 120) { // 'x'\n                            if (Gx.x_cut_press_on) {\n                                Gx.x_cut_press_on = false;\n                                Gx.ylabel = Gx.ylabel_stash;\n                                Gx.xlabel = Gx.xlabel_stash;\n                                for (var h = 0; h < Gx.xcut_layer; h++) {\n                                    plot._Gx.lyr[h].display = !plot._Gx.lyr[h].display;\n                                }\n                                delete_layer(plot, plot._Gx.xcut_layer);\n                                plot.rescale();\n                                plot.refresh();\n                                Gx.xcut_layer = undefined;\n                                plot.change_settings({\n                                    drawmode: Gx.old_drawmode,\n                                    autol: Gx.old_autol\n                                });\n                            } else if (Gx.xyKeys === \"pop-up\") {\n                                if (!Gx.x_pop_now) {\n                                    sigplot_show_x(plot);\n                                    Gx.x_pop_now = true;\n                                } else {\n                                    Gx.x_pop_now = false;\n                                }\n                            } else if ((Gx.lyr[0].hcb[\"class\"] === 1) && (Gx.xyKeys === \"automatic\")) {\n                                if (!Gx.x_pop_now) {\n                                    sigplot_show_x(plot);\n                                    Gx.x_pop_now = true;\n                                } else {\n                                    Gx.x_pop_now = false;\n                                }\n                            } else if ((Gx.xyKeys !== \"disable\") && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                                //display the x-cut of the raster\n                                // TODO what to do if we have more than one layer?\n                                if (!Gx.y_cut_press_on) {\n                                    if (!Gx.p_cuts) {\n                                        Gx.x_cut_data = [];\n                                        var plot_height = Mx.b - Mx.t;\n                                        var plot_width = Mx.r - Mx.l;\n                                        var height = Gx.lyr[0].lps;\n                                        var width = Gx.lyr[0].xframe;\n                                        var row, start, finish = 0;\n                                        // Determine what row has been selected based on the current\n                                        // mouse position\n                                        row = Math.floor((height * (Mx.ypos - Mx.t)) / plot_height);\n                                        start = row * width;\n                                        finish = start + width;\n                                        // Grab one row of data from the zbuf\n                                        Gx.x_cut_data = Gx.lyr[0].zbuf.slice(start, finish);\n                                    }\n\n                                    //adjust for the values of the xcut\n                                    Gx.old_drawmode = Gx.lyr[0].drawmode;\n                                    Gx.old_autol = Gx.autol;\n                                    plot.change_settings({\n                                        drawmode: \"undefined\",\n                                        autol: -1\n                                    });\n\n                                    Gx.ylabel_stash = Gx.ylabel;\n\n                                    var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);\n                                    if (Gx.cmode === 1) {\n                                        Gx.ylabel = m.UNITS[28][0];\n                                    } else if (Gx.cmode === 2) {\n                                        Gx.ylabel = Gx.plab;\n                                    } else if ((Gx.cmode === 3) && (cx)) {\n                                        Gx.ylabel = m.UNITS[21][0];\n                                    } else if (Gx.cmode === 4) {\n                                        Gx.ylabel = m.UNITS[22][0];\n                                    } else if (Gx.cmode === 5) {\n                                        Gx.ylabel = m.UNITS[22][0];\n                                    } else if (Gx.cmode === 6) {\n                                        Gx.ylabel = m.UNITS[26][0];\n                                    } else if (Gx.cmode === 7) {\n                                        Gx.ylabel = m.UNITS[27][0];\n                                    } else {\n                                        Gx.ylabel = \"Intensity\";\n                                    }\n\n                                    Gx.xlabel_stash = Gx.xlabel;\n                                    if ((m.UNITS[Gx.xlab][0] !== \"None\") && (m.UNITS[Gx.xlab][0] !== \"Unknown\")) {\n                                        Gx.xlabel = m.UNITS[Gx.xlab][0];\n                                    } else {\n                                        Gx.xlabel = \"Frequency\";\n                                    }\n                                    Gx.xlabel += \"    CURRENTLY IN X_CUT MODE\";\n                                    Mx.origin = 1;\n                                    Gx.xcut_layer = plot.overlay_array(Gx.x_cut_data, {\n                                        xstart: Gx.lyr[0].xstart,\n                                        xdelta: Gx.lyr[0].xdelta\n                                    }, {\n                                        name: \"x_cut_data\",\n                                        line: 3\n                                    });\n                                    Gx.xcut_layer = Gx.lyr.length - 1;\n                                    //do not display any other layers\n                                    for (var i = 0; i < Gx.xcut_layer; i++) {\n                                        plot._Gx.lyr[i].display = !plot._Gx.lyr[i].display;\n                                    }\n                                    Gx.x_cut_press_on = true;\n                                    plot.rescale();\n\n                                }\n                            }\n                        } else if (keyCode === 121) { // 'y'\n                            if (Gx.y_cut_press_on) {\n                                Gx.y_cut_press_on = false;\n                                Gx.ylabel = Gx.ylabel_stash;\n                                Gx.xlabel = Gx.xlabel_stash;\n                                for (var j = 0; j < Gx.ycut_layer; j++) {\n                                    plot._Gx.lyr[j].display = !plot._Gx.lyr[j].display;\n                                }\n                                delete_layer(plot, plot._Gx.ycut_layer);\n                                plot.rescale();\n                                plot.refresh();\n                                Gx.ycut_layer = undefined;\n                                plot.change_settings({\n                                    drawmode: Gx.old_drawmode,\n                                    autol: Gx.old_autol\n                                });\n                            } else if (Gx.xyKeys === \"pop-up\") {\n                                if (!Gx.y_pop_now) {\n                                    sigplot_show_y(plot);\n                                    Gx.y_pop_now = true;\n                                } else {\n                                    Gx.y_pop_now = false;\n                                }\n                            } else if ((Gx.lyr[0].hcb[\"class\"] === 1) && (Gx.xyKeys === \"automatic\")) {\n                                if (!Gx.y_pop_now) {\n                                    sigplot_show_y(plot);\n                                    Gx.y_pop_now = true;\n                                } else {\n                                    Gx.y_pop_now = false;\n                                }\n                            } else if ((Gx.xyKeys !== \"disable\") && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                                //display the y-cut of the raster\n                                if (!Gx.x_cut_press_on) {\n                                    if (!Gx.p_cuts) {\n                                        Gx.y_cut_data = [];\n                                        var plot_height = Mx.b - Mx.t;\n                                        var plot_width = Mx.r - Mx.l;\n                                        var height = Gx.lyr[0].lps;\n                                        var width = Gx.lyr[0].xframe;\n                                        var line, i = 0;\n                                        Gx.y_cut_data = [];\n                                        line = Math.floor((width * (Mx.xpos - Mx.l)) / plot_width);\n                                        for (i = line; i < (width * height); i += width) {\n                                            Gx.y_cut_data.push(Gx.lyr[0].zbuf[i]);\n                                        }\n                                    }\n\n                                    //adjust for the values of the xcut\n                                    Gx.old_drawmode = Gx.lyr[0].drawmode;\n                                    Gx.old_autol = Gx.autol;\n                                    plot.change_settings({\n                                        drawmode: \"undefined\",\n                                        autol: -1\n                                    });\n\n                                    Gx.ylabel_stash = Gx.ylabel;\n\n                                    var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);\n                                    if (Gx.cmode === 1) {\n                                        Gx.ylabel = m.UNITS[28][0];\n                                    } else if (Gx.cmode === 2) {\n                                        Gx.ylabel = Gx.plab;\n                                    } else if ((Gx.cmode === 3) && (cx)) {\n                                        Gx.ylabel = m.UNITS[21][0];\n                                    } else if (Gx.cmode === 4) {\n                                        Gx.ylabel = m.UNITS[22][0];\n                                    } else if (Gx.cmode === 5) {\n                                        Gx.ylabel = m.UNITS[22][0];\n                                    } else if (Gx.cmode === 6) {\n                                        Gx.ylabel = m.UNITS[26][0];\n                                    } else if (Gx.cmode === 7) {\n                                        Gx.ylabel = m.UNITS[27][0];\n                                    } else {\n                                        Gx.ylabel = \"Intensity\";\n                                    }\n\n                                    Gx.xlabel_stash = Gx.xlabel;\n                                    if ((m.UNITS[Gx.ylab][0] !== \"None\") && (m.UNITS[Gx.ylab][0] !== \"Unknown\")) {\n                                        Gx.xlabel = m.UNITS[Gx.ylab][0];\n                                    } else {\n                                        Gx.xlabel = \"Time\";\n                                    }\n                                    Gx.xlabel += \"    CURRENTLY IN Y_CUT MODE\";\n                                    Mx.origin = 1;\n                                    Gx.ycut_layer = plot.overlay_array(Gx.y_cut_data, {\n                                        xstart: Gx.lyr[0].ystart,\n                                        xdelta: Gx.lyr[0].ydelta\n                                    }, {\n                                        name: \"y_cut_data\",\n                                        line: 3\n                                    });\n                                    Gx.ycut_layer = Gx.lyr.length - 1;\n                                    //do not display any other layers\n                                    for (var k = 0; k < Gx.ycut_layer; k++) {\n                                        plot._Gx.lyr[k].display = !plot._Gx.lyr[k].display;\n                                    }\n                                    Gx.y_cut_press_on = true;\n                                    plot.rescale();\n                                }\n                            }\n                        } else if (keyCode === 122) { // 'z'\n                            sigplot_show_z(plot);\n                        } else if (keyCode === 116) { // 't'\n                            sigplot_show_timecode(plot);\n                        } else if (keyCode === 109) { // 'm'\n                            if (!Gx.nomenu) {\n                                var evt = document.createEvent('Event');\n                                evt.initEvent('showmenu', true, true);\n                                evt.x = Mx.x;\n                                evt.y = Mx.y;\n                                var executeDefault = mx.dispatchEvent(Mx, evt);\n                                if (executeDefault) {\n                                    sigplot_mainmenu(plot);\n                                }\n                            }\n                        } else if (keyCode === 63) { // '?'\n                            mx.message(Mx, MAIN_HELP);\n                        } else if (keyCode === 102) { // 'f'\n                            mx.fullscreen(Mx);\n                            plot.refresh();\n                        } else if ((keyCode === 9) && (event.ctrlKey)) { // ctrl-i\n                            plot.change_settings({\n                                invert: null\n                            });\n                        } else if (keyCode === 107) { // 'k' show marker\n                            Gx.show_marker = !Gx.show_marker;\n                            plot.redraw();\n\n                        }\n                    }\n                };\n            }(this));\n\n            common.setKeypressHandler(this.onkeypress);\n        }\n\n        return this;\n    };\n\n    // Public methods\n\n    sigplot.Plot.prototype = {\n\n        /**\n         * Add a plugin to the plot\n         *\n         * @param plugin\n         *            the plugin object\n         *\n         * @param zorder\n         *            the zorder for the plugin to render, all plugins render as\n         *            overlays on top of the plot\n         */\n        add_plugin: function(plugin, zorder) {\n            if (zorder === undefined) {\n                zorder = Number.MAX_VALUE;\n            }\n            if (zorder <= 0) {\n                throw \"Invalid plugin zorder\";\n            }\n\n\n            plugin.init(this);\n\n            var canvas = document.createElement('canvas');\n            canvas.width = this._Mx.canvas.width;\n            canvas.height = this._Mx.canvas.height;\n\n            this._Gx.plugins.push({\n                impl: plugin,\n                zorder: zorder,\n                canvas: canvas\n            });\n\n            this._Gx.plugins.sort(function(a, b) {\n                return (a.zorder - b.zorder);\n            });\n\n\n            this.refresh();\n        },\n\n        /**\n         * Removes a plugin from the plot\n         *\n         * @param plugin\n         *            the plugin object\n         */\n        remove_plugin: function(plugin) {\n            var i = this._Gx.plugins.length;\n            while (i--) {\n                if (this._Gx.plugins[i].impl === plugin) {\n                    if (plugin.dispose) {\n                        plugin.dispose();\n                    }\n                    if (this._Gx.plugins[i].canvas.parentNode) {\n                        this._Gx.plugins[i].canvas.parentNode.removeElement(this._Gx.plugins[i].canvas);\n                    }\n                    this._Gx.plugins.splice(i, 1);\n                }\n            }\n            this._Gx.plugins.sort(function(a, b) {\n                return (a.zorder - b.zorder);\n            });\n\n            this.refresh();\n        },\n\n        /**\n         * Adds a listener to plot events.\n         *\n         * @example plot.addListener(what, function(event) {});\n         *\n         * @param what\n         *            the name of the event to listen to.  \"file_deoverlayed\" is\n         *            emitted when a file is deoverlayed (the name of the deoverlayed\n         *            file can be found in evt.filename), \"file_overlayed\" is emitted\n         *            when a file is overlayed (the name of the overlayed file can\n         *            be found in evt.filename), \"hidemenu\"\tis emitted when the\n         *            menu should be hidden (a selection is made or a mouse click\n         *            occurs away from the menu), \"mdown\"\tis emitted when the mouse\n         *            down event occurs (the evt has parts evt.xpos (the mouse x-position\n         *            relative to the canvas), evt.ypos (the mouse y-position relative\n         *            to the canvas), evt.x (the mouse x-position relative to the data),\n         *            evt.y (the mouse y-position relative to the data) and evt.which\n         *            (returns which mouse button was pressed for the event)) \"mmove\"\n         *            is emitted when a mouse move event occurs (the evt has parts\n         *            evt.xpos (the mouse x-position relative to the canvas), evt.ypos\n         *            (the mouse y-position relative to the canvas), evt.x (the mouse\n         *            x-position relative to the data), evt.y (the mouse y-position\n         *            relative to the data) and evt.which (returns which mouse button\n         *            was pressed for the event)), \"mtag\"\tis emitted when a mouse \"tag\"\n         *            event occurs (the evt of an mtag has different parts depending\n         *            on what triggered it. It will always contain evt.xpos (the mouse\n         *            x-position relative to the canvas), evt.ypos (the mouse y-position\n         *            relative to the canvas), evt.x (the mouse x-position relative\n         *            to the data), and evt.y (the mouse y-position relative to the data).\n         *            If the rubberboxes are enabled, evt.h and evt.w will contain\n         *            the width and height of the box. evt.shift will contain info\n         *            about the shift key if it is pressed), \"mmove\" is emitted when\n         *            a mouse move event has occurred, \"mdown\" is emitted when\n         *            a mouse down event has occurred (the evt has parts evt.xpos\n         *            (the mouse x-position relative to the canvas), evt.ypos (the\n         *            mouse y-position relative to the canvas), evt.x (the mouse\n         *            x-position relative to the data), evt.y (the mouse y-position\n         *            relative to the data) and evt.which (returns which mouse button\n         *            was pressed for the event)), \"mup\" is emitted when a mouse up\n         *            event occurs. (the evt has parts evt.xpos (the mouse x-position\n         *            relative to the canvas), evt.ypos (the mouse y-position relative\n         *            to the canvas), evt.x (the mouse x-position relative to the data),\n         *            evt.y (the mouse y-position relative to the data) and evt.which\n         *            (returns which mouse button was pressed for the event)),\n         *            \"reread\" is emitted when a reread has been performed, \"sigplotexit\"\n         *            is emitted when an exit plot event occurs, and \"showmenu\"\tis\n         *            emitted when the menu should be shown (the evt.x and evt.y\n         *            contain the coordinates on the plot where the menu will be displayed.\n         *\n         * @param [function]\n         *            callback the function that will be called when the event is heard\n         */\n        addListener: function(what, callback) {\n            var Mx = this._Mx;\n            mx.addEventListener(Mx, what, callback, false);\n        },\n\n        /**\n         * Removes a listener to plot events.\n         *\n         * @param what\n         *            the event that was listned to\n         * @param callback\n         */\n        removeListener: function(what, callback) {\n            var Mx = this._Mx;\n            mx.removeEventListener(Mx, what, callback, false);\n        },\n\n        /**\n         * Change one or more plot settings. For boolean types, passing null\n         * will toggle the setting.\n         *\n         * @example plot.change_settings({[settings]});\n         *\n         * @param settings\n         *            Key-value pairs whose values are the settings to change\n         *\n         * @param {Boolean}\n         *            settings.grid change grid visibility\n         *\n         * @param {Boolean}\n         *            settings.index change index setting\n         *\n         * @param {Boolean}\n         *            settings.all change the plot to show all data\n         *\n         * @param {Boolean}\n         *            settings.show_x_axis true displays the x axis\n         *\n         * @param {Boolean}\n         *            settings.show_y_axis true displays the y axis\n         *\n         * @param {Boolean}\n         *            settings.show_readout true displays the readout\n         *\n         * @param {Boolean}\n         *            settings.specs turns on and off specs\n         *\n         * @param {String}\n         *            settings.xcnt \"leftmouse\", \"continuous\", \"disable\",\n         *            \"enable\"\n         *\n         * @param {Boolean}\n         *            settings.legend true displays the legend\n         *\n         * @param {Boolean}\n         *            settings.pan true will display scrollbars and enable panning\n         *\n         * @param {Boolean}\n         *            settings.cross true displays cross hairs\n         *\n         * @param {String}\n         *            settings.rubberbox_action controls action of rubberbox.\n         *            \"zoom\" (default) = zoom to the selected area, \"select\" =\n         *            select the selected area, and \"null\" = disabled, no action\n         *\n         * @param {String}\n         *            settings.rubberbox_mode controls the behavior of the rubberbox.\n         *            \"zoom\" = zoom to the selected area, \"box\" = trigger an mtag\n         *            action on the selected area\n         *\n         * @param {String}\n         *            settings.rightclick_rubberbox_action controls action of\n         *            rubberbox on rightclick. \"zoom\" = zoom to the selected area,\n         *            \"select\" = select the selected area, and \"null\" (the default)\n         *            = disabled, no action\n         *\n         * @param {String}\n         *            settings.rightclick_rubberbox_mode controls the behavior of\n         *            the rubberbox on rightclck. \"zoom\" = zoom to the selected area,\n         *            \"box\" = trigger an mtag action on the selected area. By default\n         *            is null to disable right-click boxes\n         *\n         * @param {String}\n         *            settings.wheelscroll_mode_natural true indicates natural\n         *            mode, where scrolling the mousewheel forward will pan down\n         *            and backwards will pan up\n         *\n         * @param {String}\n         *            settings.cmode !!!! CHANGED\n         *\n         * @param {String}\n         *            settings.phunits The phase units \"D\" = Degrees, \"R\" = Radians,\n         *            \"C\" = Cycles\n         *\n         * @ param {Boolean}\n         *            settings.lg_colorbar true displays the large colorbar\n         *\n         * @param {Boolean}\n         *            settings.p_cuts true displays p_cuts on a 2D plot\n         */\n\n        change_settings: function(settings) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            for (var i = 0; i < Gx.lyr.length; i++) {\n                Gx.lyr[i].change_settings(settings);\n            }\n\n            if (settings.xyKeys !== undefined) {\n                if (settings.xyKeys === null) {\n                    Gx.xyKeys = \"automatic\";\n                } else {\n                    Gx.xyKeys = settings.xyKeys;\n                }\n            }\n\n            if (settings.grid !== undefined) {\n                if (settings.grid === null) {\n                    Gx.grid = !Gx.grid;\n                } else {\n                    Gx.grid = settings.grid;\n                }\n            }\n\n            if (settings.gridBackground !== undefined) {\n                Gx.gridBackground = settings.gridBackground;\n            }\n\n            if (settings.gridStyle !== undefined) {\n                Gx.gridStyle = settings.gridStyle;\n            }\n\n            if (settings.wheelZoom !== undefined) {\n                Gx.wheelZoom = settings.wheelZoom;\n            }\n\n            if (settings.wheelZoomPercent !== undefined) {\n                Gx.wheelZoomPercent = settings.wheelZoomPercent;\n            }\n\n            if (settings.autol !== undefined) {\n                Gx.autol = settings.autol;\n            }\n\n            if ((settings.index !== undefined) && (settings.index !== Gx.index)) {\n                if (settings.index === null) {\n                    Gx.index = !Gx.index;\n                } else {\n                    Gx.index = settings.index;\n                }\n\n                // the original sigplot.for fails\n                // to do this so that the specs area\n                // has the correct setting.\n                if ((Gx.index) && (Gx.iabsc !== 1)) {\n                    Gx.iabsc = 1;\n                } else if ((!Gx.index) && (Gx.iabsc === 1)) {\n                    Gx.iabsc = 0;\n                }\n\n                var xmin;\n                var xmax;\n                scale_base(this, {\n                    get_data: false\n                }, xmin, xmax);\n\n                // like sigplot, undo all zoom levels\n                this.unzoom();\n            }\n\n            if (settings.all !== undefined) {\n                if (settings.all === null) {\n                    Gx.all = !Gx.all;\n                } else {\n                    Gx.all = settings.all;\n                }\n            }\n\n            if (settings.show_x_axis !== undefined) {\n                if (settings.show_x_axis === null) {\n                    Gx.show_x_axis = !Gx.show_x_axis;\n                } else {\n                    Gx.show_x_axis = settings.show_x_axis;\n                }\n                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);\n            }\n\n            if (settings.show_y_axis !== undefined) {\n                if (settings.show_y_axis === null) {\n                    Gx.show_y_axis = !Gx.show_y_axis;\n                } else {\n                    Gx.show_y_axis = settings.show_y_axis;\n                }\n                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);\n            }\n\n            if (settings.show_readout !== undefined) {\n                if (settings.show_readout === null) {\n                    Gx.show_readout = !Gx.show_readout;\n                } else {\n                    Gx.show_readout = settings.show_readout;\n                }\n                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);\n            }\n\n            if (settings.specs !== undefined) {\n                if (settings.specs === null) {\n                    Gx.specs = !Gx.specs;\n                } else {\n                    Gx.specs = settings.specs;\n                }\n                if (Gx.specs) {\n                    Gx.show_x_axis = true;\n                    Gx.show_y_axis = true;\n                    Gx.show_readout = true;\n                } else {\n                    Gx.show_x_axis = false;\n                    Gx.show_y_axis = false;\n                    Gx.show_readout = false;\n                }\n            }\n\n            if (settings.xcnt !== undefined) {\n                if (settings.xcnt === \"leftmouse\") {\n                    Gx.cntrls = 1;\n                } else if (settings.xcnt === \"continuous\") {\n                    Gx.cntrls = 2;\n                } else if ((settings.xcnt === \"disable\") && (Gx.cntrls > 0)) {\n                    Gx.cntrls = -1 * Gx.cntrls;\n                } else if ((settings.xcnt === \"enable\") && (Gx.cntrls < 0)) {\n                    Gx.cntrls = -1 * Gx.cntrls;\n                } else {\n                    Gx.cntrls = settings.xcnt;\n                }\n            }\n\n            if (settings.legend !== undefined) {\n                if (settings.legend === null) {\n                    Gx.legend = !Gx.legend;\n                } else {\n                    Gx.legend = settings.legend;\n                }\n            }\n\n            if (settings.pan !== undefined) {\n                if (settings.pan === null) {\n                    Gx.pan = !Gx.pan;\n                } else {\n                    Gx.pan = settings.pan;\n                }\n            }\n\n            if (settings.cross !== undefined) {\n                if (settings.cross === null) { // catch null or undefined here\n                    Gx.cross = !Gx.cross;\n                } else {\n                    Gx.cross = settings.cross;\n                }\n                if (!Gx.cross) {\n                    if (Gx.cross_xpos !== undefined) {\n                        mx.rubberline(Mx, Gx.cross_xpos, Mx.t, Gx.cross_xpos,\n                            Mx.b);\n                    }\n                    if (Gx.cross_ypos !== undefined) {\n                        mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r,\n                            Gx.cross_ypos);\n                    }\n                    Gx.cross_xpos = undefined;\n                    Gx.cross_ypos = undefined;\n                } else {\n                    Gx.cross_xpos = undefined;\n                    Gx.cross_ypos = undefined;\n                    if ((!Mx.warpbox) && (this.mouseOnCanvas)) {\n                        draw_crosshairs(this);\n                    }\n                }\n            }\n\n            var cmode;\n            var address = settings.cmode === undefined ? \"\" : settings.cmode;\n            if (typeof address === \"string\") {\n                address = address + \"\";\n                cmode = address.toUpperCase();\n            } else {\n                cmode = address;\n            }\n\n            if (settings.cmode !== undefined) {\n                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                    Gx.cmode = 1;\n                } else {\n                    Gx.cmode = 3;\n                }\n\n                if ((cmode === \"MA\") || (cmode === \"INMA\") || (cmode === \"ABMA\") ||\n                    (cmode === \"__MA\") || (cmode === \"MAGNITUDE\") || (cmode === 1)) {\n                    Gx.cmode = 1;\n                }\n                if ((cmode === \"PH\") || (cmode === \"INPH\") || (cmode === \"ABPH\") ||\n                    (cmode === \"__PH\") || (cmode === \"PHASE\") || (cmode === 2)) {\n                    Gx.cmode = 2;\n                }\n                if ((cmode === \"RE\") || (cmode === \"INRE\") || (cmode === \"ABRE\") ||\n                    (cmode === \"__RE\") || (cmode === \"REAL\") || (cmode === 3)) {\n                    Gx.cmode = 3;\n                }\n                if ((cmode === \"IM\") || (cmode === \"INIM\") || (cmode === \"ABIM\") ||\n                    (cmode === \"__IM\") || (cmode === \"IMAGINARY\") || (cmode === 4)) {\n                    Gx.cmode = 4;\n                }\n                if ((cmode === \"LO\") || (cmode === \"D1\") || (cmode === \"INLO\") || (cmode === \"IND1\") ||\n                    (cmode === \"ABIM\") || (cmode === \"ABD1\") || (cmode === \"__LO\") ||\n                    (cmode === \"__D1\") || (cmode === \"10*LOG10\") || (cmode === 6)) {\n                    Gx.cmode = 6;\n                }\n                if ((cmode === \"L2\") || (cmode === \"D2\") || (cmode === \"INL2\") || (cmode === \"IND2\") ||\n                    (cmode === \"ABLO\") || (cmode === \"ABD2\") || (cmode === \"__L2\") ||\n                    (cmode === \"__D2\") || (cmode === \"20*LOG10\") || (cmode === 7)) {\n                    Gx.cmode = 7;\n                }\n                if ((cmode === \"RI\") || (cmode === \"IR\") || (cmode === \"INRI\") || (cmode === \"INIR\") ||\n                    (cmode === \"ABRI\") || (cmode === \"ABIR\") || (cmode === \"__RI\") ||\n                    (cmode === \"__IR\") || (cmode === \"IMAG/REAL\") || (cmode === \"REAL/IMAG\") || (cmode === 5)) {\n                    if (Gx.index) {\n                        alert(\"Imag/Real mode not permitted in INDEX mode\");\n                    } else {\n                        Gx.cmode = 5;\n                    }\n                }\n\n                Gx.basemode = Gx.cmode;\n                changemode(this, Gx.cmode);\n            }\n\n            if (settings.phunits !== undefined) {\n                changephunits(this, settings.phunits);\n            }\n\n            if (settings.rubberbox_action !== undefined) {\n                Gx.default_rubberbox_action = settings.rubberbox_action;\n            }\n\n            if (settings.rubberbox_mode !== undefined) {\n                Gx.default_rubberbox_mode = settings.rubberbox_mode;\n            }\n\n            if (settings.rightclick_rubberbox_action !== undefined) {\n                Gx.default_rightclick_rubberbox_action = settings.rightclick_rubberbox_action;\n            }\n\n            if (settings.rightclick_rubberbox_mode !== undefined) {\n                Gx.default_rightclick_rubberbox_mode = settings.rightclick_rubberbox_mode;\n            }\n\n            if (settings.wheelscroll_mode_natural !== undefined) {\n                Gx.wheelscroll_mode_natural = settings.wheelscroll_mode_natural;\n            }\n\n            if (settings.colors !== undefined) {\n                if (!settings.colors.fg) {\n                    settings.colors.fg = Mx.fg;\n                }\n                if (!settings.colors.bg) {\n                    settings.colors.bg = Mx.bg;\n                }\n                mx.setbgfg(Mx, settings.colors.bg, settings.colors.fg, Mx.xi);\n            }\n\n            if (settings.cmap !== undefined) {\n                if (settings.cmap === null) {\n                    // default\n                    if (Gx.cmode === 2) {\n                        Gx.cmap = 2; // wheel\n                    } else {\n                        Gx.cmap = 1; // ramp\n                    }\n                } else {\n                    Gx.cmap = settings.cmap; // TODO support string lookup\n                }\n\n                setup_cmap(this, Gx.cmap);\n            }\n\n            if (settings.yinv !== undefined) {\n                if (settings.yinv) {\n                    Mx.origin = 4;\n                } else {\n                    Mx.origin = 1;\n                }\n            }\n\n            if (settings.rasterSmoothing !== undefined) {\n                if (settings.rasterSmoothing === null) {\n                    Gx.rasterSmoothing = !Gx.rasterSmoothing;\n                } else {\n                    Gx.rasterSmoothing = settings.rasterSmoothing;\n                }\n            }\n\n            if (settings.fillStyle !== undefined) {\n                Gx.fillStyle = settings.fillStyle;\n            }\n\n            if (settings.invert !== undefined) {\n                if (settings.invert === null) {\n                    mx.invertbgfg(Mx);\n                } else if (settings.invert === true) {\n                    mx.setbgfg(this, \"white\", \"black\");\n                } else {\n                    mx.setbgfg(this, \"black\", \"white\");\n                }\n            }\n\n            if (settings.nomenu !== undefined) {\n                if (settings.nomenu === null) {\n                    Gx.nomenu = !Gx.nomenu;\n                } else {\n                    Gx.nomenu = settings.nomenu;\n                }\n            }\n\n            if (settings.ymax !== undefined) {\n                if (settings.ymax === null) {\n                    Gx.autoy = Gx.autoy | 2;\n                    Gx.panymax = undefined;\n                    scale_base(this, {});\n                    Gx.ymax = Gx.panymax;\n                } else {\n                    // autoy must be set correctly before calling updateViewbox\n                    Gx.autoy = Gx.autoy & 0xD;\n                    Gx.ymax = settings.ymax;\n                    updateViewbox(this, Mx.stk[0].ymin, settings.ymax, \"Y\");\n                    this.redraw();\n                }\n            }\n\n            if (settings.ymin !== undefined) {\n                if (settings.ymin === null) {\n                    Gx.autoy = Gx.autoy | 1;\n                    Gx.panymin = undefined;\n                    scale_base(this, {});\n                    Gx.ymin = Gx.panymin;\n                } else {\n                    // autoy must be set correctly before calling updateViewbox\n                    Gx.autoy = Gx.autoy & 0xE;\n                    Gx.ymin = settings.ymin;\n                    updateViewbox(this, settings.ymin, Mx.stk[0].ymax, \"Y\");\n                    this.redraw();\n                }\n            }\n\n            // Check autoy setting after checking ymin/ymax\n            // so that explicitly setting autoy will override\n            // implicit settings via ymin/ymax\n            if (settings.autoy !== undefined) {\n                Gx.autoy = settings.autoy;\n                if (((Gx.autoy & 1) !== 0)) {\n                    Gx.ymin = undefined;\n                }\n                if (((Gx.autoy & 2) !== 0)) {\n                    Gx.ymax = undefined;\n                }\n            }\n\n            if (settings.xmin !== undefined) {\n                updateViewbox(this, settings.xmin, Mx.stk[0].xmax, \"X\");\n                Gx.autox = (Gx.autox & 2);\n                this.redraw();\n            }\n\n            if (settings.xmax !== undefined) {\n                updateViewbox(this, Mx.stk[0].xmin, settings.xmax, \"X\");\n                Gx.autox = (Gx.autox & 1);\n                this.redraw();\n            }\n\n            if (settings.zmin !== undefined) {\n                Gx.zmin = settings.zmin;\n                Gx.autoz = (Gx.autoz & 2);\n            }\n\n            if (settings.zmax !== undefined) {\n                Gx.zmax = settings.zmax;\n                Gx.autoz = (Gx.autoz & 1);\n            }\n\n            if (settings.autoz !== undefined) {\n                Gx.autoz = settings.autoz;\n                if (((Gx.autoz & 1) !== 0)) {\n                    Gx.zmin = undefined;\n                }\n                if (((Gx.autoz & 2) !== 0)) {\n                    Gx.zmax = undefined;\n                }\n            }\n\n            if (settings.note !== undefined) {\n                Gx.note = settings.note;\n            }\n\n            if (settings.lg_colorbar !== undefined) {\n                // Change the plot area and then draw the large colorbar\n                Gx.lg_colorbar = !Gx.lg_colorbar;\n            }\n\n            if (settings.p_cuts !== undefined) {\n                // Change the plot area and then draw the p_cuts dipslay\n                if (settings.p_cuts === null) {\n                    Gx.p_cuts = !Gx.p_cuts;\n                } else {\n                    Gx.p_cuts = settings.p_cuts;\n                }\n            }\n\n            //this is a setting that is true if we are drawing an xcut\n            if (settings.xcut_now !== undefined) {\n                Gx.xcut_now = !Gx.xcut_now;\n            }\n\n            //this is a setting that is true if we are drawing a ycut\n            if (settings.ycut_now !== undefined) {\n                Gx.ycut_now = !Gx.ycut_now;\n            }\n\n            this.refresh();\n            if (settings.pan !== undefined) { // refactor - new code to handle\n                // disappearing specs\n                display_specs(this);\n            }\n        },\n\n        /**\n         * Reread all files and refresh the plot.\n         */\n        reread: function() {\n            var Gx = this._Gx;\n            var oldLayerData = [];\n            for (var k = 0; k < Gx.lyr.length; k++) { // make a copy of layer\n                // data before\n                // destroying Gx.lyr\n                // with the deoverlay\n                oldLayerData[k] = Gx.lyr[k];\n            }\n\n            var origHCB = Gx.HCB.slice();\n            this.deoverlay();\n            for (var i = 0; i < origHCB.length; i++) {\n                this.overlay_bluefile(origHCB[i]);\n            }\n\n            // propagate old layer attributes to re-read layers\n            for (var j = 0; j < Gx.lyr.length; j++) {\n                // TODO Assumes indices of old Gx.lyr and new Gx.lyr will match\n                // up correctly - should we instead use hcb and name to identify\n                Gx.lyr[j].symbol = oldLayerData[j].symbol;\n                Gx.lyr[j].radius = oldLayerData[j].radius;\n                // TODO re-copy other things like line type???\n            }\n            this.refresh();\n\n            // Notify listeners that a reread was performed\n            var evt = document.createEvent('Event');\n            evt.initEvent('reread', true, true);\n            mx.dispatchEvent(this._Mx, evt);\n        },\n\n        /**\n         * Placeholder for cleanup logic.\n         */\n        cleanup: function() {\n            // TODO not sure what we really want to do here yet\n        },\n\n        /**\n         * Reload data without adjusting other aspects about a plot\n         *\n         * @param {Number} n\n         *            the layer to push data into\n         * @param {Number[]} data\n         *            data to push\n         * @param {Object} hdrmod\n         *            optional changes to the file header\n         */\n        reload: function(n, data, hdrmod, rsync) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            if ((n < 0) || (n >= Gx.lyr.length)) {\n                return;\n            }\n\n            if (Gx.lyr[n].reload === undefined) {\n                return;\n            }\n\n            var xbnds = Gx.lyr[n].reload(data, hdrmod);\n\n            if (Mx.level === 0) {\n                // Unlike push(), always call scale_base\n                // when reload is invoked\n                scale_base(this, {\n                    get_data: false\n                }, xbnds.xmin, xbnds.xmax);\n            }\n\n            if (rsync) {\n                this._refresh();\n            } else {\n                this.refresh();\n            }\n\n        },\n\n        rescale: function(force) {\n            var Mx = this._Mx;\n\n            if (Mx.level === 0 || force) {\n                scale_base(this, {\n                    get_data: false\n                }, undefined, undefined);\n            }\n\n            this.refresh();\n        },\n\n        /**\n         * Change the file header\n         *\n         * @param {Number} n\n         *            the layer to push header changes to\n         * @param {Object} hdrmod\n         *            changes to the file header\n         */\n        headermod: function(n, hdrmod) {\n            this.change_settings(hdrmod);\n            this.push(n, [], hdrmod);\n        },\n\n        /**\n         * Push data into a layer that was created with overlay_pipe\n         *\n         * @example plot.push(n, data);\n         *\n         * @param {Number} n\n         *            the layer to push data into\n         * @param {Number[]} data\n         *            data to push\n         * @param {Object} hdrmod\n         *            optional changes to the file header\n         * @param {boolean} [sync=false]\n         *            optional dispatch onpipewrite syncronously\n         * @param {boolean} [rsync=false]\n         *            optional dispatch refresh syncronously\n         */\n        push: function(n, data, hdrmod, sync, rsync) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            if ((n < 0) || (n >= Gx.lyr.length)) {\n                return;\n            }\n\n            if (Gx.lyr[n].push === undefined) {\n                return;\n            }\n\n            if (Gx.lyr[n].display === false) {\n                return;\n            }\n\n            var hdrmod_clone = hdrmod;\n\n            // quick deep copy of the header so we can\n            // add some necessary fields if this is\n            // a header-only push\n            if (hdrmod) {\n                var hdrmod_clone = JSON.parse(JSON.stringify(hdrmod));\n\n                // if it's a header-only push, the data should\n                // be an empty array\n                if (data.length === 0) {\n                    hdrmod_clone.xmin = Mx.stk[n].xmin;\n                    hdrmod_clone.xmax = Mx.stk[n].xmax;\n                    hdrmod_clone.ymin = Mx.stk[n].ymin;\n                    hdrmod_clone.ymax = Mx.stk[n].ymax;\n                }\n            }\n\n            var rescale = Gx.lyr[n].push(data, hdrmod_clone, sync);\n\n            if ((Mx.level === 0) && rescale) {\n                scale_base(this, {\n                    get_data: false\n                });\n            }\n\n            if (rsync) {\n                this._refresh();\n            } else {\n                this.refresh();\n            }\n        },\n\n        /**\n         * Create a plot layer with an array overlay\n         *\n         * @example plot.overlay_array(data, {[overrides]}, {[layerOptions]});\n         *\n         * @param data\n         *            data the data that you will be plotting\n         *\n         * @param [overrides]\n         *            Key-value pairs whose values alter plot settings\n         *\n         * @param {Number}\n         *            overrides.type 1000 = one dimensional, 2000 = two dimensional.\n         *            this is a convention of X-midas\n         *\n         * @param {Number}\n         *            overrides.subsize the subsize for data being read in by the plot\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framsize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n\n        overlay_array: function(data, overrides, layerOptions) {\n            m.log.debug(\"Overlay array\");\n            var hcb = m.initialize(data, overrides);\n            return this.overlay_bluefile(hcb, layerOptions);\n        },\n\n        /**\n         * Create a plot layer to hold data\n         *\n         * @example plot.overlay_pipe({[overrides]},{[layerOptions]});\n         *\n         * @param [overrides]\n         *            Key-value pairs whose values alter plot settings\n         *\n         * @param {Number}\n         *            overrides.type 1000 = one dimensional, 2000 = two dimensional.\n         *            this is a convention of X-midas\n         *\n         * @param {Number}\n         *            overrides.subsize the subsize for data being read in by the plot\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framsize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n\n        overlay_pipe: function(overrides, layerOptions) {\n            m.log.debug(\"Overlay pipe\");\n            if (!overrides) {\n                overrides = {};\n            }\n            overrides.pipe = true;\n            var hcb = m.initialize(null, overrides);\n            //console.log(\"pipe filename: \"+hcb.file_name);\n            return this.overlay_bluefile(hcb, layerOptions);\n        },\n\n        /**\n         * Create a plot layer to hold data\n         *\n         * @example plot.overlay_websocket({wsurl, {[overrides]}, {[layerOptions]}});\n         * @param {url:port_destination}\n         *            wsurl the url and port destination for the websocket being used\n         * @param [overrides]\n         *            Key-value pairs whose values alter plot settings\n         *\n         * @param {Number}\n         *            overrides.type 1000 = one dimensional, 2000 = two dimensional.\n         *            this is a convention of X-midas\n         *\n         * @param {Number}\n         *            overrides.subsize the subsize for data being read in by the plot\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framsize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n\n        overlay_websocket: function(wsurl, overrides, layerOptions) {\n            m.log.debug(\"Overlay websocket: \" + wsurl);\n            var ws = new WebSocket(wsurl, \"plot-data\");\n            ws.binaryType = \"arraybuffer\";\n\n            var plot = this;\n            if (!overrides) {\n                overrides = {};\n            }\n            overrides.pipe = true;\n            var hcb = m.initialize(null, overrides);\n            hcb.ws = ws;\n\n            var layer_n = this.overlay_bluefile(hcb, layerOptions);\n\n            ws.onopen = function(evt) {};\n\n            ws.onmessage = (function(theSocket) {\n                return function(evt) {\n                    if (evt.data instanceof ArrayBuffer) {\n                        var data = hcb.createArray(evt.data);\n                        plot.push(layer_n, data);\n                    } else if (typeof evt.data === \"string\") {\n                        var Gx = plot._Gx;\n                        var hdr = Gx.lyr[layer_n].hcb;\n                        if (!hdr) {\n                            m.log.warning(\"Couldn't find header for layer \" + layer_n);\n                        }\n\n                        var newHdr = JSON.parse(evt.data);\n                        plot.push(layer_n, [], newHdr);\n                    }\n                };\n            })(ws);\n\n            return layer_n;\n        },\n\n        /**\n         * Create a plot layer from an HREF that points to a BLUEFILE or MATFILE\n         *\n         * @example plot.overlay_href(href, function() {}, {[layeroptions]});\n         *\n         * @param {String}\n         *            href the url to the bluefile or matfile\n         * @param [onload]\n         *            callback to be called when the file has been loaded\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framesize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n        overlay_href: function(href, onload, layerOptions) {\n            m.log.debug(\"Overlay href: \" + href);\n            try {\n                this.show_spinner();\n\n                var handleHeader = (function(plot, onload) {\n                    return function(hcb) {\n                        try {\n                            if (!hcb) {\n                                alert(\"Failed to load data\");\n                            } else {\n                                var i;\n                                if (href.endsWith(\".mat\")) {\n                                    i = plot.overlay_matfile(hcb, layerOptions);\n                                } else {\n                                    i = plot.overlay_bluefile(hcb, layerOptions);\n                                }\n                                if (onload) {\n                                    onload(hcb, i);\n                                }\n                            }\n                        } finally {\n                            plot.hide_spinner();\n                        }\n                    };\n                }(this, onload));\n\n                var reader;\n                if (href.endsWith(\".mat\")) {\n                    reader = new matfile.MatFileReader();\n                } else {\n                    reader = new bluefile.BlueFileReader();\n                }\n                reader.read_http(href, handleHeader);\n            } catch (error) {\n                console.error(error);\n                alert(\"Failed to load data\");\n                this.hide_spinner();\n            }\n        },\n\n        show_spinner: function() {\n            if (!this._Gx.spinner) {\n                SPINNER_OPTS.color = this._Mx.xwfg;\n                this._Gx.spinner = new Spinner(SPINNER_OPTS).spin(this._Gx.parent);\n            }\n        },\n\n        hide_spinner: function() {\n            if (this._Gx.spinner) {\n                this._Gx.spinner.stop();\n            }\n            this._Gx.spinner = undefined;\n        },\n\n        add_layer: function(layer) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            // Notify listeners that a file was overlayed\n            var evt = document.createEvent('Event');\n            evt.initEvent('lyradd', true, true);\n            evt.name = layer.name; // the name of the layer\n            evt.layer = layer;\n            var executeDefault = mx.dispatchEvent(Mx, evt);\n            if (executeDefault) {\n                Gx.lyr.push(layer);\n                layer.index = Gx.lyr.length - 1; // the new index of the layer\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Get a layer of the plot\n         *\n         * @example plot.get_layer(n);\n         *\n         * @param {Number}\n         *              n the index of the layer\n         *\n         * @returns data_layer\n         *\n         */\n\n        get_layer: function(n) {\n            var Gx = this._Gx;\n            if ((n >= 0) && (n < Gx.lyr.length)) {\n                return Gx.lyr[n];\n            } else {\n                return null;\n            }\n        },\n\n        overlay_matfile: function(mfile, layerOptions) {\n            m.log.debug(\"Overlay matfile: \" + mfile.file_name);\n            return this.overlay_array(mfile.dview);\n        },\n\n        /**\n         * Create a plot layer backed by a bluefile header\n         *\n         * @param hcb\n         *            {BlueHeader} an opened BlueHeader file\n         * @returns the index of the new layer\n         */\n        overlay_bluefile: function(hcb, layerOptions) {\n            m.log.debug(\"Overlay bluefile: \" + hcb.file_name);\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            var size = 0;\n\n            layerOptions = layerOptions || {};\n\n            var basefiles = (Gx.HCB.length === 0);\n\n            Gx.HCB.push(hcb);\n\n            if (Gx.HCB.length === 1) {\n                basefile(this, true);\n            }\n\n            var layer = null;\n\n            if (layerOptions.layerType === undefined) {\n                if (hcb[\"class\"] === 1) {\n                    layer = Layer1D.overlay(this, hcb, layerOptions);\n                } else if (hcb[\"class\"] === 2) {\n                    layer = Layer2D.overlay(this, hcb, layerOptions);\n                }\n            } else {\n                if (layerOptions.layerType === \"1D\") {\n                    layer = Layer1D.overlay(this, hcb, layerOptions);\n                } else if (layerOptions.layerType === \"2D\") {\n                    layer = Layer2D.overlay(this, hcb, layerOptions);\n                } else {\n                    layer = layerOptions.layerType.overlay(this, hcb, layerOptions);\n                }\n            }\n\n            if (!layer) {\n                m.log.debug(\"failed to create layer\");\n                return;\n            }\n\n            // Allow the user to store aribitary data with the layer\n            if (layerOptions.user_data) {\n                layer.user_data = layerOptions.user_data;\n            }\n\n            // TODO - do we want to alert like the XM plot did?\n            //if (!Gx.all && size > Gx.bufmax && Gx.HCB.length == 1) {\n            // alert(\"Plot truncated to buffer size. Use panning or /ALL\n            // switch\");\n            //}\n            // The original code has a bug here. Fixed by moving changemode\n            // outside of\n            // the !basefiles check.\n            // You can recreate with SIGPLOT ,,, IR\n            // And then loading a file.\n            changemode(this, Gx.cmode);\n\n            // if this is not the first set of layers added and\n            // we haven't asked for the plot to expand to accomodate\n            // this layers new range, then simply draw the new layer.\n            if (!basefiles && !layerOptions.expand) {\n                draw_layer(this, layer);\n            } else {\n                if (Gx.HCB.length === 0) { // TODO dead code that cannot be reached\n                    basefile(this, false);\n                } else {\n                    Gx.basemode = Gx.cmode;\n                    var xmin;\n                    var xmax;\n                    if ((Gx.autox & 1) === 0) {\n                        xmin = Gx.xmin;\n                    }\n                    if ((Gx.autox & 2) === 0) {\n                        xmax = Gx.xmax;\n                    }\n                    scale_base(this, {\n                        get_data: true\n                    }, xmin, xmax);\n                    Mx.level = 0;\n                    if ((Gx.autox & 1) !== 0) {\n                        Gx.xmin = Mx.stk[0].xmin;\n                    }\n                    if ((Gx.autox & 2) !== 0) {\n                        Gx.xmax = Mx.stk[0].xmax;\n                    }\n                    if ((Gx.autoy & 1) !== 0) {\n                        Gx.ymin = Mx.stk[0].ymin;\n                    }\n                    if ((Gx.autoy & 2) !== 0) {\n                        Gx.ymax = Mx.stk[0].ymax;\n                    }\n                    Mx.resize = true;\n                    if (Gx.lyr[0].preferred_origin) {\n                        Mx.origin = Gx.lyr[0].preferred_origin;\n                    } else {\n                        Mx.origin = 1;\n                    }\n                }\n            }\n            form_plotnote(this);\n            this.refresh();\n\n            return (Gx.HCB.length - 1);\n        },\n\n        /**\n         * Load one or more files.\n         *\n         * @param {File[]}\n         *            a list of files to plot\n         */\n        load_files: function(files, layerType) {\n            var onload = (function(plot) {\n                return function(hdr) {\n                    plot.overlay_bluefile(hdr, layerType);\n                };\n            })(this);\n\n            for (var i = 0; i < files.length; i++) {\n                var f = files[i];\n                var br = new bluefile.BlueFileReader();\n                br.read(f, onload);\n            }\n        },\n\n        /**\n         * Reemove layers\n         *\n         * @example plot.get_layer(n);\n         *\n         * @param {Number}\n         *             The index of the layer. If not provided, all layers will\n         *             be removed\n         *\n         * @returns data_layer\n         *\n         */\n\n        deoverlay: function(index) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            if (Gx.HCB.length > 0) {\n                if (index === undefined) {\n                    for (var n = Gx.HCB.length - 1; n >= 0; n--) {\n                        this.remove_layer(n);\n                    }\n                } else if (index < 0) {\n                    var n = Gx.HCB.length + index;\n                    if (n < 0) {\n                        return;\n                    }\n                    this.remove_layer(n);\n                } else if (index < Gx.HCB.length) {\n                    this.remove_layer(index);\n                }\n            }\n            if (Gx.lyr.length === 0) {\n                basefile(this, false);\n                scale_base(this, {});\n            }\n        },\n\n        /**\n         * Remove a layer.\n         *\n         * @param index\n         *            the layer to remove\n         */\n        remove_layer: function(index) {\n            var Gx = this._Gx;\n\n            var fileName = \"\";\n            var HCB = null;\n\n            if ((index >= 0) && (index < Gx.HCB.length)) {\n                fileName = Gx.HCB[index].file_name;\n                // TODO if (Gx.modsource > 0) {\n                //\n                // }\n                HCB = Gx.HCB[index];\n                Gx.HCB[index] = null;\n                for (var n = index; n < Gx.HCB.length - 1; n++) {\n                    Gx.HCB[n] = Gx.HCB[n + 1];\n                }\n                Gx.HCB.length -= 1;\n            }\n\n            for (var n = Gx.lyr.length - 1; n >= 0; n--) {\n                if (Gx.lyr[n].hcb === HCB) {\n                    delete_layer(this, n);\n                }\n            }\n            form_plotnote(this);\n            this.refresh();\n\n            // Notify listeners that a file has been deoverlayed\n            var evt = document.createEvent('Event');\n            evt.initEvent('file_deoverlayed', true, true);\n            if (fileName !== \"\") {\n                evt.fileName = fileName; // The fileName that was\n            }\n            // de-overlayed\n            mx.dispatchEvent(this._Mx, evt);\n        },\n\n        /**\n         * Zoom onto a given pixel range.\n         */\n        pixel_zoom: function(x1, y1, x2, y2, continuous) {\n            var r1 = pixel_to_real(this, x1, y1);\n            var r2 = pixel_to_real(this, x2, y2);\n\n            this.zoom(r1, r2, continuous);\n        },\n\n        percent_zoom: function(xperc, yperc, continuous) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n\n            var xadj = 0;\n            if (Math.abs(xperc) < 1) {\n                xadj = Math.abs(Mx.stk[Mx.level].xmax - Mx.stk[Mx.level].xmin);\n                xadj = (xadj * xperc) / 2;\n            }\n\n            var yadj = 0;\n            if (Math.abs(yperc) < 1) {\n                yadj = Math.abs(Mx.stk[Mx.level].ymax - Mx.stk[Mx.level].ymin);\n                yadj = (yadj * yperc) / 2;\n            }\n\n            var ul = {\n                x: Math.max(Mx.stk[Mx.level].xmin + xadj, Gx.panxmin),\n                y: Math.max(Mx.stk[Mx.level].ymin + yadj, Gx.panymin)\n            };\n\n            var lr = {\n                x: Math.min(Mx.stk[Mx.level].xmax - xadj, Gx.panxmax),\n                y: Math.min(Mx.stk[Mx.level].ymax - yadj, Gx.panymax)\n            };\n\n            this.zoom(ul, lr, continuous);\n        },\n\n        /**\n         * Zoom onto a given region.\n         *\n         * @param ul\n         *            the uppler left corner\n         * @param {Number}\n         *            ul.x the upper left x pos in real plot value\n         * @param {Number}\n         *            ul.y the upper left y pos in real plot values\n         *\n         * @param lr\n         *            the lower right corner\n         * @param {Number}\n         *            lr the lower right x pos in real plot value\n         * @param {Number}\n         *            lr the lower right y pos in real plot values\n         *\n         * @param continuous\n         *            enter continuous zoom mode.  This will create a\n         *            new if you are on level 0, but stay on the same level\n         *            otherwise\n         */\n        zoom: function(ul, lr, continuous) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n\n            if (Mx.level >= 9) { // currently only allow 10 zooms\n                return;\n            }\n\n            if (ul.x === undefined) {\n                ul.x = Mx.stk[Mx.level].xmin;\n            }\n            if (ul.y === undefined) {\n                ul.y = Mx.stk[Mx.level].ymin;\n            }\n            if (lr.x === undefined) {\n                lr.x = Mx.stk[Mx.level].xmax;\n            }\n            if (lr.y === undefined) {\n                lr.y = Mx.stk[Mx.level].ymax;\n            }\n\n            if (lr.x < ul.x) {\n                var xtmp = lr.x;\n                lr.x = ul.x;\n                ul.x = xtmp;\n            }\n            if (lr.y < ul.y) {\n                var ytmp = lr.y;\n                lr.y = ul.y;\n                ul.y = ytmp;\n            }\n\n            var zstk = {};\n\n            // xscl/yscl are reset in sigplot.refresh\n            zstk.xscl = Mx.stk[Mx.level].xscl;\n            zstk.yscl = Mx.stk[Mx.level].yscl;\n\n            zstk.xmin = ul.x; // real world val at x1(origin=1,4) or\n            // x2(origin=2,4)\n            zstk.xmax = lr.x; // real world val at x2(origin=1,4) or\n            // x1(origin=2,4)\n            zstk.ymin = ul.y; // real world val at y2(origin=1,2) or\n            // y1(origin=3,4)\n            zstk.ymax = lr.y; // real world val at y1(origin=1,2) or\n            // y2(origin=3,4)\n            if (Gx.index) {\n                zstk.xmin = Math.min(zstk.xmin / Gx.xdelta);\n                zstk.xmax = Math.min(zstk.xmax / Gx.xdelta);\n            }\n\n            if (!continuous || (!Gx.inContinuousZoom)) {\n                // We aren't yet in continuous zoom mode\n                // so create a new level\n                Mx.stk.push(zstk);\n                Mx.level = Mx.stk.length - 1;\n            } else {\n                // Once in continuous zoom mode update the current level\n                Mx.stk[Mx.level] = zstk;\n            }\n            Gx.inContinuousZoom = continuous;\n\n            this.inZoom = true; // prevent recursive zooms\n            var evt = document.createEvent('Event');\n            evt.initEvent('zoom', true, true);\n            evt.level = Mx.level;\n            evt.inContinuousZoom = Gx.inContinuousZoom;\n            evt.xmin = Mx.stk[Mx.level].xmin;\n            evt.ymin = Mx.stk[Mx.level].ymin;\n            evt.xmax = Mx.stk[Mx.level].xmax;\n            evt.ymax = Mx.stk[Mx.level].ymax;\n            mx.dispatchEvent(Mx, evt); // TODO should we allow zoom to be cancelled?\n            this.inZoom = false;\n\n            this.refresh();\n        },\n\n        /**\n         * Unzoom one or more levels.\n         *\n         * @param [levels]\n         *            the number of levels to unzoom, if not provided unzoom\n         *            all.\n         */\n        unzoom: function(levels) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n\n            if (Mx.level === 0) {\n                return;\n            }\n\n            if (!levels) {\n                levels = Mx.stk.length;\n            }\n\n            while (levels > 0) {\n                if (Mx.level === 0) {\n                    break;\n                }\n                Mx.stk.pop();\n                Mx.level = Mx.stk.length - 1;\n                levels -= 1;\n            }\n\n            // If we are back at level 0, then\n            // rescale\n            if (Mx.level === 0) {\n                this.rescale();\n            }\n\n            // After any unzooms you can no longer remain in\n            // continuous zoom\n            Gx.inContinuousZoom = false;\n\n            this.inZoom = true; // prevent recursive zoom\n            // Send the event to listeners\n            var evt = document.createEvent('Event');\n            evt.initEvent('unzoom', true, true);\n            evt.level = Mx.level;\n            evt.xmin = Mx.stk[Mx.level].xmin;\n            evt.ymin = Mx.stk[Mx.level].ymin;\n            evt.xmax = Mx.stk[Mx.level].xmax;\n            evt.ymax = Mx.stk[Mx.level].ymax;\n            mx.dispatchEvent(Mx, evt);\n            this.inZoom = false;\n\n            this.refresh();\n        },\n\n        /**\n         * Register this plot to mimic zoom/unzoom of other plot\n         *\n         * @param other\n         *     the other plot to mimic\n         *\n         * @param mask\n         *     the set of event to respond to\n         *\n         * @param mask.zoom\n         *     if true, respond to zoom events\n         *\n         * @param mask.xzoom\n         *     if true, respond to zoom events for the x-axis only\n         *\n         * @param mask.yzoom\n         *     if true, respond to zoom events for the y-axis only\n         *\n         * @param mask.unzoom\n         *     if true, respond to unzoom events\n         *\n         * @param mask.pan\n         *     if true, respond to pan events\n         *\n         * @param mask.xpan\n         *     if true, respond to pan events for the x-axis only\n         *\n         * @param mask.ypan\n         *     if true, respond to pan events for the y-axis only\n         */\n        mimic: function(other, mask) {\n            var self = this;\n\n            if (!mask) {\n                throw \"mimic must be called with at least one event mask\";\n            }\n\n            this.unmimic(other);\n\n            if (mask.zoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    self.zoom({\n                            x: event.xmin,\n                            y: event.ymin\n                        }, {\n                            x: event.xmax,\n                            y: event.ymax\n                        },\n                        event.inContinuousZoom);\n                };\n                other.addListener(\"zoom\", f);\n                this.mimicListeners.listeners.zoom = f;\n            } else if (mask.xzoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    self.zoom({\n                            x: event.xmin,\n                            y: undefined\n                        }, {\n                            x: event.xmax,\n                            y: undefined\n                        },\n                        event.inContinuousZoom);\n                };\n                other.addListener(\"zoom\", f);\n                this.mimicListeners.listeners.zoom = f;\n            } else if (mask.yzoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    self.zoom({\n                            x: undefined,\n                            y: event.ymin\n                        }, {\n                            x: undefined,\n                            y: event.ymax\n                        },\n                        event.inContinuousZoom);\n                };\n                other.addListener(\"zoom\", f);\n                this.mimicListeners.listeners.zoom = f;\n            }\n\n            if (mask.unzoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    if (event.level < self._Mx.level) {\n                        self.unzoom(self._Mx.level - event.level);\n                    }\n                };\n                other.addListener(\"unzoom\", f);\n                this.mimicListeners.listeners.unzoom = f;\n            }\n\n            if (mask.pan || mask.xpan) {\n                var f = function(event) {\n                    if (self.inPan) {\n                        return;\n                    }\n                    updateViewbox(self, event.xmin, event.xmax, \"X\");\n                };\n                other.addListener(\"xpan\", f);\n                this.mimicListeners.listeners.xpan = f;\n            }\n\n            if (mask.pan || mask.ypan) {\n                var f = function(event) {\n                    if (self.inPan) {\n                        return;\n                    }\n                    updateViewbox(self, event.ymin, event.ymax, \"Y\");\n                };\n                other.addListener(\"ypan\", f);\n                this.mimicListeners.listeners.ypan = f;\n            }\n\n            this.mimicListeners.other = other;\n        },\n\n\n        /**\n         * Unregister zoom/unzoom listeners added via previous call to unmimic.\n         */\n        unmimic: function(other) {\n            var other = this.mimicListeners.other;\n            if (other) {\n                var that = this;\n                Object.keys(this.mimicListeners.listeners).forEach(function(evt) {\n                    if (that.mimicListeners.listeners[evt]) {\n                        other.removeListener(evt, that.mimicListeners.listeners[evt]);\n                    }\n                });\n            }\n            this.mimicListeners = {\n                other: null,\n                listeners: {\n                    zoom: null,\n                    unzoom: null,\n                    xpan: null,\n                    ypan: null\n                }\n            };\n        },\n\n        /**\n         * Like refresh, but doesn't rerender data\n         *\n         * @example plot.redraw();\n         */\n        redraw: function() {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n            var ctx = Mx.canvas.getContext(\"2d\");\n            if (!Gx.plotData.valid) {\n                this.refresh();\n            } else {\n                ctx.drawImage(Gx.plotData,\n                    Mx.l - 1,\n                    Mx.t - 1, (Mx.r - Mx.l) + 2, (Mx.b - Mx.t) + 2,\n                    Mx.l - 1,\n                    Mx.t - 1, (Mx.r - Mx.l) + 2, (Mx.b - Mx.t) + 2\n                );\n\n                draw_plugins(this);\n\n                Gx.cross_xpos = undefined;\n                Gx.cross_ypos = undefined;\n                if ((!Mx.warpbox) && (this.mouseOnCanvas)) {\n                    draw_crosshairs(this);\n                }\n\n                if (Gx.always_show_marker || Gx.show_marker) {\n                    draw_marker(this);\n                }\n            }\n        },\n\n        /**\n         * Refresh the entire plot\n         *\n         * @example plot.refresh();\n         */\n        refresh: function() {\n            var self = this;\n            mx.render(this._Mx, function() {\n                self._refresh();\n            });\n        },\n\n        /**\n         * Enable listeners for events on plot\n         */\n\n        enable_listeners: function() {\n            var Mx = this._Mx;\n            mx.addEventListener(Mx, \"mousedown\", this.onmousedown, false);\n            mx.addEventListener(Mx, \"mousemove\", this.throttledOnMouseMove, false);\n            window.addEventListener(\"mouseup\", Mx.onmouseup, false);\n            window.addEventListener(\"keydown\", Mx.onkeydown, false);\n            window.addEventListener(\"keyup\", Mx.onkeyup, false);\n            window.addEventListener(\"resize\", this.onresize, false);\n            document.addEventListener(\"mouseup\", this.docMouseUp, false);\n            mx.addEventListener(Mx, \"mouseup\", this.mouseup, false);\n            window.addEventListener(\"mousedown\", this.dragMouseDownHandler, false);\n            window.addEventListener(\"mousemove\", this.throttledDragOnMouseMove, false);\n            window.addEventListener(\"mouseup\", this.dragMouseUpHandler, false);\n            window.addEventListener(\"wheel\", this.wheelHandler, false);\n            window.addEventListener(\"mousewheel\", this.wheelHandler, false);\n            window.addEventListener(\"DOMMouseScroll\", this.wheelHandler, false);\n            window.addEventListener(\"keypress\", this.onkeypress, false);\n        },\n\n        /**\n         * Enable listeners for events on plot\n         */\n\n        disable_listeners: function() {\n            var Mx = this._Mx;\n\n            mx.removeEventListener(Mx, \"mousedown\", this.onmousedown, false);\n            mx.removeEventListener(Mx, \"mousemove\", this.throttledOnMouseMove,\n                false);\n            mx.removeEventListener(Mx, \"mouseup\", this.mouseup, false);\n            window.removeEventListener(\"mouseup\", Mx.onmouseup, false);\n            window.removeEventListener(\"keydown\", Mx.onkeydown, false);\n            window.removeEventListener(\"keyup\", Mx.onkeyup, false);\n            window.removeEventListener(\"resize\", this.onresize, false);\n            document.removeEventListener(\"mouseup\", this.docMouseUp, false);\n            window.removeEventListener(\"mousedown\", this.dragMouseDownHandler,\n                false);\n            window.removeEventListener(\"mousemove\", this.throttledDragOnMouseMove,\n                false);\n            window.removeEventListener(\"mouseup\", this.dragMouseUpHandler, false);\n            window.removeEventListener(\"wheel\", this.wheelHandler, false);\n            window.removeEventListener(\"mousewheel\", this.wheelHandler, false);\n            window.removeEventListener(\"DOMMouseScroll\", this.wheelHandler, false);\n            window.removeEventListener(\"keypress\", this.onkeypress, false);\n        },\n\n        checkresize: function() {\n            if (mx.checkresize(this._Mx)) {\n                this.refresh();\n            }\n        },\n        addColorMaps: function(colormaps) {\n            colormaps.forEach(function(cmap) {\n                if (cmap.hasOwnProperty(\"name\")) {\n                    m.Mc.colormap.push(cmap);\n                }\n\n            });\n\n        },\n        _refresh: function() {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            var ctx = Mx.canvas.getContext(\"2d\");\n            var plugin_index = 0;\n\n            if (Gx.hold) {\n                return;\n            }\n            var font_width = Mx.font_width;\n            if (Mx.font_scaled) {\n                font_width = Math.min(Mx.font_width, Mx.width / 64);\n            }\n            mx.set_font(Mx, font_width);\n            Gx.pthk = Mx.text_w * 1.5;\n\n            if (Gx.specs) {\n                var ytimecode = false;\n                if (Gx.ylab === 4) { //time-based tics\n                    ytimecode = true;\n                }\n                // Set left and right edges\n                if (Gx.show_y_axis === true) {\n                    Mx.l = Mx.text_w * 6;\n                    if (ytimecode) {\n                        // If we are in ytimecode, determine if we need the extra\n                        // space to hold the entire YYYY:MM:DD\n                        var need_full_ymd = ((Math.abs(Mx.stk[0].ymin) >= 31536000) ||\n                            (Math.abs(Mx.stk[0].ymax) >= 31536000));\n                        if (need_full_ymd) {\n                            Mx.l = Mx.text_w * 11;\n                        }\n                    }\n                } else {\n                    Mx.l = 1;\n                }\n                if (Gx.pan === true) {\n                    Mx.r = Mx.width - (Gx.pthk + 2 * Mx.text_w);\n                } else {\n                    Mx.r = Mx.width - 5;\n                }\n\n                // Set top and bottom\n                if (Gx.show_readout) {\n                    Mx.t = Mx.text_h * 2;\n                    if (Gx.show_x_axis) {\n                        Mx.b = Mx.height - Mx.text_h * 4;\n                    } else {\n                        Mx.b = Mx.height - Mx.text_h * 3;\n                    }\n                } else if (Gx.x_scrollbar_location === \"bottom\") {\n                    Mx.t = Mx.text_h * 2;\n                    if (Gx.pan) {\n                        if (Gx.show_x_axis) {\n                            Mx.b = Mx.height - Mx.text_h * 3;\n                        } else {\n                            Mx.b = Mx.height - Mx.text_h * 2;\n                        }\n                    } else {\n                        if (Gx.show_x_axis) {\n                            Mx.b = Mx.height - Mx.text_h * 2;\n                        } else {\n                            Mx.b = Mx.height - 5;\n                        }\n                    }\n                } else {\n                    if (Gx.pan) {\n                        Mx.t = Gx.pthk + 2 * Mx.text_w;\n                    } else {\n                        Mx.t = 1;\n                    }\n                    if (Gx.show_x_axis) {\n                        Mx.b = Mx.height - (Mx.text_h * 3) / 2;\n                    } else {\n                        Mx.b = Mx.height - 2;\n                    }\n                }\n\n                // set left and right edges for X scrollbar\n                if (Gx.show_readout) {\n                    // If there is a readout, show it in the bottom-right\n                    // next to the readout\n                    Gx.pl = Mx.text_w * 50;\n                } else {\n                    // Otherwise, by default it conforms to legacy\n                    // behaviour and renders at the top next to the label\n                    if (Gx.x_scrollbar_location === \"bottom\") {\n                        Gx.pl = Mx.l;\n                    } else {\n                        Gx.pl = Mx.text_w * 35;\n                    }\n                }\n                Gx.pr = Math.max(Gx.pl + Mx.text_w * 9, Mx.r);\n\n                // set top scrollbar edge for X scrollbar\n                if (Gx.show_readout) {\n                    if (Gx.show_x_axis) {\n                        Gx.pt = Mx.b + Mx.text_h + (Mx.height - Mx.b - Mx.text_h - Gx.pthk) / 2;\n                    } else {\n                        Gx.pt = Mx.b + (Mx.height - Mx.b - Gx.pthk) / 2;\n                    }\n                } else {\n                    // Otherwise, by default it conforms to legacy\n                    // behaviour and renders at the top\n                    if (Gx.x_scrollbar_location === \"bottom\") {\n                        if (Gx.show_x_axis) {\n                            Gx.pt = Mx.b + Mx.text_h + (Mx.height - Mx.b - Mx.text_h - Gx.pthk) / 2;\n                        } else {\n                            Gx.pt = Mx.b + (Mx.height - Mx.b - Gx.pthk) / 2;\n                        }\n                    } else {\n                        Gx.pt = (Mx.t - Gx.pthk) / 2;\n                    }\n                }\n                Gx.lbtn = Mx.text_h + Mx.text_w + 2;\n            } else {\n                if (Gx.pan) {\n                    Mx.t = Gx.pthk + 2 * Mx.text_w;\n                    Mx.r = Mx.width - (Gx.pthk + Mx.text_w);\n                } else {\n                    Mx.t = 1;\n                    Mx.r = Mx.width - 2;\n                }\n                Mx.b = Mx.height - 2;\n                Mx.l = 1;\n                Gx.pl = Mx.l;\n                Gx.pr = Mx.r;\n                Gx.pt = (Mx.t - Gx.pthk) / 2;\n                Gx.lbtn = 0;\n            }\n\n            // pan select ranges\n            Gx.pyl = Mx.r + (Mx.width - Mx.r - Gx.pthk) / 2 + 1;\n\n            if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                // Move the plot over to make room\n                var prev_Mx_r = Mx.r;\n                Mx.r = prev_Mx_r - 100;\n\n            }\n\n            if (Gx.p_cuts && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                //turn cross hairs on\n                Gx.cross = true;\n\n                //Move the plot over to make room\n                var prev_Mx_r = Mx.r;\n                Mx.r = prev_Mx_r - 100;\n\n                //Move the plot up to make room\n                var prev_Mx_b = Mx.b;\n                Mx.b = prev_Mx_b - 100;\n            }\n\n            if (Gx.xcut_now) {\n                Mx.canvas.width = Gx.x_box_w - 1;\n                Mx.canvas.height = Gx.x_box_h;\n                Mx.r = Gx.x_box_w - 1;\n                Mx.l = 0;\n                Mx.b = Gx.x_box_h;\n                Mx.t = 0;\n            }\n\n            if (Gx.ycut_now) {\n                Mx.canvas.width = Gx.y_box_h - 1;\n                Mx.canvas.height = Gx.y_box_w;\n                Mx.r = Gx.y_box_h - 1;\n                Mx.l = 0;\n                Mx.b = Gx.y_box_w;\n                Mx.t = 0;\n            }\n\n            // set virtual window size/pos/scaling for current level\n            var k = Mx.level;\n            Mx.stk[k].x1 = Mx.l;\n            Mx.stk[k].y1 = Mx.t;\n            Mx.stk[k].x2 = Mx.r;\n            Mx.stk[k].y2 = Mx.b;\n            Mx.stk[k].xscl = (Mx.stk[k].xmax - Mx.stk[k].xmin) / (Mx.r - Mx.l);\n            Mx.stk[k].yscl = (Mx.stk[k].ymax - Mx.stk[k].ymin) / (Mx.b - Mx.t);\n\n            // In case things have rescaled\n            var re = pixel_to_real(this, Mx.xpos, Mx.ypos);\n            Gx.retx = re.x;\n            Gx.rety = re.y;\n\n            // modify stack for section plotting\n            //if (Gx.sections) {\n            // TODO\n            //}\n\n            if (Gx.panning === 0 || Gx.panning !== 0) { // TODO Gx.panning !==\n                // 0?? Does this work?\n                Gx.plotData.valid = false;\n                mx.clear_window(Mx);\n            } //else if (!Gx.specs) {\n            // TODO\n            //} else if (Gx.panning === 1) {\n            // TODO\n            //} else {\n            // TODO\n            //}\n\n            var xlab = Gx.xlab;\n            var ylab = Gx.ylab;\n\n            if (xlab === undefined) {\n                xlab = 30;\n            }\n            if (Gx.index) {\n                xlab = 0;\n            }\n\n            if (ylab === undefined) {\n                var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);\n                if (Gx.cmode === 1) {\n                    ylab = 28;\n                } else if (Gx.cmode === 2) {\n                    ylab = Gx.plab;\n                } else if ((Gx.cmode === 3) && (cx)) {\n                    ylab = 21;\n                } else if (Gx.cmode === 4) {\n                    ylab = 22;\n                } else if (Gx.cmode === 5) {\n                    ylab = 22;\n                    xlab = 21;\n                } else if (Gx.cmode === 6) {\n                    ylab = 26;\n                } else if (Gx.cmode === 7) {\n                    ylab = 27;\n                } else {\n                    ylab = 0;\n                }\n            }\n\n            if (Gx.specs) {\n                if (Gx.sections === 0) {\n                    var drawaxis_flags = {\n                        grid: Gx.grid\n                    };\n                    if (Gx.panning === 2) {\n                        drawaxis_flags.noxtlab = true;\n                    } // TODO Does this work??\n                    if (!Gx.show_x_axis) {\n                        drawaxis_flags.noxtics = true;\n                        drawaxis_flags.noxtlab = true;\n                        drawaxis_flags.noxplab = true;\n                    }\n                    if (!Gx.show_y_axis) {\n                        drawaxis_flags.noytics = true;\n                        drawaxis_flags.noytlab = true;\n                        drawaxis_flags.noyplab = true;\n                    }\n                    if (Gx.specs && !Gx.show_readout && !Gx.pan) {\n                        drawaxis_flags.noyplab = true;\n                        drawaxis_flags.noxplab = true;\n                    }\n                    if (Gx.gridBackground) {\n                        drawaxis_flags.fillStyle = Gx.gridBackground;\n                    }\n                    if (Gx.gridStyle) {\n                        drawaxis_flags.gridStyle = Gx.gridStyle;\n                    }\n                    if (Gx.xmult) {\n                        drawaxis_flags.xmult = Gx.xmult;\n                    }\n                    if (Gx.ymult) {\n                        drawaxis_flags.ymult = Gx.ymult;\n                    }\n                    if (xlab === 4) { //time-based tics\n                        drawaxis_flags.xtimecode = true;\n                    }\n                    if (ylab === 4) { //time-based tics\n                        drawaxis_flags.ytimecode = true;\n                    }\n                    if (Gx.xlabel !== undefined) {\n                        drawaxis_flags.xlabel = Gx.xlabel;\n                    }\n                    if (Gx.ylabel !== undefined) {\n                        drawaxis_flags.ylabel = Gx.ylabel;\n                    }\n                    mx.drawaxis(Gx, Mx, Gx.xdiv, Gx.ydiv, xlab, ylab, drawaxis_flags);\n                } //else {\n                // Not implemented yet\n                //}\n\n                var i = Gx.lbtn - 2;\n\n                if (Gx.show_readout && Gx.pan && !Gx.no_legend_button) {\n                    if (Gx.legend) {\n                        Gx.legendBtnLocation = {\n                            x: Mx.width - Gx.lbtn,\n                            y: 2,\n                            width: i,\n                            height: i\n                        };\n                        mx.shadowbox(Mx, Mx.width - Gx.lbtn, 2, i, i, 1, -2,\n                            'L');\n                    } else {\n                        Gx.legendBtnLocation = {\n                            x: Mx.width - Gx.lbtn,\n                            y: 2,\n                            width: i,\n                            height: i\n                        };\n                        mx.shadowbox(Mx, Mx.width - Gx.lbtn, 2, i, i, 1,\n                            2, 'L');\n                    }\n                    display_specs(this);\n                } else {\n                    Gx.legendBtnLocation = null;\n                }\n            } else if (Gx.grid && Gx.sections >= 0) {\n                var drawaxis_flags = {\n                    grid: true,\n                    noaxisbox: true,\n                    noxtics: true,\n                    noxtlab: true,\n                    noxplab: true,\n                    noytics: true,\n                    noytlab: true,\n                    noyplab: true\n                };\n                mx.drawaxis(Gx, Mx, Gx.xdiv, Gx.ydiv, xlab, ylab,\n                    drawaxis_flags);\n            }\n\n            draw_layers(this);\n\n            draw_accessories(this, 4);\n\n\n\n            draw_plugins(this);\n\n\n            Gx.cross_xpos = undefined;\n            Gx.cross_ypos = undefined;\n            if ((!Mx.warpbox) && (this.mouseOnCanvas)) {\n                draw_crosshairs(this);\n                if (!Gx.y_cut_press_on && !Gx.x_cut_press_on && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                    draw_p_cuts(this);\n                }\n            }\n\n            if (Gx.always_show_marker || Gx.show_marker) {\n                draw_marker(this);\n            }\n        }\n\n    };\n\n    // /////////////////////////////////////////////////////////////////////////\n    // Private methods and objects\n    // /////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Map integer cmode to string equivalent.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var cxm = [\"Ma\", \"Ph\", \"Re\", \"Im\", \"IR\", \"Lo\", \"L2\"];\n\n    /**\n     * Map integer abscissa mode to string equivalent.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var cam = [\"(absc)\", \"(indx)\", \"(1/ab)\", \"(dydx)\"];\n\n\n\n    /**\n     * This object holds the data associated with layers in the plot.\n     *\n     * @constructor\n     * @memberOf sigplot\n     * @private\n     */\n    function SIGPLOTLAYER() {\n\n        this.xbuf = undefined; // raw (ArrayBuffer) of ABSC data\n        this.ybuf = undefined; // raw (ArrayBuffer) of ORD data\n\n        this.offset = 0.0;\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n        this.imin = 0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.name = \"\";\n        this.cx = false;\n        this.hcb = undefined; // index in Gx.HCB\n        // xbufn = xbuf.byteLength\n        // ybufn = ybuf.byteLength\n        this.size = 0;\n\n        this.display = true;\n        this.color = 0;\n        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting\n        this.thick = 1; // negative for dashed\n        this.symbol = 0;\n        this.radius = 3;\n\n        this.skip = 0; // number of elements between ord values\n        this.xsub = 0;\n        this.ysub = 0;\n        this.xdata = false; // true if X data is data from file\n\n        this.options = {};\n    }\n\n    /**\n     * The graphics structure object used to hold state about the plot.\n     *\n     * @constructor\n     * @memberOf sigplot\n     * @private\n     */\n    function GX() {\n        this.xptr = undefined; // xpoints as anything \"array-like\"...\n        this.yptr = undefined; // ypoints as anything \"array-like\"...\n\n        this.retx = 0.0; // absc coord. at mouse location\n        this.rety = 0.0;\n        this.xmrk = 0.0; // absc coord of mark\n        this.ymrk = 0.0;\n        this.aretx = 0.0; // absc coord. at mouse location\n        this.arety = 0.0;\n\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n\n        this.panxmin = 0.0;\n        this.panxmax = 0.0;\n        this.panymin = 0.0;\n        this.panymax = 0.0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.xmult = undefined;\n        this.ymin = 0.0;\n        this.ymax = 0.0;\n        this.ymult = undefined;\n        this.zmin = undefined;\n        this.zmax = undefined;\n        this.zoff = 0;\n        this.dbmin = 0.0;\n        this.pxscl = 0.0;\n        this.pyscl = 0.0;\n        this.pmt = 0.0;\n\n        this.note = \"\";\n        // this.mouse unnecssary because we don't have res table\n        this.format = \"\";\n\n        this.pl = 0;\n        this.pr = 0;\n        this.pt = 0;\n        this.pb = 0;\n        this.px1 = 0; // specifies plotting field\n        this.px2 = 0;\n        this.py1 = 0;\n        this.py2 = 0;\n\n        this.pyl = 0;\n        this.pthk = 0; // thickness of pan drag box\n\n        this.modlayer = 0;\n        this.modsource = 0;\n        this.modified = false;\n        this.modmode = 0;\n\n        this.xdiv = 0;\n        this.ydiv = 0;\n\n        this.all = false;\n        this.expand = false;\n        this.cross = false;\n        this.grid = true;\n        this.gridBackground = undefined;\n        this.index = false;\n        this.pan = true;\n        this.specs = true;\n        this.legend = true;\n        this.xdata = false;\n\n        this.show_x_axis = true;\n        this.show_y_axis = true;\n        this.show_readout = true;\n        this.hide_note = false;\n        this.autohide_readout = false;\n        this.autohide_panbars = false;\n        this.panning = undefined;\n        this.panmode = 0; // TODO Is this a good default value? Where is this\n        // changed?\n        this.hold = false;\n\n        this.sections = 0; // number of plot sections, -1 for layers\n        this.iysec = 0;\n        this.nsec = 0; // actual number of sections\n        this.isec = 0; // current sections\n\n        this.xlab = undefined;\n        this.xlabel = undefined;\n        this.ylab = undefined;\n        this.ylabel = undefined;\n\n        // 0 - use HTML5 canvas smoothing\n        // 1 - average\n        // 2 - min\n        // 3 - max\n        // 4 - first\n        // 5 - max abs\n        this.xcompression = 0;\n\n        this.default_rubberbox_action = \"zoom\";\n        this.default_rubberbox_mode = \"box\";\n\n        this.wheelscroll_mode_natural = true;\n        this.scroll_time_interval = 10;\n\n        this.repeatPanning = undefined;\n        this.stillPanning = undefined; // TODO maybe merge this variable with\n        // Gx.panning in future?\n\n        this.autol = -1;\n\n        this.lineSmoothing = false; // not implemented\n        this.rasterSmoothing = false;\n\n        this.wheelZoom = false;\n        this.wheelZoomPercent = 0.2;\n        this.inContinuousZoom = false;\n\n        this.lyr = [];\n        this.HCB = [];\n        this.plugins = [];\n\n        this.plotData = document.createElement(\"canvas\");\n        this.plotData.valid = false;\n\n        // Large colorbar info, like button locations\n        this.lg_colorbar = false;\n\n        // Colorbar button top or bottom positions\n        this.cbb_top_x1 = 0;\n        this.cbb_top_y1 = 0;\n        this.cbb_bot_x1 = 0;\n        this.cbb_bot_y1 = 0;\n        this.cbb_width = 0;\n        this.cbb_height = 0;\n\n        //P_cuts info\n        this.p_cuts = false;\n        this.x_box_x = 0;\n        this.x_box_y = 0;\n        this.x_box_h = 0;\n        this.x_box_w = 0;\n        this.y_box_x = 0;\n        this.y_box_y = 0;\n        this.y_box_h = 0;\n        this.y_box_w = 0;\n        this.p_cuts_xpos = undefined;\n        this.p_cuts_ypos = undefined;\n        this.x_cut_data = [];\n        this.y_cut_data = [];\n        //the plot to hold the x-cut on bottom\n        this.xcut = undefined;\n        //layer xcut that will be displayed on pop-up\n        this.xcut_layer = undefined;\n        this.x_cut_press_on = false;\n        //variable that is true if the bottom xcut is being drawn\n        this.xcut_now = false;\n        //the plot to hold the y-cut\n        this.ycut = undefined;\n        //layer ycut that will be displayed on pop-up\n        this.ycut_layer = undefined;\n        this.y_cut_press_on = false;\n        //variable that is true if the ycut is being drawn\n        this.ycut_now = false;\n        this.ylabel_stash = undefined;\n        this.xlabel_stash = undefined;\n        //div to hold x-cut\n        this.element1 = undefined;\n        //div to hold y cut\n        this.element2 = undefined;\n\n        //x and y sticky key configuration (\"automatic\" displays point on\n        //1D and cut on 2D, \"disable\" doesn't display anything, \"pop-up\"\n        //displays point on both, and \"cuts\" displays only cuts on 2D)\n        this.xyKeys = \"automatic\";\n        //true if the x value is being displayed on plot\n        this.x_pop_now = false;\n        //true if the y value is being displayed on plot\n        this.y_pop_now = false;\n\n        //the drawmode and autol before the x or y cut was showing\n        this.old_drawmode = undefined;\n        this.old_autol = undefined;\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function setup_cmap(plot, cmap) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        // If a color map array was provided make a custom map\n        if (Array.isArray(cmap)) {\n            var custom_cmap = {\n                name: \"Custom\",\n                colors: cmap\n            };\n            if (m.Mc.colormap[m.Mc.colormap.length - 1].name === \"Custom\") {\n                m.Mc.colormap[m.Mc.colormap.length - 1].colors = cmap;\n            } else {\n                m.Mc.colormap.push(custom_cmap);\n            }\n            Gx.cmap = m.Mc.colormap.length - 1;\n        } else if (typeof cmap === \"string\") {\n            Gx.cmap = -1;\n            for (var xc = 0; xc < m.Mc.colormap.length; xc++) {\n                if (m.Mc.colormap[xc].name === cmap) {\n                    Gx.cmap = xc;\n                    break;\n                }\n            }\n        } else {\n            Gx.cmap = cmap;\n        }\n\n        if (Gx.ncolors < 0) {\n            Gx.ncolors = -1 * Gx.ncolors;\n            Gx.cmap = Math.max(1, Gx.cmap);\n        }\n        if ((Gx.cmap < 0) || (Gx.cmap > m.Mc.colormap.length)) {\n            if (Gx.cmode === 2) {\n                Gx.cmap = 2; // wheel\n            } else {\n                Gx.cmap = 1; // ramp\n            }\n        }\n\n        mx.colormap(Mx, m.Mc.colormap[Gx.cmap].colors, Gx.ncolors);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_x(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var ls = Gx.aretx.toString();\n        if (Gx.iabsc === 1) {\n            mx.message(Mx, \"INDEX = \" + ls);\n        } else if (Gx.iabsc === 2) {\n            mx.message(Mx, \"1/X = \" + ls);\n        } else {\n            //if (Gx.xlab === 4) {\n            // TODO\n            //}\n            mx.message(Mx, \"X = \" + ls);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_timecode(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.lyr.length > 0) {\n            //var hcb = Gx.HCB[Gx.lyr[0].hcb];\n            var hcb = Gx.lyr[0].hcb; // mmm-TODO-needs investigation\n            if ((hcb[\"class\"] === 1) && ((hcb.xunits === 1) || (hcb.xunits === 4))) {\n                mx.message(Mx, \"Time = \" + m.sec2tod(hcb.timecode + Gx.retx), true);\n            } else if ((hcb[\"class\"] === 2) && ((hcb.yunits === 1) || (hcb.yunits === 4))) {\n                mx.message(Mx, \"Time = \" + m.sec2tod(hcb.timecode + Gx.rety), true);\n            } else {\n                mx.message(Mx, \"Time = UNK\");\n            }\n\n        }\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_y(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var ls = Gx.arety.toString();\n        if (Gx.iabsc === 2) {\n            mx.message(Mx, \"1/Y = \" + ls);\n        } else {\n            //if (Gx.xlab === 4) {\n            // TODO\n            //}\n            mx.message(Mx, \"Y = \" + ls);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_z(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.zmin && Gx.zmax) { // at least one layer has a z dimension\n            var msg = \"\";\n            if (Gx.lyr.length === 1) {\n                var msg = \"Z = \" + Gx.lyr[0].get_z(Gx.retx, Gx.rety).toString();\n            } else {\n                var msg = \"TODO\"; // TODO we need to think of what we want to display here\n            }\n            mx.message(Mx, msg);\n        }\n    }\n\n    /**\n     * Constructs a menu for updating the pan scale of the plot.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param command\n     *            The scroll direction to use. Either \"XPAN\" or \"YPAN\" are\n     *            acceptable.\n     * @private\n     */\n    function sigplot_scrollScaleMenu(plot, command) {\n        var Mx = plot._Mx;\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n        mx.menu(Mx, {\n            title: \"SCROLLBAR\",\n            refresh: function() {\n                plot.refresh();\n            },\n            finalize: function() {\n                mx.addEventListener(Mx, \"mousedown\",\n                    plot.onmousedown, false);\n                plot.refresh();\n            },\n            items: [{\n                text: \"Expand Range\",\n                handler: function() {\n                    middleClickScrollMenuAction(plot,\n                        mx.SB_EXPAND, command);\n                }\n            }, {\n                text: \"Shrink Range\",\n                handler: function() {\n                    middleClickScrollMenuAction(plot,\n                        mx.SB_SHRINK, command);\n                }\n            }, {\n                text: \"Expand Full\",\n                handler: function() {\n                    middleClickScrollMenuAction(plot,\n                        mx.SB_FULL, command);\n                }\n            }]\n        });\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_mainmenu(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        // show mainmenu\n        //\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n        // Sub-menus\n        var CONTROLS_MENU = {\n            text: \"Cntrls...\",\n            menu: {\n                title: \"CONTROLS OPTIONS\",\n                items: [{\n                    text: \"Continuous (Disabled)\",\n                    checked: Gx.cntrls === -2,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: -2\n                        });\n                    }\n                }, {\n                    text: \"LM Click (Disabled)\",\n                    checked: Gx.cntrls === -1,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: -1\n                        });\n                    }\n                }, {\n                    text: \"Off\",\n                    checked: Gx.cntrls === 0,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: 0\n                        });\n                    }\n                }, {\n                    text: \"LM Click\",\n                    checked: Gx.cntrls === 1,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: 1\n                        });\n                    }\n                }, {\n                    text: \"Continuous\",\n                    checked: Gx.cntrls === 2,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: 2\n                        });\n                    }\n                }]\n            }\n        };\n\n        var CXMODE_MENU = {\n            text: \"CX Mode...\",\n            menu: {\n                title: \"COMPLEX MODE\",\n                items: [{\n                    text: \"Magnitude\",\n                    checked: Gx.cmode === 1,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 1\n                        });\n                    }\n                }, {\n                    text: \"Phase\",\n                    checked: Gx.cmode === 2,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 2\n                        });\n                    }\n                }, {\n                    text: \"Real\",\n                    checked: Gx.cmode === 3,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 3\n                        });\n                    }\n                }, {\n                    text: \"Imaginary\",\n                    checked: Gx.cmode === 4,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 4\n                        });\n                    }\n                }, {\n                    text: \"IR: Imag/Real\",\n                    checked: Gx.cmode === 5,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 5\n                        });\n                    }\n                }, {\n                    text: \"10*Log10\",\n                    checked: Gx.cmode === 6,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 6\n                        });\n                    }\n                }, {\n                    text: \"20*Log10\",\n                    checked: Gx.cmode === 7,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 7\n                        });\n                    }\n                }]\n            }\n        };\n\n        var SCALING_MENU = {\n            text: \"Scaling...\",\n            menu: {\n                title: \"SCALING\",\n                items: [{\n                    text: \"Y Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Parameters...\",\n                    checked: (Gx.autoy === 0),\n                    handler: function() {\n                        Gx.autoy = 0;\n\n                        var nextPrompt = function() {\n                            setupPrompt(\n                                plot,\n                                \"Y Axis Max:\",\n                                mx.floatValidator,\n                                function(finalValue) {\n                                    if (parseFloat(finalValue) !== Mx.stk[Mx.level].ymax) {\n                                        // Only update if different\n                                        // value\n                                        if (finalValue === \"\") {\n                                            finalValue = 0;\n                                        }\n                                        updateViewbox(\n                                            plot,\n                                            Mx.stk[Mx.level].ymin,\n                                            parseFloat(finalValue),\n                                            \"Y\");\n                                    } else {\n                                        plot.refresh();\n                                    }\n                                }, Mx.stk[Mx.level].ymax,\n                                undefined, undefined, undefined);\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Y Axis Min:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Mx.stk[Mx.level].ymin) {\n                                    // Only update if different\n                                    // value\n                                    if (finalValue === \"\") {\n                                        finalValue = 0;\n                                    }\n                                    updateViewbox(plot,\n                                        parseFloat(finalValue),\n                                        Mx.stk[Mx.level].ymax,\n                                        \"Y\");\n                                } else {\n                                    plot.refresh();\n                                }\n\n                            }, Mx.stk[Mx.level].ymin, undefined,\n                            undefined, nextPrompt);\n                    }\n                }, {\n                    text: \"Min Auto\",\n                    checked: (Gx.autoy === 1),\n                    handler: function() {\n                        Gx.autoy = 1;\n                    }\n                }, {\n                    text: \"Max Auto\",\n                    checked: (Gx.autoy === 2),\n                    handler: function() {\n                        Gx.autoy = 2;\n                    }\n                }, {\n                    text: \"Full Auto\",\n                    checked: (Gx.autoy === 3),\n                    handler: function() {\n                        Gx.autoy = 3;\n                    }\n                }, {\n                    text: \"X Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Parameters...\",\n                    checked: (Gx.autox === 0),\n                    handler: function() {\n                        Gx.autox = 0;\n\n                        var nextPrompt = function() {\n                            setupPrompt(\n                                plot,\n                                \"X Axis Max:\",\n                                mx.floatValidator,\n                                function(finalValue) {\n                                    if (parseFloat(finalValue) !== Mx.stk[Mx.level].xmax) {\n                                        // Only update if different\n                                        // value\n                                        if (finalValue === \"\") {\n                                            finalValue = 0;\n                                        }\n                                        updateViewbox(\n                                            plot,\n                                            Mx.stk[Mx.level].xmin,\n                                            parseFloat(finalValue),\n                                            \"X\");\n                                    } else {\n                                        plot.refresh();\n                                    }\n                                }, Mx.stk[Mx.level].xmax,\n                                undefined, undefined, undefined);\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"X Axis Min:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Mx.stk[Mx.level].xmin) {\n                                    // Only update if different\n                                    // value\n                                    if (finalValue === \"\") {\n                                        finalValue = 0;\n                                    }\n                                    updateViewbox(plot,\n                                        parseFloat(finalValue),\n                                        Mx.stk[Mx.level].xmax,\n                                        \"X\");\n                                } else {\n                                    plot.refresh();\n                                }\n                            }, Mx.stk[Mx.level].xmin, undefined,\n                            undefined, nextPrompt);\n                    }\n                }, {\n                    text: \"Min Auto\",\n                    checked: (Gx.autox === 1),\n                    handler: function() {\n                        Gx.autox = 1;\n                    }\n                }, {\n                    text: \"Max Auto\",\n                    checked: (Gx.autox === 2),\n                    handler: function() {\n                        Gx.autox = 2;\n                    }\n                }, {\n                    text: \"Full Auto\",\n                    checked: (Gx.autox === 3),\n                    handler: function() {\n                        Gx.autox = 3;\n                    }\n                }, {\n                    text: \"Z Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Parameters...\",\n                    checked: (Gx.autoz === 0),\n                    handler: function() {\n                        Gx.autoz = 0;\n\n                        var nextPrompt = function() {\n                            setupPrompt(\n                                plot,\n                                \"Z Axis Max:\",\n                                mx.floatValidator,\n                                function(finalValue) {\n                                    if (parseFloat(finalValue) !== Gx.zmax) {\n                                        // Only update if different\n                                        // value\n                                        if (finalValue === \"\") {\n                                            finalValue = 0;\n                                        }\n                                        plot.change_settings({\n                                            zmax: finalValue\n                                        });\n                                    }\n                                }, Gx.zmax,\n                                undefined, undefined, undefined);\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Z Axis Min:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.zmin) {\n                                    if (finalValue === \"\") {\n                                        finalValue = 0;\n                                    }\n                                    plot.change_settings({\n                                        zmin: finalValue\n                                    });\n                                }\n                            }, Gx.zmin, undefined,\n                            undefined, nextPrompt);\n                    }\n                }, {\n                    text: \"Min Auto\",\n                    checked: (Gx.autoz === 1),\n                    handler: function() {\n                        plot.change_settings({\n                            autoz: 1\n                        });\n                    }\n                }, {\n                    text: \"Max Auto\",\n                    checked: (Gx.autoz === 2),\n                    handler: function() {\n                        plot.change_settings({\n                            autoz: 2\n                        });\n                    }\n                }, {\n                    text: \"Full Auto\",\n                    checked: (Gx.autoz === 3),\n                    handler: function() {\n                        plot.change_settings({\n                            autoz: 3\n                        });\n                    }\n                }]\n            }\n        };\n\n        var GRID_MENU = {\n            text: \"Grid\",\n            handler: function() {\n                plot.change_settings({\n                    grid: !Gx.grid\n                });\n            }\n        };\n\n        var SETTINGS_MENU = {\n            text: \"Settings...\",\n            menu: {\n                title: \"SETTINGS\",\n                items: [{\n                    text: \"ALL Mode\",\n                    checked: Gx.all,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            all: !Gx.all\n                        });\n                    }\n                }, {\n                    text: \"Controls...\",\n                    menu: {\n                        title: \"CONTROLS OPTIONS\",\n                        items: [{\n                            text: \"Continuous (Disabled)\",\n                            checked: Gx.cntrls === -2,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: -2\n                                });\n                            }\n                        }, {\n                            text: \"LM Click (Disabled)\",\n                            checked: Gx.cntrls === -1,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: -1\n                                });\n                            }\n                        }, {\n                            text: \"Off\",\n                            checked: Gx.cntrls === 0,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: 0\n                                });\n                            }\n                        }, {\n                            text: \"LM Click\",\n                            checked: Gx.cntrls === 1,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: 1\n                                });\n                            }\n                        }, {\n                            text: \"Continuous\",\n                            checked: Gx.cntrls === 2,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: 2\n                                });\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Mouse...\",\n                    menu: {\n                        title: \"MOUSE OPTIONS\",\n                        items: [{\n                            text: \"LM Drag (Zoom)\",\n                            checked: Gx.default_rubberbox_action === \"zoom\",\n                            handler: function() {\n                                Gx.default_rubberbox_action = \"zoom\";\n                            }\n                        }, {\n                            text: \"LM Drag (Select)\",\n                            checked: Gx.default_rubberbox_action === \"select\",\n                            handler: function() {\n                                Gx.default_rubberbox_action = \"select\";\n                            }\n                        }, {\n                            text: \"LM Drag (Disabled)\",\n                            checked: Gx.default_rubberbox_action === null,\n                            handler: function() {\n                                Gx.default_rubberbox_action = null;\n                            }\n                        }, {\n                            text: \"RM Drag (Zoom)\",\n                            checked: Gx.default_rightclick_rubberbox_action === \"zoom\",\n                            handler: function() {\n                                Gx.default_rightclick_rubberbox_action = \"zoom\";\n                            }\n                        }, {\n                            text: \"RM Drag (Select)\",\n                            checked: Gx.default_rightclick_rubberbox_action === \"select\",\n                            handler: function() {\n                                Gx.default_rightclick_rubberbox_action = \"select\";\n                            }\n                        }, {\n                            text: \"RM Drag (Disabled)\",\n                            checked: Gx.default_rightclick_rubberbox_action === null,\n                            handler: function() {\n                                Gx.default_rightclick_rubberbox_action = null;\n                            }\n                        }, {\n                            text: \"Mode...\",\n                            menu: {\n                                title: \"MOUSE Mode\",\n                                items: [{\n                                    text: \"Box\",\n                                    checked: Gx.default_rubberbox_mode === \"box\",\n                                    handler: function() {\n                                        Gx.default_rubberbox_mode = \"box\";\n                                    }\n\n                                }, {\n                                    text: \"Horizontal\",\n                                    checked: Gx.default_rubberbox_mode === \"horizontal\",\n                                    handler: function() {\n                                        Gx.default_rubberbox_mode = \"horizontal\";\n                                    }\n                                }, {\n                                    text: \"Vertical\",\n                                    checked: Gx.default_rubberbox_mode === \"vertical\",\n                                    handler: function() {\n                                        Gx.default_rubberbox_mode = \"vertical\";\n                                    }\n                                }]\n                            }\n                        }, {\n                            text: \"CROSShairs...\",\n                            menu: {\n                                title: \"Crosshairs Mode\",\n                                items: [{\n                                    text: \"Off\",\n                                    checked: !Gx.cross,\n                                    handler: function() {\n                                        Gx.cross = false;\n                                    }\n\n                                }, {\n                                    text: \"On\",\n                                    checked: Gx.cross === true,\n                                    handler: function() {\n                                        Gx.cross = true;\n                                    }\n                                }, {\n                                    text: \"Horizontal\",\n                                    checked: Gx.cross === \"horizontal\",\n                                    handler: function() {\n                                        Gx.cross = \"horizontal\";\n                                    }\n                                }, {\n                                    text: \"Vertical\",\n                                    checked: Gx.cross === \"vertical\",\n                                    handler: function() {\n                                        Gx.cross = \"vertical\";\n                                    }\n                                }]\n                            }\n                        }, {\n                            text: \"Mousewheel Natural Mode\",\n                            checked: Gx.wheelscroll_mode_natural,\n                            style: \"checkbox\",\n                            handler: function() {\n                                plot\n                                    .change_settings({\n                                        wheelscroll_mode_natural: !Gx.wheelscroll_mode_natural\n                                    });\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"CROSShairs\",\n                    checked: Gx.cross,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            cross: !Gx.cross\n                        });\n                    }\n                }, {\n                    text: \"GRID\",\n                    checked: Gx.grid,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            grid: !Gx.grid\n                        });\n                    }\n                }, {\n                    text: \"INDEX Mode\",\n                    checked: Gx.index,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            index: !Gx.index\n                        });\n                    }\n                }, {\n                    text: \"LEGEND\",\n                    checked: Gx.legend,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            legend: !Gx.legend\n                        });\n                    }\n                }, {\n                    text: \"PAN Scrollbars\",\n                    checked: Gx.pan,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            pan: !Gx.pan\n                        });\n                    }\n                }, {\n                    text: \"PHase UNITS...\",\n                    menu: {\n                        title: \"PHASE UNITS\",\n                        items: [{\n                            text: \"Radians\",\n                            checked: Gx.plab === 23,\n                            handler: function() {\n                                plot.change_settings({\n                                    phunits: 'R'\n                                });\n                            }\n\n                        }, {\n                            text: \"Degrees\",\n                            checked: Gx.plab === 24,\n                            handler: function() {\n                                plot.change_settings({\n                                    phunits: 'D'\n                                });\n                            }\n                        }, {\n                            text: \"Cycles\",\n                            checked: Gx.plab === 25,\n                            handler: function() {\n                                plot.change_settings({\n                                    phunits: 'C'\n                                });\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"SPECS\",\n                    checked: Gx.specs,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            specs: !Gx.specs\n                        });\n                    }\n                }, {\n                    text: \"P-Cuts\",\n                    checked: Gx.p_cuts,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            p_cuts: !Gx.p_cuts\n                        });\n                    }\n                }, {\n                    text: \"Large Colorbar\",\n                    checked: Gx.lg_colorbar,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            lg_colorbar: !Gx.lg_colorbar\n                        });\n                    }\n                }, {\n                    text: \"XDIVisions...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            var isValid = mx.intValidator(value);\n                            var maxXDIV = m.trunc(Mx.width / 2); // TODO\n                            // Make value an option on the plot?\n                            // Maybe still a little too high\n                            // while dotted-line grids are\n                            // being drawn?\n                            if (isValid.valid && value > maxXDIV) {\n                                return {\n                                    valid: false,\n                                    reason: \"Exceeds maximum number of divisions (\" + maxXDIV + \").\"\n                                };\n                            } else {\n                                return isValid;\n                            }\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"X Divisions:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.xdiv) { // Only\n                                    // update if different value\n                                    if (finalValue === \"\") {\n                                        finalValue = 1;\n                                    }\n                                    Gx.xdiv = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.xdiv, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"XLABel...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            console.log(\"The value is \" + value);\n                            var isValid = mx.intValidator(value);\n                            return isValid;\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"X Units:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.xlab) { // Only\n                                    // update if different value\n                                    if (finalValue < 0) {\n                                        finalValue = 0;\n                                    }\n                                    Gx.xlab = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.xlab, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"YDIVisions...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            var isValid = mx.intValidator(value);\n                            var maxYDIV = m.trunc(Mx.height / 2); // TODO\n                            // Make value an option on the plot?\n                            // Maybe still a little too high\n                            // while dotted-line grids are\n                            // being drawn?\n                            if (isValid.valid && value > maxYDIV) {\n                                return {\n                                    valid: false,\n                                    reason: \"Exceeds maximum number of divisions (\" + maxYDIV + \").\"\n                                };\n                            } else {\n                                return isValid;\n                            }\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Y Divisions:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.ydiv) {\n                                    // Only update if different\n                                    // value\n                                    if (finalValue === \"\") {\n                                        finalValue = 1;\n                                    }\n                                    Gx.ydiv = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.ydiv, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"YINVersion\",\n                    checked: (Mx.origin === 4),\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            yinv: (Mx.origin !== 4)\n                        });\n                    }\n                }, {\n                    text: \"YLABel...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            var isValid = mx.intValidator(value);\n                            return isValid;\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Y Units:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.ylab) { // Only\n                                    // update if different value\n                                    if (finalValue < 0) {\n                                        finalValue = 0;\n                                    }\n                                    Gx.ylab = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.ylab, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"X-axis\",\n                    checked: Gx.show_x_axis,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            show_x_axis: !Gx.show_x_axis\n                        });\n                    }\n                }, {\n                    text: \"Y-axis\",\n                    checked: Gx.show_y_axis,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            show_y_axis: !Gx.show_y_axis\n                        });\n                    }\n                }, {\n                    text: \"Readout\",\n                    checked: Gx.show_readout,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            show_readout: !Gx.show_readout\n                        });\n                    }\n                }, {\n                    text: \"Invert Colors\",\n                    checked: Mx.xi,\n                    style: \"checkbox\",\n                    handler: function() {\n                        mx.invertbgfg(Mx);\n                    }\n                }]\n            }\n        };\n\n        var COLORMAP_MENU = {\n            text: \"Colormap...\",\n            menu: {\n                title: \"COLORMAP\",\n                items: []\n            }\n        };\n\n        var colormap_handler = function(item) {\n            plot.change_settings({\n                cmap: this.cmap\n            });\n        };\n\n        for (var xc = 0; xc < m.Mc.colormap.length; xc++) {\n            var menuitem = {\n                text: m.Mc.colormap[xc].name,\n                cmap: xc,\n                checked: (Gx.cmap === xc),\n                handler: colormap_handler\n            };\n            COLORMAP_MENU.menu.items.push(menuitem);\n        }\n\n        var traceoptionsmenu = function(index) {\n            return {\n                title: \"TRACE OPTIONS\",\n                items: [{\n                    text: \"Dashed...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var thk = 1;\n                        if (index !== undefined) {\n                            thk = Math.abs(plot._Gx.lyr[index].thick);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n\n                            thk = Math.abs(plot._Gx.lyr[0].thick);\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                                    thk = 1;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Line thickness:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 3;\n                                    plot._Gx.lyr[index].thick = -1 * finalValue;\n                                    plot._Gx.lyr[index].symbol = 0;\n                                } else {\n                                    for (var ii = 0; ii < Gx.lyr.length; ii++) {\n                                        plot._Gx.lyr[ii].line = 3;\n                                        plot._Gx.lyr[ii].thick = -1 * finalValue;\n                                        plot._Gx.lyr[ii].symbol = 0;\n                                    }\n                                }\n                            }, thk);\n                    }\n                }, {\n                    text: \"Colors...\",\n                    menu: {\n                        title: \"COLORS\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"Red\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"red\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"red\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"red\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Pink\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"pink\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"pink\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"pink\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Hot Pink\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#ff009e\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"#ff009e\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"#ff009e\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Orange\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"orange\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"orange\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"orange\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Yellow\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"yellow\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"yellow\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"yellow\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Lime Green\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#80f741\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"#80f741\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"#80f741\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Green\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"green\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"green\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"green\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Blue\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"blue\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"blue\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"blue\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Purple\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"purple\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"purple\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"purple\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Custom Hexcode\",\n                            handler: function() {\n                                setupPrompt(\n                                    plot,\n                                    \"Color code (requires #):\",\n                                    mx.hexValidator,\n                                    function(finalValue) {\n                                        if (index !== undefined) {\n                                            plot._Gx.lyr[index].color = finalValue;\n                                        } else {\n                                            for (var ii = 0; ii < Gx.lyr.length; index++) {\n                                                plot._Gx.lyr[ii].color = finalValue;\n                                            }\n                                        }\n                                    }, undefined, undefined, undefined, undefined);\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Dots...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var radius = 3;\n                        if (index !== undefined) {\n                            radius = Math.abs(plot._Gx.lyr[index].radius);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n                            var i;\n                            for (i = 0; i < Gx.lyr.length; i++) {\n                                if (radius !== Math.abs(plot._Gx.lyr[i].radius)) {\n                                    radius = 3;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Radius/Shape:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                var sym;\n                                var rad;\n                                if (finalValue < 0) {\n                                    sym = 3; // square\n                                    rad = Math.abs(finalValue);\n                                } else if (finalValue > 0) {\n                                    sym = 2; // circle\n                                    rad = finalValue;\n                                } else {\n                                    sym = 1;\n                                    rad = 0;\n                                }\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 0;\n                                    plot._Gx.lyr[index].radius = rad;\n                                    plot._Gx.lyr[index].symbol = sym;\n                                } else {\n                                    var i;\n                                    for (i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 0;\n                                        plot._Gx.lyr[i].radius = rad;\n                                        plot._Gx.lyr[i].symbol = sym;\n                                    }\n                                }\n                            }, radius);\n                    }\n                }, {\n                    text: \"Radius...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var radius = 3;\n                        if (index !== undefined) {\n                            radius = Math.abs(plot._Gx.lyr[index].radius);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                if (radius !== Math.abs(plot._Gx.lyr[i].radius)) {\n                                    radius = 3;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Radius:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                var sym;\n                                var rad;\n                                if (finalValue < 0) {\n                                    rad = Math.abs(finalValue);\n                                } else if (finalValue > 0) {\n                                    rad = finalValue;\n                                } else {\n                                    sym = 1;\n                                    rad = 0;\n                                }\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 0;\n                                    plot._Gx.lyr[index].radius = rad;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 0;\n                                        plot._Gx.lyr[i].radius = rad;\n                                    }\n                                }\n                            }, radius);\n                    }\n                }, {\n                    text: \"Solid...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var thk = 1;\n                        if (index !== undefined) {\n                            thk = Math.abs(plot._Gx.lyr[index].thick);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n\n                            thk = Math.abs(plot._Gx.lyr[0].thick);\n                            var i;\n                            for (i = 0; i < Gx.lyr.length; i++) {\n                                if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                                    thk = 1;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Line thickness:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 3;\n                                    plot._Gx.lyr[index].thick = finalValue;\n                                    plot._Gx.lyr[index].symbol = 0;\n                                } else {\n                                    var i;\n                                    for (i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 3;\n                                        plot._Gx.lyr[i].thick = finalValue;\n                                        plot._Gx.lyr[i].symbol = 0;\n                                    }\n                                }\n                            }, thk);\n                    }\n                }, {\n                    text: \"Toggle\",\n                    style: (index !== undefined) ? \"checkbox\" : undefined,\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].display : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].display = !plot._Gx.lyr[index].display;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].display = !plot._Gx.lyr[i].display;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Symbols...\",\n                    menu: {\n                        title: \"SYMBOLS\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"None\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 0 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 0;\n                                    plot._Gx.lyr[index].symbol = 0;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 0;\n                                        plot._Gx.lyr[i].symbol = 0;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Pixels\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 1 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 1;\n                                    plot._Gx.lyr[index].symbol = 1;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 1;\n                                        plot._Gx.lyr[i].symbol = 1;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Circles\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 2 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 2;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 2;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Squares\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 3 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 3;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 3;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Plusses\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 4 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 4;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 4;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"X's\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 5 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 5;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 5;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Triangles\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 6 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 6;\n                                    plot._Gx.lyr[index].symbol = 6;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 6;\n                                        plot._Gx.lyr[i].symbol = 6;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Downward Triangles\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 7 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 6;\n                                    plot._Gx.lyr[index].symbol = 7;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 6;\n                                        plot._Gx.lyr[i].symbol = 7;\n                                    }\n                                }\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Line Type...\",\n                    menu: {\n                        title: \"LINE TYPE\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"None\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 0 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 0;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 0;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Verticals\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 1 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 1;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 1;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Horizontals\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 2 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 2;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 2;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Connecting\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 3 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 3;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 3;\n                                    }\n                                }\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Thickness...\",\n                    handler: function() {\n                        var thickness = 1;\n                        if (index !== undefined) {\n                            thickness = plot._Gx.lyr[index].thick;\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Thickness\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                if (finalValue === \"\") {\n                                    finalValue = 1;\n                                }\n                                finalValue = Math.max(0, finalValue);\n\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].thick = finalValue;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].thick = finalValue;\n                                    }\n                                }\n                            }, thickness, undefined,\n                            undefined, undefined);\n                    }\n                }, {\n                    text: \"Opacity...\",\n                    handler: function() {\n                        var opacity = 1.0;\n                        if (index !== undefined) {\n                            opacity = plot._Gx.lyr[index].opacity;\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Opacity:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (finalValue === \"\") {\n                                    finalValue = 1.0;\n                                }\n                                finalValue = Math.max(0, finalValue);\n                                finalValue = Math.min(1, finalValue);\n\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].opacity = finalValue;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].opacity = finalValue;\n                                    }\n                                }\n                            }, opacity, undefined,\n                            undefined, undefined);\n                    }\n                }]\n            };\n        };\n\n        var VIEW_MENU = {\n            text: \"View...\",\n            menu: {\n                title: \"VIEW\",\n                items: [{\n                    text: \"Reset\",\n                    handler: function() {\n                        plot.unzoom();\n                    }\n                }, {\n                    text: \"Y Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Expand Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_EXPAND, \"YPAN\");\n                    }\n                }, {\n                    text: \"Shrink Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_SHRINK, \"YPAN\");\n                    }\n                }, {\n                    text: \"Expand Full\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_FULL, \"YPAN\");\n                    }\n                }, {\n                    text: \"X Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Expand Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_EXPAND, \"XPAN\");\n                    }\n                }, {\n                    text: \"Shrink Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_SHRINK, \"XPAN\");\n                    }\n                }, {\n                    text: \"Expand Full\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_FULL, \"XPAN\");\n                    }\n                }]\n            }\n        };\n\n        var TRACES_MENU = {\n            text: \"Traces...\",\n            menu: function() {\n                var Gx = plot._Gx;\n                var tracemenu = {\n                    title: \"TRACE\",\n                    items: []\n                };\n                // Add the ALL option\n                tracemenu.items.push({\n                    text: \"All\",\n                    menu: traceoptionsmenu()\n                });\n                // Add all the active layers\n                for (var i = 0; i < Gx.lyr.length; i++) {\n                    tracemenu.items.push({\n                        text: Gx.lyr[i].name,\n                        menu: traceoptionsmenu(i)\n                    });\n                }\n                return tracemenu;\n            }\n        };\n\n        var FILES_MENU = {\n            text: \"Files...\",\n            menu: {\n                title: \"FILES OPTIONS\",\n                items: [\n                    // Overlay File... is disabled\n                    // because it's actually very\n                    // difficult to bring up a\n                    // a file upload browse dialog\n                    /*\n                     * { text: \"Overlay File...\", handler: function() {\n                     * plot.change_settings( {phunits: 'R'} ); } },\n                     */\n                    {\n                        text: \"Deoverlay File...\",\n                        menu: function() {\n                            var Gx = plot._Gx;\n                            var deoverlaymenu = {\n                                title: \"DEOVERLAY\",\n                                items: []\n                            };\n                            deoverlaymenu.items.push({\n                                text: \"Deoverlay All\",\n                                handler: function() {\n                                    plot.deoverlay();\n                                }\n                            });\n                            /* jshint -W083 */\n                            /* TODO figure out how to not create functions within a loop */\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                var handler = (function(index) {\n                                    return function() {\n                                        plot.deoverlay(index);\n                                    };\n                                }(i));\n\n                                deoverlaymenu.items.push({\n                                    text: Gx.lyr[i].name,\n                                    handler: handler\n                                });\n                            }\n                            /* jshint +W083 */\n                            return deoverlaymenu;\n                        }\n                    }\n                ]\n            }\n        };\n\n        var PLUGINS_MENU = {\n            text: \"Plugins...\",\n            menu: {\n                title: \"PLUGINS\",\n                items: (function() { // Immediately\n                    // Invoked\n                    // Function\n                    var result = [];\n                    for (var i = 0; i < Gx.plugins.length; i++) {\n                        var plugin = Gx.plugins[i];\n                        if (plugin.impl.menu) {\n                            if (typeof plugin.impl.menu === 'function') {\n                                result.push(plugin.impl.menu());\n                            } else {\n                                result.push(plugin.impl.menu);\n                            }\n                        }\n                    }\n                    return result;\n                }())\n            }\n        };\n\n        var SAVE_MENU = {\n            text: \"Save as...\",\n            menu: {\n                title: \"SAVE AS\",\n                items: [{\n                    text: \"PNG\",\n                    handler: function() {\n                        var img = plot._Mx.active_canvas.toDataURL(\"image/png\");\n                        var link = document.createElement(\"a\");\n                        link.href = img;\n                        link.download = \"SigPlot.\" + (new Date()).getTime() + \".png\";\n                        link.display = \"none\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                }, {\n                    text: \"JPG\",\n                    handler: function() {\n                        var img = plot._Mx.active_canvas.toDataURL(\"image/jpg\");\n                        var link = document.createElement(\"a\");\n                        link.href = img;\n                        link.download = \"SigPlot.\" + (new Date()).getTime() + \".jpg\";\n                        link.display = \"none\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                }, {\n                    text: \"SVG\",\n                    handler: function() {\n                        var img = plot._Mx.active_canvas.toDataURL(\"image/svg\");\n                        var link = document.createElement(\"a\");\n                        link.href = img;\n                        link.download = \"SigPlot.\" + (new Date()).getTime() + \".svg\";\n                        link.display = \"none\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                }]\n            }\n        };\n\n        var REFRESH_ITEM = {\n            text: \"Refresh\"\n            // no handler, just let the finalizer deal with it\n        };\n\n        var KEYPRESSINFO_ITEM = {\n            text: \"Keypress Info\",\n            handler: function() {\n                mx.message(Mx, KEYPRESS_HELP);\n            }\n        };\n\n        var EXIT_ITEM = {\n            text: \"Exit\",\n            handler: function() {\n                var evt = document.createEvent('Event');\n                evt.initEvent('sigplotexit', true, true);\n                mx.dispatchEvent(Mx, evt);\n            }\n        };\n\n        // Main Menu\n        var MAINMENU = {\n            title: \"SIG-PLOT\",\n            finalize: function() {\n                if (!Mx.prompt) {\n                    // A prompt may have been\n                    // created by a menu handler\n                    // - let it deal with\n                    // eventListener re-setting\n                    mx.addEventListener(Mx, \"mousedown\", plot.onmousedown,\n                        false);\n                }\n                plot.refresh();\n            },\n            items: [REFRESH_ITEM, CONTROLS_MENU, CXMODE_MENU, SCALING_MENU, VIEW_MENU,\n                GRID_MENU, SETTINGS_MENU, COLORMAP_MENU, TRACES_MENU, FILES_MENU,\n                PLUGINS_MENU, KEYPRESSINFO_ITEM, SAVE_MENU, EXIT_ITEM\n            ]\n        };\n\n        mx.menu(Mx, MAINMENU);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_legend_menu(plot, index) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n        var DASHED = {\n            text: \"Dashed...\",\n            handler: function() {\n                // Figure out the current thickness\n                var thk = 1;\n                if (index !== undefined) {\n                    thk = Math.abs(plot._Gx.lyr[index].thick);\n                } else {\n                    if (Gx.lyr.length === 0) {\n                        return;\n                    }\n\n                    thk = Math.abs(plot._Gx.lyr[0].thick);\n                    for (var i = 0; i < Gx.lyr.length; i++) {\n                        if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                            thk = 1;\n                            break;\n                        }\n                    }\n                }\n                setupPrompt(\n                    plot,\n                    \"Line thickness:\",\n                    mx.intValidator,\n                    function(finalValue) {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 3;\n                            plot._Gx.lyr[index].thick = -1 * finalValue;\n                            plot._Gx.lyr[index].symbol = 0;\n                        } else {\n                            for (var ii = 0; ii < Gx.lyr.length; ii++) {\n                                plot._Gx.lyr[ii].line = 3;\n                                plot._Gx.lyr[ii].thick = -1 * finalValue;\n                                plot._Gx.lyr[ii].symbol = 0;\n                            }\n                        }\n                    }, thk);\n            }\n\n        };\n\n        var COLORS = {\n            text: \"Colors...\",\n            menu: {\n                title: \"COLORS\",\n                items: [{\n                    text: \"Retain Current\"\n                }, {\n                    text: \"Red\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"red\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"red\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"red\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Pink\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"pink\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"pink\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"pink\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Hot Pink\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#ff009e\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"#ff009e\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"#ff009e\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Orange\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"orange\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"orange\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"orange\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Yellow\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"yellow\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"yellow\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"yellow\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Lime Green\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#80f741\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"#80f741\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"#80f741\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Green\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"green\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"green\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"green\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Blue\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"blue\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"blue\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"blue\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Purple\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"purple\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"purple\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"purple\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Custom Hexcode\",\n                    handler: function() {\n                        setupPrompt(\n                            plot,\n                            \"Color code (requires #):\",\n                            mx.hexValidator,\n                            function(finalValue) {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = finalValue;\n                                } else {\n                                    for (var ii = 0; ii < Gx.lyr.length; ii++) {\n                                        plot._Gx.lyr[ii].color = finalValue;\n                                    }\n                                }\n                            }, undefined, undefined, undefined, undefined);\n                    }\n                }]\n            }\n        };\n\n        var SOLID = {\n            text: \"Solid...\",\n            handler: function() {\n                // Figure out the current thickness\n                var thk = 1;\n                if (index !== undefined) {\n                    thk = Math.abs(plot._Gx.lyr[index].thick);\n                } else {\n                    if (Gx.lyr.length === 0) {\n                        return;\n                    }\n\n                    thk = Math.abs(plot._Gx.lyr[0].thick);\n                    var i;\n                    for (i = 0; i < Gx.lyr.length; i++) {\n                        if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                            thk = 1;\n                            break;\n                        }\n                    }\n                }\n                setupPrompt(\n                    plot,\n                    \"Line thickness:\",\n                    mx.intValidator,\n                    function(finalValue) {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 3;\n                            plot._Gx.lyr[index].thick = finalValue;\n                            plot._Gx.lyr[index].symbol = 0;\n                        } else {\n                            var i;\n                            for (i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 3;\n                                plot._Gx.lyr[i].thick = finalValue;\n                                plot._Gx.lyr[i].symbol = 0;\n                            }\n                        }\n                    }, thk);\n            }\n        };\n\n        var TOGGLE = {\n            text: \"Toggle\",\n            style: (index !== undefined) ? \"checkbox\" : undefined,\n            checked: (index !== undefined) ? plot._Gx.lyr[index].display : undefined,\n            handler: function() {\n                if (index !== undefined) {\n                    plot._Gx.lyr[index].display = !plot._Gx.lyr[index].display;\n                } else {\n                    for (var i = 0; i < Gx.lyr.length; i++) {\n                        plot._Gx.lyr[i].display = !plot._Gx.lyr[i].display;\n                    }\n                }\n            }\n        };\n\n        var SYMBOLS = {\n            text: \"Symbols...\",\n            menu: {\n                title: \"SYMBOLS\",\n                items: [{\n                    text: \"Retain Current\"\n                }, {\n                    text: \"None\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 0 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 0;\n                            plot._Gx.lyr[index].symbol = 0;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 0;\n                                plot._Gx.lyr[i].symbol = 0;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Pixels\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 1 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 1;\n                            plot._Gx.lyr[index].symbol = 1;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 1;\n                                plot._Gx.lyr[i].symbol = 1;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Circles\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 2 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 2;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 2;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Squares\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 3 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 3;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 3;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Plusses\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 4 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 4;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 4;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"X's\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 5 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 5;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 5;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Triangles\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 6 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 6;\n                            plot._Gx.lyr[index].symbol = 6;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 6;\n                                plot._Gx.lyr[i].symbol = 6;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Downward Triangles\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 7 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 6;\n                            plot._Gx.lyr[index].symbol = 7;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 6;\n                                plot._Gx.lyr[i].symbol = 7;\n                            }\n                        }\n                    }\n                }]\n            }\n        };\n\n        var LINE_TYPE = {\n            text: \"Line Type...\",\n            menu: {\n                title: \"LINE TYPE\",\n                items: [{\n                    text: \"Retain Current\"\n                }, {\n                    text: \"None\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 0 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 0;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 0;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Verticals\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 1 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 1;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 1;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Horizontals\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 2 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 2;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 2;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Connecting\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 3 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 3;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 3;\n                            }\n                        }\n                    }\n                }]\n            }\n        };\n\n        var THICKNESS = {\n            text: \"Thickness...\",\n            handler: function() {\n                var thickness = 1;\n                if (index !== undefined) {\n                    thickness = plot._Gx.lyr[index].thick;\n                }\n                setupPrompt(\n                    plot,\n                    \"Thickness\",\n                    mx.intValidator,\n                    function(finalValue) {\n                        if (finalValue === \"\") {\n                            finalValue = 1;\n                        }\n                        finalValue = Math.max(0, finalValue);\n\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].thick = finalValue;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].thick = finalValue;\n                            }\n                        }\n                    }, thickness, undefined,\n                    undefined, undefined);\n            }\n        };\n\n        var OPACITY = {\n            text: \"Opacity...\",\n            handler: function() {\n                var opacity = 1.0;\n                if (index !== undefined) {\n                    opacity = plot._Gx.lyr[index].opacity;\n                }\n                setupPrompt(\n                    plot,\n                    \"Opacity:\",\n                    mx.floatValidator,\n                    function(finalValue) {\n                        if (finalValue === \"\") {\n                            finalValue = 1.0;\n                        }\n                        finalValue = Math.max(0, finalValue);\n                        finalValue = Math.min(1, finalValue);\n\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].opacity = finalValue;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].opacity = finalValue;\n                            }\n                        }\n                    }, opacity, undefined,\n                    undefined, undefined);\n            }\n        };\n\n        var LEGEND_TRACE = {\n            title: Gx.lyr[index].name,\n            finalize: function() {\n                if (!Mx.prompt) {\n                    // A prompt may have been\n                    // created by a menu handler\n                    // - let it deal with\n                    // eventListener re-setting\n                    mx.addEventListener(Mx, \"mousedown\", plot.onmousedown,\n                        false);\n                }\n                plot.refresh();\n            },\n            items: [DASHED, COLORS, SOLID, TOGGLE, SYMBOLS, LINE_TYPE, THICKNESS, OPACITY]\n        };\n\n        mx.menu(Mx, LEGEND_TRACE);\n    }\n\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function rubberbox_cb(plot, triggerEvent) {\n        return function(event, xo, yo, xl, yl, action, mode) {\n            var Gx = plot._Gx;\n            var Mx = plot._Mx;\n\n            var x = Math.min(xo, xl);\n            var y = Math.min(yo, yl);\n            var w = Math.abs(xl - xo);\n            var h = Math.abs(yl - yo);\n\n            var takeAction = false;\n            if (event.which === triggerEvent) {\n                // On some browsers, a click will actually be sent as\n                // mousedown/mousemove/mouseup so\n                // don't make insanely small zooms...instead treat them as a\n                // click\n                if (mode === \"horizontal\") {\n                    takeAction = (w > 2);\n                } else if (mode === \"vertical\") {\n                    takeAction = (h > 2);\n                } else {\n                    takeAction = ((w > 2) && (h > 2));\n                }\n            }\n\n            if (!takeAction) {\n                // The mouse didn't shift enough to be considered\n                // as a rubberbox action so treat it as mouseup\n                plot.mouseup(event);\n            } else {\n                // action === null is disabled, but undefined is default\n                if ((action === undefined) || (action === \"zoom\")) {\n                    plot.pixel_zoom(xo, yo, xl, yl);\n                    plot.refresh();\n                } else if (action === \"select\") {\n                    var evt = document.createEvent('Event');\n                    evt.initEvent('mtag', true, true);\n                    var re = pixel_to_real(plot, x, y);\n                    var rwh = pixel_to_real(plot, x + w, y + h);\n                    evt.x = re.x;\n                    evt.y = re.y;\n                    evt.xpos = x;\n                    evt.ypos = y;\n                    evt.w = Math.abs(rwh.x - re.x);\n                    evt.h = Math.abs(rwh.y - re.y);\n                    evt.wpxl = w;\n                    evt.hpxl = h;\n                    evt.shift = event.shiftKey;\n                    mx.dispatchEvent(Mx, evt);\n                }\n            }\n        };\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function plot_init(plot, o) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if (!o.xlab) {\n            o.xlab = 0;\n        }\n        if (!o.ylab) {\n            o.ylab = 0;\n        }\n\n        //Convert xunits and yunits to numbers if they are strings\n        o.xlab = m.unit_lookup(o.xlab);\n        o.ylab = m.unit_lookup(o.ylab);\n\n        // Equivalent to reading cmd line args\n        Gx.xmin = o.xmin === undefined ? 0.0 : o.xmin;\n        Gx.xmax = o.xmax === undefined ? 0.0 : o.xmax;\n        var havexmin = (o.xmin !== undefined);\n        var havexmax = (o.xmax !== undefined);\n        var address = o.cmode === undefined ? \"\" : o.cmode.toUpperCase();\n        var line = o.line === undefined ? 3 : o.line;\n        Gx.ylab = o.ylab;\n        Gx.ylabel = o.ylabel;\n        Gx.ymin = o.ymin === undefined ? 0.0 : o.ymin;\n        Gx.ymax = o.ymax === undefined ? 0.0 : o.ymax;\n        var haveymin = (o.ymin !== undefined);\n        var haveymax = (o.ymax !== undefined);\n        Gx.zmin = o.zmin;\n        Gx.zmax = o.zmax;\n        var havezmin = (o.zmin !== undefined);\n        var havezmax = (o.zmax !== undefined);\n\n        if (o.colors !== undefined) {\n            mx.setbgfg(Mx, o.colors.bg, o.colors.fg, Mx.xi);\n        }\n\n        if (o.xi !== undefined) {\n            mx.invertbgfg(Mx);\n        }\n\n        Gx.forcelab = o.forcelab === undefined ? true : o.forcelab;\n\n        Gx.all = o.all === undefined ? false : o.all;\n        // By default, SIGPLOT auto-scales only on the first buffer size.\n        // \"expand\" is a feature added for websigplot that when\n        // combined with \"all\" will expand the y-range automaticall\n        // to accomodate all of the samples\n        Gx.expand = o.expand === undefined ? false : o.expand;\n\n        // TODO Gx.mimic = M$GET_SWITCH ('MIMIC')\n        Gx.xlab = o.xlab;\n        Gx.xlabel = o.xlabel;\n        Gx.segment = o.segment === undefined ? false : o.segment;\n        Gx.plab = 24;\n\n        var phunits = (o.phunits === undefined) ? 'D' : o.phunits;\n        if (phunits[0] === 'R') {\n            Gx.plab = 23;\n        } else if (phunits[0] === 'C') {\n            Gx.plab = 25;\n        }\n        Gx.xdiv = o.xdiv === undefined ? 5 : o.xdiv;\n        Gx.ydiv = o.ydiv === undefined ? 5 : o.ydiv;\n\n        Gx.xcompression = o.xcmp || 0;\n        Gx.rasterSmoothing = o.smoothing || false;\n\n        Mx.origin = 1;\n        if (o.yinv) {\n            Mx.origin = 4;\n        }\n        Gx.pmt = o.pmt === undefined ? 1.0 : o.pmt;\n        Gx.bufmax = o.bufmax === undefined ? 32768 : o.bufmax;\n        Gx.sections = o.nsec === undefined ? 0 : o.nsec;\n        Gx.anno_type = o.anno_type === undefined ? 0 : o.anno_type;\n\n        Gx.xfmt = o.xfmt === undefined ? \"\" : o.xfmt;\n        Gx.yfmt = o.yfmt === undefined ? \"\" : o.yfmt;\n\n        // TODO Gx.xf.msgid = M$GET_SWITCH ('MSGID')\n        // Gx.xf.msgmask = max (0, M$GET_SWITCH ('MASK'))\n\n        Gx.index = o.index === undefined ? false : o.index;\n        var imode = (Gx.index || (address.slice(0, 2) === \"IN\"));\n        if (imode) {\n            if (havexmin && (Gx.xmin === 1.0)) {\n                havexmin = false;\n            }\n            if (havexmax && (Gx.xmin === 1.0)) {\n                havexmax = false;\n            }\n        }\n\n        Gx.xdata = false;\n        Gx.note = \"\";\n        Gx.hold = 0;\n        Gx.always_show_marker = o.always_show_marker || false;\n\n        m.vstype('D');\n\n        if (!o.inputs) {\n            basefile(plot, false);\n        } else {\n            // TODO load files\n        }\n\n        var cmode = address;\n\n        if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n            Gx.cmode = 1;\n        } else {\n            Gx.cmode = 3;\n        }\n\n        if ((cmode === \"MA\") || (cmode === \"INMA\") || (cmode === \"ABMA\") ||\n            (cmode === \"__MA\") || (cmode === \"MAGNITUDE\")) {\n            Gx.cmode = 1;\n        }\n        if ((cmode === \"PH\") || (cmode === \"INPH\") || (cmode === \"ABPH\") ||\n            (cmode === \"__PH\") || (cmode === \"PHASE\")) {\n            Gx.cmode = 2;\n        }\n        if ((cmode === \"RE\") || (cmode === \"INRE\") || (cmode === \"ABRE\") ||\n            (cmode === \"__RE\") || (cmode === \"REAL\")) {\n            Gx.cmode = 3;\n        }\n        if ((cmode === \"IM\") || (cmode === \"INIM\") || (cmode === \"ABIM\") ||\n            (cmode === \"__IM\") || (cmode === \"IMAGINARY\")) {\n            Gx.cmode = 4;\n        }\n        if ((cmode === \"LO\") || (cmode === \"D1\") || (cmode === \"INLO\") || (cmode === \"IND1\") ||\n            (cmode === \"ABIM\") || (cmode === \"ABD1\") || (cmode === \"__LO\") ||\n            (cmode === \"__D1\") || (cmode === \"10*LOG10\")) {\n            Gx.cmode = 6;\n        }\n        if ((cmode === \"L2\") || (cmode === \"D2\") || (cmode === \"INL2\") || (cmode === \"IND2\") ||\n            (cmode === \"ABLO\") || (cmode === \"ABD2\") || (cmode === \"__L2\") ||\n            (cmode === \"__D2\") || (cmode === \"20*LOG10\")) {\n            Gx.cmode = 7;\n        }\n        if ((cmode === \"RI\") || (cmode === \"IR\") || (cmode === \"INRI\") || (cmode === \"INIR\") ||\n            (cmode === \"ABRI\") || (cmode === \"ABIR\") || (cmode === \"__RI\") ||\n            (cmode === \"__IR\") || (cmode === \"IMAG/REAL\") || (cmode === \"REAL/IMAG\")) {\n            if (Gx.index) {\n                alert(\"Imag/Real mode not permitted in INDEX mode\");\n            } else {\n                Gx.cmode = 5;\n            }\n        }\n\n        Gx.basemode = Gx.cmode;\n\n        plot.change_settings({\n            cmode: Gx.cmode\n        });\n\n        // if ( (Gx.forcelab) .and. (Gx.xlab .le. 0) .and.\n        // & (Gx.ylab .le. 0) ) then\n        // call M$WARNING\n        // & ('/xlab or /ylab is missing with /forcelab usage')\n        // Gx.forcelab = .false.\n        // endif\n\n        Gx.dbmin = 1.0e-20;\n        if (Gx.cmode >= 6) {\n            var dbscale = 10.0;\n            if (Gx.cmode === 7) {\n                dbscale = 20.0;\n            }\n            if ((cmode[0] === \"L\") || (cmode[0] === \"1\") || (cmode[0] === \"2\")) {\n                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                    Gx.ymin = Math.max(Gx.ymin, 1e-10);\n                    Gx.ymax = Math.max(Gx.ymax, 1e-10);\n                } else {\n                    Gx.ymin = Math.max(Gx.ymin, 1e-20);\n                    Gx.ymax = Math.max(Gx.ymax, 1e-20);\n                }\n                Gx.ymin = m.log10(Gx.ymin) * dbscale;\n                Gx.ymax = m.log10(Gx.ymax) * dbscale;\n            } else if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                Gx.ymin = Math.max(-18.0 * dbscale, Gx.ymin);\n                Gx.ymax = Math.max(-18.0 * dbscale, Gx.ymax);\n                Gx.dbmin = 1e-37;\n            } else if (Math.min(Gx.ymin, Gx.ymax) < -20.0 * dbscale) {\n                Gx.ymin = Math.max(-37.0 * dbscale, Gx.ymin);\n                Gx.ymax = Math.max(-37.0 * dbscale, Gx.ymax);\n                Gx.dbmin = Math.pow(10, Math.min(Gx.ymin, Gx.ymax) / dbscale);\n            }\n        }\n\n        Mx.level = 0;\n        if (imode && !Gx.index) {\n            if (havexmin) {\n                Gx.xmin = Gx.xstart + Gx.xdelta * (Gx.xmin - 1.0);\n            }\n            if (havexmin) {\n                Gx.xmax = Gx.xstart + Gx.xdelta * (Gx.xmax - 1.0);\n            }\n        }\n        Gx.xmult = o.xmult;\n        Gx.ymult = o.xmult;\n\n        //Convert string inputs of autox to numbers\n        switch (o.autox) {\n            case \"none\":\n                o.autox = -1;\n                break;\n            case \"min\":\n                o.autox = 1;\n                break;\n            case \"max\":\n                o.autox = 2;\n                break;\n            case \"full\":\n                o.autox = 3;\n                break;\n        }\n\n        Gx.autox = o.autox === undefined ? -1 : o.autox;\n        if (Gx.autox < 0) {\n            Gx.autox = 0;\n            if (!havexmin) {\n                Gx.autox += 1;\n            }\n            if (!havexmax) {\n                Gx.autox += 2;\n            }\n        }\n\n        //Convert string inputs of autoy to numbers\n\n        switch (o.autoy) {\n            case \"none\":\n                o.autoy = -1;\n                break;\n            case \"min\":\n                o.autoy = 1;\n                break;\n            case \"max\":\n                o.autoy = 2;\n                break;\n            case \"full\":\n                o.autoy = 3;\n                break;\n        }\n\n        Gx.autoy = o.autoy === undefined ? -1 : o.autoy;\n        if (Gx.autoy < 0) {\n            Gx.autoy = 0;\n            if (!haveymin) {\n                Gx.autoy += 1;\n            }\n            if (!haveymax) {\n                Gx.autoy += 2;\n            }\n        }\n\n        //Convert string inputs of autoz to numbers\n\n        switch (o.autoz) {\n            case \"none\":\n                o.autoz = -1;\n                break;\n            case \"min\":\n                o.autoz = 1;\n                break;\n            case \"max\":\n                o.autoz = 2;\n                break;\n            case \"full\":\n                o.autoz = 3;\n                break;\n        }\n\n        Gx.autoz = o.autoz === undefined ? -1 : o.autoz;\n        if (Gx.autoz < 0) {\n            Gx.autoz = 0;\n            if (!havezmin) {\n                Gx.autoz += 1;\n            }\n            if (!havezmax) {\n                Gx.autoz += 2;\n            }\n        }\n        Gx.autol = o.autol === undefined ? -1 : o.autol;\n\n        if (!havexmin) {\n            Gx.xmin = undefined;\n        }\n        if (!havexmax) {\n            Gx.xmax = undefined;\n        }\n\n        scale_base(plot, {\n            get_data: true\n        }, Gx.xmin, Gx.xmax, Gx.xlab, Gx.ylab);\n\n        if (!havexmin) {\n            Gx.xmin = Mx.stk[0].xmin;\n        }\n        if (!havexmax) {\n            Gx.xmax = Mx.stk[0].xmax;\n        }\n        if (!haveymin) {\n            Gx.ymin = Mx.stk[0].ymin;\n        }\n        if (!haveymax) {\n            Gx.ymax = Mx.stk[0].ymax;\n        }\n\n        if (Gx.xmin > Gx.xmax) {\n            Mx.stk[0].xmin = Gx.xmax;\n            Gx.xmax = Gx.xmin;\n            Gx.xmin = Mx.stk[0].xmin;\n        }\n        if (Gx.ymin > Gx.ymax) {\n            Mx.stk[0].ymin = Gx.ymax;\n            Gx.ymax = Gx.ymin;\n            Gx.ymin = Mx.stk[0].ymin;\n        }\n        Mx.stk[0].xmin = Gx.xmin;\n        Mx.stk[0].xmax = Gx.xmax;\n        Mx.stk[0].ymin = Gx.ymin;\n        Mx.stk[0].ymax = Gx.ymax;\n        Gx.panxmin = Math.min(Gx.panxmin, Gx.xmin);\n        Gx.panxmax = Math.max(Gx.panxmax, Gx.xmax);\n        Gx.panymin = Math.min(Gx.panymin, Gx.ymin);\n        Gx.panymax = Math.max(Gx.panymax, Gx.ymax);\n\n        Gx.xmin = Mx.stk[0].xmin;\n        Gx.ymin = Mx.stk[0].ymin;\n\n        if (o.font_family) {\n            Mx.font_family = o.font_family;\n        }\n        if (o.font_width) {\n            Mx.font_width = o.font_width;\n        }\n        if (o.font_scaled) {\n            Mx.font_scaled = true;\n        }\n\n        var font_width = Mx.font_width;\n        if (Mx.font_scaled) {\n            font_width = Math.min(Mx.font_width, Mx.width / 64);\n        }\n        mx.set_font(Mx, font_width);\n\n        Gx.ncolors = o.ncolors === undefined ? 500 : o.ncolors;\n        Gx.cmap = null;\n        if (o.cmap) {\n            Gx.cmap = o.cmap;\n        } else {\n            Gx.cmap = o.xc === undefined ? -1 : o.xc;\n        }\n\n        setup_cmap(plot, Gx.cmap);\n\n        // TODO setup annotate, boxes and points facilities\n\n        // TODO initialize layer structure line types\n\n        if (o.xcnt === \"leftmouse\") {\n            Gx.cntrls = 1;\n        } else if (o.xcnt === \"continuous\") {\n            Gx.cntrls = 2;\n        } else {\n            Gx.cntrls = o.xcnt === undefined ? 1 : o.xcnt;\n        }\n\n        Gx.default_rubberbox_mode = o.rubberbox_mode === undefined ? \"box\" : o.rubberbox_mode;\n        Gx.default_rubberbox_action = o.rubberbox_action === undefined ? \"zoom\" : o.rubberbox_action;\n        Gx.default_rightclick_rubberbox_mode = o.rightclick_rubberbox_mode === undefined ? \"box\" : o.rightclick_rubberbox_mode;\n        Gx.default_rightclick_rubberbox_action = o.rightclick_rubberbox_action === undefined ? null : o.rightclick_rubberbox_action;\n\n        Gx.cross = o.cross === undefined ? false : o.cross;\n        Gx.grid = o.nogrid === undefined ? true : !o.nogrid;\n        Gx.fillStyle = o.fillStyle;\n        Gx.gridBackground = o.gridBackground;\n        Gx.gridStyle = o.gridStyle;\n        Gx.wheelZoom = o.wheelZoom;\n        Gx.wheelZoomPercent = o.wheelZoomPercent;\n        Gx.legend = o.legend === undefined ? false : o.legend;\n        Gx.no_legend_button = o.no_legend_button === undefined ? false : o.no_legend_button;\n        Gx.legendBtnLocation = null;\n        Gx.pan = o.nopan === undefined ? true : !o.nopan;\n        Gx.nomenu = o.nomenu === undefined ? false : o.nomenu;\n\n        // TODO Gx.lmap.ip = 0\n        Gx.modmode = 0;\n        Gx.modlayer = -1; // 0-based indexing instead of 1\n        Gx.modsource = 0;\n        Gx.modified = (o.mod && Gx.lyr.length > 0);\n        // TODO Gx.marks(5) = 5\n        Gx.nmark = 0;\n        Gx.iabsc = 0;\n        if (Gx.index) {\n            Gx.iabsc = 1;\n        }\n        // TODO if (o.specs > 0) Gx.iabsc = M$SEARCH('IRS',c(1:1))\n        Gx.specs = !o.nospecs;\n\n        Gx.scroll_time_interval = o.scroll_time_interval === undefined ? Gx.scroll_time_interval : o.scroll_time_interval;\n\n        Gx.autohide_readout = o.autohide_readout;\n        Gx.autohide_panbars = o.autohide_panbars;\n        Gx.x_scrollbar_location = o.x_scrollbar_location;\n        if (Gx.specs) {\n            Gx.show_x_axis = !o.noxaxis;\n            Gx.show_y_axis = !o.noyaxis;\n            Gx.show_readout = !o.noreadout;\n            if (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout) {\n                Gx.specs = true;\n            } else {\n                Gx.specs = false;\n            }\n        } else {\n            Gx.show_x_axis = false;\n            Gx.show_y_axis = false;\n            Gx.show_readout = false;\n        }\n        Gx.hide_note = o.hide_note || false;\n\n        Gx.xmrk = 0.0;\n        Gx.ymrk = 0.0;\n\n        if (!o.nodragdrop) {\n            mx.addEventListener(Mx, \"dragover\", function(evt) {\n                evt.preventDefault();\n            }, false);\n\n            mx.addEventListener(Mx, \"drop\", (function(plot) {\n                return function(evt) {\n                    var files = evt.dataTransfer.files;\n                    if (files.length > 0) {\n                        evt.preventDefault();\n                        plot.load_files(files);\n                    }\n                };\n            }(plot)), false);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function basefile(plot, open) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        // != BASEFILE(false)\n\n        // unlike SIGPLOT, where if Gx.index == 1\n        // then xstart = 1.0 and xdelta = 1.0...technically\n        // Gx.retx is supposed to be the real X coordinate\n        // and Gx.aretx is supposed to be the X coordinate in the\n        // current abscissa mode\n        if (open) {\n            var hcb = Gx.HCB[0];\n            Gx.xstart = hcb.xstart;\n            Gx.xdelta = hcb.xdelta;\n            Mx.origin = 1;\n        } else {\n            Gx.xstart = 0.0;\n            Gx.xdelta = 1.0;\n            Gx.autol = -1;\n            Mx.origin = 1;\n        }\n\n        // if (!open) {\n        // Gx.lay[0].cx = false;\n        // }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_accessories(plot, mode) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n        if (mode > 0) {\n            if ((mode >= 4) && (Gx.show_readout) && (!Gx.hide_note)) {\n                var ln = Gx.note.length;\n                mx.text(Mx, Mx.width - Gx.lbtn - (ln + 1) * Mx.text_w,\n                    Mx.text_h, Gx.note);\n            }\n            if (mode >= 4) {\n                draw_panbars(plot);\n            }\n            if ((mode >= 1) && (Gx.legend)) {\n                draw_legend(plot);\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_plugins(plot) {\n        var Gx = plot._Gx;\n        var ctx = plot._Mx.canvas.getContext(\"2d\");\n        var canvas;\n\n        var plugin_index = 0;\n        while (plugin_index < Gx.plugins.length) {\n            var plugin = Gx.plugins[plugin_index].impl;\n            if (plugin.refresh) {\n                canvas = Gx.plugins[plugin_index].canvas;\n\n                // Ensure the plugin canvas has the same size as the plot\n                if (canvas.width !== plot._Mx.canvas.width) {\n                    canvas.width = plot._Mx.canvas.width;\n                }\n                if (canvas.height !== plot._Mx.canvas.height) {\n                    canvas.height = plot._Mx.canvas.height;\n                }\n\n                // If the plugin canvas is visible, draw it\n                if (canvas.height !== 0 && canvas.width !== 0) {\n                    if (canvas.width !== plot._Mx.canvas.width) {\n                        canvas.width = plot._Mx.canvas.width;\n                    }\n                    if (canvas.height !== plot._Mx.canvas.height) {\n                        canvas.height = plot._Mx.canvas.height;\n                    }\n                    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n                    Gx.plugins[plugin_index].impl.refresh(canvas);\n                    ctx.drawImage(canvas, 0, 0);\n                }\n            }\n            plugin_index = plugin_index + 1;\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_legend(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n        //Gx.always_show_marker = true;\n        var ctx = Mx.canvas.getContext(\"2d\");\n\n        var i = 0;\n        var n = 0; // integer*4\n        var ix = 0; // integer*4\n        var iy = 0; // integer*4\n        var ln = 0; // integer*4\n        var tw = 0; // integer*4\n        var xc = 0; // integer*4\n        var yc = 0; // integer*4\n        var xs = 0; // integer*4\n        var ys = 0; // integer*4\n        var thk = 0; // integer*4\n        var ic = 0; // integer*4\n\n        tw = Mx.text_w;\n        xs = tw * 23;\n        ys = (Gx.lyr.length + 1) * Mx.text_h;\n        xc = Mx.r - xs;\n        yc = Mx.t;\n\n        var legendPos = {\n            x: xc + 2,\n            y: yc + 2,\n            width: xs - 5,\n            height: ys - 5\n        }; // default legend size\n\n        // Determine legend position and label offset based on label sizes\n        var defLabelWidth = 98; // a magic number - default width of pixels\n        var maxLabelWidth = 0;\n        var labelOffset = 0;\n        for (n = 0; n < Gx.lyr.length; n++) { // figure out maximum label\n            // length\n            var labelLength = ctx.measureText(Gx.lyr[n].name).width;\n            if (labelLength > maxLabelWidth) {\n                maxLabelWidth = labelLength;\n            }\n        }\n        if (maxLabelWidth > defLabelWidth) {\n            labelOffset = (maxLabelWidth - defLabelWidth);\n            legendPos.width += labelOffset;\n            legendPos.x -= labelOffset;\n        }\n\n        ctx.strokeStyle = Mx.fg; // Mx.xwfg swapped in for FGColor\n        ctx.fillStyle = Mx.bg;\n        ctx.fillRect(legendPos.x, legendPos.y, legendPos.width,\n            legendPos.height); // Creating a filled box instead of using\n        // clear_area\n        ctx.strokeRect(legendPos.x, legendPos.y, legendPos.width,\n            legendPos.height);\n\n        for (n = 0; n < Gx.lyr.length; n++) {\n            ix = xc + 4 * tw;\n            iy = yc + n * Mx.text_h + Mx.text_h; // additional text_h to\n            // account for 0-based\n            // indexing\n            if (n === Gx.modlayer) {\n                mx.text(Mx, xc + tw - labelOffset, iy + Math.floor(Mx.text_w / 2), '**'); // Added text_w/2\n                // offset\n            }\n            if (Gx.lyr[n].display) {\n                ic = Gx.lyr[n].color;\n                if (Gx.lyr[n].line > 0) {\n                    thk = m.sign(Math.min(tw, Math.abs(Gx.lyr[n].thick)),\n                        Gx.lyr[n].thick);\n                    // added magic -3 offset to y coordinates to center lines\n                    // with text\n                    if (thk < 0 || thk === mx.L_dashed) {\n                        mx.draw_line(Mx, ic, ix - labelOffset, iy - 3, (ix + tw * 2) - labelOffset, iy - 3, Math.abs(thk), {\n                            mode: \"dashed\",\n                            on: 4,\n                            off: 4\n                        });\n                    } else {\n                        mx.draw_line(Mx, ic, ix - labelOffset, iy - 3, (ix + tw * 2) - labelOffset, iy - 3, Math.abs(thk));\n                    }\n                }\n                if (Gx.lyr[n].symbol > 0) {\n                    // New logic here with 0.6*tw to help with legend symbol\n                    // sizing\n                    if (Gx.lyr[n].radius < 0) {\n                        thk = -m.trunc(0.6 * tw);\n                    } else {\n                        thk = Math.min(Gx.lyr[n].radius, m.trunc(0.6 * tw));\n                    }\n\n                    mx.draw_symbol(Mx, ic, ix + tw - labelOffset, iy - 3,\n                        Gx.lyr[n].symbol, thk);\n                }\n                if (Gx.lyr[n].hcb[\"class\"] === 2) {\n                    //draw colormap\n                    mx.legend_colorbar(Mx, legendPos.x + 10, legendPos.y + (legendPos.height / 4),\n                        (legendPos.width / 4) - 10, legendPos.height / 2);\n                }\n            }\n            ix = ix + tw * 3;\n            iy = iy + Mx.text_h * 0.3;\n            mx.text(Mx, ix - labelOffset, iy, Gx.lyr[n].name);\n        }\n        // a variable to hold the legend y positon of each layer\n        var layerheight = legendPos.height / Gx.lyr.length;\n\n        for (i = 0; i < Gx.lyr.length; i++) {\n            if ((legendPos.x <= Mx.xpos) && ((legendPos.x + legendPos.width) >= Mx.xpos) &&\n                ((legendPos.y <= Mx.ypos)) && (legendPos.y + layerheight) >= Mx.ypos) {\n                //find a way to pull up the menu\n                sigplot_legend_menu(plot, i);\n            }\n            legendPos.y += layerheight;\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function form_plotnote(plot) {\n        var Gx = plot._Gx;\n        if (Gx.HCB.length === 0) {\n            Gx.note = \"\";\n        } else if (Gx.HCB[0].plotnote === undefined) {\n            var files = [];\n            for (var n = 0; n < Gx.HCB.length; n++) {\n                if (Gx.HCB[n].file_name) {\n                    files.push(Gx.HCB[n].file_name);\n                }\n            }\n            Gx.note = files.join(\"|\").toUpperCase();\n        }\n    }\n\n    function draw_pcut_x(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((Gx.zmin === undefined) || (Gx.zmax === undefined)) {\n            return;\n        }\n\n        //fill variables to draw x-cut box along bottom\n        // one-pixel lines need to be draw on half-pixel boundaries\n        var plot_width = Mx.r - Mx.l;\n        Gx.x_box_x = Math.floor(Mx.l - 2) + 0.5;\n        Gx.x_box_y = Math.floor(Mx.b + 25) + 0.5;\n        Gx.x_box_w = Math.floor(plot_width + 4);\n        Gx.x_box_h = Math.floor((5 * Mx.text_h) + 20);\n\n        mx.draw_box(Mx, Mx.fg, Gx.x_box_x, Gx.x_box_y, Gx.x_box_w, Gx.x_box_h, 1, Mx.bg);\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = Mx.fg;\n\n        var x = null;\n        var y = null;\n        for (var ii = 0; ii < plot._Gx.x_cut_data.length; ii++) {\n            var z = plot._Gx.x_cut_data[ii]; // the real z-value\n            // constrain to bounds\n            z = Math.min(Math.max(z, Gx.zmin), Gx.zmax);\n            var zrt = plot._Gx.x_box_h / (Gx.zmax - Gx.zmin); // the z-value to pixel ratio\n            var zpx = Math.round((z - Gx.zmin) * zrt);\n\n            var xrt = plot._Gx.x_box_w / plot._Gx.x_cut_data.length;\n            var xpx = Math.round(ii * xrt);\n\n            var xnew = plot._Gx.x_box_x + xpx;\n            var ynew = (plot._Gx.x_box_y + plot._Gx.x_box_h - zpx);\n\n            if (ii === 0) {\n                ctx.moveTo(xnew, ynew);\n            } else if ((xnew !== x) || (ynew !== y)) {\n                // only draw the line if we are moving to a new point\n                ctx.lineTo(xnew, ynew);\n                x = xnew;\n                y = ynew;\n            }\n        }\n        ctx.stroke();\n    }\n\n    function draw_pcut_y(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((Gx.zmin === undefined) || (Gx.zmax === undefined)) {\n            return;\n        }\n\n        var plot_height = Mx.b - Mx.t;\n\n        //fill variables to draw y-cut box along right sidea\n        // one-pixel lines need to be draw on half-pixel boundaries\n        Gx.y_box_x = Math.floor(Mx.r + 25) + 0.5;\n        Gx.y_box_y = Math.floor(Mx.t - 2) + 0.5;\n        Gx.y_box_w = Math.floor((5 * Mx.text_w) + 20);\n        Gx.y_box_h = Math.floor(plot_height + 2);\n\n        if (Gx.lg_colorbar) { //move over box if large colorbar displayed\n            Gx.y_box_x += 100;\n        }\n\n        //draw y-cut box\n        mx.draw_box(Mx, Mx.fg, Gx.y_box_x, Gx.y_box_y, Gx.y_box_w, Gx.y_box_h, 1, Mx.bg);\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = Mx.fg;\n\n        var x = null;\n        var y = null;\n        for (var ii = 0; ii < plot._Gx.y_cut_data.length; ii++) {\n            var z = plot._Gx.y_cut_data[ii]; // the real z-value\n            // constrain to bounds\n            z = Math.min(Math.max(z, Gx.zmin), Gx.zmax);\n            var zrt = plot._Gx.y_box_w / (Gx.zmax - Gx.zmin); // the z-value to pixel ratio\n            var zpx = Math.round((z - Gx.zmin) * zrt);\n\n            var yrt = plot._Gx.y_box_h / plot._Gx.y_cut_data.length;\n            var ypx = Math.round(ii * yrt);\n\n            var xnew = (plot._Gx.y_box_x + zpx);\n            var ynew = plot._Gx.y_box_y + ypx;\n\n            if (ii === 0) {\n                ctx.moveTo(xnew, ynew);\n            } else if ((xnew !== x) || (ynew !== y)) {\n                // only draw the line if we are moving to a new point\n                ctx.lineTo(xnew, ynew);\n                x = xnew;\n                y = ynew;\n            }\n        }\n        ctx.stroke();\n    }\n\n    function draw_layers(plot) {\n        var layers = plot._Gx.lyr;\n        for (var n = 0; n < layers.length; n++) {\n            //if (Gx.sections !== 0) {\n            // TODO\n            //}\n            draw_layer(plot, layers[n]);\n        }\n    }\n\n    /**\n     * Draws the specified layer.\n     *\n     * This is expected to be called after clearing the plot.\n     *\n     * @param {sigplot.Plot}\n     *            the plot object\n     * @param {Number}\n     *            the layer to draw\n     * @private\n     * @memberOf sigplot\n     */\n    function draw_layer(plot, layer) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((!layer.display) || (Gx.hold !== 0)) {\n            return;\n        }\n\n        layer.draw();\n\n        // TODO consider if this is a source of performance\n        // issues on streaming plots\n        var evt = document.createEvent('Event');\n        evt.initEvent('lyrdraw', true, true);\n        evt.index = layer.index;\n        evt.name = layer.name; // the name of the layer\n        evt.layer = layer;\n        mx.dispatchEvent(Mx, evt);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function delete_layer(plot, n) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        //if (n < Gx.modlayer) Gx.modlayer = Gx.modlayer - 1;\n        //if (n < Gx.modsource) Gx.modsource = Gx.modsource - 1;\n\n        // Notify listeners that a layer is about to be deleted\n        var evt = document.createEvent('Event');\n        evt.initEvent('lyrdel', true, true);\n        evt.index = n;\n        evt.name = Gx.lyr[n].name; // the name of the layer\n        evt.layer = Gx.lyr[n];\n        var executeDefault = mx.dispatchEvent(Mx, evt);\n        if (!executeDefault) {\n            return; // Delete was prevented\n        }\n\n        Gx.lyr[n].ybufn = 0;\n        Gx.lyr[n].ybuf = null;\n        if (n < Gx.lyr.length - 1) {\n            var lyr = Gx.lyr[n];\n            for (var i = n; i < Gx.lyr.length - 1; i++) {\n                Gx.lyr[i] = Gx.lyr[i + 1];\n            }\n        }\n        Gx.lyr.length -= 1;\n\n        if (Gx.HCB.length > 0) {\n            Gx.panxmin = 1.0;\n            Gx.panxmax = -1.0;\n            Gx.panymin = 1.0;\n            Gx.panymax = -1.0;\n        }\n    }\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n\n    function draw_p_cuts(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        if (Gx.lyr[0].hcb[\"class\"] !== 2) {\n            return;\n        }\n\n        var plot_height = Mx.b - Mx.t;\n        var plot_width = Mx.r - Mx.l;\n        var height = Gx.lyr[0].yframe;\n        var width = Gx.lyr[0].xframe;\n\n        if (Gx.p_cuts) {\n            if (!Gx.lyr[0].hcb.pipe) {\n                if (((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r) && (Gx.p_cuts_xpos !== Mx.xpos))) {\n                    var line = 0;\n                    var i = 0;\n\n                    //fill data for y_cut for this mouse xpos\n                    Gx.y_cut_data = [];\n                    line = Math.floor((width * (Mx.xpos - Mx.l)) / plot_width);\n                    for (i = line; i < (width * height); i += width) {\n                        Gx.y_cut_data.push(Gx.lyr[0].zbuf[i]);\n                    }\n                    draw_pcut_y(plot);\n                    Gx.p_cuts_xpos = Mx.xpos;\n                }\n                if (((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b) && (Gx.p_cuts_ypos !== Mx.ypos))) {\n                    var row = 0;\n                    var start = 0;\n                    var finish = 0;\n                    var i = 0;\n\n                    //fill data for x_cut for this mouse ypos\n                    row = Math.floor((height * (Mx.ypos - Mx.t)) / plot_height);\n                    start = row * width;\n                    finish = start + width;\n                    Gx.x_cut_data = Gx.lyr[0].zbuf.slice(start, finish);\n                    draw_pcut_x(plot);\n\n                    Gx.p_cuts_ypos = Mx.ypos;\n                }\n            } else {\n                if ((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r)) {\n                    var line = 0;\n                    var i = 0;\n                    height = Gx.lyr[0].lps;\n                    //fill data for y_cut for this mouse xpos\n                    Gx.y_cut_data = [];\n                    line = Math.floor((width * (Mx.xpos - Mx.l)) / plot_width);\n                    for (i = line; i < (width * height); i += width) {\n                        Gx.y_cut_data.push(Gx.lyr[0].zbuf[i]);\n                    }\n                    draw_pcut_y(plot);\n                }\n\n                if ((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b)) {\n                    var row = 0;\n                    var start = 0;\n                    var finish = 0;\n                    //fill data for x_cut for this mouse ypos\n                    Gx.x_cut_data = [];\n                    row = Math.floor((height * (Mx.ypos - Mx.t)) / plot_height);\n                    start = row * width;\n                    finish = start + width;\n                    Gx.x_cut_data = Gx.lyr[0].zbuf.slice(start, finish);\n                    draw_pcut_x(plot);\n                }\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_crosshairs(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.cross) {\n            if ((Gx.cross === \"vertical\") || (Gx.cross === true)) {\n                if ((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r) && (Gx.cross_xpos !== Mx.xpos)) {\n                    if (Gx.cross_xpos !== undefined) {\n                        mx.rubberline(Mx, Gx.cross_xpos, Mx.t, Gx.cross_xpos, Mx.b);\n                    }\n                    mx.rubberline(Mx, Mx.xpos, Mx.t, Mx.xpos, Mx.b);\n                    Gx.cross_xpos = Mx.xpos;\n                }\n            }\n            if ((Gx.cross === \"horizontal\") || (Gx.cross === true)) {\n                if ((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b) && (Gx.cross_ypos !== Mx.ypos)) {\n                    if (Gx.cross_ypos !== undefined) {\n                        mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r, Gx.cross_ypos);\n                    }\n\n                    mx.rubberline(Mx, Mx.l, Mx.ypos, Mx.r, Mx.ypos);\n                    Gx.cross_ypos = Mx.ypos;\n                }\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_marker(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.xmrk !== null && Gx.ymrk !== null) {\n            var pix = mx.real_to_pixel(Mx, Gx.xmrk, Gx.ymrk);\n            if ((Gx.lyr.length > 0) && (Gx.lyr[0].hcb[\"class\"] === 1)) {\n                if (pix.clipped) {\n                    return;\n                }\n            } else if ((Gx.lyr.length > 0) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                if (pix.clipped_x || !pix.clipped_y) {\n                    return;\n                }\n            }\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            ctx.beginPath();\n            ctx.strokeStyle = Mx.xwfg;\n            ctx.fillStyle = Mx.xwfg;\n            ctx.arc(pix.x, pix.y, 2, 0, 360);\n            ctx.stroke(); // just draw the arc's outline\n\n            // TODO add x/y coord\n            ctx.textBaseline = \"alphabetic\";\n            ctx.textAlign = \"left\";\n            ctx.fillStyle = Mx.fg;\n            ctx.font = Mx.font.font;\n\n            var text = \"x:\" + mx.format_g(Gx.xmrk, 6, 3, true);\n            ctx.fillText(text, pix.x + 5, pix.y - 5);\n            text = \"y:\" + mx.format_g(Gx.ymrk, 6, 3, true);\n            ctx.fillText(text, pix.x + 5, pix.y - 5 + Mx.text_h);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function changephunits(plot, newphunits) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        var newplab = Gx.plab;\n        if (newphunits === 'R') {\n            newplab = 23;\n        } else if (newphunits === 'D') {\n            newplab = 24;\n        }\n        if (newphunits === 'C') {\n            newplab = 25;\n        }\n        if (newplab !== Gx.plab) {\n            var phscale = [Math.PI, 180.0, 0.5];\n            var dscl = phscale[newplab - 23] / phscale[Gx.plab - 23];\n            Gx.plab = newplab;\n            if (Gx.cmode === 2) {\n                for (var i = 0; i <= Mx.level; i++) {\n                    Mx.stk[i].ymin = Mx.stk[i].ymin * dscl;\n                    Mx.stk[i].ymax = Mx.stk[i].ymax * dscl;\n                    Mx.stk[i].yscl = Mx.stk[i].yscl * dscl;\n                }\n\n                Gx.panymin = Gx.panymin * dscl;\n                Gx.panymax = Gx.panymax * dscl;\n                plot.refresh();\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function changemode(plot, newmode) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        Gx.xdata = false;\n        for (var n = 0; n < Gx.lyr.length; n++) {\n            if (newmode === 5) {\n                Gx.lyr[n].xdata = true;\n            } else {\n                Gx.lyr[n].xdata = false; // TODO (Gx.lyr(n).xsub > 0)\n            }\n            if (Gx.lyr[n].xdata) {\n                Gx.xdata = true;\n            }\n        }\n\n        if (newmode === Gx.cmode) {\n            return;\n        } else if (newmode === 5 && Gx.index) {\n            alert(\"Imag/Real mode not permitted in INDEX mode\");\n        } else if (Gx.lyr.length <= 0) {\n            Gx.cmode = newmode;\n            // The call to display specs isn't found in sigplot.for;\n            // which causes a small bug where the plot mode is\n            // changed but the mode label in the specs area\n            // isn't updated.\n            display_specs(plot);\n        } else if (newmode > 0) {\n            var oldmode = Gx.cmode;\n            Gx.cmode = newmode;\n\n            var autox = Gx.autox;\n            var autoy = Gx.autoy;\n            Gx.autox = 3;\n            Gx.autoy = 3;\n\n            if ((newmode === 5) || (oldmode === 5)) {\n                Gx.panxmin = 1.0;\n                Gx.panxmax = -1.0;\n                Gx.panymin = 1.0;\n                Gx.panymax = -1.0;\n                Mx.level = 0;\n\n                if (newmode === Gx.basemode) {\n                    Mx.stk[0].xmin = Gx.xmin;\n                    Mx.stk[0].xmax = Gx.xmax;\n                    Mx.stk[0].ymin = Gx.ymin;\n                    Mx.stk[0].ymax = Gx.ymax;\n                } else if ((newmode === 5) || (Gx.basemode === 5)) {\n                    scale_base(plot, {\n                        get_data: true\n                    });\n                } else {\n                    Mx.stk[0].xmin = Gx.xmin;\n                    Mx.stk[0].xmax = Gx.xmax;\n                    scale_base(plot, {\n                        get_data: true\n                    }, Gx.xmin, Gx.xmax);\n                }\n            } else {\n                if (newmode === Gx.basemode) { // This is only correct if we\n                    // didn't load a basefile\n                    Gx.panymin = 1.0;\n                    Gx.panymax = -1.0;\n                    Mx.stk[0].ymin = Gx.ymin;\n                    Mx.stk[0].ymax = Gx.ymax;\n                } else {\n                    scale_base(plot, {}, Mx.stk[Mx.level].xmin,\n                        Mx.stk[Mx.level].xmax);\n                }\n                for (var n = 1; n <= Mx.level; n++) {\n                    Mx.stk[n].ymin = Mx.stk[0].ymin;\n                    Mx.stk[n].ymax = Mx.stk[0].ymax;\n                }\n            }\n            Gx.autox = autox;\n            Gx.autoy = autoy;\n            plot.refresh();\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_panbars(plot) {\n        var k; // integer*4\n        //var i1; // integer*4\n        //var itext; // integer*4\n\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((!Gx.pan) || (Mx.widget)) {\n            return;\n        }\n\n        k = Mx.level; // Y scrollbar\n\n        var out = {\n            ps: Mx.stk[k].ymin,\n            pe: Mx.stk[k].ymax\n        };\n        var need_y_scrollbar = ((out.ps !== Gx.panymin) || (out.pe !== Gx.panymax));\n        need_y_scrollbar = need_y_scrollbar && (Mx.level > 0);\n\n        if (Gx.autohide_panbars && (!need_y_scrollbar || !plot.mouseOnCanvas) && !Gx.panning) {\n            var ctx = Mx.canvas.getContext(\"2d\");\n            ctx.fillStyle = Mx.bg;\n            ctx.fillRect(Gx.pyl, Mx.t, Gx.pyl + Gx.pthk, Mx.b - Mx.t);\n        } else {\n            var i1 = mx.scrollbar(Mx, 0, Gx.pyl, Gx.pyl + Gx.pthk, Mx.t, Mx.b, out,\n                Gx.panymin, Gx.panymax, undefined, Mx.scrollbar_y);\n            Mx.stk[k].ymin = out.ps;\n            Mx.stk[k].ymax = out.pe;\n        }\n\n        if (Gx.pl < Mx.width) { // X scrollbar\n            out = {\n                ps: Mx.stk[k].xmin,\n                pe: Mx.stk[k].xmax\n            };\n            var need_x_scrollbar = ((out.ps !== Gx.panxmin) || (out.pe !== Gx.panxmax));\n            need_x_scrollbar = need_x_scrollbar && (!Gx.all || (Mx.level > 0));\n\n            if (Gx.autohide_panbars && (!need_x_scrollbar || !plot.mouseOnCanvas) && !Gx.panning) {\n                var ctx = Mx.canvas.getContext(\"2d\");\n                ctx.fillStyle = Mx.bg;\n                ctx.fillRect(Gx.pl, Gx.pt - 1, Gx.pr - Gx.pl, Gx.pthk + 4);\n            } else {\n                var i1 = mx.scrollbar(Mx, 0, Gx.pl, Gx.pr, Gx.pt, Gx.pt + Gx.pthk, out,\n                    Gx.panxmin, Gx.panxmax, undefined, Mx.scrollbar_x);\n                Mx.stk[k].xmin = out.ps;\n                Mx.stk[k].xmax = out.pe;\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function pan(plot, action, flag, mouseEvent) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var i; // an integer*4\n        var k; // an integer*4\n        // var ih // an integer*4\n        // var iw; // an integer*4\n        // var imin; // an integer*4\n        // var imax; // an integer*4\n        var j; // an integer*4\n        var xmin; // a real*8\n        var xmax; // a real*8\n        var xran; // a real*8\n        // var xtemp; // a real*8\n        var ymin; // a real*8\n        var ymax; // a real*8\n        var yran; // a real*8\n        // var ytemp; // a real*8\n        var warn; // a logical*4\n\n        var scrollbarState;\n\n        var sbx = new mx.SCROLLBAR(); // a SCROLLBAR\n        var sby = new mx.SCROLLBAR(); // a SCROLLBAR\n\n        var SIGPLOT_PAN = false;\n        k = Mx.level;\n        if (Gx.panmode > 0) {\n            sbx.flag = 11;\n            sby.flag = 11;\n        } else {\n            sbx.flag = -12;\n            sby.flag = -12;\n        }\n        if (flag === 0) {\n            sbx.action = 0;\n            sby.action = 0;\n        }\n\n        warn = true;\n        if (action.substring(0, 1) === 'Y') {\n            ymin = Mx.stk[k].ymin;\n            ymax = Mx.stk[k].ymax;\n            yran = ymax - ymin;\n            if (action === 'YPAN') {\n                scrollbarState = Mx.scrollbar_y;\n\n                var out = {\n                    ps: ymin,\n                    pe: ymax\n                };\n                i = mx\n                    .scrollbar(Mx, sby, Gx.pyl, Gx.pyl + Gx.pthk, Mx.t,\n                        Mx.b, out, Gx.panymin, Gx.panymax, mouseEvent,\n                        scrollbarState);\n                ymin = out.ps;\n                ymax = out.pe;\n                // TODO: Warn only if Scrollbar arrow is pressed and no\n                // movement.\n                if (sby.action !== 0) {\n                    j = mx.scroll(Mx, sby, mx.XW_UPDATE, undefined,\n                        scrollbarState);\n                }\n                warn = false;\n            } else if (action === 'YCENTER') {\n                // Orig code : ymin = ymin - yran * (Mx.ypos - (Mx.t + Mx.b) /\n                // 2) / (Mx.b - Mx.t) // TODO Worry about any int division here?\n                ymin = ymin - yran * (Mx.ypos - (Mx.t + Mx.b) / 2) / (Mx.b - Mx.t);\n                ymax = ymin + yran;\n                warn = false;\n            }\n\n            if (ymin !== Mx.stk[k].ymin || ymax !== Mx.stk[k].ymax) {\n                Mx.stk[k].ymin = ymin;\n                Mx.stk[k].ymax = ymax;\n                if (Gx.cmode === Gx.basemode && Mx.level === 1) {\n                    Gx.ymin = Math.min(Gx.ymin, ymin);\n                    Gx.ymax = Math.max(Gx.ymax, ymax);\n                }\n\n                this.inPan = true; // prevent recursive pans\n                var evt = document.createEvent('Event');\n                evt.initEvent('ypan', true, true);\n                evt.level = Mx.level;\n                evt.xmin = Mx.stk[Mx.level].xmin;\n                evt.ymin = Mx.stk[Mx.level].ymin;\n                evt.xmax = Mx.stk[Mx.level].xmax;\n                evt.ymax = Mx.stk[Mx.level].ymax;\n                mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n                this.inPan = false;\n\n                plot.refresh();\n                // MSGDO(MSK_PANY, Mx.level); // just sets plotinfo.xmin and\n                // xmax into the MQD for the menu\n                SIGPLOT_PAN = true;\n            }\n            // TODO Later - Implement a messagebox status method\n            // else if (warn) {\n            // mx.message('All panned out', -1.0);\n            // }\n        } else {\n            xmin = Mx.stk[k].xmin;\n            xmax = Mx.stk[k].xmax;\n            xran = xmax - xmin;\n            if (action === 'XPAN') {\n                scrollbarState = Mx.scrollbar_x;\n\n                var out = {\n                    ps: xmin,\n                    pe: xmax\n                };\n                i = mx\n                    .scrollbar(Mx, sbx, Gx.pl, Gx.pr, Gx.pt, Gx.pt + Gx.pthk, out, Gx.panxmin, Gx.panxmax,\n                        mouseEvent, scrollbarState);\n                xmin = out.ps;\n                xmax = out.pe;\n                // TODO: Warn only if Scrollbox arrow is pressed and no\n                // movement.\n                if (sbx.action !== 0) {\n                    j = mx.scroll(Mx, sbx, mx.XW_UPDATE, undefined,\n                        scrollbarState);\n                }\n                warn = false;\n            } else if (action === 'XCENTER') {\n                // Original code : xmin = xmin + xran * (Mx.xpos - (Mx.l + Gx.r)\n                // / 2) / (Mx.r - Mx.l) // TODO Worry about any int division\n                // here?\n                xmin = xmin + xran * (Mx.xpos - (Mx.l + Mx.r) / 2) / (Mx.r - Mx.l);\n                if (xmin !== Mx.stk[k].xmin) {\n                    xmax = xmin + xran;\n                }\n                warn = false;\n            }\n\n            if (Mx.stk[k].xmin !== xmin || Mx.stk[k].xmax !== xmax) {\n                Mx.stk[k].xmin = xmin;\n                Mx.stk[k].xmax = xmax;\n                if (!Gx.xdata && Mx.level === 1) {\n                    Gx.xmin = Mx.stk[1].xmin;\n                    Gx.xmax = Mx.stk[1].xmax;\n                }\n\n                this.inPan = true; // prevent recursive pans\n                var evt = document.createEvent('Event');\n                evt.initEvent('xpan', true, true);\n                evt.level = Mx.level;\n                evt.xmin = Mx.stk[Mx.level].xmin;\n                evt.ymin = Mx.stk[Mx.level].ymin;\n                evt.xmax = Mx.stk[Mx.level].xmax;\n                evt.ymax = Mx.stk[Mx.level].ymax;\n                mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n                this.inPan = false;\n\n                plot.refresh();\n                // MSGDO (MSK_PANX, Mx.level); // just sets plotinfo.xmin and\n                // xmax into the MQD for the menu\n                SIGPLOT_PAN = true;\n            }\n            // TODO Later - Implement a messagebox status method\n            // else if (warn) {\n            // mx.message('All panned out', -1.0);\n            // }\n        }\n\n        return SIGPLOT_PAN;\n    }\n\n    /**\n     * Direct method to handle the dragging of a scrollbar.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param scrollAction\n     *            The scroll action being performed. Either \"YPAN\" or \"XPAN\" are\n     *            accepted.\n     * @param event\n     *            The mouse move event.\n     * @private\n     * @memberOf sigplot\n     */\n    function drag_scrollbar(plot, scrollAction, event) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n        var min;\n        var max;\n\n        // ----- Retrieve appropriate SCROLLBAR -----\n        var scrollbar;\n        if (scrollAction === \"XPAN\") {\n            scrollbar = plot._Mx.scrollbar_x;\n        } else if (scrollAction === \"YPAN\") {\n            scrollbar = plot._Mx.scrollbar_y;\n        } else {\n            throw \"Unable to drag scrollbar - scrollAction is not 'XPAN' or 'YPAN'!!\";\n        }\n\n        // ----- OLD SIGPLOT.PAN Logic -----\n        scrollbar.flag = -12; // TODO Necessary?\n        var k = Mx.level;\n        if (scrollAction === \"XPAN\") {\n            min = Mx.stk[k].xmin;\n            max = Mx.stk[k].xmax;\n        } else if (scrollAction === \"YPAN\") {\n            min = Mx.stk[k].ymin;\n            max = Mx.stk[k].ymax;\n        } else {\n            min = undefined;\n            max = undefined;\n        }\n\n        // ----- MX.SCROLLBAR Logic -----\n        var rangeOut = {\n            \"min\": min,\n            \"max\": max\n        };\n        drag_updateRange(Mx, Gx, scrollbar, scrollAction, rangeOut, event);\n        min = rangeOut.min;\n        max = rangeOut.max;\n\n        // ----- UPDATE SCROLLBAR -----\n        scrollbar.smin = min;\n        scrollbar.srange = max - min;\n        mx.redrawScrollbar(scrollbar, Mx, undefined);\n\n        // ----- Update the viewbox -----\n        updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange,\n            scrollAction.slice(0, 1));\n\n        this.inPan = true; // prevent recursive pans\n        var evt = document.createEvent('Event');\n        if (scrollAction === \"XPAN\") {\n            evt.initEvent('xpan', true, true);\n        } else if (scrollAction === \"YPAN\") {\n            evt.initEvent('ypan', true, true);\n        }\n        evt.level = Mx.level;\n        evt.xmin = Mx.stk[Mx.level].xmin;\n        evt.ymin = Mx.stk[Mx.level].ymin;\n        evt.xmax = Mx.stk[Mx.level].xmax;\n        evt.ymax = Mx.stk[Mx.level].ymax;\n        mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n        this.inPan = false;\n\n        scrollbar.action = 0; // TODO New step - reset action of the scrollbar\n        // after drag is done...\n        plot.refresh();\n    }\n\n    /**\n     * Method to update plot range based on a drag event. Takes the mouse offset\n     * introduced by the drag and adds a scale factor.\n     *\n     * @param Gx\n     *            The GX Context to work with.\n     * @param scrollbar\n     *            The Scrollbar to use.\n     * @param scrollAction\n     *            The scroll action being performed. Either \"YPAN\" or \"XPAN\" are\n     *            accepted.\n     * @param range\n     *            The plot' min and max range values to update.\n     * @param event\n     *            The mouse move event.\n     *\n     * @private\n     * @memberOf sigplot\n     */\n    function drag_updateRange(Mx, Gx, scrollbar, scrollAction, range, event) {\n        scrollbar.action = mx.SB_DRAG;\n\n        if (scrollAction === \"YPAN\") {\n            var scaleFactor = Mx.scrollbar_y.trange / Mx.scrollbar_y.h;\n            if (scrollbar.origin === 4) { // inverted y\n                scaleFactor *= -1;\n            }\n            var mouseOffset = event.screenY - Gx.panning.ypos;\n            var realOffset = mouseOffset * scaleFactor;\n\n            if ((Gx.panning.ymin - realOffset) < Gx.panymin) { // At the left\n                // edge\n                range.max = Gx.panymin + (range.max - range.min);\n                range.min = Gx.panymin;\n            } else if ((Gx.panning.ymax - realOffset) > Gx.panymax) { // At\n                // the\n                // right\n                // edge\n                range.min = Gx.panymax - (range.max - range.min);\n                range.max = Gx.panymax;\n            } else {\n                range.min = Gx.panning.ymin - realOffset;\n                range.max = Gx.panning.ymax - realOffset;\n            }\n        } else if (scrollAction === \"XPAN\") {\n            var scaleFactor = Mx.scrollbar_x.trange / Mx.scrollbar_x.w;\n            if (scrollbar.origin === 3) { // inverted x\n                scaleFactor *= -1;\n            }\n            var mouseOffset = event.screenX - Gx.panning.xpos;\n            var realOffset = mouseOffset * scaleFactor;\n\n            if ((Gx.panning.xmin + realOffset) < Gx.panxmin) { // At the left\n                // edge\n                range.max = Gx.panxmin + (range.max - range.min);\n                range.min = Gx.panxmin;\n            } else if ((Gx.panning.xmax + realOffset) > Gx.panxmax) { // At\n                // the\n                // right\n                // edge\n                range.min = Gx.panxmax - (range.max - range.min);\n                range.max = Gx.panxmax;\n            } else {\n                range.min = Gx.panning.xmin + realOffset;\n                range.max = Gx.panning.xmax + realOffset;\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function setupPrompt(plot, promptText, isValid, onSuccess, inputValue,\n        xpos, ypos, callback) {\n        var Mx = plot._Mx;\n\n        if (Mx.prompt) {\n            throw \"Prompt already exists! Can only have one prompt at a time!\";\n        }\n\n        // Disable Mx keypress/mouse listeners\n        mx.disableListeners(Mx);\n\n        // Disable Plot keypress/mouse listeners\n        plot.disable_listeners();\n\n        // Add on to the onSuccess method with plot specifics\n        var realOnSuccess = function(plot, onSuccess) {\n            return function(value) {\n                onSuccess(value);\n\n                // Re-enable Mx keypress/mouse listeners\n                mx.enableListeners(Mx);\n\n                // Re-enable Plot keypress/mouse listeners\n                plot.enable_listeners();\n\n                plot.refresh();\n\n                if (callback !== undefined) {\n                    callback();\n                }\n            };\n        };\n\n        var refresh = function() { // TODO Refactor this setup method to be\n            // more like mx.menu/main menu widget?\n            plot.refresh();\n        };\n\n        // Create the prompt\n        var errorMessageTimeout = 5000;\n\n        try {\n            mx.prompt(Mx, promptText, isValid, realOnSuccess(plot, onSuccess),\n                refresh, inputValue, xpos, ypos, errorMessageTimeout);\n        } catch (err) {\n            console.log(\"ERROR: Failed to set up prompt due to: \" + err);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function enable_listeners(plot) {\n        var Mx = plot._Mx;\n        mx.addEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n        mx.addEventListener(Mx, \"mousemove\", plot.throttledOnMouseMove, false);\n        document.addEventListener(\"mouseup\", plot.docMouseUp, false);\n        mx.addEventListener(Mx, \"mouseup\", plot.mouseup, false);\n        window.addEventListener(\"mousedown\", plot.dragMouseDownHandler, false);\n        window.addEventListener(\"mousemove\", plot.throttledDragOnMouseMove, false);\n        window.addEventListener(\"mouseup\", plot.dragMouseUpHandler, false);\n        window.addEventListener(\"wheel\", plot.wheelHandler, false);\n        window.addEventListener(\"mousewheel\", plot.wheelHandler, false);\n        window.addEventListener(\"DOMMouseScroll\", plot.wheelHandler, false);\n        window.addEventListener(\"keypress\", plot.onkeypress, false);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function disable_listeners(plot) {\n        var Mx = plot._Mx;\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n        mx.removeEventListener(Mx, \"mousemove\", plot.throttledOnMouseMove,\n            false);\n        document.removeEventListener(\"mouseup\", plot.docMouseUp, false);\n        mx.removeEventListener(Mx, \"mouseup\", plot.mouseup, false);\n        window.removeEventListener(\"mousedown\", plot.dragMouseDownHandler,\n            false);\n        window.removeEventListener(\"mousemove\", plot.throttledDragOnMouseMove,\n            false);\n        window.removeEventListener(\"mouseup\", plot.dragMouseUpHandler, false);\n        window.removeEventListener(\"wheel\", plot.wheelHandler, false);\n        window.removeEventListener(\"mousewheel\", plot.wheelHandler, false);\n        window.removeEventListener(\"DOMMouseScroll\", plot.wheelHandler, false);\n        window.removeEventListener(\"keypress\", plot.onkeypress, false);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function display_specs(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var ctx = Mx.canvas.getContext(\"2d\");\n\n        // section logic\n        if (Gx.sections !== 0) {\n            // TODO\n        } else {\n            Gx.isec = 0;\n        }\n\n        // transform into realworld coordinates\n        // is already done by the mousemove listener\n        // adjust for abscissa mode\n        if (Mx.warpbox) {\n            var re = pixel_to_real(plot, Mx.warpbox.xo, Mx.warpbox.yo);\n            var rwh = pixel_to_real(plot, Mx.warpbox.xl, Mx.warpbox.yl);\n\n            Gx.aretx = re.x;\n            Gx.arety = re.y;\n            Gx.dretx = rwh.x - re.x;\n            Gx.drety = rwh.y - re.y;\n        } else {\n            Gx.aretx = Gx.retx;\n            Gx.arety = Gx.rety;\n            Gx.dretx = Gx.retx - Gx.xmrk;\n            Gx.drety = Gx.rety - Gx.ymrk;\n        }\n\n        if ((Gx.cmode === 5) && (Gx.iabsc === 1)) {\n            Gx.iabsc = 2;\n        } // R/I mode\n        if (Gx.iabsc === 1) { // index\n            Gx.aretx = Math.round((Gx.aretx - Gx.xstart) / Gx.xdelta);\n            if (!Gx.index) {\n                Gx.aretx += 1;\n            }\n            Gx.dretx = Math.round(Gx.dretx / Gx.xdelta);\n        } else if (Gx.iabsc === 2) { // 1/absc\n            if (Gx.aretx !== 0.0) {\n                Gx.aretx = 1.0 / Gx.aretx;\n            }\n            if (Gx.arety !== 0.0) {\n                Gx.arety = 1.0 / Gx.arety;\n            }\n            if (Gx.dretx !== 0.0) {\n                Gx.dretx = 1.0 / Gx.dretx;\n            }\n            if (Gx.drety !== 0.0) {\n                Gx.drety = 1.0 / Gx.drety;\n            }\n        }\n\n        if ((!Gx.show_readout) || (Mx.widget)) {\n            return;\n        }\n\n        // Clear the specs area\n        // First clear the y-row\n        ctx.fillStyle = Mx.bg;\n        var iy = Math.floor(Mx.height - 2.5 * Mx.text_h);\n        ctx.fillRect(Mx.text_w, iy - 1, 49 * Mx.text_w, iy + 1.5 * Mx.text_h);\n\n        // Then clear the x-row\n        iy = Math.floor(Mx.height - 0.5 * Mx.text_h);\n        var k = Math.max(Gx.pr + Mx.text_w, Mx.width - Mx.text_w * 2);\n        ctx.fillStyle = Mx.bg;\n        ctx.fillRect(k, iy - Mx.text_h, Mx.text_w, Mx.text_h);\n\n        if (Gx.autohide_readout && !plot.mouseOnCanvas && !Gx.panning) {\n            return;\n        }\n\n        var xval, yval, xdelta, ydelta;\n        // TODO handle xfmt/yfmt using m.d2a_form equivalent\n        if ((Gx.iabsc === 0) && (Gx.ylab === 4)) {\n            yval = (m.sec2tspec(Gx.arety) + \"                \").substring(0, 16);\n            ydelta = (m.sec2tspec(Gx.drety, \"delta\") + \"                \").substring(0, 16);\n        } else {\n            yval = mx.format_g(Gx.arety, 16, 9, true);\n            ydelta = mx.format_g(Gx.drety, 16, 9);\n        }\n        if ((Gx.iabsc === 0) && (Gx.xlab === 4)) {\n            xval = (m.sec2tspec(Gx.aretx) + \"                \").substring(0, 16);\n            xdelta = (m.sec2tspec(Gx.dretx, \"delta\") + \"                \").substring(0, 16);\n        } else {\n            xval = mx.format_g(Gx.aretx, 16, 9, true);\n            xdelta = mx.format_g(Gx.dretx, 16, 9);\n        }\n\n        var chara = \"y: \" + yval + \" dy: \" + ydelta + \" L=\" + Mx.level + \" \" + cxm[Gx.cmode - 1];\n        var charb = \"x: \" + xval + \" dx: \" + xdelta + \" \" + cam[Gx.iabsc];\n        if (Gx.iabsc === 3) {\n            if (Gx.dretx === 0.0) {\n                chara = chara.substr(0, 20) + \"sl: Inf             \" + chara.substr(40, chara.length);\n            } else {\n                chara = chara.substr(0, 20) + \"sl: \" + mx.format_g(Gx.drety / Gx.dretx, 16, 9) + chara.substr(40, chara.length);\n            }\n        }\n\n        iy = Math.floor(Mx.height - 1.5 * Mx.text_h);\n        mx.text(Mx, Mx.text_w, iy, chara);\n        iy = Math.floor(Mx.height - 0.5 * Mx.text_h);\n        mx.text(Mx, Mx.text_w, iy, charb);\n\n        if (mx.LEGACY_RENDER) {\n            // display controls indicator\n            if (k < Mx.width) {\n                if (Gx.cntrls > 0) {\n                    mx.text(Mx, k, iy, 'C');\n                } else {\n                    mx.text(Mx, k, iy, ' ');\n                }\n            }\n        }\n\n        // draw color bar - large\n        var x = 0;\n        var y = 0;\n        var w = 0;\n        var h = 0;\n        if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n            var plot_height = Mx.b - Mx.t;\n\n            x = Mx.r + 35;\n            y = Mx.t + (1 / 8) * plot_height;\n            w = 5 * Mx.text_w;\n            h = (3 / 4) * plot_height;\n\n            // If I have a large color bar, I probably also want to add buttons\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            ctx.strokeStyle = \"rgba(124, 123, 121, 0.8)\";\n            ctx.fillStyle = \" rgba(124, 123, 121, 0.8)\";\n\n            // For more precise referencing\n            var colorbar_x = x;\n            var colorbar_y = y;\n            var colorbar_width = w;\n            var colorbar_height = h;\n            var button_width = colorbar_width - 2;\n            var button_height = button_width / 2;\n            var button_x = colorbar_x + ((colorbar_width - button_width) / 2);\n            var button_y = colorbar_y - 10;\n\n            // Draw the top button\n            ctx.beginPath();\n            ctx.moveTo(button_x, button_y);\n            ctx.lineTo(button_x + button_width, button_y);\n            ctx.lineTo(button_x + (1 / 2) * button_width, button_y - button_height);\n            ctx.lineTo(button_x, button_y);\n            ctx.stroke();\n            ctx.fill();\n\n            // Draw the bottom button\n            var button_y_2 = button_y + colorbar_height + 20;\n\n            ctx.beginPath();\n            ctx.moveTo(button_x, button_y_2);\n            ctx.lineTo(button_x + button_width, button_y_2);\n            ctx.lineTo(button_x + (1 / 2) * button_width, button_y_2 + button_height);\n            ctx.lineTo(button_x, button_y_2);\n            ctx.stroke();\n            ctx.fill();\n\n            // Store this info so we can access it later\n\n            Gx.cbb_top_x1 = button_x;\n            Gx.cbb_top_y1 = button_y;\n            Gx.cbb_bot_x1 = button_x;\n            Gx.cbb_bot_y1 = button_y_2;\n            Gx.cbb_width = button_width;\n            Gx.cbb_height = button_height;\n\n        } else { // draw a small colorbar\n            x = (49 * Mx.text_w) - 3;\n            y = Mx.height - Mx.text_h * 2.5;\n            w = Mx.text_w;\n            h = Mx.text_h * 2;\n        }\n\n        mx.colorbar(Mx, x, y, w, h);\n\n        //draw boxes for the p_cuts\n        if (Gx.p_cuts && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n            draw_pcut_y(plot);\n            draw_pcut_x(plot);\n        }\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function scale_base(plot, mode, xxmin, xxmax, xlab, ylab) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var load = (mode.get_data === true);\n\n        Gx.panxmin = 1.0;\n        Gx.panxmax = -1.0;\n        Gx.panymin = 1.0;\n        Gx.panymax = -1.0;\n        var xmin = xxmin;\n        var xmax = xxmax;\n        var noxmin = (xmin === undefined);\n        var noxmax = (xmax === undefined);\n        if (Gx.lyr.length === 0) {\n            Gx.panxmin = -1.0;\n            Gx.panxmax = 1.0;\n            Gx.panymin = -1.0;\n            Gx.panymax = 1.0;\n        } else {\n            if (xlab === undefined) {\n                Gx.xlab = Gx.lyr[0].xlab;\n            }\n            if (ylab === undefined) {\n                Gx.ylab = Gx.lyr[0].ylab;\n            }\n\n            for (var n = 0; n < Gx.lyr.length; n++) {\n                if (Gx.lyr[n].display === false) {\n                    continue;\n                }\n                if (noxmin) {\n                    xmin = Gx.lyr[n].xmin;\n                }\n\n                if (noxmax) {\n                    xmax = Gx.lyr[n].xmax;\n                }\n\n                if (Gx.xlab !== Gx.lyr[n].xlab) {\n                    Gx.xlab = 0; // If the layers aren't consistent use None\n                }\n                if (Gx.ylab !== Gx.lyr[n].ylab) {\n                    Gx.ylab = 0; // If the layers aren't consistent use None\n                }\n\n                if (load) {\n                    Gx.lyr[n].get_data(xmin, xmax);\n                }\n\n                if (Gx.autox > 0 || Gx.autoy > 0) {\n                    while (xmin < xmax) {\n                        // get_data fills in the layer xbuf/ybuf with data\n                        Gx.lyr[n].get_data(xmin, xmax);\n\n                        // have the layer prep it's data to be rendered\n                        var npts = Gx.lyr[n].prep(xmin, xmax);\n\n                        // If both All and Expand are provided we\n                        // need to look at the entire file to auto-scale it\n                        if (Gx.all && Gx.expand) {\n                            if (Gx.lyr[n].size === 0) {\n                                xmin = xmax;\n                            } else {\n                                if (Gx.index) {\n                                    xmin = xmin + npts;\n                                } else {\n                                    if (Gx.lyr[n].xdelta >= 0) {\n                                        xmin = xmin + (Gx.lyr[n].size * Gx.lyr[n].xdelta);\n                                    } else {\n                                        xmax = xmax + (Gx.lyr[n].size * Gx.lyr[n].xdelta);\n                                    }\n                                }\n                            }\n                        } else {\n                            xmin = xmax;\n                        }\n                    }\n                } else {\n                    Gx.lyr[n].prep(1.0, -1.0);\n                }\n            }\n        }\n\n        var xran = Gx.panxmax - Gx.panxmin;\n        if (xran < 0.0) {\n            Gx.panxmax = Gx.panxmin;\n            Gx.panxmin = Gx.panxmax + xran;\n            xran = -xran;\n        }\n        if (xran <= 1.0e-20) {\n            Gx.panxmin = Gx.panxmin - 1.0;\n            Gx.panxmax = Gx.panxmax + 1.0;\n        }\n\n        if (((Gx.autox & 1) !== 0) && noxmin) {\n            Mx.stk[0].xmin = Gx.panxmin;\n        }\n        if (((Gx.autox & 2) !== 0) && noxmax) {\n            Mx.stk[0].xmax = Gx.panxmax;\n            if (!(Gx.all || Gx.xdata)) {\n                for (var n = 0; n < Gx.lyr.length; n++) {\n                    xmax = Math.min(Gx.lyr[n].xmax, Mx.stk[0].xmax);\n                    var dpts = Math.abs((xmax - Gx.lyr[n].xmin) / Gx.lyr[n].xdelta) - Gx.bufmax + 1.0;\n                    if (dpts > 0) {\n                        Mx.stk[0].xmax = xmax - dpts * Math.abs(Gx.lyr[n].xdelta);\n                    }\n                }\n            }\n        }\n\n        if (((Gx.autoy & 1) !== 0)) {\n            Mx.stk[0].ymin = Gx.panymin;\n        }\n        if (((Gx.autoy & 2) !== 0)) {\n            Mx.stk[0].ymax = Gx.panymax;\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function pixel_to_real(plot, xpos, ypos) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var ret = mx.pixel_to_real(Mx, xpos, ypos);\n        if (Gx.index) {\n            ret.x = ret.x * Gx.xdelta;\n        }\n\n        return ret;\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function coordsInRectangle(x, y, rect_x, rect_y, rect_width, rect_height) {\n        return (x >= rect_x && x <= rect_x + rect_width && y >= rect_y && y <= rect_y + rect_height);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function coordsInTriangle(x, y, tri_x1, tri_y1, tri_x2, tri_y2, tri_x3, tri_y3) {\n        // Uses barycentric coordinates\n        // https://en.wikipedia.org/wiki/Barycentric_coordinate_system ( and http://blackpawn.com/texts/pointinpoly/)\n\n        // Compute vectors\n        var v0 = [tri_x3 - tri_x1, tri_y3 - tri_y1];\n        var v1 = [tri_x2 - tri_x1, tri_y2 - tri_y1];\n        var v2 = [x - tri_x1, y - tri_y1];\n\n        // Compute dot products\n        var dot00 = (v0[0] * v0[0]) + (v0[1] * v0[1]);\n        var dot01 = (v0[0] * v1[0]) + (v0[1] * v1[1]);\n        var dot02 = (v0[0] * v2[0]) + (v0[1] * v2[1]);\n        var dot11 = (v1[0] * v1[0]) + (v1[1] * v1[1]);\n        var dot12 = (v1[0] * v2[0]) + (v1[1] * v2[1]);\n\n        var inv_denom = 1 / (dot00 * dot11 - dot01 * dot01);\n\n        var u = (dot11 * dot02 - dot01 * dot12) * inv_denom;\n        var v = (dot00 * dot12 - dot01 * dot02) * inv_denom;\n\n        /*\n        console.log(\"u \", u);\n        console.log(\"v \", v);\n        */\n\n        return (u >= 0 && v >= 0 && u + v < 1);\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function inPanRegion(plot, coord) {\n        var inPanRegion = false;\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var x = 0;\n        var y = 0;\n        if (coord === undefined) {\n            x = Mx.xpos;\n            y = Mx.ypos;\n\n            if (!plot.mouseOnCanvas) {\n                return false;\n            }\n        } else {\n            x = coord.x;\n            y = coord.y;\n        }\n\n        var command = ' ';\n\n        if (!Gx.pan) {\n            return false;\n        }\n\n        var outside_right_border = (x > Mx.r);\n        var above_top_border = (y <= Gx.pt + Gx.pthk + 2);\n        var below_bottom_border = (y > Gx.pt - 2);\n        var between_top_and_bottom = (y >= Mx.t && y <= Mx.b);\n        var between_left_and_right = (x >= Gx.pl && x <= Gx.pr);\n        var has_bottom_scrollbar = (Gx.show_readout || (Gx.x_scrollbar_location === \"bottom\"));\n\n        if (outside_right_border && between_top_and_bottom) { // YPAN\n            command = 'YPAN'; // Y scrollbar\n            // TODO do we want to\n            // reset the xposition?\n\n            if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                // Need to do an additional check since there is area outside Mx.r that is NOT the pan region\n                var right_of_colorbar = (x > Mx.r + 100); // Mx.r = Mx.r - 100 is how we moved it initally\n                if (right_of_colorbar) {\n                    inPanRegion = true;\n                } else {\n                    inPanRegion = false;\n                }\n\n            } else {\n                Mx.xpos = Gx.pyl + m.trunc(Gx.pthk / 2);\n                inPanRegion = true;\n            }\n            //possibly do another check for p_cuts as well;\n        } else if (has_bottom_scrollbar && between_left_and_right && below_bottom_border) {\n            command = 'XPAN'; // X scrollbar\n            Mx.ypos = Gx.pt + m.trunc(Gx.pthk / 2); // TODO Do we want to reset\n            // the yposition?\n            inPanRegion = true;\n        } else if (!has_bottom_scrollbar && between_left_and_right && above_top_border) {\n            command = 'XPAN'; // X scrollbar\n            Mx.ypos = Gx.pt + m.trunc(Gx.pthk / 2); // TODO Do we want to reset\n            // the yposition?\n            inPanRegion = true;\n        }\n\n        return {\n            inPanRegion: inPanRegion,\n            command: command\n        };\n    }\n\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function inPanCenterRegion(plot) {\n        var inCenterRegion = false;\n        var Mx = plot._Mx;\n        var x = Mx.xpos;\n        var y = Mx.ypos;\n        var th = Mx.text_h;\n        var tw = Mx.text_w;\n        var command = ' ';\n\n        if (x < Mx.l - tw && y <= Mx.b && y >= Mx.t) { // YCENTER\n            // Mx.canvas.getContext(\"2d\").strokeStyle = \"blue\";\n            // Mx.canvas.getContext(\"2d\").strokeRect(0, Mx.t, Mx.l - tw, Mx.b -\n            // Mx.t);\n            command = 'YCENTER';\n            inCenterRegion = true;\n        } else if (y > Mx.b + m.trunc(0.5 * tw) && y <= Mx.b + m.trunc(m.trunc(3 * th) / 2) && x >= Mx.l && x <= Mx.r) { // XCENTER\n            // Mx.canvas.getContext(\"2d\").strokeStyle = \"red\";\n            // Mx.canvas.getContext(\"2d\").strokeRect(Mx.l, Mx.b + m.trunc(.5 *\n            // tw),\n            // Mx.r - Mx.l, (Mx.b + m.trunc(m.trunc(3 * th) / 2)) - (Mx.b +\n            // m.trunc(.5 * tw)));\n            command = 'XCENTER';\n            inCenterRegion = true;\n        }\n\n        return {\n            inCenterRegion: inCenterRegion,\n            command: command\n        };\n    }\n\n    /**\n     * Returns true if position is within the given scrollbar's area. Depends on\n     * mx.scroll_real2pix method.\n     *\n     * @param position\n     *            An object containing 'x' and 'y' pixel values that represent a\n     *            position.\n     * @param scrollbar\n     *            The scrollbar object itself.\n     *\n     * @private\n     * @memberOf sigplot\n     */\n    function onScrollbar(position, scrollbar) {\n        var s1;\n        var sw;\n\n        /*\n         * Compute s, the offset in pixels from the 'origin' of the scrollbar's\n         * on-screen region.\n         */\n        var s;\n        if (scrollbar.origin & 1) {\n            s = position.x - scrollbar.x;\n            if (scrollbar.origin & 2) {\n                s = scrollbar.w - s;\n            }\n        } else {\n            s = position.y - scrollbar.y;\n            if (scrollbar.origin <= 2) {\n                s = scrollbar.h - s;\n            }\n        }\n\n        // Update s1 and sw values\n        var scrollReal2PixOut = mx.scroll_real2pix(scrollbar);\n        s1 = scrollReal2PixOut.s1;\n        sw = scrollReal2PixOut.sw;\n\n        // Determine if mouse is on scrollbar\n        if (s >= s1 && s <= s1 + sw) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Performs the middle-click scroll-menu action specified on the plot.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param action\n     *            The scrollbar action to perform.\n     * @param direction\n     *            The scroll direction to update. Acceptable directions are\n     *            either \"XPAN\" or \"YPAN\".\n     * @memberOf sigplot\n     * @private\n     */\n    function middleClickScrollMenuAction(plot, action, direction) {\n        var Mx = plot._Mx;\n\n        // Determine the appropriate scrollbar to work with\n        var scrollbar;\n        if (direction === \"XPAN\") {\n            scrollbar = Mx.scrollbar_x;\n        } else if (direction === \"YPAN\") {\n            scrollbar = Mx.scrollbar_y;\n        }\n\n        // Set scrollbar action\n        scrollbar.action = action;\n        scrollbar.step = 0.1 * scrollbar.srange;\n        scrollbar.page = 9 * scrollbar.step;\n        scrollbar.scale = 2.0;\n\n        // Update min and range to the appropriate values based on action\n        mx.scroll(Mx, scrollbar, mx.XW_COMMAND, undefined, scrollbar);\n\n        // Update the viewbox based on new min and max values\n        updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange,\n            direction.slice(0, 1));\n\n        this.inPan = true; // prevent recursive pans\n        var evt = document.createEvent('Event');\n        if (direction === \"XPAN\") {\n            evt.initEvent('xpan', true, true);\n        } else if (direction === \"YPAN\") {\n            evt.initEvent('ypan', true, true);\n        }\n        evt.level = Mx.level;\n        evt.xmin = Mx.stk[Mx.level].xmin;\n        evt.ymin = Mx.stk[Mx.level].ymin;\n        evt.xmax = Mx.stk[Mx.level].xmax;\n        evt.ymax = Mx.stk[Mx.level].ymax;\n        mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n        this.inPan = false;\n\n    }\n\n    /**\n     * Updates a plot's viewbox along a given axis to the provided min and max\n     * values.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param newMin\n     *            The new minimum axis value to use\n     * @param newMax\n     *            The new maximum axis value to use\n     * @param axis\n     *            The axis to update. Acceptable axis values are \"X\" or \"Y\".\n     * @memberOf sigplot\n     * @private\n     */\n    function updateViewbox(plot, newMin, newMax, axis) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var k = Mx.level;\n\n        if (axis === \"X\") {\n            var xmin = newMin;\n            var xmax = newMax;\n\n            if (Mx.stk[k].xmin !== xmin || Mx.stk[k].xmax !== xmax) {\n                Mx.stk[k].xmin = xmin;\n                Mx.stk[k].xmax = xmax;\n                if (!Gx.xdata && Mx.level === 1) {\n                    Gx.xmin = Mx.stk[1].xmin;\n                    Gx.xmax = Mx.stk[1].xmax;\n                }\n                plot.refresh();\n            }\n        } else if (axis === \"Y\") {\n            var ymin = newMin;\n            var ymax = newMax;\n\n            if (ymin !== Mx.stk[k].ymin || ymax !== Mx.stk[k].ymax) {\n                Mx.stk[k].ymin = ymin;\n                Mx.stk[k].ymax = ymax;\n                if (Gx.cmode === Gx.basemode && Mx.level === 1) {\n                    Gx.ymin = Math.min(Gx.ymin, ymin);\n                    Gx.ymax = Math.max(Gx.ymax, ymax);\n                }\n                plot.refresh();\n            }\n        }\n    }\n\n    module.exports = sigplot;\n\n}());\n","/**\n * @license\n * File: m.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jslint nomen: true, browser: true, devel: true*/\n\n//Uses Immediately-invoked Function Expressions (IIFE)s for namespaces\n//See http://addyosmani.com/blog/essential-js-namespacing/ for details.\n\n/* global module */\n/* global require */\n\n(function() {\n    'use strict';\n\n    var bluefile = require(\"./bluefile\");\n    var loglevel = require(\"loglevel\");\n\n    function m() {}\n\n    m.log = loglevel;\n\n    /**\n     *\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var PointArray = null;\n\n    /**\n     * True if we detected that we are on an iOS device\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);\n    if ((iOS) || // iOS doesn't support Float64\n        (typeof Float64Array === 'undefined') || // If it's undefined it's obviously not supported\n        (Float64Array.emulated) || // If it's emulated, don't waste time on extra precision\n        (!Float64Array.BYTES_PER_ELEMENT)) { // If bytes per element isn't defined, it's a buggy implementation (i.e. PhantomJS)\n        m.PointArray = Float32Array;\n    } else {\n        m.PointArray = Float64Array;\n    }\n\n\n    /** UNITS Structure:\n     *\t\t0: [\"None\", \"U\"],\n     *\t\t1: [\"Time\", \"sec\"],\n     *\t\t2: [\"Delay\", \"sec\"],\n     *\t\t3: [\"Frequency\", \"Hz\"],\n     *\t\t4: [\"Time code format\", \"\"],\n     *\t\t5: [\"Distance\", \"m\"],\n     *\t\t6: [\"Speed\", \"m/s\"],\n     *\t\t7: [\"Acceleration\", \"m/sec^2\"],\n     *\t\t8: [\"Jerk\", \"m/sec^3\"],\n     *\t\t9: [\"Doppler\", \"Hz\"],\n     *\t\t10: [\"Doppler rate\", \"Hz/sec\"],\n     *\t\t11: [\"Energy\", \"J\"],\n     *\t\t12: [\"Power\", \"W\"],\n     *\t\t13: [\"Mass\", \"g\"],\n     *\t\t14: [\"Volume\", \"l\"],\n     *\t\t15: [\"Angular power density\", \"W/ster\"],\n     *\t\t16: [\"Integrated power density\", \"W/rad\"],\n     *\t\t17: [\"Spatial power density\", \"W/m^2\"],\n     *\t\t18: [\"Integrated power density\", \"W/m\"],\n     *\t\t19: [\"Spectral power density\", \"W/MHz\"],\n     *\t\t20: [\"Amplitude\", \"U\"],\n     *\t\t21: [\"Real\", \"U\"],\n     *\t\t22: [\"Imaginary\", \"U\"],\n     *\t\t23: [\"Phase\", \"rad\"],\n     *\t\t24: [\"Phase\", \"deg\"],\n     *\t\t25: [\"Phase\", \"cycles\"],\n     *\t\t26: [\"10*Log\", \"U\"],\n     *\t\t27: [\"20*Log\", \"U\"],\n     *\t\t28: [\"Magnitude\", \"U\"],\n     *\t\t29: [\"Unknown\", \"U\"],\n     *\t\t30: [\"Unknown\", \"U\"],\n     *\t\t31: [\"General dimensionless\", \"\"],\n     *\t\t32: [\"Counts\", \"\"],\n     *\t\t33: [\"Angle\", \"rad\"],\n     *\t\t34: [\"Angle\", \"deg\"],\n     *\t\t35: [\"Relative power\", \"dB\"],\n     *\t\t36: [\"Relative power\", \"dBm\"],\n     *\t\t37: [\"Relative power\", \"dBW\"],\n     *\t\t38: [\"Solid angle\", \"ster\"],\n     *\t\t40: [\"Distance\", \"ft\"],\n     *\t\t41: [\"Distance\", \"nmi\"],\n     *\t\t42: [\"Speed\", \"ft/sec\"],\n     *\t\t43: [\"Speed\", \"nmi/sec\"],\n     *\t\t44: [\"Speed\", \"knots=nmi/hr\"],\n     *\t\t45: [\"Acceleration\", \"ft/sec^2\"],\n     *\t\t46: [\"Acceleration\", \"nmi/sec^2\"],\n     *\t\t47: [\"Acceleration\", \"knots/sec\"],\n     *\t\t48: [\"Acceleration\", \"G\"],\n     *\t\t49: [\"Jerk\", \"G/sec\"],\n     *\t\t50: [\"Rotation\", \"rps\"],\n     *\t\t51: [\"Rotation\", \"rpm\"],\n     *\t\t52: [\"Angular velocity\", \"rad/sec\"],\n     *\t\t53: [\"Angular velocity\", \"deg/sec\"],\n     *\t\t54: [\"Angular acceleration\", \"rad/sec^2\"],\n     *\t\t55: [\"Angular acceleration\", \"deg/sec^2\"],\n     *\t\t60: [\"Latitude\", \"deg\"],\n     *\t\t61: [\"Longitude\", \"deg\"],\n     *\t\t62: [\"Altitude\", \"ft\"],\n     *\t\t63: [\"Altitude\", \"m\"]\n     * @global\n     */\n    var UNITS = {\n        0: [\"None\", \"U\", true, true],\n        1: [\"Time\", \"sec\", true, true],\n        2: [\"Delay\", \"sec\", true, false],\n        3: [\"Frequency\", \"Hz\", true, true],\n        4: [\"Time code format\", \"\", true, false],\n        5: [\"Distance\", \"m\", true, true],\n        6: [\"Speed\", \"m/s\", true, true],\n        7: [\"Acceleration\", \"m/sec^2\", true, true],\n        8: [\"Jerk\", \"m/sec^3\", true, true],\n        9: [\"Doppler\", \"Hz\", true, false],\n        10: [\"Doppler rate\", \"Hz/sec\", true, true],\n        11: [\"Energy\", \"J\", true, true],\n        12: [\"Power\", \"W\", true, true],\n        13: [\"Mass\", \"g\", true, true],\n        14: [\"Volume\", \"l\", true, true],\n        15: [\"Angular power density\", \"W/ster\", true, true],\n        16: [\"Integrated power density\", \"W/rad\", true, true],\n        17: [\"Spatial power density\", \"W/m^2\", true, true],\n        18: [\"Integrated power density\", \"W/m\", false, true],\n        19: [\"Spectral power density\", \"W/MHz\", true, true],\n        20: [\"Amplitude\", \"U\", true, false],\n        21: [\"Real\", \"U\", true, false],\n        22: [\"Imaginary\", \"U\", true, false],\n        23: [\"Phase\", \"rad\", true, true],\n        24: [\"Phase\", \"deg\", false, true],\n        25: [\"Phase\", \"cycles\", false, true],\n        26: [\"10*Log\", \"U\", true, false],\n        27: [\"20*Log\", \"U\", true, false],\n        28: [\"Magnitude\", \"U\", true, false],\n        29: [\"Unknown\", \"U\", true, false],\n        30: [\"Unknown\", \"U\", false, false],\n        31: [\"General dimensionless\", \"\", true, true],\n        32: [\"Counts\", \"\", true, false],\n        33: [\"Angle\", \"rad\", true, false],\n        34: [\"Angle\", \"deg\", false, false],\n        35: [\"Relative power\", \"dB\", true, true],\n        36: [\"Relative power\", \"dBm\", false, true],\n        37: [\"Relative power\", \"dBW\", false, true],\n        38: [\"Solid angle\", \"ster\", true, true],\n        40: [\"Distance\", \"ft\", false, true],\n        41: [\"Distance\", \"nmi\", false, true],\n        42: [\"Speed\", \"ft/sec\", false, true],\n        43: [\"Speed\", \"nmi/sec\", false, true],\n        44: [\"Speed\", \"knots=nmi/hr\", false, true],\n        45: [\"Acceleration\", \"ft/sec^2\", false, true],\n        46: [\"Acceleration\", \"nmi/sec^2\", false, true],\n        47: [\"Acceleration\", \"knots/sec\", false, true],\n        48: [\"Acceleration\", \"G\", false, true],\n        49: [\"Jerk\", \"G/sec\", false, true],\n        50: [\"Rotation\", \"rps\", true, false],\n        51: [\"Rotation\", \"rpm\", false, false],\n        52: [\"Angular velocity\", \"rad/sec\", true, true],\n        53: [\"Angular velocity\", \"deg/sec\", false, true],\n        54: [\"Angular acceleration\", \"rad/sec^2\", true, true],\n        55: [\"Angular acceleration\", \"deg/sec^2\", false, true],\n        60: [\"Latitude\", \"deg\", true, false],\n        61: [\"Longitude\", \"deg\", true, false],\n        62: [\"Altitude\", \"ft\", true, false],\n        63: [\"Altitude\", \"m\", false, false]\n    };\n\n    m.UNITS = UNITS;\n\n    /** Common structure\n     * @private\n     */\n    m.Mc = {\n        // Colormaps are stored as 7 element tables which are then\n        //\tinterpolated to the number of colors actually used in a graphics routine\n        //\tcall to MX$COLORMAP.\n\n        // There are 4 colormap tables stored in the environment: A GREYSCALE,\n        // COLORRAMP, COLORWHEEL, COLORSPECTRUM, or SUNSET.  The specific values that\n        // are listed here are from xcolordef.prm (use the XCOLORMAP widget).\n        //\n        // The actual values are a result of tribal knowledge and years of experience\n        colormap: [{\n                name: \"Greyscale\",\n                colors: [{\n                    pos: 0,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 60,\n                    red: 50,\n                    green: 50,\n                    blue: 50\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }]\n            }, {\n                name: \"Ramp Colormap\",\n                colors: [{\n                    pos: 0,\n                    red: 0,\n                    green: 0,\n                    blue: 15\n                }, {\n                    pos: 10,\n                    red: 0,\n                    green: 0,\n                    blue: 50\n                }, {\n                    pos: 31,\n                    red: 0,\n                    green: 65,\n                    blue: 75\n                }, {\n                    pos: 50,\n                    red: 0,\n                    green: 85,\n                    blue: 0\n                }, {\n                    pos: 70,\n                    red: 75,\n                    green: 80,\n                    blue: 0\n                }, {\n                    pos: 83,\n                    red: 100,\n                    green: 60,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 0,\n                    blue: 0\n                }]\n            }, {\n                name: \"Color Wheel\",\n                colors: [{\n                    pos: 0,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 20,\n                    red: 0,\n                    green: 80,\n                    blue: 40\n                }, {\n                    pos: 30,\n                    red: 0,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 50,\n                    red: 10,\n                    green: 10,\n                    blue: 0\n                }, {\n                    pos: 65,\n                    red: 100,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 88,\n                    red: 100,\n                    green: 40,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }]\n            }, {\n                name: \"Spectrum\",\n                colors: [{\n                    pos: 0,\n                    red: 0,\n                    green: 75,\n                    blue: 0\n                }, {\n                    pos: 22,\n                    red: 0,\n                    green: 90,\n                    blue: 90\n                }, {\n                    pos: 37,\n                    red: 0,\n                    green: 0,\n                    blue: 85\n                }, {\n                    pos: 49,\n                    red: 90,\n                    green: 0,\n                    blue: 85\n                }, {\n                    pos: 68,\n                    red: 90,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 80,\n                    red: 90,\n                    green: 90,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 95,\n                    green: 95,\n                    blue: 95\n                }]\n            }, {\n                name: \"calewhite\",\n                colors: [{\n                    pos: 0,\n                    red: 100,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 16.666,\n                    red: 0,\n                    green: 0,\n                    blue: 100\n                }, {\n                    pos: 33.333,\n                    red: 0,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 50,\n                    red: 0,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 66.666,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 83.333,\n                    red: 100,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 0,\n                    blue: 100\n                }]\n            }, {\n                name: \"HotDesat\",\n                colors: [{\n                    pos: 0,\n                    red: 27.84,\n                    green: 27.84,\n                    blue: 85.88\n                }, {\n                    pos: 14.2857,\n                    red: 0,\n                    green: 0,\n                    blue: 35.69\n                }, {\n                    pos: 28.571,\n                    red: 0,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 42.857,\n                    red: 0,\n                    green: 49.8,\n                    blue: 0\n                }, {\n                    pos: 57.14286,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 71.42857,\n                    red: 100,\n                    green: 37.65,\n                    blue: 0\n                }, {\n                    pos: 85.7143,\n                    red: 41.96,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 87.84,\n                    green: 29.8,\n                    blue: 29.8\n                }]\n            }, {\n                name: \"Sunset\",\n                colors: [{\n                    pos: 0,\n                    red: 10,\n                    green: 0,\n                    blue: 23\n                }, {\n                    pos: 18,\n                    red: 34,\n                    green: 0,\n                    blue: 60\n                }, {\n                    pos: 36,\n                    red: 58,\n                    green: 20,\n                    blue: 47\n                }, {\n                    pos: 55,\n                    red: 74,\n                    green: 20,\n                    blue: 28\n                }, {\n                    pos: 72,\n                    red: 90,\n                    green: 43,\n                    blue: 0\n                }, {\n                    pos: 87,\n                    red: 100,\n                    green: 72,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 100,\n                    blue: 76\n                }]\n            },\n            {\n                name: \"Hot\",\n                colors: [\"#000000\", \"#7f0000\", \"#b30000\", \"#d7301f\", \"#ef6548\", \"#fc8d59\", \"#fdbb84\", \"#fdd49e\", \"#fee8c8\", \"#fff7ec\", \"#ffffff\"]\n            }, {\n                name: \"Cold\",\n                colors: [\"#000000\", \"#023858\", \"#045a8d\", \"#0570b0\", \"#3690c0\", \"#74a9cf\", \"#a6bddb\", \"#d0d1e6\", \"#ece7f2\", \"#fff7fb\", \"#ffffff\"]\n            },\n            {\n                name: \"Purple\",\n                colors: [\"#230022\", \"#4d004b\", \"#810f7c\", \"#88419d\", \"#8c6bb1\", \"#8c96c6\", \"#9ebcda\", \"#bfd3e6\", \"#e0ecf4\", \"#f7fcfd\"]\n            }, {\n                name: \"BuGn\",\n                colors: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b']\n            }, {\n                name: \"YlOrBr\",\n                colors: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506']\n            }, {\n                name: \"YlGnBu\",\n                colors: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58']\n            }, {\n                name: \"YlOrRd\",\n                colors: [\"#000000\", \"#662506\", \"#993404\", \"#cc4c02\", \"#ec7014\", \"#fe9929\", \"#fec44f\", \"#fee391\", \"#fff7bc\", \"#ffffe5\", \"#ffffff\"]\n            }, {\n                name: \"GreyNRed\",\n                colors: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'].reverse()\n            }\n        ]\n    };\n\n    /** Pipe Size\n     * @private\n     */\n    m.PIPESIZE = 1024 * 1024;\n\n    /**\n     * Converts unit strings to number code\n     * @param\t{string}\tunitInput\tUser unit input\n     */\n    m.unit_lookup = function(unitInput) {\n        for (var i = 0; i < 64; i++) {\n            var u;\n            if (UNITS[i] === undefined) {\n                u = UNITS[0];\n            } else {\n                u = UNITS[i];\n            }\n            var first = u[0];\n            var second = u[1];\n            var comparer1 = u[0] + \" \" + u[1];\n            var comparer2 = u[0] + \"_\" + u[1];\n            if (unitInput === first) {\n                if (u[2]) {\n                    return i;\n                }\n            } else if (unitInput === second) {\n                if (u[3]) {\n                    return i;\n                }\n            } else if ((unitInput === comparer1) || (unitInput === comparer2)) {\n                return i;\n            }\n        }\n        return unitInput;\n    };\n\n    /**\n     * Creates new file with header initialized to type-1000 defaults\n     * and data appended. (tbd)\n     * @param\t{string}\tfilename\tName of File to Create\n     * @param  \t{array}\t\tdata\t\tInput data buffer\n     * @param  \t{array}\t  \toverrides\tList of fields/values to be overridden in the bluefile header\n     * @return \t{header} \thcb\t\tReturn <hcb> type-1000 bluefile header, filename=null\n     */\n    m.initialize = function(data, overrides) {\n        var hcb = new bluefile.BlueHeader(null);\n\n        hcb.version = 'BLUE';\n        hcb.size = 0;\n        hcb.type = 1000;\n        hcb.format = 'SF';\n        hcb.timecode = 0.0;\n        hcb.xstart = 0.0;\n        hcb.xdelta = 1.0;\n        hcb.xunits = 0;\n        hcb.subsize = 1;\n        hcb.ystart = 0.0;\n        hcb.ydelta = 1.0;\n        hcb.yunits = 0;\n        hcb.enabled_streaming_pcut = false;\n\n        if (!overrides) { /* if no overrides provided...set it to empty*/\n            overrides = {};\n        }\n\n        for (var field in overrides) {\n            hcb[field] = overrides[field];\n        }\n\n        //Convert xunits and yunits to numbers if they are strings\n        hcb[\"xunits\"] = m.unit_lookup(hcb[\"xunits\"]);\n        hcb[\"yunits\"] = m.unit_lookup(hcb[\"yunits\"]);\n\n\n        // Force type 2000 is subsize is specified\n        if (hcb[\"subsize\"] > 1) {\n            hcb.type = 2000;\n        } else if (Array.isArray(data) && Array.isArray(data[0])) {\n            //If this is a 2-D array automatically set subsize\n            hcb.type = 2000;\n            hcb.subsize = data[0].length;\n        }\n        hcb[\"class\"] = hcb.type / 1000;\n        // If this is a type 2000 , subsize *must* be provided\n        if ((hcb[\"class\"] === 2) && (hcb[\"subsize\"] === undefined)) {\n            throw \"subsize must be provided with type 2000 files\";\n        }\n\n\n        if (!overrides.pipe) {\n            hcb.setData(data);\n        } else {\n            hcb.pipe = true;\n            hcb.in_byte = 0;\n            hcb.out_byte = 0;\n            // TODO round pipe size to nearest number of elements\n            var pipesize = overrides.pipesize || m.PIPESIZE;\n\n            hcb.buf = new ArrayBuffer(pipesize);\n            hcb.setData(hcb.buf);\n            hcb.data_free = hcb.dview.length;\n        }\n\n        return hcb;\n    };\n\n    /**\n     * Convert type-2000 header internals to force GRAB and FILAD routines to treat file as a 1000-type file.\n     * @param\t{header}\thcb\t\tBluefile header control block\n     */\n    m.force1000 = function(hcb) {\n        if (hcb[\"class\"] === 2) {\n            if ((hcb.size) && (!hcb.pipe)) {\n                hcb.size = hcb.subsize * hcb.size;\n            } else {\n                // assume the size is 0\n                hcb.size = 0;\n            }\n            hcb.bpe = hcb.bpe / hcb.subsize;\n            hcb.ape = 1;\n        }\n    };\n\n    /**\n     * Get data from file at specified start location.\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @param\t{array}\t\tbufview\t\tData buffer to receive data\n     * @param\t{number}\tstart\t\tStart location\n     * @param\t{number}\tnget\t\tNumber of requested data\n     * @return\t{number}\tngot\t\tNumber of received data\n     */\n    m.grab = function(hcb, bufview, start, nget) {\n        if (!hcb.dview) {\n            return 0;\n        }\n\n        // TODO reformat\n        if (hcb.format[0] === 'C') {\n            start = start * 2;\n        }\n\n        nget = hcb.ape * nget; // TODO - this is never used????\n\n        //var ngot = Math.min(bufview.length, (hcb.dview.length-start)); //mmm\n        var ngot = Math.min(bufview.length, (hcb.dview.length - start));\n        // iOS doesn't have .set on TypedArrays\n        if (bufview.set === undefined) {\n            for (var i = 0; i < ngot; i++) {\n                bufview[i] = hcb.dview[start + i];\n            }\n        } else {\n            bufview.set(hcb.dview.subarray(start, start + ngot));\n        }\n        if (hcb.format[0] === 'C') {\n            ngot = ngot / 2;\n        }\n        return ngot;\n    };\n\n    /**\n     * Append data buffer to file specified in the bluefile header control block.\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @param\t{array}\t\tdata\t\tData buffer\n     * @param   {boolean}       [sync=false]    dispatch onpipewrite syncronously\n     */\n    m.filad = function(hcb, data, sync) {\n        if (hcb.data_free < data.length) {\n            throw \"Pipe full\";\n        }\n        var sidx = hcb.in_byte / hcb.dview.BYTES_PER_ELEMENT;\n        var eidx = (sidx + data.length);\n        if (eidx > hcb.dview.length) {\n            var head = hcb.dview.length - sidx;\n            var tail = data.length - head;\n            if (data.subarray) {\n                hcb.dview.set(data.subarray(0, head), sidx);\n                hcb.dview.set(data.subarray(head, data.length), 0);\n            } else {\n                hcb.dview.set(data.slice(0, head), sidx);\n                hcb.dview.set(data.slice(head, data.length), 0);\n            }\n            hcb.in_byte = (tail * hcb.dview.BYTES_PER_ELEMENT);\n        } else {\n            hcb.dview.set(data, sidx);\n            hcb.in_byte = (eidx * hcb.dview.BYTES_PER_ELEMENT) % hcb.buf.byteLength;\n        }\n        hcb.data_free -= data.length;\n        if (hcb.onwritelisteners) {\n            for (var i = 0; i < hcb.onwritelisteners.length; i++) {\n                if (!sync) {\n                    window.setTimeout(hcb.onwritelisteners[i], 0);\n                } else {\n                    hcb.onwritelisteners[i]();\n                }\n            }\n        }\n    };\n\n    /**\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @return\t{number}\telements available\n     * @private\n     */\n    m.pavail = function(hcb) {\n        return hcb.dview.length - hcb.data_free;\n    };\n\n    /**\n     * Get data from file in dataflow fashion.\n     * @param\t{array}\t\thcb\tBluefile header control block\n     * @param \t{array}\t\tdview\tData buffer to receive data\n     * @param\t{number}\tnget\tInput variable name of parameter to receive data\n     * @param\t{number}\toffset\tOffset into file\n     * @return\t{number}\tngot\tNumber of data values gotten\n     */\n    // WARNING - nget is number of scalars...which differs from the normal API\n    m.grabx = function(hcb, dview, nget, offset) {\n        var navail = hcb.dview.length - hcb.data_free;\n        if (offset === undefined) {\n            offset = 0;\n        }\n        if (!nget) {\n            nget = Math.min(dview.length - offset, navail);\n        } else if (nget > dview.length - offset) {\n            throw \"m.grabx : nget larger then available buffer space\";\n        }\n        if (nget < 0) {\n            throw \"m.grabx : nget cannot be negative\";\n        }\n        if (nget > navail) {\n            return 0;\n        }\n\n        var sidx = hcb.out_byte / hcb.dview.BYTES_PER_ELEMENT;\n        var eidx = (sidx + nget);\n        if (eidx >= hcb.dview.length) {\n            var head = hcb.dview.length - sidx;\n            eidx = eidx - hcb.dview.length;\n            dview.set(hcb.dview.subarray(sidx, hcb.dview.length), offset);\n            dview.set(hcb.dview.subarray(0, eidx), offset + head);\n        } else {\n            dview.set(hcb.dview.subarray(sidx, eidx), offset);\n        }\n        hcb.out_byte = (eidx * hcb.dview.BYTES_PER_ELEMENT) % hcb.buf.byteLength;\n        hcb.data_free += nget;\n        var ngot = nget;\n        return ngot;\n    };\n\n\n    /**\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @param\t{number}\tonwrite\t\t-\n     * @private\n     */\n    m.addPipeWriteListener = function(hcb, onwrite) {\n        if (!hcb.onwritelisteners) {\n            hcb.onwritelisteners = [];\n        }\n        if (hcb.onwritelisteners.indexOf(onwrite) === -1) {\n            hcb.onwritelisteners.push(onwrite);\n        }\n    };\n\n    /**\n     * Returns ASCII description of units code\n     * @param \t{number}\tUNITS array index (see global UNITS)\n     * @return \t{string}\tASCII code pair\n     */\n    // ~= M$UNITS_NAME\n    m.units_name = function(units) {\n        var u = UNITS[units];\n        return u[0] + \" (\" + u[1] + \")\";\n    };\n\n    /**\n     * Extract filename from full path\n     * @param \t{string}\tpathfilename\tFull path, including filename\n     * @return\t{string}\tfilename\t    Trimmed filename\n     */\n    m.trim_name = function(pathfilename) {\n        var i = pathfilename.indexOf(']');\n        if (i === -1) {\n            i = pathfilename.indexOf('/');\n        }\n        if (i === -1) {\n            i = pathfilename.indexOf(':');\n        }\n        var j = pathfilename.substr(i + 1, pathfilename.length).indexOf('.');\n        if (j < 0) {\n            j = pathfilename.length - i;\n        }\n        var filename = pathfilename.substr(i + 1, i + j + 1);\n        return filename;\n    };\n\n    /**\n     * Takes an integer code for units and a multiplier and returns the string representation of the two.\n     * Example: l = m.label(1,1.0e3) ==> l =  Time (Ksec)\n     * @param \t{number}\tunits\tInteger code for Unit (see global UNITS)\n     * @param \t{number} \tmult\tUnits multiplier (i.e 1.0e3 ==> 'K')\n     * @return {string} representation of units and multiplier\n     */\n    // ~= M$LABEL\n    m.label = function(units, mult) {\n        var u = [\"Unknown\", \"U\"];\n\n        if (typeof units === \"string\") {\n            u = [units, null];\n        } else if (Array.isArray(units)) {\n            u = units;\n        } else {\n            u = UNITS[units];\n            if (u === undefined) {\n                u = [\"Unknown\", \"U\"];\n            }\n        }\n\n        var prefix = m.mult_prefix(mult);\n\n        if (u[1]) {\n            return u[0] + \" (\" + prefix + u[1] + \")\";\n        } else {\n            return u[0];\n        }\n    };\n\n    /**\n     * @method bound\n     * @param a\n     * @param b\n     * @param c\n     */\n    m.bound = function(a, b, c) {\n        return a < b ? b : (a > c ? c : a);\n    };\n\n    m.touch_distance = function(touchA, touchB) {\n        var xd = (touchA.pageX - touchB.pageX);\n        var yd = (touchA.pageY - touchB.pageY);\n        return Math.sqrt((xd * xd) + (yd * yd));\n    };\n\n    m.mult_prefix = function(mult) {\n        var prefix = \"?\";\n\n        /* jshint -W116 */\n        if (mult == 1) {\n            prefix = \"\";\n        } else if (mult == 10) {\n            prefix = 'da';\n        } else if (mult == 0.1) {\n            prefix = 'd';\n        } else if (mult == 100) {\n            prefix = 'h';\n        } else if (mult == 0.01) {\n            prefix = 'c';\n        } else if (mult == 1.0e3) {\n            prefix = 'K';\n        } else if (mult == 1.0e-3) {\n            prefix = 'm';\n        } else if (mult == 1.0e6) {\n            prefix = 'M';\n        } else if (mult == 1.0e-6) {\n            prefix = 'u';\n        } else if (mult == 1.0e9) {\n            prefix = 'G';\n        } else if (mult == 1.0e-9) {\n            prefix = 'n';\n        } else if (mult == 1.0e12) {\n            prefix = 'T';\n        } else if (mult == 1.0e-12) {\n            prefix = 'p';\n        }\n        /* jshint +W116 */\n\n        return prefix;\n    };\n\n    /**\n     * @private\n     */\n    var VECTOR = {\n        MV: 'F', // vector type\n        MS: 'F', // scalar type...not really necessary in javascript\n        nbpt: 4,\n        view: undefined\n    };\n\n\n    /**\n     * Sets data type for all subsequent calls to vector libraries.  Remains in effect until another call to this routine.\n     * @param ctype\n     */\n    // ~= VSTYPE - not really necessary\n    m.vstype = function(ctype) {\n        VECTOR.MS = ctype;\n        VECTOR.MV = ctype;\n        if (VECTOR.MV === 'D') {\n            VECTOR.nbpt = 8;\n        } else if ((VECTOR.MV === 'L') || (VECTOR.MV === 'F')) {\n            VECTOR.nbpt = 4;\n        } else if (VECTOR.MV === 'I') {\n            VECTOR.nbpt = 2;\n        } else if (VECTOR.MV === 'B') {\n            VECTOR.nbpt = 1;\n        } else {\n            alert(\"Unsupported vector type\");\n        }\n    };\n\n    m.log10 = function(v, lo_thresh) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        return Math.log(Math.max(v, lo_thresh)) / Math.log(10);\n    };\n\n    /**\n     * For each vector element in <src>, determine the max of <src> element and <lo_thresh>, returns the log(base10) of that value in <dst>\n     * @param\t{array}\t\tsrc\t\tInput vector.\n     * @param \t{number} \tlo_thresh\tUser-set minimum log threshold (if not defined, set default=1.0e-20). Prevent computing log of 0 or negative values.\n     * @param \t{array}\t\tdst\t\tOuput vector.  If undefined, <src> elements will be overwritten.\n     */\n    // ~= M$VLOG10- not really necessary\n    m.vlog10 = function(src, lo_thresh, dst) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        if (dst === undefined) {\n            dst = src;\n        }\n        for (var i = 0; i < src.length; i++) {\n            if (dst.length <= i) {\n                break;\n            }\n            dst[i] = Math.log(Math.max(src[i], lo_thresh)) / Math.log(10);\n        }\n    };\n\n    /**\n     * Same as vlog10 but multiply each output value by a scale factor <dbscale>.\n     * @param \t{array}\t\tsrc\t\tInput vector.\n     * @param \t{number}\tlo_thresh\tUser-set minimum log threshold.\n     *                                              If undefined, defaults to 1.0e-20. Prevent computing log of 0 or negative values.\n     * @param \t{number}\tdbscale\t\tOutput scale factor. If undefined, defaults to 1.\n     * @param \t{array}\t\tdst\t\tOutput vector. If undefined, <src> elements will be overwritten.\n     * @private\n     */\n    m.vlogscale = function(src, lo_thresh, dbscale, dst) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        if (dbscale === undefined) {\n            dbscale = 1;\n        }\n        if (dst === undefined) {\n            dst = src;\n        }\n        for (var i = 0; i < src.length; i++) {\n            if (dst.length <= i) {\n                break;\n            }\n            dst[i] = Math.log(Math.abs(Math.max(src[i], lo_thresh))) / Math.log(10);\n            dst[i] = dst[i] * dbscale;\n        }\n    };\n\n    /**\n     * Same as vlogscale but computes magnitude squared.\n     *\n     * @param \t{array}\t\tsrc\t\tInput vector.\n     * @param \t{number}\tlo_thresh\tUser-set minimum log threshold.\n     *                                              If undefined, defaults to 1.0e-20. Prevent computing log of 0 or negative values.\n     * @param \t{number}\tdbscale\t\tOutput scale factor. If undefined, defaults to 1.\n     * @param \t{array}\t\tdst\t\tOutput vector. If undefined, <src> elements will be overwritten.\n     * @private\n     */\n    m.cvmag2logscale = function(src, lo_thresh, dbscale, dst) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        if (dbscale === undefined) {\n            dbscale = 1;\n        }\n        if (dst === undefined) {\n            dst = src;\n        }\n        var j = 0;\n        for (var i = 0; i < dst.length; i++) {\n            j = 2 * i + 1;\n            if (j >= src.length) {\n                break;\n            }\n            dst[i] = (src[j - 1] * src[j - 1]) + (src[j] * src[j]);\n            dst[i] = Math.log(Math.abs(Math.max(dst[i], lo_thresh))) / Math.log(10);\n            dst[i] = dst[i] * dbscale;\n        }\n    };\n\n    /**\n     * Multiply <count> elements of <src> by <mul>, store results in <dst>\n     * @param\t{array} \tsrc\t\tInput vector.\n     * @param\t{number}\tmul\t\tVector multiplier.\n     * @param\t{array}\t\tdst\t\tOutput vector. If not defined, <src> elements will be overwritten.\n     * @param\t{number}\tcount\t\tNumber of elements to apply multiplier, starting with first <src> element.\n     */\n    // ~= M$VSMUL\n    m.vsmul = function(src, mul, dst, count) {\n        if (dst === undefined) {\n            dst = src;\n        }\n        if (count === undefined) {\n            count = dst.length;\n        }\n        count = Math.min(dst.length, count);\n        count = Math.min(src.length, count);\n\n        for (var i = 0; i < count; i++) {\n            if (dst.length <= i) {\n                break;\n            }\n            dst[i] = src[i] * mul;\n        }\n    };\n\n    /**\n     * Finds max and min values in vector <vec> and returns values.\n     * @param \t{array}\t\tvec\t\tInput vector.\n     * @param\t{number}\tsize\t\tNumber of elements to search to find max.min values.\n     * @return \t{array}\t\tmxmin\t\tIndex and value of min and max elements in <vec>.\n     */\n    // ~= M$VMXMN\n    m.vmxmn = function(vec, size) {\n        // Originally this code used an object to hold the values\n        // but Chrome 34.0.1847.131 seemed to have a bug where\n        // these values would somehow get messed up...oddly\n        // putting printouts or breakpoints prevented the\n        // problem from showing up.\n        var smax = vec[0];\n        var smin = vec[0];\n        var imax = 0;\n        var imin = 0;\n        size = Math.min(size, vec.length);\n        for (var i = 0; i < size; i++) {\n            if (vec[i] > smax) {\n                smax = vec[i];\n                imax = i;\n            }\n            if (vec[i] < smin) {\n                smin = vec[i];\n                imin = i;\n            }\n        }\n        return {\n            smax: smax,\n            smin: smin,\n            imax: imax,\n            imin: imin\n        };\n    };\n\n    /**\n     * Move <count> elements from <src> to <dest>.  Stride is the distance between each array element in either or both the input and output vectors.\n     * @param {array}\tsrc\t\tInput vector.\n     * @param {number}\tsstride\t\tInput stride.\n     * @param {array}\tdest\t\tOutput vector.\n     * @param {number}\tdstride\t\tOutput stride.\n     * @param {number}\tcount\t\tNumber of input vector elements to move, starting with 0th element of <vec>. Cannot exceed vector lengths,\n     *\t\t\t\t\ttaking into account the strides.\n     */\n    m.vmov = function(src, sstride, dest, dstride, count) {\n        if (count === undefined) {\n            count = src.length;\n        }\n        count = Math.min(src.length, count);\n        //count = Math.min(src.length, count, (count)*(dest.length)*(dstride)); //mmm-TODO\n\n        for (var i = 0; i < count; i++) {\n            var s = i * sstride;\n            var d = i * dstride;\n            if (s >= src.length) {\n                break;\n            }\n            if (d >= dest.length) {\n                break;\n            }\n            dest[d] = src[s];\n        }\n    };\n\n    /**\n     * Initialize <count> consecutive elements of input vector <vec> with value <inpval>.\n     * @param\t{array}\t\tvec\t\tInput vector\n     * @param\t{number}\tinpval\t\tValue\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <vec>.  If undefined, entire <vec> is written.\n     */\n    // ~= M$VFILL\n    // TODO - more optimal version?\n    m.vfill = function(vec, inpval, count) {\n        if (count === undefined) {\n            count = vec.length;\n        }\n        count = Math.min(vec.length, count);\n        for (var i = 0; i < count; i++) {\n            vec[i] = inpval;\n        }\n    };\n\n    /**\n     * Compute the absolute value of <count> elements in <vec> and write to output vector <dest>\n     * @param \t{array}\t\tvec\t\tInput vector.\n     * @param \t{array}\t\tdest\t\tOuput vector. If <dest> is undefined, overwrite input vector <vec>.\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <vec>. Cannot exceed vector lengths.\n     */\n    m.vabs = function(vec, dest, count) {\n        if (count === undefined) {\n            count = vec.length;\n        }\n        if (dest === undefined) {\n            dest = vec;\n        }\n        //count = Math.min(dest.length, count, vec.length); //mmm-TODO\n        for (var i = 0; i < count; i++) {\n            dest[i] = Math.abs(vec[i]);\n        }\n    };\n\n\n    /**\n     * Computes the magnitude of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVMAG\n    m.cvmag = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO\n\n        for (var i = 0; i < count; i++) {\n            var j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            dest[i] = Math.sqrt((cxvec[j - 1] * cxvec[j - 1]) + (cxvec[j] * cxvec[j]));\n        }\n    };\n\n    /**\n     * Computes the magnitude squared of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVMAG2\n    m.cvmag2 = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO\n\n        var j = 0;\n        for (var i = 0; i < count; i++) {\n            j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            dest[i] = (cxvec[j - 1] * cxvec[j - 1]) + (cxvec[j] * cxvec[j]);\n        }\n    };\n\n    /**\n     * Computes phase in radians of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVPHA\n    m.cvpha = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO\n\n        var j = 0;\n        var re = 0;\n        var im = 0;\n        for (var i = 0; i < count; i++) {\n            j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            re = cxvec[j - 1];\n            im = cxvec[j];\n            if ((re === 0.0) && (im === 0.0)) {\n                re = 1.0;\n            }\n            dest[i] = Math.atan2(im, re);\n        }\n    };\n\n    /**\n     * Computes the phase in degrees of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVPHAD\n    m.cvphad = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n\n        var j = 0;\n        var re = 0;\n        var im = 0;\n        for (var i = 0; i < count; i++) {\n            j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            re = cxvec[j - 1];\n            im = cxvec[j];\n            if ((re === 0.0) && (im === 0.0)) {\n                re = 1.0;\n            }\n            dest[i] = Math.atan2(im, re) * (180.0 / Math.PI);\n        }\n    };\n\n    /**\n     * @param n\n     * @private\n     */\n    // ~= INT(), DINT\n    m.trunc = function(n) {\n        return n - n % 1;\n    };\n\n    /**\n     * @param a1\n     * @param a2\n     * @private\n     */\n    // Transfer of sign function from Fortran\n    m.sign = function(a1, a2) {\n        if (a2 >= 0) {\n            return Math.abs(a1);\n        } else {\n            return -Math.abs(a1);\n        }\n    };\n\n    /**\n     * @method pad2\n     * @param number\n     * @private\n     */\n\n    function pad2(number) {\n        return (number < 10 ? '0' : '') + number;\n    }\n\n    /**\n     * Convert J1950 time or seconds-since-Epoch (midnight Dec-31-1949) to time-of-day. Fractional seconds accurate to milliseconds.\n     * @param \t{number}\tsec\t\tNumber of seconds.\n     * @return\t{string}\ttod\t\tTime of day\n     */\n\n    /* Output string can be in different forms as follows:\n     * -31536000 <  sec < 0                   -DDD::HH:MM:SS\n     *         0 <= sec < 86400                     HH:MM:SS\n     *         86400 <= sec < 31536000         DDD::HH:MM:SS\n     *         31536000 <=sec            YYYY:MM:DD:HH:MM:SS.<FFFFFF>\n     *                                    where FFFFFF is in microseconds\n     *\n     */\n\n    m.sec2tod = function(sec, trim_trailing_zeros) {\n        var tod = \"\";\n        var j1950 = Date.UTC(1950, 0, 1); //From 1950 to 1970\n        var j1950Date = new Date(j1950); //debug var\n        var j1949 = Date.UTC(1949, 11, 31);\n        var j1949Date = new Date(j1949); //debug var\n        var d = new Date();\n        var midnightToday = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0, 0);\n        var diffDaySecs = 86400; //    86400 secs = 24*60*60\n        var diffYearSecs = 31536000; // 31536000 secs = 365*24*60*60\n        var negDiffYearSecs = -1 * diffYearSecs; //-31536000 secs\n\n        if (sec >= 0) {\n            if (sec < diffDaySecs) {\n                // hh:mm:ss\n                var millisecs = midnightToday.getTime() + (sec * 1000);\n                var d = new Date(millisecs);\n                tod = pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n            } else if (sec === 86400) {\n                tod = \"24:00:00\";\n            } else if (sec < diffYearSecs) {\n                // ddd:hh:mm:ss\n                var days = sec / diffDaySecs;\n                days = [days > 0 ? Math.floor(days) : Math.ceil(days)];\n                var d = new Date((sec * 1000) + midnightToday.getTime());\n                tod = days.toString() + \"::\" + pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n            } else {\n                // convert to j1950\n                var secMilli = Math.floor(sec * 1000) + j1950;\n                d = new Date(secMilli);\n                tod = d.getUTCFullYear() + \":\" + pad2(d.getUTCMonth() + 1) + \":\" + pad2(d.getUTCDate()) + \"::\" +\n                    pad2(d.getUTCHours()) + \":\" + pad2(d.getUTCMinutes()) + \":\" + pad2(d.getUTCSeconds());\n            }\n        } else {\n            if (sec > negDiffYearSecs) {\n                // -ddd:hh:mm:ss\n                var days = sec / diffDaySecs;\n                days = (days <= 0) ? Math.ceil(days) : Math.floor(days);\n                var d = new Date(Math.abs(sec * 1000) + midnightToday.getTime());\n                if (days === 0) {\n                    days = \"-0\";\n                } else {\n                    days = days.toString();\n                }\n                tod = days + \"::\" + pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n            } else {\n                // convert to j1950\n                var secMilli = Math.floor(sec * 1000) + j1950;\n                d = new Date(secMilli);\n                tod = d.getUTCFullYear() + \":\" + pad2(d.getUTCMonth() + 1) + \":\" + pad2(d.getUTCDate()) + \"::\" +\n                    pad2(d.getUTCHours()) + \":\" + pad2(d.getUTCMinutes()) + \":\" + pad2(d.getUTCSeconds());\n            }\n        }\n\n        // violate legacy behavior, include full precision always\n        // even if we are on a full second boundary, otherwise\n        // on rising/falling rasters it can look like the display\n        // is flickering\n        var fractional = (sec % 1);\n        if (fractional === 0.0) {\n            tod += \".000000\";\n        } else {\n            tod += \".\" + Math.abs(sec % 1).toPrecision(6).slice(2, 8);\n        }\n\n        if (trim_trailing_zeros) {\n            var dloc = tod.indexOf(\".\");\n            var zloc = -1;\n            // If there is a 'decimal point'\n            if (dloc !== -1) {\n                zloc = tod.substr(dloc, tod.length).indexOf(\"0\");\n            }\n            if (zloc !== -1) {\n                tod = tod.substr(0, dloc + zloc);\n            }\n        }\n        return tod;\n\n    };\n\n    /**\n     * The offset to convert midnight Jan 1st 1970 to\n     * midnight Jan 1st 1950.\n     *\n     * @private\n     */\n    var j1950offset = (20.0 * 365.0 + 5.0) * (24 * 3600);\n\n    /**\n     * 0.0 - 86400 == m.sec2tod\n     * >86400 then modulo 86400\n     *   if modulo <= 0 return m.sec2tod(modulo)+86400\n     *   if module <\n     */\n    m.sec2tspec = function(sec, mode, trim_trailing_zeros) {\n        mode = mode || \"\";\n        if (sec >= 0 && sec <= 86400) {\n            return m.sec2tod(sec, trim_trailing_zeros);\n        } else {\n            sec = sec % 86400;\n            if (mode !== \"delta\" && sec <= 0) {\n                return m.sec2tod(sec + 86400, trim_trailing_zeros);\n            } else if (mode === \"delta\" && sec <= 0) {\n                return \"-\" + m.sec2tod(-1 * sec, trim_trailing_zeros);\n            } else {\n                return m.sec2tod(sec, trim_trailing_zeros);\n            }\n        }\n    };\n\n    /**\n     * @param \t{number}\tsec\t\tNumber of seconds.\n     * @return\t{string}\ttod\t\tTime of day\n     */\n\n    m.sec2tod_j1970 = function(sec) {\n        var tod = \"\";\n        var d;\n        if ((sec >= 0) && (sec < 86400)) {\n            // hh:mm:ss\n            d = new Date(sec * 1000);\n            tod = pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n\n        } else if ((sec < 0) && (sec > -31536000)) {\n            // -ddd:hh:mm:ss\n            var days = -1 * (sec / (24 * 60 * 60));\n            d = new Date(sec * 1000);\n            tod = days.toString() + \"::\" + pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n        } else {\n            // convert to j1950\n            d = new Date((sec - j1950offset) * 1000);\n            tod = d.getFullYear() + \":\" + pad2(d.getMonth()) + \":\" + pad2(d.getDate()) + \"::\" +\n                pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n        }\n        if ((sec % 1) !== 0) {\n            tod += \".\" + (sec % 1).toPrecision(6).slice(2, 8);\n        }\n        return tod;\n    };\n\n    m.j1970toj1950 = function(t) {\n        if (t.getTime !== undefined) {\n            return ((t.getTime() / 1000) + j1950offset);\n        } else {\n            return (t + j1950offset);\n        }\n    };\n\n    m.j1950toj1970 = function(t) {\n        return (t - j1950offset);\n    };\n\n    /**\n     * @private\n     */\n    // Throttle calls to \"callback\" routine and ensure that it\n    // is not invoked any more often than \"delay\" milliseconds.\n    //\n    m.throttle = function(delay, callback) {\n        var previousCall = new Date().getTime();\n        return function() {\n            var time = new Date().getTime();\n\n            //\n            // if \"delay\" milliseconds have expired since\n            // the previous call then propagate this call to\n            // \"callback\"\n            //\n            if ((time - previousCall) >= delay) {\n                previousCall = time;\n                callback.apply(null, arguments);\n            }\n        };\n    };\n\n    // Node: Export function\n    module.exports = m;\n\n}());\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Plot } from 'sigplot';\n\nexport default class SigPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getChildContext() {\n    return {\n      plot: this.plot,\n    };\n  }\n\n  componentDidMount() {\n    const { options } = this.props;\n    this.plot = new Plot(this.element, options);\n\n    // Have to trigger context tree, setting state does that.\n    // eslint-disable-next-line react/no-did-mount-set-state\n    // eslint-disable-next-line react/no-unused-state\n    this.setState({ plot: this.plot });\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      children: propChildren,\n    } = this.props;\n    const { plot } = this;\n    const children = plot\n      ? React.Children.map(propChildren, (child) => {\n        if (child) {\n          return React.cloneElement(child, { plot });\n        }\n        return null;\n      }) : null;\n\n    return (\n      <div\n        style={{ height, width, display: 'inline-block' }}\n        ref={element => this.element = element}\n      >\n        { children }\n      </div>);\n  }\n}\n\nSigPlot.childContextTypes = {\n  plot: PropTypes.instanceOf(Plot)\n};\n\nSigPlot.propTypes = {\n  children: PropTypes.node,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  options: PropTypes.object,\n};\n\nSigPlot.defaultProps = {\n  height: 300,\n  width: 300,\n  options: {\n    all: true,\n    expand: true,\n    autol: 100,\n    autohide_panbars: true\n  },\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Plot } from 'sigplot';\n\n/**\n * Abstract base class for all Layers\n */\nexport default class Layer extends Component {\n  componentWillUnmount() {\n    this.plot.remove_layer(this.layer);\n  }\n\n  get plot() {\n    const { plot } = this.context;\n    return plot;\n  }\n\n  render() {\n    return false;\n  }\n}\n\nLayer.contextTypes = {\n  plot: PropTypes.instanceOf(Plot)\n};\n\nLayer.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.number), // eslint-disable-line react/no-unused-prop-types\n  options: PropTypes.object // eslint-disable-line react/no-unused-prop-types\n};\n","import React from 'react';\nimport Layer from './layer';\n\nexport default class ArrayLayer extends Layer {\n  componentDidMount() {\n    this.layer = this.plot.overlay_array(this.props.data, this.props.options);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this.plot.reload(this.layer, nextProps.data);\n    }\n  }\n}\n","import React from 'react';\nimport Layer from './layer';\n\nexport default class PipeLayer extends Layer {\n  componentDidMount() {\n    this.layer = this.plot.overlay_pipe(this.props.options);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data && nextProps.data !== this.props.data) {\n      this.plot.push(this.layer, nextProps.data);\n    }\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Layer from './layer';\n\nexport default class HrefLayer extends Layer {\n  componentDidMount() {\n    const { href, onload, options } = this.props;\n    this.layer = this.plot.overlay_href(href, onload, options);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this.plot.reload(this.layer, nextProps.data);\n    }\n  }\n}\n\nHrefLayer.propTypes = {\n  href: PropTypes.string,\n  onload: PropTypes.func,\n  options: PropTypes.object,\n};\n\nHrefLayer.defaultProps = {\n  href: '',\n  onload: null,\n};\n","export { default as SigPlot } from './sigplot';\nexport { default as ArrayLayer } from './arraylayer';\nexport { default as PipeLayer } from './pipelayer';\nexport { default as HrefLayer } from './hreflayer';\n","/**\n * @license\n * File: common.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n\n/* global module */\n/* global require */\n\n(function() {\n\nmodule.exports = {};\n\nif (window.ArrayBuffer) {\n    if (!ArrayBuffer.prototype.slice) {\n        //Monkey Patching for iOS and early Firefox\n        ArrayBuffer.prototype.slice = function(start, end) {\n            var that = new Uint8Array(this);\n            if (end === undefined) {\n                end = that.length;\n            }\n            var result = new ArrayBuffer(end - start);\n            var resultArray = new Uint8Array(result);\n            for (var i = 0; i < resultArray.length; i++) {\n                resultArray[i] = that[i + start];\n            }\n            return result;\n        };\n    }\n}\n\n// Shim for requestAnimationFrame compatibility\nwindow.requestAnimFrame = (function(callback) {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n        function(callback) {\n            return window.setTimeout(callback, 1000 / 60);\n    };\n})();\n\nwindow.cancelAnimFrame = (function(callback) {\n    return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCanelAnimationFrame ||\n        function(timeoutID) {\n            window.clearTimeout(timeoutID);\n    };\n})();\n\n// Handle various ways to draw dashed lines\nmodule.exports.dashOn = function(ctx, on, off) {\n    if (ctx.setLineDash) {\n        ctx.setLineDash([on, off]);\n        return true;\n    } else if (ctx.mozDash !== undefined) { // Gecko 7.0+\n        ctx.mozDash = [on, off];\n        return true;\n    } else if (ctx.webkitLineDash && ctx.webkitLineDash.length === 0) {\n        ctx.webkitLineDash = [on, off];\n        return true;\n    }\n    return false;\n};\n\nmodule.exports.dashOff = function(ctx) {\n    if (ctx.setLineDash) {\n        ctx.setLineDash([]);\n    } else if (ctx.mozDash) { // Gecko 7.0+\n        ctx.mozDash = null;\n    } else if (ctx.webkitLineDash) {\n        ctx.webkitLineDash = [];\n    }\n};\n\n// Firefox behaves differntly for keypress events\nmodule.exports.getKeyCode = function(e) {\n    e = window.event || e;\n    e = e.charCode || e.keyCode;\n    return e;\n};\n\nmodule.exports.setKeypressHandler = function(handler) {\n    if (window.addEventListener) { window.addEventListener('keypress', handler, false); }\n    else if (window.attachEvent) {\n        window.attachEvent('onkeypress', handler);\n    }\n};\n\n// Array.isArray\n// FF 4+\n// IE 9+\n// SF 5+\n// http://kangax.github.io/es5-compat-table/#Array.isArray\nif (!Array.isArray) {\n    Array.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n}\n\nif (!window.Float64Array) {\n    //Monkey Patching for iOS\n    // This is essentially ReadOnly because\n    // if someone does x[i] = 5\n    // the value will be set in the array\n    // but not in the underlying buffer\n    window.Float64Array = (function() {\n        return window.Float64Array ||\n            function(buffer, byteOffset, length) {\n                if (!(buffer instanceof ArrayBuffer)) {\n                    throw \"Invalid type\";\n                }\n                var dv = new DataView(buffer);\n                var b = [];\n                var maxlength = (buffer.byteLength - byteOffset) / 8;\n                if (length === undefined) {\n                    b.length = maxlength;\n                } else {\n                    b.length = Math.min(length, maxlength);\n                }\n\n                for (var i = 0; i < b.length; i++) {\n                    b[i] = dv.getFloat64(i * 8 + byteOffset, true);\n                }\n                b.subarray = function(begin, end) {\n                    return b.slice(begin, end);\n                };\n                return b;\n        };\n    })();\n}\n\n// Shims\n(function() {\n    /* console shim*/\n    var f = function() {};\n    if (!window.console) {\n        window.console = {\n            log: f,\n            info: f,\n            warn: f,\n            debug: f,\n            error: f\n        };\n    }\n\n    // Firefox 4 has a glaring subarray bug\n    // http://ryanberdeen.com/2011/04/16/firefox-subarray-bug.html\n    if (new Int8Array([0, 1, 0]).subarray(1).subarray(1)[0]) {\n        var subarray = function(begin, end) {\n            if (arguments.length === 0) {\n                begin = 0;\n                end = this.length;\n            } else {\n                if (begin < 0) {\n                    // relative to end\n                    begin += this.length;\n                }\n                // clamp to 0, length\n                begin = Math.max(0, Math.min(this.length, begin));\n                if (arguments.length === 1) {\n                    // slice to end\n                    end = this.length;\n                } else {\n                    if (end < 0) {\n                        // relative to end\n                        end += this.length;\n                    }\n                    // clamp to begin, length\n                    end = Math.max(begin, Math.min(this.length, end));\n                }\n            }\n\n            var byteOffset = this.byteOffset + begin * this.BYTES_PER_ELEMENT;\n            return new this.constructor(this.buffer, byteOffset, end - begin);\n        };\n\n        var typedArrays = [Int8Array, Uint8Array, Int16Array, Uint16Array,\n            Int32Array, Uint32Array, Float32Array, Float64Array\n        ];\n        typedArrays.forEach(function(cls) {\n            cls.prototype.subarray = subarray;\n        });\n    }\n\n}());\n\n// https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel?redirectlocale=en-US&redirectslug=DOM%2FMozilla_event_reference%2Fwheel#Listening_to_this_event_across_browser\n// creates a global \"addWheelListener\" method\n// example: addWheelListener( elem, function( e ) { console.log( e.deltaY ); e.preventDefault(); } );\n(function(window, document) {\n\n    var prefix = \"\",\n        _addEventListener, onwheel, support;\n\n    // detect event model\n    if (window.addEventListener) {\n        _addEventListener = \"addEventListener\";\n    } else {\n        _addEventListener = \"attachEvent\";\n        prefix = \"on\";\n    }\n\n    // detect available wheel event\n    support = \"onwheel\" in document.createElement(\"div\") ? \"wheel\" : // Modern browsers support \"wheel\"\n    document.onmousewheel !== undefined ? \"mousewheel\" : // Webkit and IE support at least \"mousewheel\"\n    \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\n\n    window.addWheelListener = function(elem, callback, useCapture) {\n        _addWheelListener(elem, support, callback, useCapture);\n\n        // handle MozMousePixelScroll in older Firefox\n        if (support === \"DOMMouseScroll\") {\n            _addWheelListener(elem, \"MozMousePixelScroll\", callback, useCapture);\n        }\n    };\n\n    /* jshint -W030 */\n    function _addWheelListener(elem, eventName, callback, useCapture) {\n        elem[_addEventListener](prefix + eventName, support === \"wheel\" ? callback : function(originalEvent) {\n            !originalEvent && (originalEvent = window.event);\n\n            // create a normalized event object\n            var event = {\n                // keep a ref to the original event object\n                originalEvent: originalEvent,\n                target: originalEvent.target || originalEvent.srcElement,\n                type: \"wheel\",\n                deltaMode: originalEvent.type === \"MozMousePixelScroll\" ? 0 : 1,\n                deltaX: 0,\n                delatZ: 0,\n                preventDefault: function() {\n                    originalEvent.preventDefault ?\n                        originalEvent.preventDefault() :\n                        originalEvent.returnValue = false;\n                }\n            };\n\n            // calculate deltaY (and deltaX) according to the event\n            if (support === \"mousewheel\") {\n                event.deltaY = -1 / 40 * originalEvent.wheelDelta;\n                // Webkit also support wheelDeltaX\n                originalEvent.wheelDeltaX && (event.deltaX = -1 / 40 * originalEvent.wheelDeltaX);\n            } else {\n                event.deltaY = originalEvent.detail;\n            }\n\n            // it's time to fire the callback\n            return callback(event);\n\n        }, useCapture || false);\n    }\n    /* jshint +W030 */\n\n})(window, document);\n\n//Updates destenation object with source values\nmodule.exports.update = function update(dst, src) {\n    for (var prop in src) {\n        var val = src[prop];\n        if (typeof val === \"object\") { // recursive\n            update(dst[prop], val);\n        } else {\n            dst[prop] = val;\n        }\n    }\n    return dst; // return dst to allow method chaining\n};\n\n}());\n","/**\n * @license\n * File: mx.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jslint nomen: true, browser: true, devel: true*/\n\n//Uses Immediately-invoked Function Expressions (IIFE)s for namespaces\n//See http://addyosmani.com/blog/essential-js-namespacing/ for details.\n\n/**\n * This namespace includes generic graphical routines and functions\n * the manipulate a canvas.\n *\n * @namespace\n */\n\n/* global module */\n/* global require */\n/* global requestAnimFrame */\n/* global cancelAnimFrame */\n\n(function() {\n\n    var tinycolor = require(\"tinycolor2\");\n    var ColorMap = require(\"./ColorMap\");\n    var common = require(\"./common\");\n    var CanvasInput = require(\"./CanvasInput\");\n    var m = require(\"./m\");\n\n    function mx() {}\n\n\n    mx.XW_INIT = -3;\n    mx.XW_DRAW = 1;\n    mx.XW_EVENT = 2;\n    mx.XW_UPDATE = 3;\n    mx.XW_COMMAND = 5;\n    mx.SB_EXPAND = 1;\n    mx.SB_SHRINK = 2;\n    mx.SB_FULL = 3;\n    mx.SB_STEPINC = 4;\n    mx.SB_STEPDEC = 5;\n    mx.SB_PAGEINC = 6;\n    mx.SB_PAGEDEC = 7;\n    mx.SB_DRAG = 8;\n    mx.SB_WHEELUP = 9;\n    mx.SB_WHEELDOWN = 10;\n\n    // Grayscale colors:\n    // \"15%,15%,10%\" - very dark gray\n    // \"25%,25%,20%\" - dark gray\n    // \"35%,35%,30%\" - medium gray\n    // \"40%,40%,35%\" - light medium gray\n    // \"60%,60%,55%\" - light gray\n    // \"70%,70%,65%\" - very light gray\n    // \"80%,80%,75%\" - very very light gray\n\n    mx.L_ArrowLeft = 1001;\n    mx.L_ArrowRight = 1002;\n    mx.L_ArrowUp = 1003;\n    mx.L_ArrowDown = 1004;\n    mx.L_dashed = 801;\n    mx.GBorder = 3; // TODO Is this a good original value to use...?\n    mx.L_RModeOff = 900;\n    mx.L_RModeOn = 901;\n    mx.L_PixelSymbol = 1;\n    mx.L_CircleSymbol = 2;\n    mx.L_SquareSymbol = 3;\n    mx.L_PlusSymbol = 4;\n    mx.L_XSymbol = 5;\n    mx.L_TriangleSymbol = 6;\n    mx.L_ITriangleSymbol = 7;\n    mx.L_HLineSymbol = 8;\n    mx.L_VLineSymbol = 9;\n\n    /**\n     * Set to True for a retro look that would make hipsters proud\n     */\n    mx.LEGACY_RENDER = false;\n\n    /**\n     * The zoom stack structure object\n     * @private\n     */\n    mx.STKSTRUCT = function() {\n        this.xmin = 0.0; // real world val at x1(origin=1,4) or x2(origin=2,4)\n        this.xmax = 0.0; // real world val at x2(origin=1,4) or x1(origin=2,4)\n        this.ymin = 0.0; // real world val at y2(origin=1,2) or y1(origin=3,4)\n        this.ymax = 0.0; // real world val at y1(origin=1,2) or y2(origin=3,4)\n        this.xscl = 0.0; // ratio of X real world units to pixel units\n        this.yscl = 0.0; // ratio of Y real world units to pixel units\n        this.x1 = 0; // left edge relative to window (pixels)\n        this.y1 = 0; // top edge relative to window (pixels)\n        this.x2 = 0; // right edge relative to window (pixels)\n        this.y2 = 0; // bottom edge relative to window (pixels)\n    };\n\n    /**\n     * The scrollbar structure object used to hold state about scrolling\n     * @private\n     */\n    mx.SCROLLBAR = function() {\n        this.flag = null; // int_4 // flag field for MX$SCROLLBAR routine\n        this.action = null; // int_4 // returned action performed (XW_EVENT)\n        this.smin = null;\n        this.srange = null; // real_8 // real_8 // min and range values of scroll\n        // bar\n        this.tmin = null;\n        this.trange = null; // real_8 // real_8 // min and range values of trough\n        this.step = null; // real_8 // ratios of smin to move for step\n        this.page = null; // real_8 // ratios of smin to move for page\n        this.scale = null; // real_8 // ratio to scale by for expand/shrink\n        this.dragoutline = null; // bool_4 // FALSE = smooth scroll, TRUE = drag &\n        // drop\n        this.initial_pause = null; // real_4\n        this.repeat_pause = null; // real_4\n\n        this.x = null;\n        this.y = null;\n        this.w = null;\n        this.h = null; // int_2 // These fields are private and are to be\n        this.s1 = null;\n        this.sw = null;\n        this.swmin = null;\n        this.soff = null; // int_2 // set through other interfaces\n        this.a1 = null;\n        this.a2 = null;\n        this.arrow = null; // int_2\n        this.mxevent = null; // bool_1\n        this.origin = null; // int_1\n        this.repeat_count = null; // int_4\n    };\n\n    /**\n     * @method WARPBOX\n     * @private\n     */\n    function WARPBOX() {\n        this.xo = 0;\n        this.yo = 0;\n        this.xl = 0;\n        this.yl = 0;\n        this.xmin = 0;\n        this.xmax = 0;\n        this.ymin = 0;\n        this.ymax = 0;\n        this.func = undefined;\n        this.mode = undefined;\n    }\n\n    /**\n     * Defines 2 canvas layers, canvas and wid_canvas\n     * @method MX\n     * @param element\n     * @private\n     */\n    function MX(element) { // this is where the canvases are setup/defined\n        this.root = element;\n\n        // Create a div to hold all the various canvas layers\n        this.parent = document.createElement('div');\n        this.parent.style.position = \"relative\";\n        //this.parent.style.height = \"100%\"; //element.clientHeight;\n        //this.parent.style.width = \"100%\"; //element.clientHeight;\n        //this.parent.clientWidth = element.clientWidth;\n        this.parent.width = element.clientWidth;\n        this.parent.height = element.clientHeight;\n        element.appendChild(this.parent);\n\n        // Create the canvas that will hold the plot\n        this.canvas = document.createElement('canvas');\n        this.canvas.style.position = \"absolute\";\n        this.canvas.style.top = \"0px\";\n        this.canvas.style.left = \"0px\";\n        this.canvas.width = element.clientWidth;\n        this.canvas.height = element.clientHeight;\n\n        this.parent.appendChild(this.canvas);\n        this.active_canvas = this.canvas;\n\n        // This canvas holds all widgets and reacts to mouse events\n        this.wid_canvas = document.createElement('canvas');\n        this.wid_canvas.style.position = \"absolute\";\n        this.wid_canvas.style.top = \"0px\";\n        this.wid_canvas.style.left = \"0px\";\n        this.wid_canvas.style.zIndex = 1;\n        this.wid_canvas.width = element.clientWidth;\n        this.wid_canvas.height = element.clientHeight;\n\n        this.parent.appendChild(this.wid_canvas);\n\n        //if ((this.canvas.height <= 0) || (this.canvas.width <= 0)) {\n        //\tthrow \"Plot could not be instantiated correctly; did you specify a size for your placeholder?\";\n        //}\n\n        this.font = undefined; // the full calculated font string\n        this.font_family = \"Courier New, monospace\"; // default font family\n        this.font_width = 8;\n        this.font_scaled = false;\n        this.text_w = 0; // text width\n        this.text_h = 0; // text height\n        this.level = 0; // current zoom level\n        this.width = this.parent.width; // width of window\n        this.height = this.parent.height; // height of window\n        this.xpos = 0; // x-pixel loc of mouse during event\n        this.ypos = 0; // y-pixel loc of mouse during event\n        this.xmrk = 0.0; // absc coord of mark\n        this.ymrk = 0.0;\n        this.origin = 1;\n        this.stk = [new mx.STKSTRUCT()]; // zoom stack\n\n        mx.setbgfg(this, \"black\", \"white\");\n\n        // Custom stuff for the Javascript implementation\n        this.event_cb = undefined;\n        this.warpbox = undefined;\n\n        // draw_mode flags;\n        this.rmode = false;\n        this.linewidth = 1;\n        this.style = undefined;\n        this.xi = false;\n\n        // Button Eventing variables\n        this.button_release = 0;\n        this.button_press = 0;\n        this.state_mask = 0;\n\n        // Specifies display field\n        this.l = 0;\n        this.r = this.width;\n        this.t = 0;\n        this.b = this.height;\n\n        // Scrollbar state\n        this.scrollbar_x = new mx.SCROLLBAR();\n        this.scrollbar_y = new mx.SCROLLBAR();\n\n        // Prompt mode state variable\n        this.prompt = undefined;\n\n        // Colormap\n        this.pixel = [];\n\n        // Render Canvas\n        this._renderCanvas = document.createElement(\"canvas\");\n    }\n\n    /* This is used as a helper function for defining highlight ranges/\n     */\n\n    function in_fill_range(ele, range_begin, range_end) {\n        var left = false;\n        var right = false;\n\n        if (ele >= range_begin) {\n            left = true;\n        }\n\n\n        if (ele <= range_end) {\n            right = true;\n        }\n\n        if (left === true && right === true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Create Canvas and it's Mx structure and functions\n     * @param {element}\telement \tReference to a DOM window element\n     */\n    /* Step #5*/\n    mx.open = function(element) {\n        var Mx = new MX(element); /* Step #6*/\n\n        Mx.wid_canvas.oncontextmenu = function(event) {\n            event.preventDefault();\n            return false;\n        };\n\n        this._ctx = Mx.active_canvas.getContext(\"2d\");\n\n        Mx.onmousemove = (function(Mx) {\n            return function(e) {\n                var rect = e.target.getBoundingClientRect();\n                // Screen x/y of mouse\n                Mx.x = e.x || e.clientX;\n                Mx.y = e.y || e.clientY;\n                // Plot relative x/y of mouse\n                Mx.xpos = (e.offsetX === undefined) ? (e.pageX - rect.left - window.scrollX) : e.offsetX;\n                Mx.ypos = (e.offsetX === undefined) ? (e.pageY - rect.top - window.scrollY) : e.offsetY;\n\n                //\t\t\t\tMx.xpos = (e.offsetX === undefined) ? e.layerX : e.offsetX;\n                //\t\t\t\tMx.ypos = (e.offsetY === undefined) ? e.layerY : e.offsetY;\n\n                if (Mx.warpbox) {\n                    if ((e.ctrlKey || e.metaKey) && (Mx.warpbox.alt_style !== undefined)) {\n                        Mx.warpbox.style = Mx.warpbox.alt_style;\n                    } else {\n                        Mx.warpbox.style = Mx.warpbox.def_style;\n                    }\n                    mx.redraw_warpbox(Mx);\n                }\n\n                mx.widget_callback(Mx, e);\n            };\n        })(Mx);\n\n        Mx.onmouseup = (function(Mx) {\n            return function(event) {\n                if (Mx.warpbox) {\n                    mx.onWidgetLayer(Mx, function() {\n                        mx.erase_window(Mx);\n                    });\n\n                    var old_warpbox = Mx.warpbox;\n                    Mx.warpbox = undefined;\n\n                    if (event.which === 1 || event.which === 3) {\n                        if (old_warpbox.func) {\n                            var xo = old_warpbox.xo;\n                            var yo = old_warpbox.yo;\n                            var xl = old_warpbox.xl;\n                            var yl = old_warpbox.yl;\n\n                            if (old_warpbox.mode === \"vertical\") {\n                                xo = Mx.l;\n                                xl = Mx.r;\n                            } else if (old_warpbox.mode === \"horizontal\") {\n                                yo = Mx.t;\n                                yl = Mx.b;\n                            } // else \"box\"\n                            old_warpbox.func(event, xo, yo, xl, yl,\n                                old_warpbox.style.return_value,\n                                old_warpbox.mode);\n                        }\n                    }\n\n                }\n                mx.widget_callback(Mx, event);\n            };\n        })(Mx);\n\n        Mx.onmousedown = (function(Mx) {\n            return function(event) {\n                event.preventDefault();\n                mx.widget_callback(Mx, event);\n                return false;\n            };\n        })(Mx);\n\n        Mx.onkeydown = (function(Mx) {\n            return function(event) {\n                if (Mx.warpbox) {\n                    var keyCode = common.getKeyCode(event);\n                    if (((keyCode === 17) || // Ctrl\n                            (keyCode === 224) || // Mac Command Firefox\n                            (keyCode === 91) || // Safari/Chrome Left-command\n                            (keyCode === 93)) && // Safari/Chrome Right-command\n                        (Mx.warpbox.style !== Mx.warpbox.alt_style)) {\n                        Mx.warpbox.style = Mx.warpbox.alt_style;\n                        mx.redraw_warpbox(Mx);\n                    }\n                }\n\n                mx.widget_callback(Mx, event);\n            };\n        })(Mx);\n\n        Mx.onkeyup = (function(Mx) {\n            return function(event) {\n                if (Mx.warpbox) {\n                    var keyCode = common.getKeyCode(event);\n                    if (((keyCode === 17) || // Ctrl\n                            (keyCode === 224) || // Mac Command Firefox\n                            (keyCode === 91) || // Safari/Chrome Left-command\n                            (keyCode === 93)) && // Safari/Chrome Right-command\n                        (Mx.warpbox.style !== Mx.warpbox.def_style)) {\n                        Mx.warpbox.style = Mx.warpbox.def_style;\n                        mx.redraw_warpbox(Mx);\n                    }\n                }\n            };\n        })(Mx);\n\n        Mx.ontouchend = (function(Mx) {\n            return function(event) {\n                Mx.onmouseup({\n                    which: 1\n                });\n            };\n        })(Mx);\n\n        Mx.ontouchmove = (function(Mx) {\n            return function(event) {\n                // Compute the total offset - consider caching offset and only calculating on resize\n                var element = Mx.canvas;\n                var offsetX = 0;\n                var offsetY = 0;\n                if (element.offsetParent !== undefined) {\n                    do {\n                        offsetX += element.offsetLeft;\n                        offsetY += element.offsetTop;\n                    } while ((element = element.offsetParent));\n                }\n\n                Mx.xpos = event.targetTouches[0].pageX - offsetX;\n                Mx.ypos = event.targetTouches[0].pageY - offsetY;\n                mx.redraw_warpbox(Mx);\n            };\n        })(Mx);\n\n        mx.enableListeners(Mx);\n\n        return Mx;\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.enableListeners = function(Mx) {\n        mx.addEventListener(Mx, \"mousemove\", Mx.onmousemove, false);\n        window.addEventListener(\"mouseup\", Mx.onmouseup, false);\n        mx.addEventListener(Mx, \"mousedown\", Mx.onmousedown, false);\n        window.addEventListener(\"keydown\", Mx.onkeydown, false);\n        window.addEventListener(\"keyup\", Mx.onkeyup, false);\n        //mx.addEventListener(Mx, \"touchend\", Mx.ontouchend);\n        //mx.addEventListener(Mx, 'touchmove', Mx.ontouchmove, false);\n\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.disableListeners = function(Mx) {\n        mx.removeEventListener(Mx, \"mousemove\", Mx.onmousemove, false);\n        window.removeEventListener(\"mouseup\", Mx.onmouseup, false);\n        mx.removeEventListener(Mx, \"mousedown\", Mx.onmousedown, false);\n        window.removeEventListener(\"keydown\", Mx.onkeydown, false);\n        window.removeEventListener(\"keyup\", Mx.onkeyup, false);\n        //mx.addEventListener(Mx, \"touchend\", Mx.ontouchend);\n        //mx.addEventListener(Mx, 'touchmove', Mx.ontouchmove, false);\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @param callback\n     * @param useCapture\n     * @private\n     */\n    mx.addEventListener = function(Mx, event, callback, useCapture) {\n        return Mx.wid_canvas.addEventListener(event, callback, useCapture);\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @param callback\n     * @param useCapture\n     * @private\n     */\n    mx.removeEventListener = function(Mx, event, callback, useCapture) {\n        return Mx.wid_canvas.removeEventListener(event, callback, useCapture);\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @private\n     */\n    mx.dispatchEvent = function(Mx, event) {\n        return Mx.wid_canvas.dispatchEvent(event);\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.onWidgetLayer = function(Mx, func) {\n        mx.onCanvas(Mx, Mx.wid_canvas, func);\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.onCanvas = function(Mx, canvas, func) {\n        var current_active = Mx.active_canvas;\n        Mx.active_canvas = canvas;\n        try {\n            if (func) {\n                return func();\n            }\n        } finally {\n            Mx.active_canvas = current_active;\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.withWidgetLayer = function(Mx, func) {\n        var f = function() {\n            mx.onWidgetLayer(Mx, func);\n        };\n        return f;\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.render = function(Mx, func) {\n        if (!func) {\n            return;\n        }\n\n        var active_canvas = Mx.active_canvas;\n\n        if (!active_canvas._animationFrameHandle) {\n            active_canvas._animationFrameHandle = requestAnimFrame(function() {\n                active_canvas._animationFrameHandle = undefined;\n                func();\n            });\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param value\n     * @private\n     */\n    mx.fullscreen = function(Mx, value) {\n        if (value === undefined) {\n            value = !Mx.fullscreen;\n        }\n        if (value) {\n            Mx.fullscreen = {\n                position: Mx.root.style.position,\n                height: Mx.root.style.height,\n                width: Mx.root.style.width,\n                left: Mx.root.style.left,\n                top: Mx.root.style.top,\n                zIndex: Mx.root.style.zIndex\n            };\n            Mx.root.style.position = \"fixed\";\n            Mx.root.style.height = \"100%\";\n            Mx.root.style.width = \"100%\";\n            Mx.root.style.left = \"0px\";\n            Mx.root.style.top = \"0px\";\n            Mx.root.style.zIndex = 16777271; // http://www.puidokas.com/max-z-index/\n        } else {\n            Mx.root.style.position = Mx.fullscreen.position;\n            Mx.root.style.height = Mx.fullscreen.height;\n            Mx.root.style.width = Mx.fullscreen.width;\n            Mx.root.style.left = Mx.fullscreen.left;\n            Mx.root.style.top = Mx.fullscreen.top;\n            Mx.root.style.zIndex = Mx.fullscreen.zIndex;\n            Mx.fullscreen = undefined;\n        }\n        mx.checkresize(Mx);\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.checkresize = function(Mx) {\n        var canvas = Mx.canvas;\n        if ((canvas.height !== Mx.root.clientHeight) || (canvas.width !== Mx.root.clientWidth)) {\n\n            Mx.height = Mx.root.clientHeight;\n            Mx.width = Mx.root.clientWidth;\n\n            Mx.canvas.height = Mx.height;\n            Mx.canvas.width = Mx.width;\n            Mx.wid_canvas.height = Mx.height;\n            Mx.wid_canvas.width = Mx.width;\n\n            return true;\n        }\n        return false;\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.invertbgfg = function(Mx) {\n        mx.setbgfg(Mx, Mx.fg, Mx.bg, !Mx.xi);\n    };\n\n    /**\n     * @param color1\n     * @param color2\n     * @param color3\n     * @private\n     */\n    mx.mixcolor = function(color1, color2, perc1to2) {\n        var c1 = tinycolor(color1).toRgb();\n        var c2 = tinycolor(color2).toRgb();\n        var mix = 1.0 - perc1to2;\n        c2.r = c1.r * mix + c2.r * perc1to2;\n        c2.g = c1.g * mix + c2.g * perc1to2;\n        c2.b = c1.b * mix + c2.b * perc1to2;\n        return tinycolor(c2).toHexString(true);\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param fillStyle\n     * @private\n     */\n    mx.linear_gradient = function(Mx, x, y, w, h, fillStyle) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        var step_size = 1.0 / fillStyle.length;\n        var lingrad = ctx.createLinearGradient(x, y, w, h);\n        for (var i = 0; i < fillStyle.length - 1; i++) {\n            lingrad.addColorStop(step_size * (i), fillStyle[i]);\n        }\n        lingrad.addColorStop(1, fillStyle[fillStyle.length - 1]);\n        return lingrad;\n    };\n\n    /**\n     * Set's the background and foreground\n     * xwfg : usually used for text on a widget\n     * xwbg : background for a widget\n     * @param Mx\n     * @param bg\n     * @param fg\n     * @param xi\n     * @private\n     */\n    mx.setbgfg = function(Mx, bg, fg, xi) {\n        Mx.bg = tinycolor(bg).toHexString();\n        Mx.fg = tinycolor(fg).toHexString();\n        Mx.xi = tinycolor(xi).toHexString();\n\n        if ((tinycolor.equals(Mx.bg, \"black\")) && (tinycolor.equals(Mx.fg, \"white\"))) { ///mmm\n            Mx.xwfg = Mx.fg; // X-Widget Foreground color\n            Mx.xwbg = \"rgb(35%,35%,30%)\"; // X-Widget Background color\n            Mx.xwts = \"rgb(60%,60%,55%)\"; // X-Widget top shadow color\n            Mx.xwbs = \"rgb(25%,25%,20%)\"; // X-Widget bottom shadow color\n            Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n            Mx.xwlo = \"rgb(15%,15%,10%)\"; // X-Widget top shadow color\n            Mx.hi = Mx.xwts; //  Highlight color\n        } else if ((tinycolor.equals(Mx.bg, \"white\")) && (tinycolor.equals(Mx.fg, \"black\"))) {\n            Mx.xwfg = Mx.fg; // X-Widget Foreground color\n            Mx.xwbg = \"rgb(60%,60%,55%)\"; // X-Widget Background color\n            Mx.xwts = \"rgb(80%,80%,75%)\"; // X-Widget top shadow color\n            Mx.xwbs = \"rgb(40%,40%,35%)\"; // X-Widget bottom shadow color\n            Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n            Mx.xwlo = \"rgb(70%,70%,65%)\";\n            Mx.hi = Mx.xwbs; //  Highlight color\n        } else {\n            var clr = tinycolor(Mx.bg).toRgb();\n            var hsp = Math.sqrt( // HSP equation from http://alienryderflex.com/hsp.html\n                0.299 * (clr.r * clr.r) +\n                0.587 * (clr.g * clr.g) +\n                0.114 * (clr.b * clr.b)\n            );\n            if (hsp > 127.5) { // light\n                Mx.xwfg = \"black\";\n                Mx.xwbg = \"rgb(60%,60%,55%)\"; // X-Widget Background color\n                Mx.xwts = \"rgb(80%,80%,75%)\"; // X-Widget top shadow color\n                Mx.xwbs = \"rgb(40%,40%,35%)\"; // X-Widget bottom shadow color\n                Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n                Mx.xwlo = \"rgb(70%,70%,65%)\";\n                Mx.hi = Mx.xwts;\n            } else { // dark\n                Mx.xwfg = \"white\";\n                Mx.xwbg = \"rgb(35%,35%,30%)\"; // X-Widget Background color\n                Mx.xwts = \"rgb(60%,60%,55%)\"; // X-Widget top shadow color\n                Mx.xwbs = \"rgb(25%,25%,20%)\"; // X-Widget bottom shadow color\n                Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n                Mx.xwlo = \"rgb(15%,15%,10%)\"; // X-Widget top shadow color\n                Mx.hi = Mx.xwbs;\n            }\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param theme\n     * @private\n     */\n    mx.settheme = function(Mx, theme) {\n        Mx.bg = theme.bg;\n        Mx.fg = theme.fg;\n        Mx.xi = theme.xi;\n        Mx.xwfg = theme.xwfg;\n        Mx.xwbg = theme.xwbg;\n        Mx.xwts = theme.xwts;\n        Mx.xwbs = theme.xwbs;\n        Mx.xwlo = theme.xwlo;\n        Mx.hi = theme.hi;\n    };\n\n    /**\n     * Close graphics windows.\n     * @param Mx\n     */\n    mx.close = function(Mx) {\n        var canvas = Mx.wid_canvas;\n        canvas.removeEventListener(\"mousemove\", Mx.onmousemove, false);\n        //canvas.removeEventListener(\"touchmove\", Mx.ontouchmove);\n        canvas.removeEventListener(\"mouseup\", Mx.onmouseup, false);\n        //canvas.addEventListener(\"touchend\", Mx.onmouseup);\n\n        if (Mx.parent && Mx.parent.parentNode) {\n            Mx.parent.parentNode.removeChild(Mx.parent);\n        }\n    };\n\n    /**\n     * Draws and implements a scrollbar\n     * @param Mx\n     * @param sb\n     * @param xs\n     * @param xe\n     * @param ys\n     * @param ye\n     * @param out\n     * @param qs\n     * @param qe\n     * @param mouseEvent\n     * @param scrollbarState\n     */\n    //\n    // ~= MX$SCROLLBAR\n    //\n    mx.scrollbar = function(Mx, sb, xs, xe, ys, ye, out, qs, qe, mouseEvent, scrollbarState) {\n        // Param types:\n        // mx.SCROLLBAR* sb,\n        // int xs, int xe, int ys, int ye,\n        // real* ps, real* pe, real qs, real qe\n\n        var mode; // an int\n        var action; // an int\n        var origin; // an int\n        var stat = 0; // an int\n\n        var step; // a real_8\n        var page; // a real_8\n        var scale; // a real_8\n        var sblocal = new mx.SCROLLBAR(); // a SCROLLBAR\n\n        mode = (sb.flag !== undefined ? sb.flag : sb); // REFACTOR - if user sends in a number instead of a scrollbar\n        action = Math.abs(mode);\n\n        if (ye - ys > xe - xs) {\n            if (Mx.origin < 3) {\n                origin = 2; /* inverted Y scrollbar */\n            } else {\n                origin = 4; /* normal Y scrollbar */\n            }\n        } else {\n            if (Mx.origin & 2) {\n                origin = 3; /* inverted X scrollbar */\n            } else {\n                origin = 1; /* normal X scrollbar */\n            }\n        }\n\n        if (action < 10) {\n            sb = sblocal; /* use local SB structure */\n        }\n        if (action < 10 || sb.action === 0) { /* re-init the SB structure */\n            mx.scroll(Mx, sb, mx.XW_INIT, undefined, scrollbarState);\n            sb.flag = mode;\n            /* Turn off repeated event handling in mx_scroll */\n            sb.initial_pause = -1.0;\n            mx.scroll_loc(sb, xs, ys, xe - xs + 1, ye - ys + 1, origin, scrollbarState);\n        }\n        sb.srange = out.pe - out.ps;\n\n        switch (action) {\n            case 0:\n                step = page = scale = 1.0;\n                break;\n            case 1:\n            case 11:\n                step = page = 0.9 * sb.srange;\n                scale = 2.0;\n                break;\n            case 2:\n            case 12:\n                step = 0.1 * sb.srange;\n                page = 9 * step;\n                scale = 2.0;\n                break;\n            case 3:\n            case 13:\n                step = 1.0;\n                page = sb.srange - 1.0;\n                scale = 1.0;\n                break;\n            default:\n                return 0;\n        }\n        mx.scroll_vals(sb, out.ps, sb.srange, qs, qe - qs, step, page, scale, scrollbarState);\n\n        if (mode === 0) {\n            mx.scroll(Mx, sb, mx.XW_DRAW, undefined, undefined); // No need for a mouse event\n        } else {\n            if (mx.scroll(Mx, sb, mx.XW_EVENT, mouseEvent, scrollbarState)) {\n                if (out.ps !== sb.smin) {\n                    out.ps = sb.smin;\n                    stat += 1;\n                }\n                if (out.pe !== sb.smin + sb.srange) {\n                    out.pe = sb.smin + sb.srange;\n                    stat += 2;\n                }\n            }\n        }\n        return stat;\n    };\n\n    /**\n     * Instantiate scrollbar on graphics window\n     * @param Mx\n     * @param sv\n     * @param op\n     * @param mouseEvent\n     * @param scrollbarState\n     */\n    //\n    // ~= mx_scroll\n    //\n    mx.scroll = function(Mx, sv, op, mouseEvent, scrollbarState) {\n        var btn; // an int\n        var smin; // a real_8\n        var srange; // a real_8\n        var s; // an int_4\n\n        if (sv === undefined) {\n            return false; /* an mx.SCROLLBAR */\n        }\n\n        switch (op) {\n            case mx.XW_INIT:\n                mx.scroll_loc(sv, 0, 0, Mx.width, 20, 1, scrollbarState);\n                mx.scroll_vals(sv, 0.0, 10.0, 0.0, 100.0, 1.0, 10.0, 1.0, scrollbarState);\n                sv.flag = 0;\n                sv.action = 0;\n                sv.initial_pause = 0.25;\n                sv.repeat_pause = 0.05;\n                sv.mxevent = true;\n                sv.repeat_count = 0;\n                break;\n            case mx.XW_EVENT:\n                /*  Determine which button, if any, was pressed/released\n                 */\n                btn = 0;\n                if (sv.mxevent) { // TODO make sure mxevent is set properly when an event goes off - how is this supposed to be set?\n                    btn = (Mx.button_release) ? -Mx.button_release : Mx.button_press;\n                } else if (mouseEvent.type === \"mousedown\" || mouseEvent.type === \"mouseup\") {\n                    // TODO Does this case ever happen?\n                    switch (mouseEvent.which) {\n                        case 1:\n                            btn = 1;\n                            break;\n                        case 2:\n                            btn = 2;\n                            break;\n                        case 3:\n                            btn = 3;\n                            break;\n                            /* Add these cases for the mouse wheel */\n                        case 4:\n                            btn = 4;\n                            break;\n                        case 5:\n                            btn = 5;\n                            break;\n                    }\n                    if (mouseEvent.type === \"mouseup\") {\n                        btn = -btn;\n                    }\n                } else if (mouseEvent.type === \"mousewheel\" || mouseEvent.type === \"DOM-MouseScroll\") {\n                    // TODO Does this case ever happen?\n                    if (mouseEvent.wheelDelta && mouseEvent.wheelDelta > 0) {\n                        btn = 4; // TODO is 4 right for negative scroll (aka a scroll forwards away from the user)\n                        // TODO Do we need to worry about a release here?\n                    } else if (mouseEvent.wheelDelta && mouseEvent.wheelDelta < 0) {\n                        btn = 5; // TODO is 5 right for negative scroll (aka a scroll backward towards the user)\n                        // TODO Do we need to worry about a release here?\n                    }\n                }\n\n                if (sv.action === 0) {\n                    /*  First-time action -- only interested in button presses\n                     *  1 or 2 within our bounds\n                     */\n                    /* If scroll wheel, pretend we're on vertical scroll bar */\n                    if (btn === 4 || btn === 5) {\n                        Mx.xpos = sv.x;\n                    }\n\n\n                    /* Button !=1,2,4,5 OR NOT on scroll bar */\n                    if ((btn !== 1 && btn !== 2 && btn !== 4 && btn !== 5) ||\n                        Mx.xpos < sv.x || Mx.ypos < sv.y ||\n                        Mx.xpos > sv.x + sv.w || Mx.ypos > sv.y + sv.h) {\n                        return false;\n                    }\n                } else if (btn < 0) {\n                    /* Any button release within a repeated action will make us exit */\n                    sv.action = sv.repeat_count = 0; // TODO Update scrollbarState's action?\n                    return true;\n                }\n\n                /*  Compute s, the offset in pixels from the 'origin' of\n                 *  the scrollbar's on-screen region.\n                 */\n                if (sv.origin & 1) {\n                    s = Mx.xpos - sv.x;\n                    if (sv.origin & 2) {\n                        s = sv.w - s;\n                    }\n                } else {\n                    s = Mx.ypos - sv.y;\n                    if (sv.origin <= 2) {\n                        s = sv.h - s;\n                    }\n                }\n\n                /*  Determine action */\n                if (sv.action === 0) {\n                    /* First-time action */\n\n                    sv.repeat_count = 0; // TODO Is repeat count necessary any more?\n\n                    var scrollReal2PixOut = mx.scroll_real2pix(sv);\n                    // UPDATE SCROLLBAR STATE as well\n                    sv.s1 = scrollbarState.s1 = scrollReal2PixOut.s1;\n                    sv.sw = scrollbarState.sw = scrollReal2PixOut.sw;\n                    sv.soff = scrollbarState.soff = s - sv.s1;\n                    if (sv.trange === 0.0) {\n                        // UPDATE SCROLLBAR STATE as well\n                        sv.smin = scrollbarState.smin = sv.tmin;\n                        sv.srange = scrollbarState.srange = 0.0;\n                    } else switch (btn) {\n                        case 1:\n                            if (s > sv.a1 && s < sv.a2) { /* on scroll trough */\n                                sv.action = (sv.soff > 0) ? mx.SB_PAGEINC : mx.SB_PAGEDEC;\n                            } else { /* on arrows */\n                                sv.action = (sv.soff > 0) ? mx.SB_STEPINC : mx.SB_STEPDEC;\n                            }\n                            break;\n                        case 4:\n                            sv.action = mx.SB_WHEELUP;\n                            break;\n                        case 5:\n                            sv.action = mx.SB_WHEELDOWN;\n                            break;\n                    }\n                } else {\n                    /* We're repeating sv.action */\n                    switch (sv.action) {\n                        case mx.SB_WHEELUP:\n                        case mx.SB_WHEELDOWN:\n                        case mx.SB_EXPAND:\n                            /* we don't want to repeat these */\n                        case mx.SB_SHRINK:\n                        case mx.SB_FULL:\n                            sv.action = sv.repeat_count = 0;\n                    }\n                }\n                /* FALL THROUGH!!! */\n                /* jshint -W086 */\n            case mx.XW_COMMAND:\n                /* jshint +W086 */\n\n                smin = sv.smin;\n                srange = sv.srange;\n\n                switch (sv.action) {\n                    case mx.SB_STEPINC:\n                        smin += sv.step;\n                        break;\n                    case mx.SB_STEPDEC:\n                        smin -= sv.step;\n                        break;\n                    case mx.SB_PAGEINC:\n                        smin += sv.page;\n                        break;\n                    case mx.SB_PAGEDEC:\n                        smin -= sv.page;\n                        break;\n                    case mx.SB_FULL:\n                        smin = sv.tmin;\n                        srange = sv.trange;\n                        break;\n                    case mx.SB_EXPAND:\n                        srange = srange * sv.scale;\n                        if (smin <= 0 && smin + sv.srange >= 0) {\n                            smin *= sv.scale;\n                        } else {\n                            smin -= (srange - sv.srange) / 2.0;\n                        }\n                        break;\n                    case mx.SB_SHRINK:\n                        srange = srange / sv.scale;\n                        if (smin < 0 && smin + sv.srange >= 0) {\n                            smin += srange / sv.scale; /* Plot crosses axis */\n                        } else if (smin === 0 && smin + sv.srange >= 0) {\n                            smin = srange / sv.scale; /* Plot touches axis */\n                        } else {\n                            smin += (sv.srange - srange) / 2.0; /* Plot is completely contained on positive side of axis */\n                        }\n                        break;\n                        /* The mouse wheel needs to scroll 1 page at a time, if you want an\n\t\t           application to scroll differently, change sv.page with\n\t\t           mx_scroll_vals in the application code */\n                    case mx.SB_WHEELUP:\n                        smin -= sv.page;\n                        break;\n                    case mx.SB_WHEELDOWN:\n                        smin += sv.page;\n                        break;\n                }\n\n                if (sv.trange > 0) {\n                    smin = Math.max(sv.tmin, Math.min(smin, sv.tmin + sv.trange - srange));\n                    srange = Math.min(srange, sv.trange);\n                } else {\n                    smin = Math.min(sv.tmin, Math.max(smin, sv.tmin + sv.trange - srange));\n                    srange = Math.max(srange, sv.trange);\n                }\n\n                if (sv.smin === smin && sv.srange === srange) {\n                    if (sv.action !== mx.SB_DRAG) {\n                        sv.action = sv.repeat_count = 0;\n                    }\n                } else {\n                    // UPDATE SCROLLBAR STATE as well\n                    sv.smin = scrollbarState.smin = smin;\n                    sv.srange = scrollbarState.srange = srange;\n                    sv.repeat_count++;\n                }\n\n                if (op === mx.XW_COMMAND) {\n                    mx.scroll(Mx, sv, mx.XW_UPDATE, undefined);\n                    sv.action = 0;\n                }\n\n                break;\n            case mx.XW_DRAW:\n            case mx.XW_UPDATE:\n                mx.redrawScrollbar(sv, Mx, op);\n\n        } /* switch */\n        return true;\n    };\n\n    /**\n     * Specify location and orientation of a scrollbar\n     * @param sv\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param origin\n     * @param scrollbarState\n     */\n    //\n    // ~= mx_scroll_loc\n    //\n    mx.scroll_loc = function(sv, x, y, w, h, origin, scrollbarState) {\n        // UPDATE local scrollbar and SCROLLBAR STATE\n        if (sv === undefined) {\n            return; /* mx.SCROLLBAR */\n        }\n        sv.x = scrollbarState.x = x; // int\n        sv.y = scrollbarState.y = y; // int\n        sv.w = scrollbarState.w = w; // int\n        sv.h = scrollbarState.h = h; // int\n        sv.origin = scrollbarState.origin = Math.max(1, Math.min(4, origin)); // int\n\n        if (sv.origin & 1) {\n            sv.a2 = scrollbarState.a2 = sv.w;\n            sv.arrow = scrollbarState.arrow = Math.min(m.trunc((sv.w - m.trunc(2 * mx.GBorder)) / 3), sv.h + mx.GBorder);\n        } else {\n            sv.a2 = scrollbarState.a2 = sv.h;\n            sv.arrow = scrollbarState.arrow = Math.min(m.trunc((sv.h - m.trunc(2 * mx.GBorder)) / 3), sv.w + mx.GBorder);\n        }\n        sv.a1 = scrollbarState.a1 = sv.arrow + mx.GBorder;\n        sv.a2 -= sv.arrow + mx.GBorder;\n        scrollbarState.a2 -= sv.arrow + mx.GBorder;\n        sv.swmin = scrollbarState.swmin = Math.min(10, sv.a2 - sv.a1);\n        sv.s1 = scrollbarState.s1 = 0;\n        sv.sw = scrollbarState.sw = 0;\n        sv.action = scrollbarState.action = 0;\n    };\n\n    /**\n     * Set coordinates in scrollbar structure\n     * @param sv\n     * @param smin\n     * @param srange\n     * @param tmin\n     * @param trange\n     * @param step\n     * @param page\n     * @param scale\n     * @param scrollbarState\n     */\n    //\n    // ~= mx_scroll_vals\n    //\n    mx.scroll_vals = function(sv, smin, srange, tmin, trange, step, page, scale, scrollbarState) {\n        // UPDATE SCROLLBAR STATE as well\n        if (sv === undefined) {\n            return; /* an mx.SCROLLBAR */\n        }\n        sv.smin = scrollbarState.smin = smin;\n        sv.srange = scrollbarState.srange = srange;\n        sv.tmin = scrollbarState.tmin = tmin;\n        sv.trange = scrollbarState.trange = trange;\n        sv.step = scrollbarState.step = step;\n        sv.page = scrollbarState.page = page;\n        sv.scale = scrollbarState.scale = Math.max(scale, 1.0);\n    };\n\n    /**\n     * Draw single symbol centered at pixel (x,y)\n     * @param Mx\n     * @param ic\n     * @param x\n     * @param y\n     * @param symbol\n     * @param rr\n     */\n    //\n    // ~= MX$DRAW_SYMBOL\n    //\n    mx.draw_symbol = function(Mx, ic, x, y, symbol, rr, n) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        var r = 0; // int\n        var d = 0; // int\n        var d2 = 0; // int\n        var rmode = false; // bool\n        var fill = false; // bool\n        var tri = []; // XPoint array of size 4\n        for (var cnt = 0; cnt < 4; cnt++) { // initializing 4 points in the array\n            tri[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n        var c = ''; // char\n\n        fill = rr < 0;\n        r = Math.abs(rr);\n        d = r * 2;\n\n        // Set the foreground color\n        ctx.fillStyle = ic;\n        ctx.strokeStyle = ic;\n\n        if (typeof symbol === \"function\") {\n            symbol(ctx, n, x, y);\n        } else {\n            switch (symbol) {\n                case mx.L_CircleSymbol:\n                    ctx.beginPath();\n                    if (fill) {\n                        ctx.arc(x, y, r, 0, 360); // draw arc\n                        ctx.fill(); // fill in the area of the arc\n                    } else {\n                        ctx.arc(x, y, r, 0, 360);\n                        ctx.stroke(); // just draw the arc's outline\n                    }\n                    break;\n                case mx.L_SquareSymbol:\n                    if (fill) {\n                        fill_rectangle(ctx, x - r, y - r, d, d);\n                    } else {\n                        draw_rectangle(ctx, x - r, y - r, d, d);\n                    }\n                    break;\n                case mx.L_PixelSymbol:\n                    d = 1; // d = 2*GMaxLines; // TODO Do we care about a maximum number of lines?\n                    // No native way to draw just a pixel - so use a circle instead\n                    ctx.beginPath();\n                    ctx.arc(x, y, 1, 0, 2 * Math.PI, true);\n                    ctx.fill();\n                    break;\n                case mx.L_ITriangleSymbol:\n                    r = -r; // TODO Refactor without switch fall-through?\n                    /* jshint -W086 */\n                case mx.L_TriangleSymbol:\n                    /* jshint +W086 */\n                    d = m.trunc(r * 1.5);\n                    d2 = m.trunc(r * 0.80);\n\n                    // Coordinates of just the triangle itself\n                    tri[1].x = -d2;\n                    tri[1].y = d;\n                    tri[2].x = d2 * 2;\n                    tri[2].y = 0;\n                    tri[3].x = -d2;\n                    tri[3].y = -d;\n\n                    var tempTri = []; // XPoint array of size 4\n                    for (var cnt = 0; cnt < 4; cnt++) { // initializing 4 points in the array\n                        tempTri[cnt] = {\n                            x: 0,\n                            y: 0\n                        };\n                    }\n\n                    if (fill) {\n                        tempTri[0].x = x;\n                        tempTri[0].y = y - r;\n\n                        // Replacement for CoordModePrevious offset (updating coordinates to be relative to origin, instead of previous pt)\n                        tempTri[1].x = tempTri[0].x + tri[1].x;\n                        tempTri[1].y = tempTri[0].y + tri[1].y;\n                        tempTri[2].x = tempTri[1].x + tri[2].x;\n                        tempTri[2].y = tempTri[1].y + tri[2].y;\n                        tempTri[3].x = tempTri[2].x + tri[3].x;\n                        tempTri[3].y = tempTri[2].y + tri[3].y;\n\n                        fill_poly(ctx, tempTri);\n                    } else {\n                        tempTri[0].x = x;\n                        tempTri[0].y = y - r;\n\n                        // Replacement for CoordModePrevious offset (updating coordinates to be relative to origin, instead of previous pt)\n                        tempTri[1].x = tempTri[0].x + tri[1].x;\n                        tempTri[1].y = tempTri[0].y + tri[1].y;\n                        tempTri[2].x = tempTri[1].x + tri[2].x;\n                        tempTri[2].y = tempTri[1].y + tri[2].y;\n                        tempTri[3].x = tempTri[2].x + tri[3].x;\n                        tempTri[3].y = tempTri[2].y + tri[3].y;\n\n                        draw_poly(ctx, tempTri);\n                    }\n                    break;\n                case mx.L_PlusSymbol:\n                    draw_line(ctx, x, y + r, x, y - r);\n                    draw_line(ctx, x + r, y, x - r, y);\n                    break;\n                case mx.L_HLineSymbol:\n                    draw_line(ctx, x + r, y, x - r, y);\n                    break;\n                case mx.L_VLineSymbol:\n                    draw_line(ctx, x, y + r, x, y - r);\n                    break;\n                case mx.L_XSymbol:\n                    draw_line(ctx, x - r, y - r, x + r, y + r);\n                    draw_line(ctx, x + r, y - r, x - r, y + r);\n                    break;\n                default:\n                    c = symbol;\n                    r = m.trunc(Mx.text_w / 2); //tbd\n                    if (fill && !rmode) {\n                        ctx.fillText(c.substring(0, 2), x - r, y + r); // TODO Does this cover it? Do we need to also fill in a rectangle behind\n                    }\n                    break;\n            } // end switch (symbol)\n        }\n    };\n\n    /**\n     * Plot symbols at centers defined by an array of pixels\n     * @param Mx\n     * @param ic\n     * @param pixx\n     * @param pixy\n     * @param npix\n     * @param symbol\n     * @param rr\n     * @private\n     */\n    //\n    // ~= MX$DRAW_SYMBOLS\n    //\n    mx.draw_symbols = function(Mx, ic, pixx, pixy, npix, symbol, rr, istart) {\n        for (var i = 0; i < npix; i++) {\n            mx.draw_symbol(Mx, ic, pixx[i], pixy[i], symbol, rr, i + istart);\n        }\n    };\n\n    /* http://geomalgorithms.com/a01-_area.html\n     *   > 0 left\n     *   = 0 on\n     *   < 0 right\n     */\n    /**\n     * Test if a point is Left|On|Right of an infinite 2D line.\n     * @method isLeft\n     * @param p_x Point's x-coordinate\n     * @param p_y Point's y-coordinate\n     * @param e_x1 Lines's x1-coordinate\n     * @param e_y1 Lines's y1-coordinate\n     * @param e_x2 Lines's x2-coordinate\n     * @param e_y2 Lines's y2-coordinate\n     * @private\n     */\n    function isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) {\n        return ((e_x1 - p_x) * (e_y2 - p_y) - (e_x2 - p_x) * (e_y1 - p_y));\n    }\n\n    /**\n     * @method update_winding_number\n     * @param wn\n     * @param p_x\n     * @param p_y\n     * @param e_x1\n     * @param e_y1\n     * @param e_x2\n     * @param e_y2\n     * @private\n     */\n    function update_winding_number(wn, p_x, p_y, e_x1, e_y1, e_x2, e_y2) {\n        if (e_y1 <= p_y) { // start y <= P.y\n            if (e_y2 > p_y) { // an upward crossing\n                if (isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) > 0) {\n                    wn += 1;\n                }\n            }\n        } else { // start y > P.y (no test needed)\n            if (e_y2 <= p_y) { // a downward crossing\n                if (isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) < 0) {\n                    wn -= 1;\n                }\n            }\n        }\n        return wn;\n    }\n\n    /**\n     * Converts array of (x,y) coordinates to pixel coordinates, plots lines or dots\n     * @param Mx\n     * @param color\n     * @param xpoint\n     * @param ypoint\n     * @param npts\n     * @param skip\n     * @param line\n     * @param symb\n     * @param rad\n     * @param options\n     */\n    //\n    // ~= MX$TRACE\n    //\n    mx.trace = function(Mx, color, xpoint, ypoint, npts, istart, skip, line, symb, rad, options) {\n        if ((xpoint === undefined) || (ypoint === undefined)) {\n            throw \"mx.trace requires xpoint and ypoint\";\n        }\n\n        if (skip === undefined) {\n            skip = 1;\n        }\n\n        if (line === undefined) {\n            line = 1;\n        }\n\n        if (symb === undefined) {\n            symb = 0;\n        }\n\n        if (rad === undefined) {\n            rad = 0;\n        }\n\n        if (options === undefined) {\n            options = {};\n        }\n\n        if (npts <= 0) {\n            m.log.warn(\"No points to draw\");\n            return;\n        }\n\n        if ((line === 0) && (symb === 0)) {\n            m.log.warn(\"No line or symbol to draw\");\n            return;\n        }\n\n        var style;\n        if (options.dashed) {\n            style = {\n                mode: \"dashed\",\n                on: 4,\n                off: 4\n            };\n        }\n\n        var stk4 = mx.origin(Mx.origin, 4, Mx.stk[Mx.level]);\n        if ((stk4.xscl === 0.0) || (stk4.yscl === 0.0)) {\n            // the min and max are the same\n            return;\n        }\n\n        var left = stk4.x1;\n        var top = stk4.y1;\n\n        var xxmin = stk4.xmin;\n        var xscl = 1.0 / stk4.xscl;\n\n        var yymin = stk4.ymin;\n        var yscl = 1.0 / stk4.yscl;\n\n        if (!options.noclip) {\n            mx.clip(Mx, left, top, stk4.x2 - left + 1, stk4.y2 - top + 1);\n        }\n\n        var dx = Math.abs(stk4.xmax - stk4.xmin);\n        var dy = Math.abs(stk4.ymax - stk4.ymin);\n        var xmin = Math.min(stk4.xmin, stk4.xmax);\n        var ymin = Math.min(stk4.ymin, stk4.ymax);\n        var xmax = xmin + dx;\n        var ymax = ymin + dy;\n        //dx = dx * 0.5;\n        //if ((line == -1) || (line == 1)) {\n        //\tdy = dy * 10.0;\n        //} else {\n        //\tdy = dy * 0.5;\n        //}\n        //xmin = xmin - dx;\n        //ymin = ymin - dy;\n        //xmax = xmax + dx;\n        //ymax = ymax + dy;\n        // These buffers need to be able to hold 2 times the number of points.\n        // if all points are on screen, then we will will need 'n' points\n        // if all points are off the screen, then we will need (2*n)-2\n        var bufsize = 4 * Math.ceil(2 * xpoint.length);\n        var pixx = new Int32Array(new ArrayBuffer(bufsize));\n        var pixy = new Int32Array(new ArrayBuffer(bufsize));\n\n        var ib = 0;\n        if ((line === 0) && (symb !== 0)) {\n            for (var n = (skip - 1); n < npts; n += skip) {\n                var x = xpoint[n];\n                var y = ypoint[n];\n                var lvisible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));\n                if (lvisible) {\n                    pixx[0] = Math.round((x - xxmin) * xscl) + left;\n                    pixy[0] = Math.round((y - yymin) * yscl) + top;\n                    mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);\n                }\n            }\n        }\n        if (options.vertsym === true) {\n            for (var n = (skip - 1); n < npts; n += skip) {\n                var x = xpoint[n];\n                var y = ypoint[n];\n                if ((x >= xmin) && (x <= xmax)) {\n                    var i = Math.round((x - xxmin) * xscl) + left;\n                    mx.draw_line(Mx, color, i, 0, i, Mx.height);\n                    if ((y >= ymin) && (y <= ymax)) {\n                        pixx[0] = i;\n                        pixy[0] = Math.round((y - yymin) * yscl) + top;\n                        mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);\n                    }\n                }\n            }\n        }\n        if (options.horzsym === true) {\n            for (var n = (skip - 1); n < npts; n += skip) {\n                var x = xpoint[n];\n                var y = ypoint[n];\n                if ((y >= ymin) && (y <= ymax)) {\n                    var i = Math.round((y - yymin) * yscl) + top;\n                    mx.draw_line(Mx, color, 0, i, Mx.width, i);\n                    if ((x >= xmin) && (x <= xmax)) {\n                        pixx[0] = Math.round((x - xxmin) * xscl) + left;\n                        pixy[0] = i;\n                        mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);\n                    }\n                }\n            }\n        } else if (line !== 0) {\n            var colors;\n            if ((options) && (options.highlight)) {\n                colors = [];\n                for (var sn = 0; sn < options.highlight.length; sn++) {\n                    if (options.highlight[sn].xstart >= xmax) {\n                        continue;\n                    }\n                    if (options.highlight[sn].xend <= xmin) {\n                        continue;\n                    }\n\n                    var xs = Math.max(options.highlight[sn].xstart, xmin);\n                    var xe = Math.min(options.highlight[sn].xend, xmax);\n\n                    if (xs < xe) {\n                        var rxs = Math.round((xs - xxmin) * xscl) + left;\n                        var rxe = Math.round((xe - xxmin) * xscl) + left;\n\n                        for (var cn = colors.length - 1; cn >= 0; cn--) {\n                            // This highlight overlaps the entire range of a previous\n                            // highlight...we can thus remove the color\n                            if ((rxs <= colors[cn].start) && (rxe >= colors[cn].end)) {\n                                colors.splice(cn, 1);\n                                continue;\n                            }\n                            // This highlight splits a previous highlight...we need\n                            // to create a new color range\n                            else if ((rxs >= colors[cn].start) && (rxe <= colors[cn].end)) {\n                                colors.push({\n                                    start: rxe,\n                                    end: colors[cn].end,\n                                    color: colors[cn].color\n                                });\n                                colors[cn].end = rxs;\n\n                            }\n                            // This highlight overlaps partially\n                            else if ((rxs <= colors[cn].start) && (rxe >= colors[cn].start)) {\n                                colors[cn].start = rxe;\n                            } else if ((rxs <= colors[cn].end) && (rxe >= colors[cn].end)) {\n                                colors[cn].end = rxs;\n                            }\n\n                            // See if this colors is still valid\n                            if (colors[cn].end <= colors[cn].start) {\n                                colors.splice(cn, 1);\n                            }\n                        }\n\n                        colors.push({\n                            start: rxs,\n                            end: rxe,\n                            color: options.highlight[sn].color\n                        });\n                    }\n                }\n\n                // The first color is the start of the plot\n                // in the base-line color\n                colors.push({\n                    start: left,\n                    color: color\n                });\n\n                colors.sort(function(a, b) {\n                    return a.start - b.start;\n                });\n\n            } else {\n                colors = color;\n            }\n\n            var wn = 0; // the winding number counter http://geomalgorithms.com/a03-_inclusion.html\n            var mid_x = (Mx.stk[Mx.level].xmax + Mx.stk[Mx.level].xmin) / 2.0;\n            var mid_y = (Mx.stk[Mx.level].ymax + Mx.stk[Mx.level].ymin) / 2.0;\n\n            var x = xpoint[0];\n            var y = ypoint[0];\n\n            wn = update_winding_number(wn, mid_x, mid_y, Mx.stk[Mx.level].xmin, Mx.stk[Mx.level].ymin, x, y);\n\n            var lvisible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));\n            // The first point is visible\n            if (lvisible) {\n                pixx[ib] = Math.round((x - xxmin) * xscl) + left;\n                pixy[ib] = Math.round((y - yymin) * yscl) + top;\n                ib += 1;\n                if (symb !== 0) {\n                    mx.draw_symbols(Mx, color, pixx, pixy, 1, symb, rad, istart);\n                }\n            } else {\n                ib = 0;\n            }\n\n            var ie = 0;\n            var visible = false;\n            for (var n = skip; n <= (skip * (npts - 1)); n += skip) {\n\n                var lx = x;\n                var ly = y;\n                x = xpoint[n];\n                y = ypoint[n];\n\n                wn = update_winding_number(wn, mid_x, mid_y, lx, ly, x, y);\n\n                visible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));\n                if ((lvisible) && (visible)) {\n                    // both the left point and right point are visible, so we can draw the trace\n                    pixx[ib] = Math.round((x - xxmin) * xscl) + left;\n                    pixy[ib] = Math.round((y - yymin) * yscl) + top;\n                    ib += 1;\n                } else {\n                    // clipping necessary, either the left or right point are not visible\n                    lvisible = visible;\n                    // calculate the difference between the last point and this point\n                    dx = lx - x;\n                    dy = ly - y;\n                    if ((dx !== 0.0) || (dy !== 0.0)) {\n                        var o = {\n                            tL: 1.0,\n                            tE: 0.0\n                        };\n                        // Between the last point and the current point,\n                        // determine the ratio of the x and y porionts\n                        // that intersects the border.  If clipt returns\n                        // false then no portion of the line between the two\n                        // points is visible\n                        if (clipt(dx, xmin - x, o)) {\n                            if (clipt(-dx, x - xmax, o)) {\n                                if (clipt(dy, ymin - y, o)) {\n                                    if (clipt(-dy, y - ymax, o)) {\n                                        // If this point is starting the on-screen portion, start the line\n                                        if (o.tL < 1) {\n                                            pixx[ib] = Math.round((x - xxmin + o.tL * dx) * xscl) + left;\n                                            pixy[ib] = Math.round((y - yymin + o.tL * dy) * yscl) + top;\n                                            ib += 1;\n                                        }\n\n                                        // If this point is ending the on-screen portion draw the line\n                                        if (o.tE > 0) {\n                                            pixx[ib] = Math.round((x - xxmin + o.tE * dx) * xscl) + left;\n                                            pixy[ib] = Math.round((y - yymin + o.tE * dy) * yscl) + top;\n                                            ib += 1;\n                                            mx.draw_lines(Mx, colors, pixx.subarray(ie, ib), pixy.subarray(ie, ib), (ib - ie), line, style);\n\n                                            if (symb !== 0 && (ib - ie) > 2) {\n                                                mx.draw_symbols(Mx,\n                                                    color,\n                                                    pixx.subarray(ie + 1, ib - 1),\n                                                    pixy.subarray(ie + 1, ib - 1), (ib - ie - 2),\n                                                    symb,\n                                                    rad,\n                                                    istart + n - (ib - ie - 2));\n                                            }\n                                            ie = ib;\n                                        } else {\n                                            // otherwise add it to the line to be drawn\n                                            pixx[ib] = Math.round((x - xxmin) * xscl) + left;\n                                            pixy[ib] = Math.round((y - yymin) * yscl) + top;\n                                            ib += 1;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            wn = update_winding_number(wn, mid_x, mid_y, x, y, Mx.stk[Mx.level].xmax, Mx.stk[Mx.level].ymin);\n            wn = update_winding_number(wn, mid_x, mid_y, Mx.stk[Mx.level].xmax, Mx.stk[Mx.level].ymin, Mx.stk[Mx.level].xmin, Mx.stk[Mx.level].ymin);\n            if ((ib - ie) > 0) {\n                mx.draw_lines(Mx, colors, pixx.subarray(ie, ib), pixy.subarray(ie, ib), (ib - ie), line, style);\n                if (visible) {\n                    ie = ie + 1;\n                }\n                if (symb !== 0 && (ib - ie) > 1) {\n                    // TODO ib - 1 is used below because\n                    // otherwise the last point has undefined\n                    // for it's x/y coordinates...but this may\n                    // be a bug because it may neglect drawing\n                    // the last data point\n                    mx.draw_symbols(Mx,\n                        color,\n                        pixx.subarray(ie - 1, ib),\n                        pixy.subarray(ie - 1, ib),\n                        ib - ie - 1,\n                        symb,\n                        rad,\n                        n - ib + istart);\n                }\n            }\n\n            if (options.fillStyle && !Mx.fillMin && !Mx.fillMax) {\n                if ((ib > 1) || (wn !== 0)) {\n                    // if we have at least one point\n                    // or the entire plot area is in the fill zone\n                    mx.fill_trace(Mx, options.fillStyle, pixx, pixy, ib);\n                }\n            }\n\n            if (options.highlight) {\n                for (var i = 0; i < options.highlight.length; i++) {\n                    var highlight = options.highlight[i];\n                    if (!highlight.fill) {\n                        continue;\n                    }\n\n                    var x_start = highlight.xstart;\n                    var x_end = highlight.xend;\n\n                    console.log(\"x start \", x_start);\n                    console.log(\"x end \", x_end);\n\n                    if (x_start >= Mx.stk[Mx.level].xmax) {\n                        continue;\n                    }\n                    if (x_end <= Mx.stk[Mx.level].xmin) {\n                        continue;\n                    }\n\n                    if ((ib > 1) || (wn !== 0)) {\n\n                        var xstart_pixel_value = mx.real_to_pixel(Mx, x_start, 0);\n                        var xend_pixel_value = mx.real_to_pixel(Mx, x_end, 0);\n\n                        var pi_start = xstart_pixel_value.x;\n                        var pi_end = xend_pixel_value.x;\n                        //console.log('start: ', pi_start, 'end: ', pi_end);\n                        var pixx_new = [];\n                        var pixy_new = [];\n                        for (var q = 0; q < ib; q++) {\n                            var this_point = pixx[q];\n                            var this_point_y = pixy[q];\n                            //console.log(this_point);\n                            if (in_fill_range(this_point, pi_start, pi_end) === true) {\n                                //console.log('in range: ', this_point);\n                                pixx_new.push(this_point);\n                                pixy_new.push(this_point_y);\n\n                            }\n                        }\n\n                        if ((pixx_new.length > 0) || (wn !== 0)) {\n                            pi_start = Math.max(pi_start, pixx_new[0]);\n                            pi_end = Math.min(pi_end, pixx_new[pixx_new.length - 1]);\n                            mx.fill_trace(Mx, highlight.fill, pixx_new, pixy_new, pixx_new.length, pi_start, pi_end);\n                        }\n                    }\n\n                }\n            }\n\n\n        }\n\n        if (!options.noclip) {\n            mx.clip(Mx, 0, 0, 0, 0);\n        }\n    };\n\n    /**\n     * Set dashed or solid lines mode.\n     * @param Mx\n     * @param linewidth\n     * @param style\n     */\n    //\n    // ~= MX$DRAW_MODE\n    //\n    mx.draw_mode = function(Mx, linewidth, style) {\n        Mx.linewidth = (linewidth === undefined) ? 1 : linewidth;\n        Mx.style = style;\n    };\n\n    /**\n     * @param Mx\n     * @param color\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     * @param linewidth\n     * @param style\n     */\n    //\n    // ~= MX$DRAW_LINES\n    //\n    mx.draw_line = function(Mx, color, x1, y1, x2, y2, linewidth, style) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (linewidth === undefined) {\n            linewidth = Mx.linewidth;\n        }\n        if (style === undefined) {\n            style = Mx.style;\n        }\n        // Look up the color in Mx.pixels\n        if (typeof color === \"number\") {\n            if (!Mx.pixel) {\n                m.log.warn(\"COLORMAP not initialized, defaulting to foreground\");\n                color = Mx.fg;\n            } else {\n                if (isNaN(color)) {\n                    color = 0;\n                }\n                var cidx = Math.max(0, Math.min(Mx.pixel.map.length, color));\n                color = Mx.pixel.getColor(color);\n                color = to_rgb(\n                    color.red,\n                    color.green,\n                    color.blue);\n            }\n        }\n        draw_line(ctx, x1, y1, x2, y2, style, color, linewidth);\n    };\n\n    /**\n     * @param Mx\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     */\n    //\n    // ~= MX$RUBBERLINE\n    //\n    mx.rubberline = function(Mx, x1, y1, x2, y2) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        draw_line(ctx, x1, y1, x2, y2, {\n            mode: \"xor\"\n        }, \"white\", 1);\n    };\n\n    /**\n     * @param Mx\n     * @param fillStyle\n     * @param pixx\n     * @param pixy\n     * @param npts\n     * @private\n     */\n    mx.fill_trace = function(Mx, fillStyle, pixx, pixy, npts, l, r) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (Array.isArray(fillStyle)) {\n            ctx.fillStyle = mx.linear_gradient(Mx, 0, 0, 0, Mx.b - Mx.t, fillStyle);\n        } else {\n            ctx.fillStyle = fillStyle;\n        }\n\n        if (npts < 1) {\n            ctx.fillRect(Mx.l, Mx.t, (Mx.r - Mx.l), (Mx.b - Mx.t));\n            return;\n        }\n\n        if (l === undefined) {\n            l = Mx.l;\n        }\n        if (r === undefined) {\n            r = Mx.r;\n        }\n\n        if (fillStyle) {\n            var x = pixx[0];\n            var y = pixy[0];\n\n            ctx.beginPath();\n            if (y === Mx.t) {\n                ctx.lineTo(l, Mx.t);\n            } else {\n                ctx.lineTo(l, Mx.b);\n            }\n\n\n            ctx.lineTo(x, y);\n\n\n\n            for (var i = 1; i < npts; i++) {\n                x = pixx[i];\n                y = pixy[i];\n                ctx.lineTo(x, y);\n            }\n\n            if (y === Mx.t) {\n                ctx.lineTo(r, Mx.t);\n            }\n            ctx.lineTo(r, Mx.b);\n            if (pixy[0] === Mx.t) {\n                ctx.lineTo(l, Mx.b);\n            }\n\n            ctx.closePath();\n            ctx.fill(\"evenodd\");\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param colors\n     * @param pixx\n     * @param pixy\n     * @param npts\n     * @param linewidth\n     * @param style\n     */\n    //\n    // ~= MX$DRAW_LINES\n    //\n    mx.draw_lines = function(Mx, colors, pixx, pixy, npts, linewidth, style) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (npts < 1) {\n            return;\n        }\n\n        var x = pixx[0];\n        var y = pixy[0];\n\n        if (linewidth === undefined) {\n            linewidth = Mx.linewidth;\n        }\n        if (style === undefined) {\n            style = Mx.style;\n        }\n\n        if ((style) && (style.mode === \"dashed\")) {\n            var dash_supported = common.dashOn(ctx, style.on, style.off);\n            if (!dash_supported) {\n                m.log.warn(\"WARNING: Dashed lines aren't supported on your browser\");\n            }\n        }\n\n        ctx.lineWidth = linewidth;\n        var current_color = 0;\n\n        if (typeof colors === \"string\") {\n            colors = [{\n                start: 0,\n                color: colors\n            }];\n        } else if (!(colors instanceof Array)) {\n            if (colors.start === undefined) {\n                colors.start = 0;\n            }\n            colors = [colors];\n        }\n\n        var n;\n        for (n = (colors.length - 1); n >= 0; n--) {\n            if ((colors[n].end != null) && (colors[n].end < x)) {\n                colors.splice(n, 1);\n            }\n        }\n\n        // Find the first valid color (expects colors to be sorted)\n        for (n = 0; n < colors.length; n++) {\n            if (colors[n].start < x) {\n                current_color = n;\n            }\n        }\n\n        ctx.strokeStyle = colors[current_color].color;\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n\n        for (var i = 0; i < npts; i++) {\n            if ((x === pixx[i]) && (y === pixy[i])) {\n                continue;\n            }\n            x = pixx[i];\n            y = pixy[i];\n\n            var newcolor = false;\n            if ((current_color > 0) && (colors[current_color].end != null) && (colors[current_color].end < x)) {\n                newcolor = true;\n                while ((colors[current_color].end != null) && (colors[current_color].end < x)) {\n                    colors.splice(current_color, 1);\n                    current_color -= 1;\n                    if (current_color === 0) {\n                        break;\n                    }\n                }\n            }\n\n            if (((current_color + 1) < colors.length) && (colors[current_color + 1].start <= x)) {\n                newcolor = true;\n                while (((current_color + 1) < colors.length) && (colors[current_color + 1].start <= x)) {\n                    current_color++;\n                }\n            }\n\n            ctx.lineTo(x, y);\n            if (newcolor) {\n                ctx.stroke();\n                ctx.strokeStyle = colors[current_color].color;\n                ctx.beginPath();\n                ctx.lineTo(x, y);\n            }\n        }\n        ctx.stroke();\n        common.dashOff(ctx);\n        ctx.beginPath();\n    };\n\n    /**\n     * @param Mx\n     * @param left\n     * @param top\n     * @param width\n     * @param height\n     */\n    //\n    // ~= MX$CLIP\n    //\n    mx.clip = function(Mx, left, top, width, height) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if ((left === 0) && (top === 0) && (width === 0) && (height === 0)) {\n            ctx.restore();\n            return;\n        }\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(left, top, width, height);\n        ctx.clip();\n    };\n\n    /**\n     * @param Mx\n     */\n    //\n    // ~= MX$CLEAR_WINDOW\n    //\n    mx.clear_window = function(Mx) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        ctx.fillStyle = Mx.bg;\n        ctx.fillRect(0, 0, Mx.width, Mx.height);\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.erase_window = function(Mx) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        ctx.clearRect(0, 0, Mx.width, Mx.height);\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @param mode\n     * @param def_style\n     * @param alt_style\n     */\n    //\n    // ~= MX$RUBBERBOX\n    // Unlike MX$RUBBERBOX, this is a non-blocking call.  As such the 'func' is a callback for then the rubberbox is finished.\n    //\n    // When CTRL is pressed, alt_style is used\n    //\n    mx.rubberbox = function(Mx, func, mode, def_style, alt_style) {\n        mx.warpbox(Mx, Mx.xpos, Mx.ypos, Mx.xpos, Mx.ypos, 0, Mx.width, 0, Mx.height, func, mode, def_style, alt_style);\n    };\n\n    /**\n     * @param Mx\n     * @param xo\n     * @param yo\n     * @param xl\n     * @param yl\n     * @param xmin\n     * @param xmax\n     * @param ymin\n     * @param ymax\n     * @param func\n     * @param mode\n     * @param def_style\n     * @param alt_style\n     */\n    //\n    // ~= MX$WARPBOX\n    // Unlike MX$WARPBOX, this is a non-blocking call.   As such the 'func' is a callback for then the rubberbox is finished.\n    //\n    mx.warpbox = function(Mx, xo, yo, xl, yl, xmin, xmax, ymin, ymax, func, mode, def_style, alt_style) {\n        if (!def_style) {\n            def_style = {};\n        }\n\n        Mx.warpbox = new WARPBOX();\n        Mx.warpbox.xo = xo;\n        Mx.warpbox.yo = yo;\n        Mx.warpbox.xl = xl;\n        Mx.warpbox.yl = yl;\n        Mx.warpbox.xmin = xmin;\n        Mx.warpbox.xmax = xmax;\n        Mx.warpbox.ymin = ymin;\n        Mx.warpbox.ymax = ymax;\n        Mx.warpbox.func = func;\n        Mx.warpbox.mode = mode;\n\n        Mx.warpbox.style = def_style;\n        Mx.warpbox.def_style = def_style;\n        Mx.warpbox.alt_style = alt_style;\n    };\n\n    /**\n     * @param inorigin\n     * @param outorigin\n     * @param instk\n     */\n    //\n    // ~= M$ORIGIN\n    //\n    mx.origin = function(inorigin, outorigin, instk) {\n        inorigin = Math.max(1, inorigin);\n        outorigin = Math.max(1, outorigin);\n\n        var outstk = new mx.STKSTRUCT();\n\n        outstk.xmin = instk.xmin;\n        outstk.xmax = instk.xmax;\n        outstk.ymin = instk.ymin;\n        outstk.ymax = instk.ymax;\n        outstk.xscl = instk.xscl;\n        outstk.yscl = instk.yscl;\n        outstk.x1 = instk.x1;\n        outstk.y1 = instk.y1;\n        outstk.x2 = instk.x2;\n        outstk.y2 = instk.y2;\n\n        if (inorigin !== outorigin) {\n            var diff = Math.abs(outorigin - inorigin); // used to simplify boolean logic\n            var sum = outorigin + inorigin;\n            if (diff === 2 || sum !== 5) { // (1<->3) (2<->4) (1<->2) (3<->4)\n                outstk.xmin = instk.xmax;\n                outstk.xmax = instk.xmin;\n                outstk.xscl = -instk.xscl;\n            }\n            if (diff === 2 || sum === 5) { // (1<->3) (2<->4) (1<->4) (2<->3)\n                outstk.ymin = instk.ymax;\n                outstk.ymax = instk.ymin;\n                outstk.yscl = -instk.yscl;\n            }\n        }\n        return outstk;\n    };\n\n    /**\n     * @param end1\n     * @param end2\n     */\n    //\n    // ~= MX$MULT\n    //\n    mx.mult = function(end1, end2) {\n        var absmax = Math.max(Math.abs(end1), Math.abs(end2));\n        if (absmax === 0) {\n            return 1.0;\n        }\n        var kengr = 0.1447648 * Math.log(absmax);\n        kengr = kengr | kengr; // Math.floor always rounds down, so -3.3 becomes -4 use this bitwise hack instead\n        if (absmax < 1.0) {\n            kengr = kengr - 1;\n        }\n        if (kengr < 0) {\n            return 1.0 / Math.pow(10, (-3 * kengr));\n        } else {\n            return Math.pow(10, (3 * kengr));\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @private\n     */\n    //\n    // event may be undefined or null\n    mx.widget_callback = function(Mx, event) {\n        if (Mx.prompt) {\n            if (event.which === 3) {\n                Mx.prompt.input.onsubmit();\n            }\n        }\n\n        if (Mx.widget) {\n            Mx.widget.callback(event);\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param promptText\n     * @param isValid\n     * @param onSuccess\n     * @param refresh\n     * @param inputValue\n     * @param xpos\n     * @param ypos\n     * @param errorTimeout\n     */\n    //\n    // ~= MX$DPROMPT - only higher-level\n    mx.prompt = function(Mx, promptText, isValid, onSuccess, refresh, inputValue, xpos, ypos, errorTimeout) {\n        if (inputValue !== undefined) {\n            var inputValid = isValid(inputValue);\n\n            if (!inputValid.valid) {\n                throw \"Prompt default input value not valid due to '\" + inputValid.reason + \"'\";\n            }\n        }\n\n        // TODO Validation - make sure promptText is not too long and isn't multi-line...\n        mx.onWidgetLayer(Mx, function() {\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            var maxNumChars = 30;\n\n            // Construct the input box\n            var pxIndex = ctx.font.indexOf('px');\n            var fontIndex = pxIndex + 3;\n            var fontSize = ctx.font.substr(0, pxIndex);\n            var fontFamily = ctx.font.substr(fontIndex, ctx.font.length).toString();\n\n            /* TODO Note: There is a scrolling bug - you can scroll to the right, but not the left of the value\n\t\t\tAnd... when truncating the width of an input field - it shows the value as though truncated\n\t\t\tfrom the right (say if its cut off by 1 and that one happened to be a negative sign, the value\n\t\t\twould look like a positive) .\n\t\t\t */\n            var canvasInput = new CanvasInput({\n                height: Mx.text_h,\n                fontFamily: fontFamily,\n                /* jshint -W053 */\n                fontSize: new Number(fontSize),\n                /* jshint +W053 */\n                backgroundColor: Mx.bg,\n                fontColor: Mx.fg,\n                borderWidth: 0,\n                borderRadius: 0,\n                padding: 0,\n                boxShadow: \"none\",\n                innerShadow: \"none\",\n                width: Mx.text_w * maxNumChars,\n                value: (inputValue !== undefined ? inputValue.toString() : \"\"),\n                disableBlur: true,\n                renderOnReturn: false,\n                tabToClear: true\n            });\n\n            var subHandlerCreator = function(messageX, messageY) {\n                return function() {\n                    var newValue = this.value();\n\n                    var inputValid = isValid(newValue);\n\n                    if (!inputValid.valid) {\n                        mx.message(Mx, \"Value: '\" + newValue + \"' isn't valid due to '\" + inputValid.reason + \"' - RETRY\", undefined, messageX, messageY);\n\n                        // Clear error message\n                        setTimeout(function() {\n                            mx.onWidgetLayer(Mx, function() {\n                                mx.erase_window(Mx);\n                            });\n                            Mx.widget = null;\n                            //refresh();\n                        }, errorTimeout != null ? errorTimeout : 4000);\n                    } else {\n                        Mx.prompt = undefined; // clear state variable\n\n                        // Kill CanvasInput\n                        this.cleanup();\n                        mx.onWidgetLayer(Mx, function() {\n                            mx.erase_window(Mx);\n                        });\n\n                        onSuccess(newValue);\n                    }\n                };\n            };\n\n            // Create redraw method\n            var redrawPromptCreator = function(Mx, input, promptText) {\n                return function(xpos, ypos) {\n                    mx.onWidgetLayer(Mx, function() {\n                        var GBorder = 3;\n\n                        // Calculate the position variables\n\n                        var xssPrompt = (promptText.length + 2) * Mx.text_w;\n                        var xss = xssPrompt + (maxNumChars + 1) * Mx.text_w;\n                        var yss = 2 * Mx.text_h;\n\n                        var xs = xss + 2 * GBorder;\n                        var ys = yss + 2 * GBorder;\n                        if (!xpos) {\n                            xpos = Mx.xpos;\n                        }\n                        if (!ypos) {\n                            ypos = Mx.ypos;\n                        }\n                        var xc = Math.max(0, Math.min(xpos, Mx.width - xs));\n                        var yc = Math.max(0, Math.min(ypos, Mx.height - ys));\n                        var xcc = xc + GBorder;\n                        var ycc = yc + GBorder;\n\n                        var yPos = ycc + Mx.text_h * 1.5;\n                        var inputXPos = xcc + Mx.text_w;\n\n                        // Draw the box and label text\n                        mx.widgetbox(Mx, xc, yc, xs, ys, xcc, ycc, 0, \"\");\n                        mx.text(Mx, inputXPos, yPos, promptText);\n\n                        var inputYPos = yPos - Mx.text_h * 1.15;\n\n                        // Redraw the input at the new location\n                        input.x(xcc + Mx.text_w + xssPrompt - Mx.text_w);\n                        input.y(inputYPos);\n\n                        input.onsubmit(subHandlerCreator(xc, inputYPos - 75)); // TODO Refactor positioning based on char length of reason code...\n                        if (!input.canvas()) {\n                            input.canvas(Mx.active_canvas);\n                        } else {\n                            input.render();\n                        }\n                    });\n                };\n            };\n\n            var redrawPrompt = redrawPromptCreator(Mx, canvasInput, promptText);\n\n            //refresh();\n            redrawPrompt(xpos, ypos);\n            canvasInput.focus();\n\n            // Set state variable\n            Mx.prompt = {\n                redraw: redrawPrompt,\n                input: canvasInput\n            };\n        });\n    };\n\n    /**\n     * Floating-point number validator. Verifies that value is a valid floating point\n     * number. Validation is loose by default - meaning empty strings are considered valid.\n     * @param value The value to validate.\n     * @param strict If strict is set to true - does not consider empty strings as valid floating point numbers.\n     * @private\n     */\n    mx.floatValidator = function(value, strict) {\n        if (!(((strict === undefined || strict === false) && value === \"\")) &&\n            isNaN(parseFloat(value)) || !isFinite(value)) {\n            return {\n                valid: false,\n                reason: \"Failed float validation: not a valid floating point number\"\n            };\n        }\n\n        return {\n            valid: true,\n            reason: \"\"\n        };\n    };\n\n    /**\n     * Integer number validator. Verifies that value is a valid integer.\n     * Validation is loose by default - meaning empty strings are considered valid.\n     * @param value The value to validate.\n     * @param strict If strict is set to true - does not consider empty strings as valid integers.\n     * @private\n     */\n    mx.intValidator = function(value, strict) {\n        if (((strict === undefined || strict === false) && value === \"\") ||\n            ((parseFloat(value) === parseInt(value, 10)) && !isNaN(value))) {\n            return {\n                valid: true,\n                reason: \"\"\n            };\n        } else {\n            return {\n                valid: false,\n                reason: \"Failed integer validation: not a valid integer\"\n            };\n        }\n    };\n\n    mx.hexValidator = function(value, strict) {\n        var regColorcode = /^(#)?([0-9a-fA-F]{3})([0-9a-fA-F]{3})?$/;\n        if (((strict === undefined || strict === false) && value === \"\") ||\n            (regColorcode.test(value) !== false)) {\n            return {\n                valid: true,\n                reason: \"\"\n            };\n        } else {\n            return {\n                valid: false,\n                reason: \"Failed hexcode validation: not a valid hexcode\"\n            };\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param msg\n     * @param time - unused?\n     * @param xpos\n     * @param ypos\n     */\n    //\n    // ~= MX$MESSAGE\n    //\n    mx.message = function(Mx, msg, time, xpos, ypos, type) {\n        mx.onWidgetLayer(Mx, function() {\n\n            mx.render_message_box(Mx, msg, xpos, ypos);\n\n            Mx.widget = {\n                type: type || \"ONESHOT\",\n                callback: function(event) {\n                    if ((event.type === \"mousedown\") || (event.type === \"keydown\")) {\n                        Mx.widget = null;\n                        mx.onWidgetLayer(Mx, function() {\n                            mx.erase_window(Mx);\n                        });\n                    }\n                }\n            };\n        });\n    };\n\n    mx.render_message_box = function(Mx, msg, xpos, ypos, textColor) {\n        var GBorder = 3;\n\n        // Unlike MX$MESSAGE, this implementaion if the message\n        // already contains newlines, the text will placed in the\n        // box as-is.\n        var beg = msg.split(/\\r\\n|\\r|\\n/g);\n        var linel = 0;\n        var center;\n        if (beg.length === 1) {\n            beg = [];\n            var MESSWIDTH = 40;\n\n            linel = Math.min((((Mx.width - 2 * GBorder) / Mx.text_w) - 2), msg.length);\n            if (linel <= 0) {\n                return;\n            }\n            while ((linel > MESSWIDTH) && (2.5 * Mx.text_h * msg.length < Mx.height * linel)) {\n                linel -= 5;\n            }\n\n            var cur = 0;\n            var bg = 0;\n            var i = 0;\n            var j = 0;\n            var end = 0;\n            var brk = 0;\n            var beg = [];\n\n            center = true;\n            while (bg < msg.length) {\n                end = bg + linel - 1;\n                brk = end = Math.min(end, msg.length - 1);\n                var endinreturn = false;\n                for (cur = bg; cur <= end && !endinreturn; cur++) {\n                    switch (msg[cur]) {\n                        case ',':\n                        case ';':\n                        case ' ':\n                        case ':':\n                            brk = cur;\n                            break;\n                        case '-':\n                        case '/':\n                            if (brk !== cur - 1) {\n                                brk = cur;\n                            }\n                            break;\n                        case '@':\n                        case '\\n':\n                        case '\\r':\n                            center = false;\n                            endinreturn = true;\n                            brk = cur;\n                            break;\n                    }\n                }\n                if (cur === msg.length) {\n                    brk = end;\n                }\n                if (endinreturn) {\n                    beg.push(msg.substring(bg, brk));\n                } else {\n                    // trim leading space\n                    var s = msg.substring(bg, brk + 1).replace(/^\\s+/, \"\");\n                    beg.push(s);\n                }\n                bg = brk + 1;\n                j = Math.max(j, beg[i].length);\n            }\n        } else {\n            for (var i = 0; i < beg.length; i++) {\n                linel = Math.min((((Mx.width - 2 * GBorder) / Mx.text_w) - 2), Math.max(linel, beg[i].length));\n            }\n        }\n\n        var lines = beg.length;\n        if (lines > 6) {\n            center = false;\n        }\n        var cur = 0;\n        var winlines = Math.max(1, Mx.height / Mx.text_h);\n        var lastline = Math.min(lines, cur + winlines - 1);\n\n        var xss = (linel + 2) * Mx.text_w;\n        var yss = (lastline - cur + 1) * Mx.text_h;\n\n        var xs = xss + 2 * GBorder;\n        var ys = yss + 2 * GBorder;\n        if (!xpos) {\n            xpos = Mx.xpos;\n        }\n        if (!ypos) {\n            ypos = Mx.ypos;\n        }\n        var xc = Math.max(Mx.l, Math.min(xpos, Mx.r - xs));\n        var yc = Math.max(Mx.t, Math.min(ypos, Mx.b - ys));\n        var xcc = xc + GBorder;\n        var ycc = yc + GBorder;\n\n        mx.widgetbox(Mx, xc, yc, xs, ys, xcc, ycc, 0, \"\");\n\n        var j = ycc + Mx.text_h / 3;\n        var i = xcc + Mx.text_w;\n        while (cur < lastline) {\n            j += Mx.text_h;\n            if (center) {\n                i = xc + xs / 2 - ((beg[cur].length * Mx.text_w) / 2);\n            }\n            mx.text(Mx, i, j, beg[cur], textColor);\n            cur++;\n        }\n    };\n\n    /**\n     * Based on http://js-bits.blogspot.co.uk/2010/07/canvas-rounded-corner-rectangles.html\n     *\n     * @param Mx\n     * @param color\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} w\n     * @param {Number} h\n     * @param fill_opacity\n     * @param fill_color\n     * @param {Number} radius The corner radius. Defaults to 5;\n     */\n    mx.draw_round_box = function(Mx, color, x, y, w, h, fill_opacity, fill_color, radius) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!radius) {\n            radius = 5;\n        }\n\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + w - radius, y);\n        ctx.quadraticCurveTo(x + w, y, x + w, y + radius);\n        ctx.lineTo(x + w, y + h - radius);\n        ctx.quadraticCurveTo(x + w, y + h, x + w - radius, y + h);\n        ctx.lineTo(x + radius, y + h);\n        ctx.quadraticCurveTo(x, y + h, x, y + h - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = color;\n        ctx.stroke();\n\n        if ((fill_opacity !== undefined) && (fill_opacity > 0)) {\n            var oldAlpha = ctx.globalAlpha;\n            ctx.globalAlpha = fill_opacity;\n            if (fill_color) {\n                ctx.fillStyle = fill_color;\n            } else {\n                ctx.fillStyle = color;\n            }\n            ctx.fill();\n            ctx.globalAlpha = oldAlpha;\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param color\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param fill_opacity\n     * @param fill_color\n     */\n    //\n    // ~= MX$DRAW_BOX\n    //\n    mx.draw_box = function(Mx, color, x, y, w, h, fill_opacity, fill_color) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (color !== \"xor\") {\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = color;\n            ctx.strokeRect(x, y, w, h);\n        } else {\n            if (typeof Uint8ClampedArray === 'undefined') {\n                // we don't have typed arrays, so canvas getImageData operations\n                // will be very slow, so use Mx.fg instead\n                ctx.lineWidth = 1;\n                ctx.strokeStyle = Mx.fg;\n                ctx.strokeRect(x, y, w, h);\n            } else {\n                // TODO switch to using TypedArrays\n                x = Math.floor(x);\n                y = Math.floor(y);\n                w = Math.floor(w);\n                h = Math.floor(h);\n\n                // For now assume xor always uses the base canvas\n                // even if it draws on another canvas\n                var dctx = Mx.canvas.getContext(\"2d\");\n\n                var imgd = dctx.getImageData(x, y, w, 1);\n                var pix = imgd.data;\n                for (var c = 0; c < imgd.data.length; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x, y);\n\n                imgd = dctx.getImageData(x, y + h, w, 1);\n                pix = imgd.data;\n                for (var c = 0; c < imgd.data.length; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x, y + h);\n\n                var imgd = dctx.getImageData(x, y, 1, h);\n                var pix = imgd.data;\n                for (var c = 0; c < h; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x, y);\n\n                imgd = dctx.getImageData(x + w, y, 1, h);\n                pix = imgd.data;\n                for (var c = 0; c < h; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x + w, y);\n            }\n        }\n\n        if ((fill_opacity !== undefined) && (fill_opacity > 0)) {\n            var oldAlpha = ctx.globalAlpha;\n            ctx.globalAlpha = fill_opacity;\n            if (fill_color) {\n                ctx.fillStyle = fill_color;\n            } else {\n                ctx.fillStyle = color;\n            }\n            ctx.fillRect(x + 1, y + 1, w - 1, h - 1);\n            ctx.globalAlpha = oldAlpha;\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param width\n     */\n    // ~= MX$SETFONT\n    mx.set_font = function(Mx, width) {\n        var ctx = Mx.canvas.getContext(\"2d\");\n        var ctx_wid = Mx.wid_canvas.getContext(\"2d\");\n\n        if ((Mx.font) && (Mx.font.width === width)) {\n            // use the cached font\n            ctx.font = Mx.font.font;\n            ctx_wid.font = Mx.font.font;\n        } else {\n            // figure out the font\n            var text_h = 1;\n            do {\n                text_h = text_h + 1;\n                ctx.font = text_h + \"px \" + Mx.font_family;\n                ctx_wid.font = text_h + \"px \" + Mx.font_family;\n                var font_size = ctx.measureText('M'); // the capital M is typically the same height and width\n                Mx.text_w = font_size.width;\n                Mx.text_h = text_h;\n            } while (Mx.text_w < width);\n            Mx.font = {\n                font: text_h + \"px \" + Mx.font_family,\n                width: width\n            };\n        }\n    };\n\n\n    /**\n     * @param Mx\n     * @param xstart\n     * @param ystart\n     * @param xend\n     * @param yend\n     * @param style\n     */\n    // ~= MX$FTEXTLINE\n    mx.textline = function(Mx, xstart, ystart, xend, yend, style) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (!style) {\n            style = {};\n        }\n        if (!style.color) {\n            style.color = Mx.fg;\n        }\n        if (!style.width) {\n            style.width = 1;\n        }\n        draw_line(ctx, xstart, ystart, xend, yend, style, style.color, style.width);\n    };\n\n    /**\n     * @param dmin\n     * @param dmax\n     * @param ndiv\n     */\n    // ~= MX$TICS\n    mx.tics = function(dmin, dmax, ndiv, timecode) {\n        var dtic = 1;\n        var dtic1 = dmin;\n\n        // handle degenerate case\n        if (dmax === dmin) {\n            return {\n                dtic: 1,\n                dtic1: dmin\n            };\n        }\n\n        // split up range into about ndiv 'nice' chunks\n        // zero is included only if   dmin < zero < dmax\n        var dran = Math.abs(dmax - dmin);\n        var df = dran / ndiv;\n        var sig = log10(Math.max(df, 1.0e-36));\n        var nsig;\n        if (sig < 0.0) {\n            nsig = Math.ceil(sig);\n            nsig = nsig - 1;\n        } else {\n            nsig = Math.floor(sig);\n        }\n\n        var ddf = df * Math.pow(10.0, (-nsig));\n        sig = Math.pow(10.0, nsig);\n        var dft = ddf * sig;\n        // If timecode has been requested and it looks like\n        // timecode\n        if (timecode && (dft >= 5.0 && dft <= 59.5 * 3600 * 24)) {\n            var dscl;\n            if (dft < 17.5) {\n                dscl = 5.0; // align to 5 sec tics\n            } else if (dft < 37.5) {\n                dscl = 15.0; // align to 15 sec tics\n            } else if (dft < 4.5 * 60) {\n                dscl = 60.0; // 1 minute tics\n            } else if (dft < 17.5 * 60) {\n                dscl = 5.0 * 60; // and so on\n            } else if (dft < 37.5 * 60) {\n                dscl = 15.0 * 60;\n            } else if (dft < 2.0 * 3600) {\n                dscl = 1.0 * 3600;\n            } else if (dft < 4.5 * 3600) {\n                dscl = 3.0 * 3600;\n            } else if (dft < 9.0 * 3600) {\n                dscl = 6.0 * 3600;\n            } else if (dft < 1.5 * 3600 * 24) {\n                dscl = 12.0 * 3600;\n            } else if (dft < 6.0 * 3600 * 24) {\n                dscl = 1.0 * 3600 * 24; // 1 day\n            } else {\n                dscl = 1.0 * 3600 * 24 * 7; // 1 week\n            }\n            dtic = Math.round(dft / dscl) * dscl;\n        } else {\n            if (ddf < 1.75) {\n                dtic = sig;\n            } else if (ddf < 2.25) {\n                dtic = 2.0 * sig;\n            } else if (ddf < 3.5) {\n                dtic = 2.50 * sig;\n            } else if (ddf < 7.0) {\n                dtic = 5.0 * sig;\n            } else {\n                dtic = 10.0 * sig;\n            }\n        }\n\n        // redefine dmin and dmax to line up on 'nice' boundaries\n        if (dtic === 0.0) {\n            dtic = 1.0;\n        }\n        var nseg;\n        if (dmax >= dmin) {\n            if (dmin >= 0.0) {\n                nseg = dmin / dtic + 0.995;\n            } else {\n                nseg = dmin / dtic - 0.005;\n            }\n            nseg = Math.floor(nseg); // floor\n            dtic1 = nseg * dtic;\n        } else {\n            if (dmin >= 0.0) {\n                nseg = dmin / dtic + 0.005;\n            } else {\n                nseg = dmin / dtic - 0.995;\n            }\n            nseg = Math.floor(nseg); // floor\n            dtic1 = nseg * dtic;\n            dtic = -1 * dtic;\n        }\n        if (dtic1 + dtic === dtic1) {\n            dtic = dmax - dmin;\n        }\n\n        return {\n            dtic: dtic,\n            dtic1: dtic1\n        };\n    };\n\n    /**\n     * @param Mx\n     * @param xdiv\n     * @param ydiv\n     * @param xlab\n     * @param ylab\n     * @param flags\n     */\n    // ~= MX$FDRAWAXIS\n    mx.drawaxis = function(Gx, Mx, xdiv, ydiv, xlab, ylab, flags) {\n        var stk1 = mx.origin(Mx.origin, 1, Mx.stk[Mx.level]);\n        var iscl = 0;\n        var isct = 0;\n        var iscr = 0;\n        var iscb = 0;\n        var width = 0;\n        var height = 0;\n\n        xlab = (xlab === undefined) ? 30 : xlab;\n        ylab = (ylab === undefined) ? 30 : ylab;\n\n\n        if (flags.exactbox) {\n            iscl = Math.floor(stk1.x1);\n            isct = Math.floor(stk1.y1);\n            iscr = Math.floor(stk1.x2);\n            iscb = Math.floor(stk1.y2);\n            width = iscr - iscl;\n            height = iscb - isct;\n        } else {\n            iscl = Math.max(Math.floor(stk1.x1) - 2, 0);\n            isct = Math.max(Math.floor(stk1.y1) - 2, 0);\n            iscr = Math.min(Math.floor(stk1.x2) + 2, Mx.width);\n            iscb = Math.min(Math.floor(stk1.y2) + 2, Mx.height);\n            width = iscr - iscl - 4;\n            height = iscb - isct - 4;\n        }\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (flags.fillStyle) {\n            if (Array.isArray(flags.fillStyle)) {\n                ctx.fillStyle = mx.linear_gradient(Mx, 0, 0, 0, iscb - isct, flags.fillStyle);\n            } else {\n                ctx.fillStyle = flags.fillStyle;\n            }\n        } else {\n            ctx.fillStyle = Mx.bg;\n        }\n        ctx.fillRect(iscl, isct, iscr - iscl, iscb - isct);\n\n        if (!flags.noaxisbox) {\n            mx.textline(Mx, iscl, isct, iscr, isct);\n            mx.textline(Mx, iscr, isct, iscr, iscb);\n            mx.textline(Mx, iscr, iscb, iscl, iscb);\n            mx.textline(Mx, iscl, iscb, iscl, isct);\n        }\n\n        var xTIC = {\n            dtic: 0,\n            dtic1: 0\n        };\n        var yTIC = {\n            dtic: 0,\n            dtic1: 0\n        };\n\n        if (xdiv < 0) {\n            xTIC.dtic1 = stk1.xmin;\n            xTIC.dtic = (stk1.xmin - stk1.xmax) / xdiv;\n        } else {\n            xTIC = mx.tics(stk1.xmin, stk1.xmax, xdiv, flags.xtimecode);\n        }\n\n\n        var _xmult = 1.0;\n        if (flags.xmult) { // if xmult was provided\n            _xmult = flags.xmult;\n        } else if (!flags.xtimecode) {\n            _xmult = mx.mult(stk1.xmin, stk1.xmax);\n        }\n        if (ydiv < 0) {\n            yTIC.dtic1 = stk1.ymin;\n            yTIC.dtic = (stk1.ymin - stk1.ymax) / ydiv;\n        } else {\n            yTIC = mx.tics(stk1.ymin, stk1.ymax, ydiv, flags.ytimecode);\n        }\n        var _ymult = 1.0;\n        if (flags.ymult) { // if ymult was provided\n            _ymult = flags.ymult;\n        } else if (!flags.ytimecode) {\n            _ymult = mx.mult(stk1.ymin, stk1.ymax);\n        }\n\n        var xticlabels = !flags.noxtlab;\n        var yticlabels = !flags.noytlab;\n\n        // add labels\n        var ix = Math.max(0, iscl - 4 * Mx.text_w);\n        var iy = 0;\n        if (flags.ontop) {\n            iy = Math.min(Mx.height, Math.floor(iscb + 1.5 * Mx.text_h));\n        } else {\n            iy = Math.max(Mx.text_h, Math.floor(isct - 0.5 * Mx.text_h));\n        }\n\n        var xlabel;\n        var ylabel;\n\n        if (iy > 0) {\n            var ly = 0;\n            if (!flags.noyplab) {\n                if (flags.ylabel instanceof Function) {\n                    ylabel = flags.ylabel(ylab, _ymult);\n                } else if (flags.ylabel !== undefined) {\n                    ylabel = flags.ylabel;\n                } else {\n                    ylabel = m.label(ylab, _ymult);\n                }\n            }\n            if (!flags.noxplab) {\n                if (flags.xlabel instanceof Function) {\n                    xlabel = flags.xlabel(xlab, _xmult);\n                } else if (flags.xlabel !== undefined) {\n                    xlabel = flags.xlabel;\n                } else {\n                    xlabel = m.label(xlab, _xmult);\n                }\n            }\n        }\n\n        if (xlabel && ylabel) {\n            mx.text(Mx, ix, iy, ylabel + \" vs \" + xlabel);\n        } else if (xlabel) {\n            mx.text(Mx, ix, iy, xlabel);\n        } else if (ylabel) {\n            mx.text(Mx, ix, iy, ylabel);\n        }\n\n        var itext = 5.5 * Mx.text_w;\n        var jtext = 0;\n        if (flags.ontop) {\n            if (flags.inside) {\n                jtext = isct + 1.0 * Mx.text_h;\n            } else {\n                jtext = isct - 0.2 * Mx.text_h;\n            }\n        } else {\n            if (flags.inside) {\n                jtext = iscb - 0.5 * Mx.text_h;\n            } else {\n                jtext = iscb + 1.0 * Mx.text_h + 2;\n            }\n        }\n        var fact;\n        if (stk1.xmin !== stk1.xmax) {\n            fact = width / (stk1.xmax - stk1.xmin);\n        } else {\n            fact = width / 1.0;\n        }\n\n        var fmul;\n        if (_xmult !== 0) {\n            fmul = 1.0 / _xmult;\n        } else {\n            fmul = 1.0;\n        }\n\n        // Figure out how many characters can fit between tics\n        var xlbl_maxlen = Math.min(12, Math.round(fact * xTIC.dtic) / Mx.text_w);\n\n        // The sp flag decides if all tics should be labeled, or just the first tic.\n        // in LEGACY rendering when sp=0 you should get one tic at the start\n        // that then displays like XPOS += tic-delta\n        //\n        // The original logic basically says, if the tic-delta (i.e. dtic) is very small\n        // relative to the first tic, only render the first tic.  Specifically:\n        //    sp = (Math.abs(xTIC.dtic) / Math.max(Math.abs(xTIC.dtic1), Math.abs(xTIC.dtic)) > 1.0e-6);\n        //\n        // However, it's probably more important to decide this based off the significant digits of the\n        // tic labels.  In other words, if the tics cannot be labeled uniquely then you need to make sp=0.\n        var sp = 1;\n        var x;\n        var xlbl = \"\";\n        if (xticlabels) {\n            if (flags.xtimecode) {\n                xlbl = m.sec2tod(xTIC.dtic1);\n                // If the label is no longer than half of the total width display multiple labels\n                sp = (xlbl.length * Mx.text_w < (iscr - iscl) / 2);\n            } else {\n                // Ensure that all of the tic labels will render uniquely\n                var last_xlbl;\n                for (x = xTIC.dtic1; x <= stk1.xmax; x = x + xTIC.dtic) {\n                    xlbl = mx.format_f(x * fmul, xlbl_maxlen, xlbl_maxlen / 2);\n                    if (xlbl === last_xlbl) {\n                        sp = 0;\n                        break;\n                    }\n                    last_xlbl = xlbl;\n                }\n            }\n        }\n        if (xTIC.dtic === 0) {\n            xTIC.dtic = stk1.xmax - xTIC.dtic1 + 1.0;\n        }\n\n        var i;\n        ix = 0;\n        xlbl = \"\";\n        for (x = xTIC.dtic1; x <= stk1.xmax; x = x + xTIC.dtic) {\n            i = iscl + Math.round(fact * (x - stk1.xmin)) + 2;\n            if (i < iscl) {\n                continue;\n            }\n            if (flags.grid && flags.grid !== \"y\") {\n                if (!flags.gridStyle) {\n                    if (mx.LEGACY_RENDER) {\n                        flags.gridStyle = {\n                            mode: \"dashed\",\n                            on: 1,\n                            off: 3\n                        };\n                    } else {\n                        flags.gridStyle = {\n                            \"color\": Mx.xwms,\n                            mode: \"dashed\",\n                            on: 1,\n                            off: 3\n                        };\n                    }\n                }\n                mx.textline(Mx, i, iscb, i, isct, flags.gridStyle);\n            } else {\n                mx.textline(Mx, i, iscb - 2, i, iscb + 2);\n                mx.textline(Mx, i, isct - 2, i, isct + 2);\n            }\n            if (xticlabels) {\n                if (sp) {\n                    xlbl = null;\n                    if (flags.xtimecode) {\n                        // If we have enough space to draw the next tic label\n                        if (i > ix) {\n                            xlbl = m.sec2tod(x, true);\n                            ix = i + (Mx.text_w * (xlbl.length + 1));\n                        }\n                    } else {\n                        xlbl = mx.format_f(x * fmul, xlbl_maxlen, xlbl_maxlen / 2);\n                        xlbl = trimlabel(xlbl, true);\n                    }\n                    if (xlbl) {\n                        var itexti = Math.round(xlbl.length / 2) * Mx.text_w;\n                        if (flags.inside) {\n                            i = Math.max(iscl + itexti, i);\n                            i = Math.min(iscr - itexti, i);\n                        }\n                        if (i - itexti >= 0) {\n                            mx.text(Mx, i - itexti, jtext, xlbl);\n                        }\n                    }\n                } else if (x === xTIC.dtic1) {\n                    if (flags.xtimecode) {\n                        xlbl = m.sec2tod(x, true);\n                        if (flags.inside) {\n                            i = Math.floor(Math.max(iscl + itext, i));\n                        }\n                        mx.text(Mx, i - itext, jtext, xlbl + \" +\\u0394 \" + m.sec2tod(xTIC.dtic));\n                    } else {\n                        xlbl = (xTIC.dtic1 * fmul).toString();\n                        if (flags.inside) {\n                            i = Math.floor(Math.max(iscl + itext, i));\n                        }\n                        mx.text(Mx, i - itext, jtext, xlbl + \" +\\u0394 \" + (xTIC.dtic * fmul));\n                    }\n                }\n            }\n        }\n\n        // Add y-tick marks\n        if (flags.yonright) { // TODO - yonright probably doesn't work\n            if (flags.inside) {\n                itext = Math.min(iscr - 6 * Mx.text_w, Mx.width - 5 * Mx.text_w);\n            } else {\n                itext = Math.min(iscr + Mx.text_w, Mx.width - 5 * Mx.text_w);\n            }\n        } else {\n            if (flags.inside) {\n                itext = Math.max(0, iscl + Mx.text_w);\n            } else {\n                itext = Math.max(0, Math.floor(iscl - (Mx.l - 0.5) * Mx.text_w));\n            }\n        }\n        jtext = 0.4 * Mx.text_h;\n        if (stk1.ymin !== stk1.ymax) {\n            fact = -height / (stk1.ymax - stk1.ymin);\n        } else {\n            fact = -height / 1.0;\n        }\n        if (_ymult !== 0) {\n            fmul = 1.0 / _ymult;\n        } else {\n            fmul = 1;\n        }\n        var ytic, ytic1, endtic;\n        if (yTIC.dtic === 0) {\n            ytic = stk1.ymax - ytic1 + 1.0;\n        }\n        if (stk1.ymax >= stk1.ymin) {\n            endtic = function(val) {\n                return (val <= stk1.ymax);\n            };\n        } else {\n            endtic = function(val) {\n                return (val >= stk1.ymax);\n            };\n        }\n        var ylbl;\n        for (var y = yTIC.dtic1; endtic(y); y = y + yTIC.dtic) {\n            i = iscb + Math.round(fact * (y - stk1.ymin)) - 2;\n            if (i > iscb) {\n                continue;\n            }\n            if (flags.grid && flags.grid !== \"x\") {\n                if (!flags.gridStyle) {\n                    flags.gridStyle = {\n                        mode: \"dashed\",\n                        on: 1,\n                        off: 3\n                    };\n                }\n                mx.textline(Mx, iscl, i, iscr, i, flags.gridStyle);\n            } else {\n                mx.textline(Mx, iscl - 2, i, iscl + 2, i);\n                mx.textline(Mx, iscr - 2, i, iscr + 2, i);\n            }\n            if (yticlabels) {\n                // TODO\n                if (flags.inside &&\n                    ((i < isct + Mx.text_h) || (i > iscb - Mx.text_h * 2))) {\n                    // out of range for inside labels\n                } else if (flags.ytimecode) {\n                    ylbl = m.sec2tod(y); // don't trim zeros because we use them later\n                    // y-axis timecodes\n                    // use three lines\n                    // YYYY:MM:DD\n                    // HH:MM\n                    // SS.factional\n                    var k = i + jtext - Mx.text_h;\n                    var sep = ylbl.indexOf(\"::\");\n                    if (sep !== -1) {\n                        if (k > isct && k < iscb) {\n                            // it the label has space, draw it\n                            mx.text(Mx, itext, k, ylbl.substring(0, sep));\n                        }\n                        sep += 1; // adjust for the next stage\n                    }\n                    // The draw the primary portion\n                    mx.text(Mx, itext, Math.min(iscb, i + jtext), ylbl.substring(sep + 1, sep + 6));\n                    // Finally the sections portion if it fits on the screen\n                    // and is necessary\n                    k = i + jtext + Mx.text_h;\n                    if ((k > isct && k < iscb)) {\n                        if (ylbl.substring(sep + 7, sep + 9) !== \"00\") {\n                            // add the .00 which is safe to do unconditionally because\n                            // we truncate on the following line and we know that\n                            // sec2tod either returns no decimal places or 6 decimal places\n                            ylbl = ylbl + \".00\";\n                            mx.text(Mx, itext, k, ylbl.substring(sep + 7, sep + 12));\n                        }\n                    }\n                } else {\n                    ylbl = mx.format_f(y * fmul, 12, 6);\n                    ylbl = trimlabel(ylbl, flags.inside);\n                    mx.text(Mx, itext, Math.min(iscb, i + jtext), ylbl);\n                }\n            }\n        }\n    };\n\n    /**\n     * @param x\n     * @param y\n     * @param rect_x\n     * @param rect_y\n     * @param rect_width\n     * @param rect_height\n     * @private\n     */\n    mx.inrect = function(x, y, rect_x, rect_y, rect_width, rect_height) {\n        return (x >= rect_x && x <= rect_x + rect_width &&\n            y >= rect_y && y <= rect_y + rect_height);\n    };\n    /**\n     * @private\n     */\n    var MENU_CONSTANTS = {\n        GBorder: 3,\n        sidelab: 0,\n        toplab: 1,\n        n_show: 0\n    };\n\n    /**\n     * @method _menu_redraw\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    function _menu_redraw(Mx, menu) {\n        if (menu.animationFrameHandle) {\n            return;\n        }\n        // Use the current mouse position and the size of the plot to determine available space\n        //var mouse_pos = Mx.ypos; TODO: Use mouse position\n        var plot_height = Mx.canvas.height;\n        var buffer_sz = 35; // estimate of how much of the canvas is spacing around plot\n        var avail_space = plot_height - 2 * buffer_sz;\n\n        // Calculate how many menu items can fit inside that space\n        var menu_item_height = Mx.text_h * 1.5;\n        var n_items = Math.floor(avail_space / menu_item_height);\n        if (n_items >= menu.items.length) {\n            MENU_CONSTANTS.n_show = menu.items.length;\n        } else {\n            MENU_CONSTANTS.n_show = n_items;\n        }\n\n\n        menu.animationFrameHandle = requestAnimFrame(mx.withWidgetLayer(Mx, function() {\n            mx.erase_window(Mx);\n\n            menu.animationFrameHandle = undefined;\n            var yb = Mx.text_h * 1.5;\n            menu.x = Math.max(menu.x, 0);\n            menu.y = Math.max(menu.y, 0);\n            menu.x = Math.min(menu.x, Mx.width - menu.w);\n            menu.y = Math.min(menu.y, Mx.height - menu.h);\n\n            var xcc = menu.x + MENU_CONSTANTS.GBorder + Math.max(0, MENU_CONSTANTS.sidelab);\n            var ycc = menu.y + MENU_CONSTANTS.GBorder + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);\n\n            var xss = menu.w - 2 * MENU_CONSTANTS.GBorder - Math.abs(MENU_CONSTANTS.sidelab);\n            var yss = menu.h - 2 * MENU_CONSTANTS.GBorder - MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);\n\n            mx.widgetbox(Mx, menu.x, menu.y, menu.w, menu.h, xcc, ycc, xss, yss, menu.title);\n\n            //ctx.fillStyle = xwlo;\n            //ctx.fillRect(xcc, ycc, xss, yss);\n\n            var ctx = Mx.wid_canvas.getContext(\"2d\");\n            ctx.lineWidth = 1;\n\n            ctx.strokeStyle = Mx.xwbs; // xwbs\n            ctx.beginPath();\n            ctx.moveTo(xcc, ycc - 4 + 0.5);\n            ctx.lineTo(xcc + xss - 1, ycc - 4 + 0.5);\n            ctx.stroke();\n\n            ctx.strokeStyle = Mx.xwts; // xwts\n            ctx.beginPath();\n            ctx.moveTo(xcc, ycc - 3 + 0.5);\n            ctx.lineTo(xcc + xss - 1, ycc - 3 + 0.5);\n            ctx.stroke();\n\n            var i_begin = menu.queue[0];\n            var i_end = menu.queue[MENU_CONSTANTS.n_show - 1];\n            if (i_end === 0) {\n                // now we are starting over\n                for (var q = 0; q < MENU_CONSTANTS.n_show; q++) {\n                    menu.queue[q] = q;\n                }\n                i_begin = menu.queue[0];\n                i_end = menu.queue[MENU_CONSTANTS.n_show - 1];\n            }\n            var menu_counter = 0;\n            for (var i = i_begin; i <= i_end; i++) {\n                var item = menu.items[i];\n                var y = ycc + yb * menu_counter;\n                menu_counter = menu_counter + 1;\n\n                if (item.style === \"separator\") {\n                    ctx.fillStyle = Mx.xwbs;\n                    ctx.fillRect(xcc, y, xss, yb);\n\n                    ctx.beginPath();\n                    ctx.moveTo(xcc, y + 0.5);\n                    ctx.lineTo(xcc + xss, y + 0.5);\n                    ctx.stroke();\n\n                    ctx.textBaseline = \"middle\";\n                    ctx.textAlign = \"left\";\n                    ctx.fillStyle = Mx.xwfg;\n                    ctx.fillText(\" \" + item.text + \" \", xcc + Mx.text_w * 2, y + yb / 2);\n                } else {\n                    if (mx.LEGACY_RENDER) {\n                        ctx.fillStyle = Mx.xwlo;\n                        ctx.fillRect(xcc, y, xss, yb);\n                        ctx.beginPath();\n                        ctx.moveTo(xcc, y + 0.5);\n                        ctx.lineTo(xcc + xss, y + 0.5);\n                        ctx.stroke();\n                        if (item.selected) {\n                            mx.shadowbox(Mx, xcc - 1, y, xss + 2, yb, 1, 2, \"\", 0.75);\n                        }\n                    } else {\n                        ctx.save();\n                        ctx.globalAlpha = 0.75;\n                        if (item.selected) {\n                            ctx.fillStyle = Mx.xwts;\n                        } else {\n                            ctx.fillStyle = Mx.xwlo;\n                        }\n                        ctx.fillRect(xcc, y, xss, yb);\n                        ctx.restore();\n                        ctx.strokeStyle = Mx.bg;\n                        ctx.beginPath();\n                        ctx.moveTo(xcc, y + 0.5);\n                        ctx.lineTo(xcc + xss, y + 0.5);\n                        ctx.stroke();\n                    }\n\n                    ctx.textBaseline = \"middle\";\n                    ctx.textAlign = \"left\";\n                    ctx.fillStyle = Mx.xwfg;\n                    if (item.style === \"checkbox\") {\n                        ctx.fillText(\" \" + item.text + \" \", xcc + Mx.text_w * 2, y + yb / 2);\n                        ctx.strokeStyle = Mx.xwfg;\n                        ctx.strokeRect(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2), Mx.text_w, Mx.text_w);\n                        if (item.checked) {\n                            ctx.beginPath();\n                            ctx.moveTo(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2));\n                            ctx.lineTo(xcc + 1 + Mx.text_w + Mx.text_w, y + ((yb - Mx.text_w) / 2) + Mx.text_w);\n                            ctx.stroke();\n                            ctx.beginPath();\n                            ctx.moveTo(xcc + 1 + Mx.text_w + Mx.text_w, y + ((yb - Mx.text_w) / 2));\n                            ctx.lineTo(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2) + Mx.text_w);\n                            ctx.stroke();\n                        }\n                    } else {\n                        ctx.fillText(\" \" + item.text + \" \", xcc, y + yb / 2);\n\n                        // draw the triangle\n                        if (item.checked) {\n                            ctx.beginPath();\n                            ctx.moveTo(xcc + 1, y + Mx.text_h / 4);\n                            ctx.lineTo(xcc + 1 + Mx.text_w - 2, y + Mx.text_h / 4 + Mx.text_h / 2);\n                            ctx.lineTo(xcc + 1, y + Mx.text_h / 4 + Mx.text_h);\n                            ctx.lineTo(xcc + 1, y + Mx.text_h / 4);\n                            ctx.fill();\n                        }\n                    }\n                }\n            }\n\n\n        }));\n    }\n\n    /**\n     * @method _menu_takeaction\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    function _menu_takeaction(Mx, menu) {\n        mx.onWidgetLayer(Mx, function() {\n            mx.erase_window(Mx);\n        });\n        Mx.menu = undefined;\n        Mx.widget = null;\n\n        for (var i = 0; i < menu.items.length; i++) {\n            var item = menu.items[i];\n            if (item.selected) {\n                if (item.handler) {\n                    item.handler();\n                } else if (item.menu) {\n                    var newmenu = item.menu;\n                    if (typeof item.menu === 'function') {\n                        newmenu = item.menu();\n                    }\n                    newmenu.finalize = menu.finalize;\n                    mx.menu(Mx, newmenu);\n                }\n                break;\n            }\n        }\n        if ((!Mx.menu) && (menu.finalize)) {\n            menu.finalize();\n        }\n    }\n\n    /**\n     * @method _menu_dismiss\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    function _menu_dismiss(Mx, menu) {\n        mx.onWidgetLayer(Mx, function() {\n            mx.erase_window(Mx);\n        });\n        Mx.menu = undefined;\n        Mx.widget = null;\n\n        if ((!Mx.menu) && (menu.finalize)) {\n            menu.finalize();\n        }\n    }\n\n    /**\n     * @method _menu_callback\n     * @param Mx\n     * @param menu\n     * @param event\n     * @private\n     */\n    function _menu_callback(Mx, menu, event) {\n        // Keep track of whats visible currently\n        var i_begin = menu.queue[0];\n        var i_end = menu.queue[MENU_CONSTANTS.n_show - 1];\n        if (event === undefined) {\n            // no event, just refresh the menu\n            _menu_redraw(Mx, menu);\n        } else if (event.type === \"mousemove\") {\n            // Update position\n            if (menu.drag_x !== undefined && menu.drag_y !== undefined && Math.abs(Mx.xpos - menu.drag_x) > 2 && Math.abs(Mx.ypos - menu.drag_y) > 2) {\n                menu.x += Mx.xpos - menu.drag_x;\n                menu.y += Mx.ypos - menu.drag_y;\n                menu.drag_x = Mx.xpos;\n                menu.drag_y = Mx.ypos;\n            }\n\n            // All of these variables suck and are common in other places...refactoring is necessary\n            var xcc = menu.x + MENU_CONSTANTS.GBorder + Math.max(0, MENU_CONSTANTS.sidelab);\n            var xss = menu.w - 2 * MENU_CONSTANTS.GBorder - Math.abs(MENU_CONSTANTS.sidelab);\n            var yb = Mx.text_h * 1.5;\n            var ycc = menu.y + MENU_CONSTANTS.GBorder + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);\n\n            for (var i = i_begin; i <= i_end; i++) {\n                var y = ycc + yb * i;\n                var item = menu.items[i];\n                item.selected = false;\n                if (mx.inrect(Mx.xpos, Mx.ypos, xcc, y, xss, yb)) {\n                    item.selected = true;\n                }\n            }\n            _menu_redraw(Mx, menu);\n        } else if (event.type === \"mouseup\") {\n            // No longer dragging menu\n            if (event.which === 1) {\n                if ((menu.drag_x !== undefined) && (menu.drag_y !== undefined)) {\n                    menu.drag_x = undefined;\n                    menu.drag_y = undefined;\n                } else {\n                    _menu_takeaction(Mx, menu);\n                }\n            } else if (event.which === 3) {\n                _menu_dismiss(Mx, menu);\n            }\n        } else if (event.type === \"mousedown\") {\n            event.preventDefault();\n            if (event.which === 1) {\n                if (Mx.xpos > menu.x && Mx.xpos < (menu.x + menu.w) && Mx.ypos > menu.y && Mx.ypos < (menu.y + Mx.text_h * 1.5)) {\n                    menu.drag_x = Mx.xpos;\n                    menu.drag_y = Mx.ypos;\n                }\n            } else if (event.which === 2) {\n                _menu_takeaction(Mx, menu);\n            }\n        } else if (event.type === \"keydown\") {\n            // Remember that keydown triggers periodically while a key is held\n            if (Mx.menu) {\n                var menu = Mx.menu;\n                event.preventDefault();\n                var keyCode = common.getKeyCode(event);\n                if (keyCode === 13) { // enter\n                    _menu_takeaction(Mx, menu);\n                } else if (keyCode === 38) { // up arrow\n                    for (var i = i_begin; i < i_end; i++) {\n                        var item = menu.items[i];\n                        if (item.selected) {\n                            item.selected = false;\n                            if (menu.items[i - 1] !== undefined) {\n                                menu.items[i - 1].selected = true;\n                            }\n                            break;\n                        } else if (i === i_begin && i_begin !== 0) {\n                            // we are at the end of the list and nothing was selected so pick the last element\n                            //item.selected = true;\n                            menu.queue.pop();\n                            menu.queue.unshift(i_begin - 1);\n                            _menu_redraw(Mx, menu);\n                            menu.items[i_end - 1].selected = true;\n\n                        } else if (i_begin === 0 && menu.items[i_begin].selected === true) {\n                            _menu_redraw(Mx, menu);\n                            menu.items[0].selected = true;\n                        }\n                    }\n                    _menu_redraw(Mx, menu);\n                } else if (keyCode === 40) { // down arrow\n                    for (var i = i_begin; i < i_end; i++) {\n                        var item = menu.items[i];\n                        if (item.selected) {\n                            item.selected = false;\n                            if (menu.items[i + 1] !== undefined) {\n                                menu.items[i + 1].selected = true;\n                            }\n                            break;\n                        } else if (i === (i_end - 1)) {\n                            // nothing was selected so select the top\n                            var next_item = i_end + 1;\n\n                            if (i_end + 1 === menu.items.length) {\n                                next_item = 0;\n                            }\n\n                            menu.queue.shift();\n                            menu.queue.push(next_item);\n                            menu.items[i_end].selected = false;\n                            menu.items[next_item].selected = true;\n                            _menu_redraw(Mx, menu);\n                        }\n                    }\n                    _menu_redraw(Mx, menu);\n                } else if ((keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 90)) {\n                    var inp = String.fromCharCode(keyCode).toUpperCase();\n\n                    if (menu.keypresses === undefined) {\n                        menu.keypresses = inp;\n                    } else {\n                        menu.keypresses = menu.keypresses + inp;\n                    }\n\n                    var matches = 0;\n                    for (var i = 0; i < menu.items.length; i++) {\n                        var item = menu.items[i];\n                        item.selected = false;\n                        if (!item.text) {\n                            continue;\n                        }\n\n                        if (item.text.toUpperCase().indexOf(menu.keypresses) === 0) {\n                            if (matches === 0) {\n                                item.selected = true;\n                            }\n                            matches++;\n                        }\n                    }\n\n                    if (matches === 0) {\n                        menu.keypresses = undefined;\n                        _menu_redraw(Mx, menu);\n                    } else if (matches === 1) {\n                        _menu_takeaction(Mx, menu);\n                    } else {\n                        _menu_redraw(Mx, menu);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    mx.menu = function(Mx, menu) {\n        var yb = Mx.text_h * 1.5;\n        //MENU_CONSTANTS.n_show = menu.items.length;\n\n        var plot_height = Mx.canvas.height;\n        var buffer_sz = 35; // estimate of how much of the canvas is spacing around plot\n        var avail_space = plot_height - 2 * buffer_sz;\n        // Calculate how many menu items can fit inside that space\n        var menu_item_height = Mx.text_h * 1.5;\n        var n_items = Math.floor(avail_space / menu_item_height);\n        if (n_items >= menu.items.length) {\n            MENU_CONSTANTS.n_show = menu.items.length;\n        } else {\n            MENU_CONSTANTS.n_show = n_items;\n        }\n\n        if (menu) {\n            if (!Mx.widget) {\n                menu.x = Mx.xpos;\n                menu.y = Mx.ypos;\n                menu.val = 0;\n\n                menu.h = MENU_CONSTANTS.GBorder * 2 + yb * MENU_CONSTANTS.n_show + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder) - 1;\n                menu.y = menu.y - ((MENU_CONSTANTS.toplab + (Math.max(1, menu.val)) - 0.5) * yb + (1 + MENU_CONSTANTS.toplab) * MENU_CONSTANTS.GBorder) + 1;\n\n                var xb = menu.title.length;\n                var yadj = 0;\n                for (var i = 0; i < menu.items.length; i++) {\n                    var item = menu.items[i];\n                    xb = Math.max(xb, item.text.length);\n                    if (item.style === \"checkbox\") {\n                        xb += 2;\n                    }\n                    if (item.style === \"separator\") {\n                        xb += 2;\n                    }\n                    if (item.checked && item.style !== \"checkbox\") {\n                        yadj = yb * i;\n                    }\n                }\n\n                menu.queue = [];\n\n                for (var q = 0; q < MENU_CONSTANTS.n_show; q++) {\n                    menu.queue.push(q);\n\n                }\n\n                menu.y = menu.y - yadj;\n                xb += 2;\n                xb = xb * Mx.text_w;\n\n                menu.w = MENU_CONSTANTS.GBorder * 2 + Math.abs(MENU_CONSTANTS.sidelab) + xb - 1;\n                menu.x = menu.x - menu.w / 2;\n\n                Mx.menu = menu;\n\n                Mx.widget = {\n                    type: \"MENU\",\n                    callback: function(event) {\n                        _menu_callback(Mx, menu, event);\n                    }\n                };\n            }\n            _menu_redraw(Mx, menu);\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param inx\n     * @param iny\n     * @param inw\n     * @param inh\n     * @param name\n     * @private\n     */\n    mx.widgetbox = function(Mx, x, y, w, h, inx, iny, inw, inh, name) {\n        var GBorder = 3;\n        mx.shadowbox(Mx, x, y, w, h, 1, 2, \"\", 0.75);\n        if (name) {\n            var length = name.length;\n            length = Math.min(length, w / Mx.text_w);\n            length = Math.max(length, 1);\n            var xt = x + (w - length * Mx.text_w) / 2;\n            y += GBorder;\n            var yt = y + (iny - y + 0.7 * Mx.text_h) / 2;\n\n            mx.text(Mx, xt, yt, name, Mx.xwfg);\n        }\n        if (inw > 0 && inh > 0) {\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            if (mx.LEGACY_RENDER) {\n                ctx.fillStyle = Mx.bg;\n                ctx.fillRect(inx, iny, inw, inh);\n            } else {\n                ctx.save();\n                ctx.globalAlpha = 0.1;\n                ctx.fillStyle = Mx.bg;\n                ctx.fillRect(inx, iny, inw, inh);\n                ctx.restore();\n            }\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param lbl\n     * @param color\n     * @private\n     */\n    //\n    // ~= MX$TEXT\n    //\n    mx.text = function(Mx, x, y, lbl, color) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        x = Math.max(0, x);\n        y = Math.max(0, y);\n        if ((x < 0) || (y < 0)) {\n            throw \"On No!\";\n        }\n        ctx.textBaseline = \"bottom\";\n        ctx.textAlign = \"left\";\n        ctx.font = Mx.font.font;\n        if (color === undefined) {\n            ctx.fillStyle = Mx.fg;\n        } else {\n            ctx.fillStyle = color;\n        }\n\n        ctx.fillText(lbl, x, y);\n    };\n\n    /**\n     * @method clipt\n     * @param denom\n     * @param num\n     * @param o\n     * @private\n     */\n    // ~= glibf1.for CLIPT\n    function clipt(denom, num, o) {\n        var accept = true;\n        var t;\n\n        t = num / denom;\n        if (denom > 0) {\n            if (t > o.tL) {\n                accept = false;\n            } else if (t > o.tE) {\n                o.tE = t;\n            }\n        } else if (denom < 0) {\n            if (t < o.tE) {\n                accept = false;\n            } else if (t < o.tL) {\n                o.tL = t;\n            }\n        } else {\n            if (num > 0) {\n                accept = false;\n            }\n        }\n\n        return accept;\n    }\n\n    /**\n     * Method which draws a line in a graphics context.\n     * In the graphics context provided, draws a line.\n     * Mimics XLib's XDrawLines method in at least the basic functionality.\n     * @method draw_line\n     * @param ctx\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     * @param style\n     * @param color\n     * @param width\n     * @private\n     */\n    function draw_line(ctx, x1, y1, x2, y2, style, color, width) {\n        // For odd width lines (i.e. 1,3,5...) if you draw right\n        // on the pixel boundry the canvas will actually draw a slightly\n        // grey line 2 px wide.  You have to add .5 to get what you want.\n\n        // Handle boundary cases - instead of throwing an exception, just bound\n        // the value to 0\n        if (x1 < 0) {\n            x1 = 0;\n        }\n        if (y1 < 0) {\n            y1 = 0;\n        }\n        if (x2 < 0) {\n            x2 = 0;\n        }\n        if (y2 < 0) {\n            y2 = 0;\n        }\n\n        if (width) {\n            ctx.lineWidth = width;\n        }\n        if (color) {\n            ctx.strokeStyle = color;\n        }\n\n        if (ctx.lineWidth % 2 === 1) {\n            if (x1 === x2) {\n                x1 = Math.floor(x1) + 0.5;\n                x2 = x1;\n            }\n            if (y1 === y2) {\n                y1 = Math.floor(y1) + 0.5;\n                y2 = y1;\n            }\n        }\n\n        if (!style || !style.mode) {\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.stroke();\n            ctx.beginPath();\n        } else if (style.mode === \"dashed\") {\n            var dash_supported = common.dashOn(ctx, style.on, style.off);\n            if (dash_supported) {\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n                common.dashOff(ctx);\n                ctx.beginPath();\n            } else {\n                // Fallback that only supports vertical/horizontal\n                ctx.beginPath();\n                if (y1 === y2) {\n                    var x = Math.min(x1, x2);\n                    x2 = Math.max(x1, x2);\n                    while (x < x2) {\n                        ctx.moveTo(x, y1);\n                        ctx.lineTo(x + style.on, y1);\n                        ctx.stroke();\n                        x += (style.on + style.off);\n                    }\n                } else if (x1 === x2) {\n                    // vertical line\n                    var y = Math.min(y1, y2);\n                    y2 = Math.max(y1, y2);\n                    while (y < y2) {\n                        ctx.moveTo(x1, y);\n                        ctx.lineTo(x1, y + style.on);\n                        ctx.stroke();\n                        y += (style.on + style.off);\n                    }\n                } else {\n                    throw \"Only horizontal or vertical dashed lines are supported\";\n                }\n                ctx.beginPath();\n            }\n        } else if (style.mode === \"xor\") {\n            if (typeof Uint8ClampedArray === 'undefined') {\n                // we don't have typed arrays, so canvas getImageData operations\n                // will be very slow, so use color instead\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n                ctx.beginPath();\n            } else {\n                // currently xor-style is only supported for horizontal or vertical lines\n                var w = 0;\n                var h = 0;\n                if (y1 === y2) {\n                    w = Math.abs(x2 - x1);\n                    h = width;\n                    x1 = Math.min(x1, x2);\n                } else if (x1 === x2) {\n                    w = width;\n                    h = Math.abs(y2 - y1);\n                    y1 = Math.min(y1, y2);\n                } else {\n                    throw \"Only horizontal and vertical lines can be drawn with XOR\";\n                }\n\n                if ((w === 0) || (h === 0)) {\n                    return;\n                }\n\n                x1 = Math.floor(x1);\n                y1 = Math.floor(y1);\n                var imgd = ctx.getImageData(x1, y1, w, h);\n                var pix = imgd.data;\n                // Loop over each pixel and invert the color.\n                for (var i = 0, n = pix.length; i < n; i += 4) {\n                    pix[i] = 255 - pix[i]; // red\n                    pix[i + 1] = 255 - pix[i + 1]; // green\n                    pix[i + 2] = 255 - pix[i + 2]; // blue\n                    pix[i + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x1, y1);\n                ctx.clearRect(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * Method which draws a polygon in a graphics context.\n     * In the graphics context provided, draws a polygon.\n     * Mimics XLib's XDrawLines method in at least the basic functionality.\n     * @method draw_poly\n     * @param ctx - The graphics context to draw in\n     * @param pix - Defined as [\\{\"x\": xval, y: \"y\": yval\\}, \\{\"x\": xval, \"y\":yval\\}...].\n     *              xval and yval represent their respective coordinate values in the tuples\n     *\t\t\t\tnumber of points in the structure can be retrieved via pix.length.\n     * @param color - The color of the rectangle\n     * @param width - The line width to set.\n     * @private\n     */\n    function draw_poly(ctx, pix, color, width) { // TODO Should this be a public method?\n        start_poly(ctx, pix, width);\n\n        if (color) {\n            ctx.strokeStyle = color;\n        }\n\n        ctx.stroke(); // draw the shape outlined in the path\n        ctx.closePath();\n    }\n\n    /**\n     * Method which draws a filled polygon in a graphics context.\n     * In the graphics context provided draws a polygon, then fills it.\n     * Mimics XLib's XFillPolygon method in at least the basic functionality.\n     * Some differences between this and Xlib's method are:\n     *  -no way to specify convex/non-convex\n     *  -no way to specify CoordModeOrigin\n     *  -no need to specify the number of points to draw (plots all points in pix)\n     * @method fill_poly\n     * @param ctx - The graphics context to draw in\n     * @param pix - Defined as [\\{\"x\": xval, y: \"y\": yval\\}, \\{\"x\": xval, \"y\":yval\\}...].\n     *              xval and yval represent their respective coordinate values in the tuples\n     *\t\t\t\tnumber of points in the structure can be retrieved via pix.length.\n     * @param lineColor - The line color of the polygon\n     * @param fillColor - The fill color of the polygon\n     * @param lineWidth - The line width to set\n     * @private\n     */\n    function fill_poly(ctx, pix, lineColor, fillColor, width) { // TODO Should this be a public method?\n        start_poly(ctx, pix, width);\n\n        if (lineColor) {\n            ctx.strokeStyle = lineColor;\n        }\n        if (fillColor) {\n            ctx.fillStyle = fillColor;\n        }\n\n        ctx.fill(); // fill in the shape only, no outline drawn\n        ctx.closePath();\n    }\n\n    /**\n     * Helper method which starts drawing a polygon in a graphics context.\n     * In the graphics context provided, begins a path at the first point in pix,\n     * then draws lines from each point in pix to the next. It also sets the width\n     * of the line.\n     * @method start_poly\n     * @param ctx - The graphics context to draw in\n     * @param pix - Defined as [\\{\"x\": xval, y: \"y\": yval\\}, \\{\"x\": xval, \"y\":yval\\}...].\n     *              xval and yval represent their respective coordinate values in the tuples\n     *\t\t\t\tnumber of points in the structure can be retrieved via pix.length.\n     * @param width - The line width to set.\n     * @private\n     */\n    function start_poly(ctx, pix, width) {\n        if (pix.length < 1) {\n            return;\n        }\n\n        var x = pix[0].x;\n        var y = pix[0].y;\n\n        if (width) {\n            ctx.lineWidth = width;\n        } else {\n            ctx.lineWidth = 1; // Default\n        }\n\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n\n        for (var i = 0; i < pix.length; i++) {\n            x = pix[i].x;\n            y = pix[i].y;\n            ctx.lineTo(x, y);\n        }\n    }\n\n    /**\n     * Method which draws a rectangle (hollowed) in a graphics context.\n     * In the graphics context provided, draws a hollow rectangle.\n     * Mimics XLib's XDrawRectangle method in at least the basic functionality.\n     * @method draw_rectangle\n     * @param ctx - The graphics context to draw in\n     * @param x - The x coordinate\n     * @param y - The y coordinate\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param color - The color of the rectangle\n     * @param lineWidth - The line width to set.\n     * @private\n     */\n    function draw_rectangle(ctx, x, y, width, height, color, lineWidth) { // TODO Should this be a public method?\n        if (lineWidth) {\n            ctx.lineWidth = lineWidth;\n        }\n        if (color) {\n            ctx.strokeStyle = color;\n        }\n\n        ctx.strokeRect(x, y, width, height);\n    }\n\n    /**\n     * Method which draws a rectangle (filled) in a graphics context.\n     * In the graphics context provided, draws a filled rectangle.\n     * Mimics XLib's XFillRectangle method in at least the basic functionality.\n     * @method fill_rectangle\n     * @param ctx - The graphics context to draw in\n     * @param x - The x coordinate\n     * @param y - The y coordinate\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param fillColor - The fill color of the rectangle\n     * @param strokeColor - The line color of the rectangle\n     * @param lineWidth - The line width to set.\n     * @private\n     */\n    function fill_rectangle(ctx, x, y, width, height, fillColor, strokeColor, lineWidth) { // TODO Should this be a public method?\n        if (lineWidth) {\n            ctx.lineWidth = lineWidth;\n        }\n        if (strokeColor) {\n            ctx.strokeStyle = strokeColor;\n        }\n        if (fillColor) {\n            ctx.fillStyle = fillColor;\n        }\n\n        ctx.fillRect(x, y, width, height);\n    }\n\n    /**\n     * @method pc2px\n     * @param perc\n     * @private\n     */\n    function pc2px(perc) {\n        return Math.floor(Math.round(255 * (perc / 100)));\n    }\n\n    /**\n     * @method to_rgb\n     * @param red\n     * @param green\n     * @param blue\n     * @private\n     */\n    function to_rgb(red, green, blue) {\n        return \"rgb(\" + Math.round(red) + \", \" + Math.round(green) + \", \" + Math.round(blue) + \")\";\n    }\n\n    /**\n     *\n     * Instead of dealing with color tables and stuff, all we really need\n     * is the ability to on-the-fly generate a color from the map\n     * @param Mx\n     * @param map\n     * @param z\n     * @private\n     */\n    mx.getcolor = function(Mx, map, z) {\n        var iz = 0;\n        for (; iz < 6 && map[iz + 1].pos === 0; iz++) {}\n\n        while (z > map[iz].pos && iz < 6) {\n            iz++;\n        }\n        if ((iz === 0) || (z >= map[iz].pos)) {\n            // above, below, or directly on boundry\n            return to_rgb(\n                pc2px(map[iz].red),\n                pc2px(map[iz].green),\n                pc2px(map[iz].blue));\n        } else {\n            // interpolation my dear watson\n            var pf = (z - map[iz - 1].pos) / (map[iz].pos - map[iz - 1].pos);\n            var zf = pc2px(pf * 100);\n            var zf1 = 255 - zf;\n            return to_rgb(\n                (zf * (map[iz].red / 100) + zf1 * (map[iz - 1].red / 100)), (zf * (map[iz].green / 100) + zf1 * (map[iz - 1].green / 100)), (zf * (map[iz].blue / 100) + zf1 * (map[iz - 1].blue / 100)));\n        }\n    };\n\n    /**\n     * @method trimlabel\n     * @param lbl\n     * @param inside\n     * @private\n     */\n    // ~= glibf1.for TRIMLABEL\n    function trimlabel(lbl, inside) {\n        var k;\n        var j;\n        if (lbl.substring(5, 8) === \".000000\") { // this line seems to always evaluate to false\n            k = 4;\n        } else {\n            k = lbl.length - 1;\n            while (lbl[k] === \"0\") {\n                k = k - 1;\n            }\n        }\n        j = 0;\n        while ((lbl[j] === \" \") && ((k - j + 1 > 5) || inside)) {\n            j = j + 1;\n        }\n        var res = lbl.substring(j, k + 1);\n        if (res.indexOf(\".\") === -1) {\n            res += \".\";\n        }\n        return res;\n    }\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.redraw_warpbox = function(Mx) {\n        if (Mx.warpbox) {\n            if (Mx._animationFrameHandle) {\n                cancelAnimFrame(Mx._animationFrameHandle);\n            }\n            Mx._animationFrameHandle = requestAnimFrame(function() {\n                display_warpbox(Mx);\n            });\n        }\n    };\n\n    /**\n     * @method display_warpbox\n     * @param Mx\n     * @private\n     */\n    function display_warpbox(Mx) {\n        Mx._animationFrameHandle = undefined;\n        var warpbox = Mx.warpbox;\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!warpbox) {\n            return;\n        }\n\n        if (((Mx.xpos >= warpbox.xmin) && (Mx.xpos <= warpbox.xmax)) &&\n            ((Mx.ypos >= warpbox.ymin) && (Mx.ypos <= warpbox.ymax))) {\n\n            // Update the position\n            warpbox.xl = Mx.xpos;\n            warpbox.yl = Mx.ypos;\n\n            // Draw the current box\n            var x = Math.min(warpbox.xo, warpbox.xl);\n            var y = Math.min(warpbox.yo, warpbox.yl);\n            var w = Math.abs(warpbox.xl - warpbox.xo);\n            var h = Math.abs(warpbox.yl - warpbox.yo);\n\n            if ((w === 0) || (h === 0)) {\n                // Nothing to draw\n                return;\n            }\n\n            if (warpbox.mode === \"vertical\") {\n                x = Mx.l;\n                w = Mx.r - Mx.l;\n            } else if (warpbox.mode === \"horizontal\") {\n                y = Mx.t;\n                h = Mx.b - Mx.t;\n            } // else box\n\n            mx.onWidgetLayer(Mx, function() {\n                mx.erase_window(Mx);\n                mx.draw_box(Mx, \"xor\", x, y, w, h, warpbox.style.opacity, warpbox.style.fill_color);\n            });\n        }\n\n    }\n\n    /**\n     * @method log10\n     * @param val\n     * @private\n     */\n    function log10(val) {\n        return Math.log(val) / Math.log(10);\n    }\n\n\n    /**\n     * Attempts to format a number in the same manner\n     * as the FORTRAN format code 1p1g16.9\n     * 1p1g16.9\n     * 16 character fields\n     * 9 for decimals\n     * 3 for exponent (E)\n     * 1 for sign\n     * 1 for starting 0\n     * 1 for decimal point\n     * 1 for blank space\n     *\n     * The E format code is used for scientific (exponential) notation.\n     * The value is rounded to d decimal positions and right-justified\n     * into an external field that is w characters wide. The value of w\n     * must be large enough to include a minus sign when necessary, at least\n     * one digit to the left of the decimal point, the decimal point,\n     * d digits to the right of the decimal point, a plus or minus sign for\n     * the exponent, the character \"e\" or \"E\", and at least two characters for the exponent.\n     *\n     * The G format code uses the F output style when reasonable and\n     * E for other values, but displays exactly d significant digits\n     * rather than d digits following the decimal point.\n     *\n     * @param num\n     * @param w\n     * @param d\n     * @param leading_nonzer\n     * @private\n     */\n    mx.format_g = function(num, w, d, leading_nonzero) {\n        var w = Math.min(w, d + 7);\n        var f = Math.abs(num).toString();\n\n        var decloc = f.indexOf(\".\");\n        // If there is no decimal point, add one at the end.\n        if (decloc === -1) {\n            f = f + \".\";\n            decloc = f.length;\n        }\n\n        var exp = 0;\n        var eloc = f.indexOf(\"e\");\n        // If there is already an 'e' in the string parse it out\n        if (eloc !== -1) {\n            exp = parseInt(f.slice(eloc + 1, f.length), 10);\n            f = f.slice(0, eloc);\n        }\n\n        // Add zero's to the end if necessary\n        var dz = Math.min(d - (f.length - decloc) + 1, d);\n        for (var i = 0; i < dz; i++) {\n            f = f + \"0\";\n        }\n\n        if (num !== 0) {\n            if (Math.abs(num) < 1.0) {\n                if (f.slice(0, 2) === \"0.\") {\n                    // Shift to the left until the first number is non-zero\n                    for (var i = 2; i < f.length; i++) {\n                        if (f[i] === \"0\") {\n                            exp -= 1;\n                        } else {\n                            f = \"0.\" + f.slice(i, i + d);\n                            break;\n                        }\n                    }\n                } else {\n                    f = f.slice(0, d + 2);\n                }\n            } else if (decloc > d) {\n                var exp = Math.max(0, decloc - 1);\n                f = f[0] + \".\" + f.slice(1, d + 1);\n            } else {\n                f = f.slice(0, d + 2);\n            }\n        }\n\n        if (exp === 0) {\n            f = f + \"    \";\n        } else {\n            var e = mx.pad(Math.abs(exp).toString(), 2, \"0\");\n            if (exp < 0) {\n                f = f + \"E-\" + e;\n            } else {\n                f = f + \"E+\" + e;\n            }\n        }\n\n        if (num < 0) {\n            f = \"-\" + f;\n        } else {\n            f = \" \" + f;\n        }\n        return f;\n    };\n\n    /**\n     *\n     * Behave like fortran format code\n     * fs.d\n     * @param num the number to format\n     * @param s the width of digits\n     * @param d number of digits after the decimal\n     * @private\n     */\n    mx.format_f = function(num, s, d) {\n        d = Math.max(Math.min(d, 20), 0);\n        var f = num.toFixed(d).toString();\n        f = mx.pad(f, (s + d), \" \");\n        return f;\n    };\n\n    /**\n     * @param s\n     * @param size\n     * @param c\n     * @private\n     */\n    mx.pad = function(s, size, c) {\n        while (s.length < size) {\n            s = c + s;\n        }\n        return s;\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param shape\n     * @param func\n     * @param label\n     * @private\n     */\n    // ~= MX$SHADOWBOX\n    mx.legacy_shadowbox = function(Mx, x, y, w, h, shape, func, label) {\n        var length = label.length; // Original method declaration includes a length - but it only represents the length of the label\n\n        var xt = 0; // Originally an int\n        var yt = 0; // Originally an int\n        var bw = 0; // Originally an int\n\n        var pix = []; // Originally declared as a size 11 XPoint array\n        for (var cnt = 0; cnt < 11; cnt++) { // initializing 11 points in the array\n            pix[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n        var fill = !(func === 1 || func === -1); // Originally a bool\n\n        // Removed the G.BW section - since we don't need to support black & white displays\n\n        var j = (shape === mx.L_ArrowLeft || shape === mx.L_ArrowUp) ? 1 : 2;\n\n        if (func !== 0 && mx.GBorder > 0) {\n            bw = m.trunc(Math.min(w, h) / 3);\n            bw = Math.max(1, Math.min(bw, mx.GBorder));\n        }\n\n        if (bw > 0) {\n            /* outer shape */\n            pix[0].x = pix[1].x = x;\n            pix[8].x = pix[9].x = x + w;\n            pix[1].y = pix[8].y = y;\n            pix[0].y = pix[9].y = y + h;\n\n            switch (shape) {\n                case mx.L_ArrowLeft:\n                    pix[0].y = pix[1].y = y + m.trunc(h / 2);\n                    x += 2;\n                    --w;\n                    break;\n                case mx.L_ArrowRight:\n                    pix[8].y = pix[9].y = y + m.trunc(h / 2);\n                    --x;\n                    --w;\n                    break;\n                case mx.L_ArrowUp:\n                    pix[1].x = pix[8].x = x + m.trunc(w / 2);\n                    y += 2;\n                    --h;\n                    break;\n                case mx.L_ArrowDown:\n                    pix[0].x = pix[9].x = x + m.trunc(w / 2);\n                    --y;\n                    --h;\n                    break;\n            }\n            pix[2] = pix[8];\n            pix[10] = pix[0];\n\n            x += bw;\n            y += bw;\n            w -= 2 * bw;\n            h -= 2 * bw;\n        }\n\n        /* inner shape */\n        pix[4].x = pix[5].x = x;\n        pix[3].x = pix[6].x = x + w;\n        pix[3].y = pix[4].y = y;\n        pix[5].y = pix[6].y = y + h;\n        switch (shape) {\n            case mx.L_ArrowLeft:\n                pix[4].y = pix[5].y = y + m.trunc(h / 2);\n                break;\n            case mx.L_ArrowRight:\n                pix[3].y = pix[6].y = y + m.trunc(h / 2);\n                break;\n            case mx.L_ArrowUp:\n                pix[3].x = pix[4].x = x + m.trunc(w / 2);\n                break;\n            case mx.L_ArrowDown:\n                pix[5].x = pix[6].x = x + m.trunc(w / 2);\n                break;\n        }\n        pix[7] = pix[3];\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (bw > 0) {\n            ctx.fillStyle = (func > 0) ? Mx.xwts : Mx.xwbs; // Set foreground color\n            fill_poly(ctx, pix.slice(0, 7));\n            //\tif (shape !== 1) { draw_poly(ctx, pix.slice(0,7)); } // TODO what shape is this neccessary with - causes an issue with arrows\n\n            ctx.fillStyle = (func < 0) ? Mx.xwts : Mx.xwbs; // Set foreground color\n            fill_poly(ctx, pix.slice(5, 11));\n            //if (shape !== 1) { draw_poly(ctx, pix.slice(5, 11)); } // TODO what shape is this neccessary with - causes an issue with arrows\n        }\n\n        if (fill) {\n            ctx.fillStyle = Mx.xwbg; // Set foreground color\n            fill_poly(ctx, pix.slice(3, 8));\n            //if (shape !== 1) { draw_poly(ctx, pix.slice(3, 8)); } // TODO what shape is this neccessary with - causes an issue with arrows\n        }\n\n        ctx.fillStyle = Mx.xwfg; // Set foreground color\n        ctx.textBaseline = \"alphabetic\"; // Reset vertical text alignment\n\n        if (fill && length > 0) {\n            length = Math.min(length, m.trunc(w / Mx.text_w));\n            length = Math.max(length, 1);\n            xt = x + m.trunc((w - length * Mx.text_w) / 2);\n            yt = y + m.trunc((h + 0.7 * Mx.text_h) / 2);\n            ctx.fillText(label, xt, yt); // Draw a string\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param shape\n     * @param func\n     * @param label\n     * @private\n     */\n    // ~= MX$SHADOWBOX\n    mx.sigplot_shadowbox = function(Mx, x, y, w, h, shape, func, label, alpha) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        var length = label.length; // Original method declaration includes a length - but it only represents the length of the label\n\n        var color = (func < 0) ? Mx.xwts : Mx.xwbs;\n\n        alpha = alpha || 1.0;\n\n        var pix = []; // Originally declared as a size 11 XPoint array\n        for (var cnt = 0; cnt < 11; cnt++) { // initializing 11 points in the array\n            pix[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n\n        switch (shape) {\n            case mx.L_ArrowLeft:\n            case mx.L_ArrowRight:\n            case mx.L_ArrowUp:\n            case mx.L_ArrowDown:\n                var pix = mx.chevron(shape, x, y, w, h);\n                ctx.fillStyle = (func > 0) ? Mx.xwts : Mx.xwbs;\n                fill_poly(ctx, pix.slice(0, 6));\n                break;\n            default:\n                mx.draw_round_box(Mx, color, x, y, w, h, alpha, Mx.xwbg, 5, Mx.xwbs);\n                break;\n        }\n\n        ctx.fillStyle = Mx.xwfg; // Set foreground color\n        ctx.textBaseline = \"alphabetic\"; // Reset vertical text alignment\n\n        var fill = !(func === 1 || func === -1); // Originally a bool\n        if (fill && length > 0) {\n            length = Math.min(length, m.trunc(w / Mx.text_w));\n            length = Math.max(length, 1);\n            var xt = x + m.trunc((w - length * Mx.text_w) / 2);\n            var yt = y + m.trunc((h + 0.7 * Mx.text_h) / 2);\n            ctx.fillText(label, xt, yt); // Draw a string\n        }\n    };\n\n    if (mx.LEGACY_RENDER) { // TODO new-style conditional\n        mx.shadowbox = mx.legacy_shadowbox;\n    } else {\n        mx.shadowbox = mx.sigplot_shadowbox;\n    }\n\n    mx.chevron = function(shape, x, y, w, h, e) {\n        // Figure out the largest square dimension\n        var q = Math.min(w, h);\n\n        // if the edge width isn't provided use a decent one\n        if (!e) {\n            e = q * 0.25;\n        }\n\n\n\n        // Initialize the pixel array\n        var pix = [];\n        for (var cnt = 0; cnt < 6; cnt++) { // initializing 11 points in the array\n            pix[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n\n        var x_offset = m.trunc(((w - q) / 2) + (q / 4) - (e / (2 * 1.414)));\n        var y_offset = m.trunc(((h - q) / 2) + (q / 4) - (e / (2 * 1.414)));\n        switch (shape) {\n            case mx.L_ArrowLeft:\n                // Chevron points from the tip around the edge clockwise\n                pix[0].x = x + x_offset;\n                pix[0].y = y + m.trunc(q / 2);\n                pix[1].x = x + x_offset + m.trunc(q / 2);\n                pix[1].y = y;\n                pix[2].x = x + x_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[2].y = y + m.trunc(e / 1.414);\n                pix[3].x = x + x_offset + m.trunc((2 * e) / 1.414);\n                pix[3].y = y + m.trunc(q / 2);\n                pix[4].x = x + x_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[4].y = y + h - m.trunc(e / 1.414);\n                pix[5].x = x + x_offset + m.trunc(q / 2);\n                pix[5].y = y + q;\n                break;\n            case mx.L_ArrowRight:\n                // Chevron points from the tip around the edge clockwise\n                pix[0].x = x + w - x_offset;\n                pix[0].y = y + m.trunc(q / 2);\n                pix[1].x = x + w - x_offset - m.trunc(q / 2);\n                pix[1].y = y;\n                pix[2].x = x + w - x_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[2].y = y + m.trunc(e / 1.414);\n                pix[3].x = x + w - x_offset - m.trunc((2 * e) / 1.414);\n                pix[3].y = y + m.trunc(q / 2);\n                pix[4].x = x + w - x_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[4].y = y + h - m.trunc(e / 1.414);\n                pix[5].x = x + w - x_offset - m.trunc(q / 2);\n                pix[5].y = y + q;\n                break;\n            case mx.L_ArrowUp:\n                // Chevron points from the tip around the edge counter-clockwise\n                pix[0].x = x + m.trunc(q / 2);\n                pix[0].y = y + y_offset;\n                pix[1].x = x;\n                pix[1].y = y + y_offset + m.trunc(q / 2);\n                pix[2].x = x + m.trunc(e / 1.414);\n                pix[2].y = y + y_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[3].x = x + m.trunc(q / 2);\n                pix[3].y = y + y_offset + m.trunc((2 * e) / 1.414);\n                pix[4].x = x + w - m.trunc(e / 1.414);\n                pix[4].y = y + y_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[5].x = x + q;\n                pix[5].y = y + y_offset + m.trunc(q / 2);\n                break;\n            case mx.L_ArrowDown:\n                // Chevron points from the tip around the edge counter-clockwise\n                pix[0].x = x + m.trunc(q / 2);\n                pix[0].y = y + h - y_offset;\n                pix[1].x = x;\n                pix[1].y = y + h - y_offset - m.trunc(q / 2);\n                pix[2].x = x + m.trunc(e / 1.414);\n                pix[2].y = y + h - y_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[3].x = x + m.trunc(q / 2);\n                pix[3].y = y + h - y_offset - m.trunc((2 * e) / 1.414);\n                pix[4].x = x + w - m.trunc(e / 1.414);\n                pix[4].y = y + h - y_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[5].x = x + q;\n                pix[5].y = y + h - y_offset - m.trunc(q / 2);\n                break;\n        }\n\n        return pix;\n    };\n\n    /**\n     * @param Mx\n     * @param mouseEvent\n     * @private\n     */\n    // ~= mx_ifevent\n    mx.ifevent = function(Mx, mouseEvent) {\n        Mx.button_press = 0;\n        Mx.button_release = 0;\n        Mx.state_mask = 0;\n\n        var rect = mouseEvent.target.getBoundingClientRect();\n        var eventXPos = (mouseEvent.offsetX === undefined) ? (mouseEvent.pageX - rect.left - window.scrollX) : mouseEvent.offsetX;\n        var eventYPos = (mouseEvent.offsetX === undefined) ? (mouseEvent.pageY - rect.top - window.scrollY) : mouseEvent.offsetY;\n\n        //\t\tvar eventXPos = (mouseEvent.offsetX === undefined) ? mouseEvent.layerX : mouseEvent.offsetX;\n        //\t\tvar eventYPos = (mouseEvent.offsetY === undefined) ? mouseEvent.layerY : mouseEvent.offsetY;\n\n        switch (mouseEvent.type) {\n            case \"mousedown\":\n                Mx.xpos = m.bound(eventXPos, 0, Mx.width);\n                Mx.ypos = m.bound(eventYPos, 0, Mx.height);\n                switch (mouseEvent.which) {\n                    case 1:\n                        Mx.button_press = 1;\n                        break;\n                    case 2:\n                        Mx.button_press = 2;\n                        break;\n                    case 3:\n                        Mx.button_press = 3;\n                        break;\n                    case 4:\n                        Mx.button_press = 4;\n                        break;\n                    case 5:\n                        Mx.button_press = 5;\n                }\n                //Mx.state_mask = TODO\n                break;\n            case \"mouseup\":\n                Mx.xpos = m.bound(eventXPos, 0, Mx.width);\n                Mx.ypos = m.bound(eventYPos, 0, Mx.height);\n                switch (mouseEvent.which) {\n                    case 1:\n                        Mx.button_release = 1;\n                        break;\n                    case 2:\n                        Mx.button_release = 2;\n                        break;\n                    case 3:\n                        Mx.button_release = 3;\n                        break;\n                    case 4:\n                        Mx.button_release = 4;\n                        break;\n                    case 5:\n                        Mx.button_release = 5;\n                }\n                //Mx.state_mask = TODO\n                break;\n        }\n    };\n\n    /**\n     * @param sv\n     * @private\n     */\n    //\n    // ~= scroll_real2pix\n    //\n    // TODO Refactor real2pix to return an object instead of sending in reference vars?\n    mx.scroll_real2pix = function(sv) {\n        // Param types:\n        // sv - mx.SCROLLBAR\n\n        if (sv.range === 0.0) {\n            return {\n                s1: sv.a1,\n                sw: sv.a2 - sv.a1\n            };\n            //\t\t\tout.s1 = sv.a1;\n            //\t\t\tout.sw = sv.a2 - sv.a1;\n        } else {\n            var dv; // real_8\n            var ts1; // int_2\n            var ts2; // int_2\n\n            dv = (sv.a2 - sv.a1) / sv.trange;\n\n            ts1 = sv.a1 + Math.floor(0.5 + (sv.smin - sv.tmin) * dv);\n            ts2 = ts1 + Math.floor(0.5 + sv.srange * dv);\n\n            if (ts1 > sv.a2 - sv.swmin) {\n                ts1 = sv.a2 - sv.swmin;\n            } else {\n                ts1 = Math.max(ts1, sv.a1);\n            }\n\n            if (ts2 < sv.a1 + sv.swmin) {\n                ts2 = sv.a1 + sv.swmin;\n            } else {\n                ts2 = Math.min(ts2, sv.a2);\n            }\n\n            return {\n                s1: ts1,\n                sw: Math.max(ts2 - ts1, sv.swmin)\n            };\n            //\t\t\tout.s1 = ts1;\n            //\t\t\tout.sw = Math.max(ts2 - ts1, sv.swmin);\n        }\n    };\n\n    /**\n     * Method to re-draw a scrollbar after update. Logic taken from mx.scroll's UPDATE section.\n     * @param sv The scrollbar to work with.\n     * @param Mx The Mx context to work with.\n     * @param op Optional op-code for XW_DRAW\n     * @private\n     */\n    mx.redrawScrollbar = function(sv, Mx, op) {\n        var x;\n        var y;\n        var xcc;\n        var ycc;\n        var xss;\n        var yss;\n        var p1;\n        var op1; // int\n        var s1;\n        var sw; // int_2\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        var scrollReal2PixOut = mx.scroll_real2pix(sv);\n        s1 = scrollReal2PixOut.s1;\n        sw = scrollReal2PixOut.sw;\n\n        p1 = s1;\n        op1 = sv.s1;\n\n        xcc = sv.x;\n        ycc = sv.y;\n        xss = sv.w;\n        yss = sv.h;\n\n        // horizontal scroll bar\n        if (sv.origin & 1) {\n            y = ycc + yss / 2;\n            if (sv.origin & 2) {\n                op1 = xss - op1 - sv.sw;\n                p1 = xss - p1 - sw;\n            }\n            if (op === mx.XW_DRAW) {\n                var arrow = sv.arrow; // int\n\n                mx.shadowbox(Mx, xcc, ycc, arrow, yss - 1, mx.L_ArrowLeft, 2, \"\", 0);\n                mx.shadowbox(Mx, xcc + xss - arrow, ycc, arrow - 1, yss, mx.L_ArrowRight, 2, \"\", 0);\n            }\n\n\n            if (mx.LEGACY_RENDER) {\n                mx.draw_line(Mx, Mx.fg, xcc + sv.a1, y, xcc + sv.a2, y);\n                mx.shadowbox(Mx, xcc + p1, ycc, sw + 1, yss, 1, 2, \"\", 0);\n            } else {\n                // Veritical gradiant\n                var lingrad = ctx.createLinearGradient(xcc + sv.a1, 0, xcc + sv.a2, 0);\n                lingrad.addColorStop(0, Mx.xwbs);\n                lingrad.addColorStop(0.5, Mx.xwts);\n                lingrad.addColorStop(1, Mx.xwbs);\n                mx.draw_line(Mx, lingrad, xcc + sv.a1, y, xcc + sv.a2, y, 1);\n\n                var lingrad = ctx.createLinearGradient(0, ycc, 0, ycc + yss);\n                lingrad.addColorStop(0.1, Mx.xwts);\n                lingrad.addColorStop(0.75, Mx.xwbs);\n                mx.draw_round_box(Mx, Mx.xwbg, xcc + p1, ycc, sw + 1, yss, 1, lingrad, 8, Mx.xwbs);\n            }\n\n            // else vertical scroll bar\n        } else {\n            x = xcc + m.trunc(xss / 2);\n            if (sv.origin <= 2) {\n                op1 = yss - op1 - sv.sw;\n                p1 = yss - p1 - sw;\n            }\n            if (op === mx.XW_DRAW) {\n                var arrow = sv.arrow; // int\n                mx.shadowbox(Mx, xcc, ycc, xss - 1, arrow, mx.L_ArrowUp, 2, \"\", 0);\n                mx.shadowbox(Mx, xcc, ycc + yss - arrow, xss - 1, arrow, mx.L_ArrowDown, 2, \"\", 0);\n            }\n\n            if (mx.LEGACY_RENDER) {\n                mx.draw_line(Mx, Mx.fg, x, ycc + sv.a1, x, ycc + sv.a2);\n                mx.shadowbox(Mx, xcc, ycc + p1, xss, sw + 1, 1, 2, \"\", 0);\n            } else {\n                // Horizontal gradiant\n                var lingrad = ctx.createLinearGradient(0, ycc + sv.a1, 0, ycc + sv.a2);\n                lingrad.addColorStop(0, Mx.xwbs);\n                lingrad.addColorStop(0.5, Mx.xwts);\n                lingrad.addColorStop(1, Mx.xwbs);\n                mx.draw_line(Mx, lingrad, x, ycc + sv.a1, x, ycc + sv.a2, 1);\n\n                var lingrad = ctx.createLinearGradient(xcc, 0, xcc + xss, 0);\n                lingrad.addColorStop(0.1, Mx.xwts);\n                lingrad.addColorStop(0.75, Mx.xwbs);\n                mx.draw_round_box(Mx, Mx.xwbg, xcc - 1, ycc + p1, xss, sw + 1, 1, lingrad, 8, Mx.xwbs);\n            }\n\n        }\n\n        sv.s1 = s1;\n        sv.sw = sw;\n    };\n\n    /**\n     * @param {Object} Mx - the Mx object\n     * @param {number} x - the real-world x coordinate\n     * @param {number} y - the real-world y coordinate\n     * @param {boolean} [clip=false] set to clip the returned value to the plot area\n     * @returns {Object} pixel - the x,y coordinates in pixel coordinate space\n     * @returns {number} pixel.clipped - true if the point would have or has been clipped\n     * @private\n     */\n    mx.real_to_pixel = function(Mx, x, y, clip) {\n        var stk4 = mx.origin(Mx.origin, 4, Mx.stk[Mx.level]);\n        if ((stk4.xscl === 0.0) || (stk4.yscl === 0.0)) {\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n\n        var left = stk4.x1;\n        var top = stk4.y1;\n\n        var xxmin = stk4.xmin;\n        var xscl = 1.0 / stk4.xscl;\n\n        var yymin = stk4.ymin;\n        var yscl = 1.0 / stk4.yscl;\n\n        var clipped_x = false;\n        var clipped_y = false;\n\n        if (x !== null) {\n            clipped_x = ((x > stk4.xmax) || (x < stk4.xmin));\n            if (clip) {\n                x = Math.min(x, stk4.xmax);\n                x = Math.max(x, stk4.xmin);\n            }\n            x = Math.round((x - xxmin) * xscl) + left;\n        }\n        if (y !== null) {\n            clipped_y = ((y > stk4.ymin) || (y < stk4.ymax));\n            if (clip) {\n                y = Math.min(y, stk4.ymin);\n                y = Math.max(y, stk4.ymax);\n            }\n            y = Math.round((y - yymin) * yscl) + top;\n        }\n\n        x = Math.round(x);\n        y = Math.round(y);\n\n        return {\n            x: x,\n            y: y,\n            clipped_x: clipped_x,\n            clipped_y: clipped_y,\n            clipped: (clipped_x || clipped_y)\n        };\n    };\n\n    /**\n     * @param Mx\n     * @param xpos\n     * @param ypos\n     * @private\n     */\n    mx.pixel_to_real = function(Mx, xpos, ypos) {\n        var iretx = Math.min(Mx.r, Math.max(Mx.l, xpos));\n        var irety = Math.min(Mx.b, Math.max(Mx.t, ypos));\n        var retx;\n        var rety;\n\n        var k = Mx.level;\n        if ((Mx.origin !== 2) && (Mx.origin !== 3)) {\n            retx = Mx.stk[k].xmin + (iretx - Mx.stk[k].x1) * Mx.stk[k].xscl;\n        } else {\n            retx = Mx.stk[k].xmin + (Mx.stk[k].x2 - iretx) * Mx.stk[k].xscl;\n        }\n        if (Mx.origin > 2) {\n            rety = Mx.stk[k].ymin + (irety - Mx.stk[k].y1) * Mx.stk[k].yscl;\n        } else {\n            rety = Mx.stk[k].ymin + (Mx.stk[k].y2 - irety) * Mx.stk[k].yscl;\n        }\n\n        return {\n            x: retx,\n            y: rety\n        };\n    };\n\n    /**\n     * @param Mx\n     * @param map\n     * @param ncolors\n     * @private\n     */\n    mx.colormap = function(Mx, map, ncolors) {\n        Mx.pixel = new ColorMap(map, {\n            ncolors: ncolors\n        });\n        return;\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @private\n     */\n    mx.colorbar = function(Mx, x, y, w, h) {\n        Mx.pixel.setRange(0, Mx.pixel.map.length);\n        for (var j = 1; j < h; j++) {\n            var cidx = Math.floor(Mx.pixel.map.length * (j - 1) / h);\n            mx.draw_line(Mx, cidx, x, y + h - j, x + w, y + h - j);\n        }\n        mx.draw_box(Mx, Mx.fg, x + 0.5, y, w, h);\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @private\n     */\n    mx.legend_colorbar = function(Mx, x, y, w, h) {\n        for (var j = 1; j < w; j++) {\n            var cidx = Math.floor(Mx.pixel.length * (j - 1) / w);\n            mx.draw_line(Mx, cidx, x + w - j, y, x + w - j, y + h);\n        }\n        mx.draw_box(Mx, Mx.fg, x + 0.5, y, w, h);\n    };\n\n    /**\n     * Render image buffer to canvas.\n     *\n     * If we don't have access to Uint8ClampedArray (i.e. Firefox 3.6)\n     * use a slower approach that only supports rasters up to the size\n     * limit of the canvas\n     * @private\n     *\n     * @param ctx\n     *   {context} a canvas 2d context\n     * @param buf\n     *   {ArrayBuffer} a buffer of 32-bit image data\n     * @param opacity\n     *   the opacity to render the image with\n     * @param smoothing\n     *   if image smoothing should be enabled\n     * @param sx\n     *   source x position\n     * @param sy\n     *   source y position\n     * @param sw\n     *   source width\n     * @param sh\n     *   source height\n     * @param x\n     *   optional x canvas dest\n     * @param y\n     *   optional y canvas dest\n     * @param w\n     *   optional width\n     * @param h\n     *   optional height\n     */\n    function renderImageNoTypedArrays(Mx, ctx, buf, opacity, smoothing, x, y, w, h, sx, sy, sw, sh) {\n        if (sx === undefined) {\n            sx = 0;\n        }\n        if (sy === undefined) {\n            sy = 0;\n        }\n        if (sw === undefined) {\n            sw = buf.width - sx;\n        }\n        if (sh === undefined) {\n            sh = buf.height - sy;\n        }\n\n        // If the source buffer is small enough to be directly rendered, do that\n        Mx._renderCanvas.width = buf.width;\n        Mx._renderCanvas.height = buf.height;\n\n        var imgctx = Mx._renderCanvas.getContext(\"2d\");\n        var imgd = imgctx.createImageData(Mx._renderCanvas.width, Mx._renderCanvas.height);\n        var buf8 = new Uint8Array(buf);\n        for (var yy = 0; yy < buf.height; ++yy) {\n            for (var xx = 0; xx < buf.width; ++xx) {\n                var index = ((yy * buf.width) + xx) * 4;\n                imgd.data[index] = buf8[index]; // red\n                imgd.data[index + 1] = buf8[index + 1]; // green\n                imgd.data[index + 2] = buf8[index + 2]; // blue\n                imgd.data[index + 3] = 255; // alpha\n            }\n        }\n        imgctx.putImageData(imgd, 0, 0);\n\n        // Render the image to the destination\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        if (!smoothing) {\n            ctx.imageSmoothingEnabled = false;\n            ctx.mozImageSmoothingEnabled = false;\n            ctx.webkitImageSmoothingEnabled = false;\n        }\n        ctx.drawImage(Mx._renderCanvas, sx, sy, sw, sh, x, y, w, h);\n        ctx.restore();\n    }\n\n    /**\n     * @private\n     *\n     * @param ctx\n     *   {context} a canvas 2d context\n     * @param buf\n     *   {ArrayBuffer} a buffer of 32-bit image data\n     * @param opacity\n     *   the opacity to render the image with\n     * @param smoothing\n     *   if image smoothing should be enabled\n     * @param sx\n     *   source x position\n     * @param sy\n     *   source y position\n     * @param sw\n     *   source width\n     * @param sh\n     *   source height\n     * @param x\n     *   optional x canvas dest\n     * @param y\n     *   optional y canvas dest\n     * @param w\n     *   optional width\n     * @param h\n     *   optional height\n     */\n    function renderImageTypedArrays(Mx, ctx, buf, opacity, smoothing, x, y, w, h, sx, sy, sw, sh) {\n        if (sx === undefined) {\n            sx = 0;\n        }\n        if (sy === undefined) {\n            sy = 0;\n        }\n        if (sw === undefined) {\n            sw = buf.width - sx;\n        }\n        if (sh === undefined) {\n            sh = buf.height - sy;\n        }\n\n        if ((buf.width < 32768) && (buf.height < 32768)) {\n            // If the source buffer is small enough to be directly rendered, do that\n            Mx._renderCanvas.width = buf.width;\n            Mx._renderCanvas.height = buf.height;\n\n            var imgctx = Mx._renderCanvas.getContext(\"2d\");\n            var imgd = imgctx.createImageData(Mx._renderCanvas.width, Mx._renderCanvas.height);\n\n            // TODO - This may not be portable to all browsers, if not\n            // we need to choose between this approach and the traditional\n            // for-loop based approach\n            var buf8 = new Uint8ClampedArray(buf);\n            imgd.data.set(buf8);\n            imgctx.putImageData(imgd, 0, 0);\n        } else {\n            if ((sw < 32768) && (sh < 32768)) {\n                // The clipped image is small enough to directly render\n                Mx._renderCanvas.width = sw;\n                Mx._renderCanvas.height = sh;\n                scaleImage(Mx._renderCanvas, buf, sx, sy, sw, sh);\n            } else {\n                // Downscale to twice the destination size\n                Mx._renderCanvas.width = Math.min(w * 2, buf.width);\n                Mx._renderCanvas.height = Math.min(h * 2, buf.height);\n                scaleImage(Mx._renderCanvas, buf, sx, sy, sw, sh);\n                sw = Mx._renderCanvas.width;\n                sh = Mx._renderCanvas.height;\n            }\n            sx = 0;\n            sy = 0;\n        }\n\n        // Render the image to the destination\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        if (!smoothing) {\n            ctx.imageSmoothingEnabled = false;\n            ctx.mozImageSmoothingEnabled = false;\n            ctx.webkitImageSmoothingEnabled = false;\n        }\n        ctx.drawImage(Mx._renderCanvas, sx, sy, sw, sh, x, y, w, h);\n        ctx.restore();\n    }\n\n    /**\n     * Scale the image data (represented by buf) into the destination canvas\n     * using nearest neighbor.  In genearl, you should just use the scaling\n     * provided by drawImage...but if the buf is greater than 32767 pixels in\n     * either dimension that won't work and you have to use this.\n     *\n     * @param img\n     *   A canvas object\n     * @param buf\n     *   An ArrayBuf with .width and .height elements\n     *\n     * @private\n     */\n    function scaleImage(img, buf, sx, sy, sw, sh) {\n        // Source buffer, expected to have .width and .height elements\n        var src = new Uint32Array(buf);\n\n        if (!sw) {\n            sw = buf.width;\n        }\n        if (!sh) {\n            sh = buf.height;\n        }\n        if (!sx) {\n            sx = 0;\n        }\n        if (!sy) {\n            sy = 0;\n        }\n\n        // Cache to avoid get width calls in tight loop\n        var w = img.width;\n        var h = img.height;\n\n        // Destination element\n        var imgctx = img.getContext(\"2d\");\n        var imgd = imgctx.createImageData(w, h);\n        var ibuf = new ArrayBuffer(imgd.data.length);\n        var buf8 = new Uint8ClampedArray(ibuf);\n        var dest = new Uint32Array(ibuf);\n\n        // Scaling factor\n        var width_scaling = sw / w;\n        var height_scaling = sh / h;\n\n        // Perform the scaling\n        var xx = 0;\n        var yy = 0;\n        var jj = 0;\n        for (var i = 0; i < dest.length; i++) {\n            xx = Math.round(Math.floor(i % w) * width_scaling) + sx;\n            yy = Math.round(Math.floor(i / w) * height_scaling) + sy;\n            jj = Math.floor((yy * buf.width) + xx);\n            dest[i] = src[jj];\n        }\n\n        // Set the data\n        imgd.data.set(buf8);\n        imgctx.putImageData(imgd, 0, 0);\n    }\n\n    var renderImage = (typeof Uint8ClampedArray === 'undefined') ? renderImageNoTypedArrays : renderImageTypedArrays;\n\n    /**\n     * @param Mx\n     * @param img\n     * @param shift\n     * @private\n     */\n    mx.shift_image_rows = function(Mx, buf, shift) {\n        var imgd = new Uint32Array(buf);\n        if (shift > 0) { // shift down\n            shift = shift * buf.width;\n            imgd.set(imgd.subarray(0, imgd.length - shift), shift);\n        } else if (shift < 0) { // shift up\n            shift = Math.abs(shift) * buf.width;\n            imgd.set(imgd.subarray(shift));\n        }\n\n        return buf;\n    };\n\n    /**\n     * @param Mx\n     * @param img\n     * @param data\n     * @param row\n     * @param zmin\n     * @param zmax\n     * @private\n     */\n    mx.update_image_row = function(Mx, buf, data, row, zmin, zmax, xcompression) {\n        var imgd = new Uint32Array(buf, row * buf.width * 4, buf.width);\n\n        Mx.pixel.setRange(zmin, zmax);\n\n        var xc = Math.max(1, data.length / buf.width);\n        for (var i = 0; i < buf.width; i++) {\n            var didx = Math.floor(i * xc);\n            var value = data[didx];\n            if (xc > 1) {\n                if (xcompression === 1) { // average\n                    for (var j = 1; j < xc; j++) {\n                        value += data[didx + j];\n                    }\n                    value = (value / xc);\n                } else if (xcompression === 2) { // min\n                    for (var j = 1; j < xc; j++) {\n                        value = Math.min(value, data[didx + j]);\n                    }\n                } else if (xcompression === 3) { // max\n                    for (var j = 1; j < xc; j++) {\n                        value = Math.max(value, data[didx + j]);\n                    }\n                } else if (xcompression === 4) { // first\n                    value = data[i];\n                } else if (xcompression === 5) { // max abs\n                    for (var j = 1; j < xc; j++) {\n                        value = Math.max(Math.abs(value), Math.abs(data[didx + j]));\n                    }\n                }\n            }\n            var color = Mx.pixel.getColor(value);\n            if (color) {\n                imgd[i] = color.color;\n\n            }\n        }\n\n        return imgd;\n    };\n\n    /**\n     * @param Mx\n     * @param data\n     * @param w\n     * @param h\n     * @param Mx\n     * @param zmin\n     * @param zmax\n     * @private\n     */\n    mx.create_image = function(Mx, data, subsize, w, h, zmin, zmax, xcompression) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!Mx.pixel) {\n            console.log(\"COLORMAP not initialized, defaulting to foreground\");\n            Mx.pixel = new ColorMap(m.Mc.colormap[1].colors);\n        }\n\n\n        Mx.pixel.setRange(zmin, zmax);\n        w = Math.ceil(w);\n        h = Math.ceil(h);\n        var buf = new ArrayBuffer(w * h * 4);\n        buf.width = w;\n        buf.height = h;\n\n        var nxc = Math.max(1, subsize / w);\n\n        var imgd = new Uint32Array(buf);\n        if (data) {\n            for (var i = 0; i < imgd.length; i++) {\n                var ix;\n                var iy;\n                if ((Mx.origin === 1) || (Mx.origin === 4)) {\n                    ix = Math.floor(i % w);\n                } else {\n                    ix = w - Math.floor(i % w) - 1;\n                }\n                if ((Mx.origin === 3) || (Mx.origin === 4)) {\n                    iy = Math.floor(i / w);\n                } else {\n                    iy = h - Math.floor(i / w) - 1;\n                }\n                if (iy === 1) {\n                    var test = 1;\n                }\n                var didx = (iy * subsize) + Math.floor(ix * nxc);\n                var value = data[didx];\n                if (nxc > 1) {\n                    if (xcompression === 1) { // average\n                        for (var j = 1; j < nxc; j++) {\n                            value += data[didx + j];\n                        }\n                        value = value / nxc;\n                    } else if (xcompression === 2) { // min\n                        for (var j = 1; j < nxc; j++) {\n                            value = Math.min(value, data[didx + j]);\n                        }\n                    } else if (xcompression === 3) { // max\n                        for (var j = 1; j < nxc; j++) {\n                            value = Math.max(value, data[didx + j]);\n                        }\n                    } else if (xcompression === 4) { // first\n                        value = data[didx];\n                    } else if (xcompression === 5) { // max abs\n                        for (var j = 1; j < nxc; j++) {\n                            value = Math.max(Math.abs(value), Math.abs(data[didx + j]));\n                        }\n                    }\n                }\n\n\n                var color = Mx.pixel.getColor(value);\n                if (color) {\n                    imgd[i] = color.color;\n                }\n            }\n        }\n\n        // Return the image in case the caller wishes to cache it\n        return buf;\n    };\n\n    /**\n     * @param Mx\n     * @param data\n     * @param nx\n     * @param ny\n     * @param nex\n     * @param ney\n     * @param xd\n     * @param yd\n     * @param level\n     * @param opacity\n     * @param smoothing\n     * @private\n     */\n    mx.put_image = function(Mx, data, nx, ny, nex, ney, xd, yd, level, opacity, smoothing) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!Mx.pixel) {\n            m.log.warn(\"COLORMAP not initialized, defaulting to foreground\");\n            Mx.pixel = new ColorMap(m.Mc.colormap[1].colors);\n        }\n\n        var w;\n        var h;\n\n        if (nex > 0) {\n            w = nx * nex;\n        } else {\n            w = -nex;\n        }\n        w = Math.floor(w);\n        h = Math.floor(ny * ney);\n\n        var buf = new ArrayBuffer(w * h * 4);\n        buf.width = w;\n        buf.height = h;\n\n        var imgd = new Uint32Array(buf);\n        for (var i = 0; i < imgd.length; i++) {\n            var color = Mx.pixel.getColor(data[i]);\n            if (color) {\n                imgd[i] = color.color;\n            }\n        }\n\n        //render the buffered canvas onto the original canvas element\n        renderImage(Mx, ctx, buf, opacity, smoothing, xd, yd, w, h);\n\n        // Return the image in case the caller wishes to cache it\n        return buf;\n    };\n\n    /**\n     * @param Mx\n     * @param buf\n     * @param xmin\n     * @param ymin\n     * @param xmax\n     * @param ymax\n     * @param opacity\n     * @param smoothing\n     * @private\n     */\n    mx.draw_image = function(Mx, buf, xmin, ymin, xmax, ymax, opacity, smoothing) {\n        var view_xmin = Math.max(xmin, Mx.stk[Mx.level].xmin);\n        var view_xmax = Math.min(xmax, Mx.stk[Mx.level].xmax);\n        var view_ymin = Math.max(ymin, Mx.stk[Mx.level].ymin);\n        var view_ymax = Math.min(ymax, Mx.stk[Mx.level].ymax);\n\n\n        if ((buf.width <= 1) || Math.abs(xmax - xmin) === 0) {\n            return;\n        }\n        if ((buf.height <= 1) || Math.abs(ymax - ymin) === 0) {\n            return;\n        }\n        var rx = buf.width / (xmax - xmin);\n        var ry = buf.height / (ymax - ymin);\n\n        // Ensure we are on buffer pixel boundaries, later we use clipping\n        // to constrain to the proper area\n        view_xmin = Math.floor(view_xmin * rx) / rx;\n        view_xmax = Math.ceil(view_xmax * rx) / rx;\n        view_ymin = Math.floor(view_ymin * ry) / ry;\n        view_ymax = Math.ceil(view_ymax * ry) / ry;\n\n        var ul, lr;\n        var sy, sx, sw, sh;\n        if (Mx.origin === 1) {\n            // regular x, regular y\n            sy = Math.max(0, Math.floor((ymax - view_ymax) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.floor((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmin, view_ymax);\n            lr = mx.real_to_pixel(Mx, view_xmax, view_ymin);\n        } else if (Mx.origin === 2) {\n            // inverted x, regular y\n            sy = Math.max(0, Math.floor((ymax - view_ymax) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.ceil((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmax, view_ymax);\n            lr = mx.real_to_pixel(Mx, view_xmin, view_ymin);\n        } else if (Mx.origin === 3) {\n            // inverted x, inverted y\n            sy = Math.max(0, Math.ceil((view_ymin - ymin) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.ceil((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmax, view_ymin);\n            lr = mx.real_to_pixel(Mx, view_xmin, view_ymax);\n        } else if (Mx.origin === 4) {\n            // regular x, inverted y\n            sy = Math.max(0, Math.ceil((view_ymin - ymin) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.floor((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmin, view_ymin);\n            lr = mx.real_to_pixel(Mx, view_xmax, view_ymax);\n        }\n\n        var iw = lr.x - ul.x;\n        var ih = lr.y - ul.y;\n\n        // Always include at least one pixel from the source\n        sw = Math.max(1, sw);\n        sh = Math.max(1, sh);\n\n        // See if smart smoothing is requested\n        if (typeof smoothing === \"number\") {\n            // calculate the ratio of displayed pixels over\n            // displayed data-points\n            var ratio = (Mx.r - Mx.l) / sw;\n            // if the ratio is greater than the smoothing value\n            // turn on smoothing\n            smoothing = (ratio <= smoothing);\n        }\n\n        //render the buffered canvas onto the original canvas element\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(Mx.l, Mx.t, Mx.r - Mx.l, Mx.b - Mx.t);\n        ctx.clip();\n        renderImage(Mx, ctx, buf, opacity, smoothing, ul.x, ul.y, iw, ih, sx, sy, sw, sh);\n        ctx.restore();\n    };\n\n    // Node: Export function\n    module.exports = mx;\n\n}());\n\n///////////////////////////////////////////////////////////////////////////////\n","/**\n * @license\n * File: bluefile.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n/**\n * Bluefiles are a binary format directly supported by SigPlot.  A Bluefile consists of a 512-byte header\n * followed by binary data.\n * For more information on BLUEFILES, please visit http://nextmidas.techma.com/nm/htdocs/usersguide/BlueFiles.html\n *\n * Offset   Name        Size    Type        Description\n * -----------------------------------------------------------------------------\n * 0        version     4   char[4]     Header version\n * 4        head_rep    4   char[4]     Header representation\n * 8        data_rep    4   char[4]     Data representation\n *12        detached    4   int_4       Detached header\n *16        protected   4   int_4       Protected from overwrite\n *20        pipe        4   int_4       Pipe mode (N/A)\n *24        ext_start   4   int_4       Extended header start, in 512-byte blocks\n *28        ext_size    4   int_4       Extended header size in bytes\n *32        data_start  8   real_8      Data start in bytes\n *40        data_size   8   real_8      Data size in bytes\n *48        type        4   int_4       File type code\n *52        format      2   char[2]     Data format code\n *54        flagmask    2   int_2       16-bit flagmask (1=flagbit)\n *56        timecode    8   real_8      Time code field\n *64        inlet       2   int_2       Inlet owner\n *66        outlets     2   int_2       Number of outlets\n *68        outmask     4   int_4       Outlet async mask\n *72        pipeloc     4   int_4       Pipe location\n *76        pipesize    4   int_4       Pipe size in bytes\n *80        in_byte     8   real_8      Next input byte\n *88        out_byte    8   real_8      Next out byte (cumulative)\n *96        outbytes    64  real_8[8]   Next out byte (each outlet)\n *160       keylength   4   int_4       Length of keyword string\n *164       keywords    92  char[92]    User defined keyword string\n *256       Adjunct     256     char[256]   Type-specific adjunct union (See below for 1000 and 2000 type bluefiles)\n *\n *\n * Type-1000 Adjunct\n * 0        xstart      8   real_8      Abscissa value for first sample\n *8         xdelta      8   real_8      Abscissa interval between samples\n *16        xunits      4   int_4       Units for abscissa values\n *\n * Type-2000 Adjunct\n *0         xstart      8   real_8      Frame (column) starting value\n *8         xdelta      8   real_8      Increment between samples in frame\n *16        xunits      4   int_4       Frame (column) units\n *20        subsize     4   int_4       Number of data points per frame (row)\n *24        ystart      8   real_8      Abscissa (row) start\n *32        ydelta      8   real_8      Increment between frames\n *36        yunits      4   int_4       Abscissa (row) unit code\n *\n * @namespace bluefile\n */\n\n/* global module */\n/* global require */\n\n(function() {\n    'use strict';\n\n    var common = require(\"./common\");\n\n    function bluefile() {}\n\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);\n    // https://gist.github.com/TooTallNate/4750953\n    /**\n     * @memberof bluefile\n     * @private\n     */\n    function endianness() {\n        var b = new ArrayBuffer(4);\n        var a = new Uint32Array(b);\n        var c = new Uint8Array(b);\n        a[0] = 0xdeadbeef;\n        if (c[0] === 0xef) {\n            return 'LE';\n        }\n        if (c[0] === 0xde) {\n            return 'BE';\n        }\n        throw new Error('unknown endianness');\n    }\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var ARRAY_BUFFER_ENDIANNESS = endianness();\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _SPA = {\n        'S': 1,\n        'C': 2,\n        'V': 3,\n        'Q': 4,\n        'M': 9,\n        'X': 10,\n        'T': 16,\n        'U': 1,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9\n    };\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _BPS = {\n        'P': 0.125,\n        'A': 1,\n        'O': 1,\n        'B': 1,\n        'I': 2,\n        'L': 4,\n        'X': 8,\n        'F': 4,\n        'D': 8\n    };\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _XM_TO_TYPEDARRAY = {\n        'P': null,\n        'A': null,\n        'O': Uint8Array,\n        'B': Int8Array,\n        'I': Int16Array,\n        'L': Int32Array,\n        'X': null,\n        'F': Float32Array,\n        'D': Float64Array\n    };\n    /**\n     * @memberof bluefile\n     * @param   {array}     buf         Data bffer\n     * @param number\n     * @param bool\n     * @private\n     */\n    function getInt64(dataView, index, littleEndian) {\n        var highIndex, lowIndex;\n        var MAX_INT = Math.pow(2, 53);\n        if (littleEndian) {\n            highIndex = 4;\n            lowIndex = 0;\n        } else {\n            highIndex = 0;\n            lowIndex = 4;\n        }\n        var high = dataView.getInt32(index + highIndex, littleEndian);\n        var low = dataView.getInt32(index + lowIndex, littleEndian);\n        var rv = low + pow2(32) * high;\n        if (rv >= MAX_INT) {\n            window.console.info(\"Int is bigger than JS can represent.\");\n            return Infinity;\n        }\n        return rv;\n    }\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _XM_TO_DATAVIEW = {\n        'P': null,\n        'A': null,\n        'O': \"getUint8\",\n        'B': \"getInt8\",\n        'I': \"getInt16\",\n        'L': \"getInt32\",\n        'X': getInt64,\n        'F': \"getFloat32\",\n        'D': \"getFloat64\"\n    };\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _applySupportsTypedArray = true;\n    try {\n        var uintbuf = new Uint8Array(new ArrayBuffer(4));\n        uintbuf[0] = 66;\n        uintbuf[1] = 76;\n        uintbuf[2] = 85;\n        uintbuf[3] = 69;\n        var test = String.fromCharCode.apply(null, uintbuf);\n        if (test !== \"BLUE\") {\n            _applySupportsTypedArray = false;\n        }\n    } catch (error) {\n        _applySupportsTypedArray = false;\n    }\n    /**\n     * Convert an ArrayBuffer to a string\n     *\n     * @private\n     * @memberof bluefile\n     * @param   {array}     buf         Data bffer\n     */\n    function ab2str(buf) {\n        var uintbuf = new Uint8Array(buf);\n        // Firefox 3.6 nor iOS devices can use ArrayBuffers with .apply\n        if (_applySupportsTypedArray) {\n            return String.fromCharCode.apply(null, uintbuf);\n        } else {\n            var str = \"\";\n            for (var i = 0; i < uintbuf.length; i++) {\n                str += String.fromCharCode(uintbuf[i]);\n            }\n            return str;\n        }\n    }\n    /**\n     * Convert a string to an ArrayBuffer\n     *\n     * @private\n     * @memberof bluefile\n     * @param   {string}\n     */\n    function str2ab(str) {\n        var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        var bufView = new Uint16Array(buf);\n        for (var i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    }\n    /**\n     * Calculate 2^n\n     *\n     * If 31 > n >= 0 then a left-shift is used, otherwise Math.pow is used.\n     *\n     * @private\n     * @memberof bluefile\n     * @param   {number}\n     */\n    function pow2(n) {\n        return (n >= 0 && n < 31) ? (1 << n) : (pow2[n] || (pow2[n] = Math.pow(2, n)));\n    }\n    /**\n     * Constructor for a BlueHeader that extracts paramters from the 512-byte\n     * Bluefile binary header.  If the data segment of the bluefile is also\n     * included in the provided buffer it will be accessible as well\n     * via the dview property.\n     *\n     * @memberof bluefile\n     * @param {array} buf\n     *   - An existing ArrayBuffer of Bluefile data.\n     * @param {Object} options\n     *     - options that affect how the bluefile is read\n     * @param {string} [\"dict\"] options.ext_header_type\n     *     - if the BlueFile contains extended header keywords,\n     *       extract them either as a dictionary (\"dict\", \"json\", \n     *       {}, \"XMTable\", \"JSON\", \"DICT\") or as a list of \n     *       key value pairs.  The extended header keywords\n     *       will be accessible on the hdr.ext_header property\n     *       after the file has been read.\n     *\n     * See http://nextmidas.techma.com/nm/nxm/sys/docs/MidasBlueFileFormat.pdf for\n     * more details on header properties.\n     *\n     * @property {ArrayBuffer} buf\n     * @property {String} version - the header version extracted from the file, always 'BLUE'\n     * @property {String} headrep - endianness of header 'IEEE' or 'EEEI'\n     * @property {String} datarep - endianness of data 'IEEE' or 'EEEI'\n     * @property {Number} ext_start - byte offset for extended header binary data\n     * @property {Number} ext_size - byte size for extended header data\n     * @property {Number} type - the BLUEFILE type (1000 = 1-D data, 2000 = 2-D data)\n     * @property {Number} class - the BLUEFILE class (i.e. type/1000)\n     * @property {String} format - the BLUEFILE format, the format is a two character diagraph, such as SF.\n     * @property {Number} timecode - absolute time reference for the file (in seconds since Jan 1st 1950)\n     * @property {Number} xstart - relative offset for the first sample on the x-axis\n     * @property {Number} xdelta - delta between points on the x-axis \n     * @property {Number} xunits - the unitcode for the x-axis (see m.UNITS)\n     * @property {Number} ystart - relative offset for the first sample on the y-axis\n     * @property {Number} ydelta - delta between points on the y-axis \n     * @property {Number} yunits - the unitcode for the y-axis (see m.UNITS)\n     * @property {Number} subsize - the number of columns for a 2-D data file\n     * @property {Number} data_start - byte offset for data\n     * @property {Number} data_size - byte size for data\n     * @property {Object} ext_header - extracted extended header keywords\n     * @property {Number} spa - scalars per atom\n     * @property {Number} bps - bytes per scalar\n     * @property {Number} bpa - bytes per atom\n     * @property {Number} ape - atoms per element\n     * @property {Number} bpe - bytes per element\n     * @property {Number} size - number of elements in dview\n     * @property {DataView} dview - a Data\n     */\n    bluefile.BlueHeader = function(buf, options) {\n        this.options = {\n            ext_header_type: \"dict\"\n        };\n        common.update(this.options, options);\n        this.buf = buf;\n        if (this.buf != null) {\n            var dvhdr = new DataView(this.buf);\n            this.version = ab2str(this.buf.slice(0, 4));\n            this.headrep = ab2str(this.buf.slice(4, 8));\n            this.datarep = ab2str(this.buf.slice(8, 12));\n            var littleEndianHdr = (this.headrep === \"EEEI\");\n            var littleEndianData = (this.datarep === \"EEEI\");\n            this.ext_start = dvhdr.getInt32(24, littleEndianHdr);\n            this.ext_size = dvhdr.getInt32(28, littleEndianHdr);\n            this.type = dvhdr.getUint32(48, littleEndianHdr);\n            this[\"class\"] = this.type / 1000;\n            this.format = ab2str(this.buf.slice(52, 54));\n            this.timecode = dvhdr.getFloat64(56, littleEndianHdr);\n            // the adjunct starts at offset 0x100\n            if (this[\"class\"] === 1) {\n                this.xstart = dvhdr.getFloat64(0x100, littleEndianHdr);\n                this.xdelta = dvhdr.getFloat64(0x100 + 8, littleEndianHdr);\n                this.xunits = dvhdr.getInt32(0x100 + 16, littleEndianHdr);\n                this.yunits = dvhdr.getInt32(0x100 + 40, littleEndianHdr);\n                this.subsize = 1;\n            } else if (this[\"class\"] === 2) {\n                this.xstart = dvhdr.getFloat64(0x100, littleEndianHdr);\n                this.xdelta = dvhdr.getFloat64(0x100 + 8, littleEndianHdr);\n                this.xunits = dvhdr.getInt32(0x100 + 16, littleEndianHdr);\n                this.subsize = dvhdr.getInt32(0x100 + 20, littleEndianHdr);\n                this.ystart = dvhdr.getFloat64(0x100 + 24, littleEndianHdr);\n                this.ydelta = dvhdr.getFloat64(0x100 + 32, littleEndianHdr);\n                this.yunits = dvhdr.getInt32(0x100 + 40, littleEndianHdr);\n            }\n            this.data_start = dvhdr.getFloat64(32, littleEndianHdr);\n            this.data_size = dvhdr.getFloat64(40, littleEndianHdr);\n            var ds = this.data_start;\n            var de = this.data_start + this.data_size;\n            if (this.ext_size) {\n                this.ext_header = this.unpack_keywords(this.buf, this.ext_size, this.ext_start * 512, littleEndianHdr);\n            }\n            this.setData(this.buf, ds, de, littleEndianData);\n        }\n    };\n\n    bluefile.BlueHeader.prototype = {\n        /**\n         * Internal method that sets the dview up based off the\n         * provided buffer and fields extracted from the header.\n         *\n         * @memberof bluefile\n         * @private\n         * @param   buf\n         * @param   offset\n         * @param   data_end\n         * @param   littleEndian\n         */\n        setData: function(buf, offset, data_end, littleEndian) {\n            if (this[\"class\"] === 1) {\n                this.spa = _SPA[this.format[0]];\n                this.bps = _BPS[this.format[1]];\n                this.bpa = this.spa * this.bps;\n                this.ape = 1;\n                this.bpe = this.ape * this.bpa;\n            } else if (this[\"class\"] === 2) {\n                this.spa = _SPA[this.format[0]];\n                this.bps = _BPS[this.format[1]];\n                this.bpa = this.spa * this.bps;\n                this.ape = this.subsize;\n                this.bpe = this.ape * this.bpa;\n            }\n            if (littleEndian === undefined) {\n                littleEndian = (ARRAY_BUFFER_ENDIANNESS === \"LE\");\n            }\n            // TODO handle mismatch between host and data endianness using arrayBufferEndianness\n            if (ARRAY_BUFFER_ENDIANNESS === \"LE\" && !littleEndian) {\n                throw (\"Not supported \" + ARRAY_BUFFER_ENDIANNESS + \" \" + littleEndian);\n            } else if (ARRAY_BUFFER_ENDIANNESS === \"BE\" && this.littleEndianData) {\n                throw (\"Not supported \" + ARRAY_BUFFER_ENDIANNESS + \" \" + littleEndian);\n            }\n            if (buf) {\n                if ((offset) && (data_end)) {\n                    this.dview = this.createArray(buf, offset, (data_end - offset) / this.bps);\n                } else {\n                    this.dview = this.createArray(buf);\n                }\n                this.size = this.dview.length / (this.spa * this.ape);\n            } else {\n                this.dview = this.createArray(null, null, this.size);\n            }\n        },\n        /**\n         * Internal method that unpacks the extended header keywords into\n         * either a object (i.e. dictionary) or a list of key-value pairs\n         * depending on this.options.ext_header_type.\n         *\n         * @author Sean Sullivan https://github.com/desean1625\n         * @private\n         * @memberof bluefile\n         * @param   buf\n         * @param   lbuf\n         * @param   offset\n         * @param   littleEndian\n         */\n        unpack_keywords: function(buf, lbuf, offset, littleEndian) {\n            var lkey, lextra, ltag, format, tag, data, ldata, itag, idata;\n            var keywords = [];\n            var dic_index = {};\n            var dict_keywords = {};\n            var ii = 0;\n            window.buf = buf;\n            buf = buf.slice(offset, buf.byteLength);\n            var dvhdr = new DataView(buf);\n            buf = ab2str(buf);\n            while (ii < lbuf) {\n                idata = ii + 8;\n                lkey = dvhdr.getUint32(ii, littleEndian);\n                lextra = dvhdr.getInt16(ii + 4, littleEndian);\n                ltag = dvhdr.getInt8(ii + 6, littleEndian);\n                format = buf.slice(ii + 7, ii + 8);\n                ldata = lkey - lextra;\n                itag = idata + ldata;\n                tag = buf.slice(itag, itag + ltag);\n                if (format === \"A\") {\n                    data = buf.slice(idata, idata + ldata);\n                } else {\n                    if (_XM_TO_DATAVIEW[format]) {\n                        if (typeof _XM_TO_DATAVIEW[format] === \"string\") {\n                            data = dvhdr[_XM_TO_DATAVIEW[format]](idata, littleEndian);\n                        } else {\n                            data = _XM_TO_DATAVIEW[format](dvhdr, idata, littleEndian);\n                        }\n                    } else {\n                        //Should never get here now.\n                        window.console.info(\"Unsupported keyword format \" + format + \" for tag \" + tag);\n                    }\n                }\n                if (typeof dic_index[tag] === \"undefined\") {\n                    dic_index[tag] = 1;\n                } else {\n                    dic_index[tag]++;\n                    tag = \"\" + tag + dic_index[tag]; //Force to string just incase the tag is interpreted as a number\n                }\n                dict_keywords[tag] = data;\n                keywords.push({\n                    tag: tag,\n                    value: data\n                });\n                ii += lkey;\n            }\n            var dictTypes = ['dict', 'json', {}, 'XMTable', 'JSON', 'DICT'];\n            for (var k in dictTypes) {\n                if (dictTypes[k] === this.options.ext_header_type) {\n                    return dict_keywords;\n                }\n            }\n            return keywords;\n        },\n        /**\n         * Internal method to create typed array for the data based on the\n         * format extracted from the header.\n         *\n         * @private\n         * @memberof bluefile\n         * @param   buf\n         * @param   offset\n         * @param   length\n         * @returns -\n         */\n        createArray: function(buf, offset, length) {\n            var TypedArray = _XM_TO_TYPEDARRAY[this.format[1]];\n            if (TypedArray === undefined) {\n                throw (\"unknown format \" + this.format[1]);\n            }\n            // backwards compatibility with some implementations of typed array\n            // requires this\n            if (offset === undefined) {\n                offset = 0;\n            }\n            if (length === undefined) {\n                length = buf.length || (buf.byteLength / _BPS[this.format[1]]);\n            }\n            if (buf) {\n                // Flatten 2-D array into 1-D\n                if (Array.isArray(buf) && Array.isArray(buf[0])) {\n                    buf = [].concat.apply([], buf);\n                }\n                return new TypedArray(buf, offset, length);\n            } else {\n                return new TypedArray(length);\n            }\n        }\n    };\n\n    /**\n     * Internal method to create a new anchor element and uses location\n     * properties (inherent) to get the desired URL data. Some String\n     * operations are used (to normalize results across browsers).\n     *\n     * @private\n     * @memberof bluefile\n     * @param   url\n     * @returns -\n     *\n     * Based off http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\n     */\n    function parseURL(url) {\n        var a = document.createElement('a');\n        a.href = url;\n        return {\n            source: url,\n            protocol: a.protocol.replace(':', ''),\n            host: a.hostname,\n            port: a.port,\n            query: a.search,\n            params: (function() {\n                var ret = {},\n                    seg = a.search.replace(/^\\?/, '').split('&'),\n                    len = seg.length,\n                    i = 0,\n                    s;\n                for (; i < len; i++) {\n                    if (!seg[i]) {\n                        continue;\n                    }\n                    s = seg[i].split('=');\n                    ret[s[0]] = s[1];\n                }\n                return ret;\n            })(),\n            file: (a.pathname.match(/\\/([^\\/?#]+)$/i) || [null, ''])[1],\n            hash: a.hash.replace('#', ''),\n            path: a.pathname.replace(/^([^\\/])/, '/$1'),\n            relative: (a.href.match(/tps?:\\/\\/[^\\/]+(.+)/) || [null, ''])[1],\n            segments: a.pathname.replace(/^\\//, '').split('/')\n        };\n    }\n    /**\n     * Internal method to convert text from an HTTP response\n     * into an ArrayBuffer.\n     *\n     * @private\n     * @memberof bluefile\n     * @param   text\n     * @param   oncomplete\n     * @param   blocksize\n     */\n    function text2buffer(text, oncomplete, blocksize) {\n        blocksize = blocksize || 1024;\n        var i = 0;\n        var arrayBuffer = new ArrayBuffer(text.length);\n        var bufView = new Uint8Array(arrayBuffer);\n        var worker = function() {\n            var end = i + blocksize;\n            for (; i < end; i++) {\n                bufView[i] = (text.charCodeAt(i) & 0xff);\n            }\n            if (i >= text.length) {\n                oncomplete(arrayBuffer);\n            } else {\n                setTimeout(worker, 0);\n            }\n        };\n        setTimeout(worker, 0);\n    }\n    /**\n     * Bluefile Reader constructor.\n     *\n     * @memberof bluefile\n     * @param {Object} options\n     *     - options that affect how the bluefile is read\n     * @param {string} [\"dict\"] options.ext_header_type\n     *     - if the BlueFile contains extended header keywords,\n     *       extract them either as a dictionary (\"dict\", \"json\", \n     *       {}, \"XMTable\", \"JSON\", \"DICT\") or as a list of \n     *       key value pairs.  The extended header keywords\n     *       will be accessible on the hdr.ext_header property\n     *       after the file has been read.\n     */\n    bluefile.BlueFileReader = function(options) {\n        this.options = options;\n    };\n\n    bluefile.BlueFileReader.prototype = {\n        /**\n         * @callback readCallback\n         * @param {BlueHeader}\n         *     - the extracted header, or null on failure\n         */\n\n        /**\n         * Read only the header from a local Bluefile.\n         *\n         * @memberof bluefile\n         * @param {File} theFile\n         *     - a File object for the bluefile\n         * @param {readCallback} onload\n         *     - callback when the header has been read\n         */\n        readheader: function readheader(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            var blob = theFile.webkitSlice(0, 512); // Chrome specific\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var rawhdr = reader.result;\n                    var hdr = new bluefile.BlueHeader(rawhdr, that.options);\n                    hdr.file = theFile;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(blob);\n        },\n        /**\n         * Read a local Bluefile on disk.\n         *\n         * @memberof bluefile\n         * @param {File} theFile\n         *     - a File object for the bluefile\n         * @param {readCallback} onload\n         *     - callback when the header has been read\n         */\n        read: function read(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var raw = reader.result;\n                    var hdr = new bluefile.BlueHeader(raw, that.options);\n                    hdr.file = theFile;\n                    hdr.file_name = theFile.name;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(theFile);\n        },\n        /**\n         * Read a Bluefile from a URL\n         *\n         * @memberof bluefile\n         * @param {string} href\n         *     - the URL for the bluefile\n         * @param {readCallback} onload\n         *     - callback when the header has been read\n         */\n        read_http: function read_http(href, onload) {\n            var that = this;\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"GET\", href, true);\n            oReq.responseType = \"arraybuffer\";\n            oReq.overrideMimeType('text\\/plain; charset=x-user-defined');\n            oReq.onload = function(oEvent) {\n                if (oReq.readyState === 4) {\n                    if ((oReq.status === 200) || (oReq.status === 0)) { // status = 0 is necessary for file URL\n                        var arrayBuffer = null; // Note: not oReq.responseText\n                        if (oReq.response) {\n                            arrayBuffer = oReq.response;\n                            var hdr = new bluefile.BlueHeader(arrayBuffer, that.options);\n                            parseURL(href);\n                            var fileUrl = parseURL(href);\n                            hdr.file_name = fileUrl.file;\n                            onload(hdr);\n                        } else if (oReq.responseText) {\n                            text2buffer(oReq.responseText, function(arrayBuffer) {\n                                var hdr = new bluefile.BlueHeader(arrayBuffer, that.options);\n                                parseURL(href);\n                                var fileUrl = parseURL(href);\n                                hdr.file_name = fileUrl.file;\n                                onload(hdr);\n                            });\n                        }\n                        return;\n                    }\n                }\n                onload(null);\n            };\n            oReq.onerror = function(oEvent) {\n                onload(null);\n            };\n            oReq.send(null);\n        }\n    };\n\n    // Node: Export function\n    module.exports = bluefile;\n\n}());\n","// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/** @license React v16.5.2\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var m=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.async_mode\"):60111,y=n?Symbol.for(\"react.forward_ref\"):60112;n&&Symbol.for(\"react.placeholder\");\nvar z=\"function\"===typeof Symbol&&Symbol.iterator;function A(a,b,d,c,e,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var k=[d,c,e,g,h,f],l=0;a=Error(b.replace(/%s/g,function(){return k[l++]}));a.name=\"Invariant Violation\"}a.framesToPop=1;throw a;}}\nfunction B(a){for(var b=arguments.length-1,d=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=0;c<b;c++)d+=\"&args[]=\"+encodeURIComponent(arguments[c+1]);A(!1,\"Minified React error #\"+a+\"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \",d)}var C={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},D={};\nfunction E(a,b,d){this.props=a;this.context=b;this.refs=D;this.updater=d||C}E.prototype.isReactComponent={};E.prototype.setState=function(a,b){\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a?B(\"85\"):void 0;this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,d){this.props=a;this.context=b;this.refs=D;this.updater=d||C}var H=G.prototype=new F;\nH.constructor=G;m(H,E.prototype);H.isPureReactComponent=!0;var I={current:null,currentDispatcher:null},J=Object.prototype.hasOwnProperty,K={key:!0,ref:!0,__self:!0,__source:!0};\nfunction L(a,b,d){var c=void 0,e={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)J.call(b,c)&&!K.hasOwnProperty(c)&&(e[c]=b[c]);var f=arguments.length-2;if(1===f)e.children=d;else if(1<f){for(var k=Array(f),l=0;l<f;l++)k[l]=arguments[l+2];e.children=k}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===e[c]&&(e[c]=f[c]);return{$$typeof:p,type:a,key:g,ref:h,props:e,_owner:I.current}}\nfunction M(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var O=/\\/+/g,P=[];function Q(a,b,d,c){if(P.length){var e=P.pop();e.result=a;e.keyPrefix=b;e.func=d;e.context=c;e.count=0;return e}return{result:a,keyPrefix:b,func:d,context:c,count:0}}\nfunction R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a)}\nfunction S(a,b,d,c){var e=typeof a;if(\"undefined\"===e||\"boolean\"===e)a=null;var g=!1;if(null===a)g=!0;else switch(e){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return d(c,a,\"\"===b?\".\"+T(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var h=0;h<a.length;h++){e=a[h];var f=b+T(e,h);g+=S(e,f,d,c)}else if(null===a||\"object\"!==typeof a?f=null:(f=z&&a[z]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),h=\n0;!(e=a.next()).done;)e=e.value,f=b+T(e,h++),g+=S(e,f,d,c);else\"object\"===e&&(d=\"\"+a,B(\"31\",\"[object Object]\"===d?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":d,\"\"));return g}function U(a,b,d){return null==a?0:S(a,\"\",b,d)}function T(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function V(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,d){var c=a.result,e=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?W(a,c,d,function(a){return a}):null!=a&&(N(a)&&(a=M(a,e+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(O,\"$&/\")+\"/\")+d)),c.push(a))}function W(a,b,d,c,e){var g=\"\";null!=d&&(g=(\"\"+d).replace(O,\"$&/\")+\"/\");b=Q(b,g,c,e);U(a,aa,b);R(b)}function ba(a,b){var d=I.currentDispatcher;null===d?B(\"277\"):void 0;return d.readContext(a,b)}\nvar X={Children:{map:function(a,b,d){if(null==a)return a;var c=[];W(a,c,null,b,d);return c},forEach:function(a,b,d){if(null==a)return a;b=Q(null,null,b,d);U(a,V,b);R(b)},count:function(a){return U(a,function(){return null},null)},toArray:function(a){var b=[];W(a,b,null,function(a){return a});return b},only:function(a){N(a)?void 0:B(\"143\");return a}},createRef:function(){return{current:null}},Component:E,PureComponent:G,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,\n_currentValue:a,_currentValue2:a,Provider:null,Consumer:null,unstable_read:null};a.Provider={$$typeof:v,_context:a};a.Consumer=a;a.unstable_read=ba.bind(null,a);return a},forwardRef:function(a){return{$$typeof:y,render:a}},Fragment:r,StrictMode:t,unstable_AsyncMode:x,unstable_Profiler:u,createElement:L,cloneElement:function(a,b,d){null===a||void 0===a?B(\"267\",a):void 0;var c=void 0,e=m({},a.props),g=a.key,h=a.ref,f=a._owner;if(null!=b){void 0!==b.ref&&(h=b.ref,f=I.current);void 0!==b.key&&(g=\"\"+b.key);\nvar k=void 0;a.type&&a.type.defaultProps&&(k=a.type.defaultProps);for(c in b)J.call(b,c)&&!K.hasOwnProperty(c)&&(e[c]=void 0===b[c]&&void 0!==k?k[c]:b[c])}c=arguments.length-2;if(1===c)e.children=d;else if(1<c){k=Array(c);for(var l=0;l<c;l++)k[l]=arguments[l+2];e.children=k}return{$$typeof:p,type:a.type,key:g,ref:h,props:e,_owner:f}},createFactory:function(a){var b=L.bind(null,a);b.type=a;return b},isValidElement:N,version:\"16.5.2\",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:I,\nassign:m}},Y={default:X},Z=Y&&X||Y;module.exports=Z.default||Z;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","//fgnass.github.com/spin.js#v1.2.5\n/**\n * Copyright (c) 2011 Felix Gnass [fgnass at neteye dot de]\n * Licensed under the MIT license\n */\n\nvar prefixes = ['webkit', 'Moz', 'ms', 'O']; /* Vendor prefixes */\nvar animations = {}; /* Animation rules keyed by their name */\nvar useCssAnimations;\n\n/**\n * Utility function to create elements. If no tag name is given,\n * a DIV is created. Optionally properties can be passed.\n */\nfunction createEl(tag, prop) {\n  var el = document.createElement(tag || 'div');\n  var n;\n\n  for(n in prop) {\n    el[n] = prop[n];\n  }\n  return el;\n}\n\n/**\n * Appends children and returns the parent.\n */\nfunction ins(parent /* child1, child2, ...*/) {\n  for (var i=1, n=arguments.length; i<n; i++) {\n    parent.appendChild(arguments[i]);\n  }\n  return parent;\n}\n\n/**\n * Insert a new stylesheet to hold the @keyframe or VML rules.\n */\nvar sheet = function() {\n  var el = createEl('style');\n  ins(document.getElementsByTagName('head')[0], el);\n  return el.sheet || el.styleSheet;\n}();\n\n/**\n * Creates an opacity keyframe animation rule and returns its name.\n * Since most mobile Webkits have timing issues with animation-delay,\n * we create separate rules for each line/segment.\n */\nfunction addAnimation(alpha, trail, i, lines) {\n  var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-');\n  var start = 0.01 + i/lines*100;\n  var z = Math.max(1-(1-alpha)/trail*(100-start) , alpha);\n  var prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase();\n  var pre = prefix && '-'+prefix+'-' || '';\n\n  if (!animations[name]) {\n    sheet.insertRule(\n      '@' + pre + 'keyframes ' + name + '{' +\n      '0%{opacity:'+z+'}' +\n      start + '%{opacity:'+ alpha + '}' +\n      (start+0.01) + '%{opacity:1}' +\n      (start+trail)%100 + '%{opacity:'+ alpha + '}' +\n      '100%{opacity:'+ z + '}' +\n      '}', 0);\n    animations[name] = 1;\n  }\n  return name;\n}\n\n/**\n * Tries various vendor prefixes and returns the first supported property.\n **/\nfunction vendor(el, prop) {\n  var s = el.style;\n  var pp;\n  var i;\n\n  if(s[prop] !== undefined) return prop;\n  prop = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for(i=0; i<prefixes.length; i++) {\n    pp = prefixes[i]+prop;\n    if(s[pp] !== undefined) return pp;\n  }\n}\n\n/**\n * Sets multiple style properties at once.\n */\nfunction css(el, prop) {\n  for (var n in prop) {\n    el.style[vendor(el, n)||n] = prop[n];\n  }\n  return el;\n}\n\n/**\n * Fills in default values.\n */\nfunction merge(obj) {\n  for (var i=1; i < arguments.length; i++) {\n    var def = arguments[i];\n    for (var n in def) {\n      if (obj[n] === undefined) obj[n] = def[n];\n    }\n  }\n  return obj;\n}\n\n/**\n * Returns the absolute page-offset of the given element.\n */\nfunction pos(el) {\n  var o = {x:el.offsetLeft, y:el.offsetTop};\n  while((el = el.offsetParent)) {\n    o.x+=el.offsetLeft;\n    o.y+=el.offsetTop;\n  }\n  return o;\n}\n\nvar defaults = {\n  lines: 12,            // The number of lines to draw\n  length: 7,            // The length of each line\n  width: 5,             // The line thickness\n  radius: 10,           // The radius of the inner circle\n  rotate: 0,            // rotation offset\n  color: '#000',        // #rgb or #rrggbb\n  speed: 1,             // Rounds per second\n  trail: 100,           // Afterglow percentage\n  opacity: 1/4,         // Opacity of the lines\n  fps: 20,              // Frames per second when using setTimeout()\n  zIndex: 2e9,          // Use a high z-index by default\n  className: 'spinner', // CSS class to assign to the element\n  top: 'auto',          // center vertically\n  left: 'auto'          // center horizontally\n};\n\n/** The constructor */\nvar Spinner = function Spinner(o) {\n  if (!this.spin) return new Spinner(o);\n  this.opts = merge(o || {}, Spinner.defaults, defaults);\n};\n\nSpinner.defaults = {};\nmerge(Spinner.prototype, {\n  spin: function(target) {\n    this.stop();\n    var self = this;\n    var o = self.opts;\n    var el = self.el = css(createEl(0, {className: o.className}), {position: 'relative', zIndex: o.zIndex});\n    var mid = o.radius+o.length+o.width;\n    var ep; // element position\n    var tp; // target position\n\n    if (target) {\n      target.insertBefore(el, target.firstChild||null);\n      tp = pos(target);\n      ep = pos(el);\n      css(el, {\n        left: (o.left == 'auto' ? tp.x-ep.x + (target.offsetWidth >> 1) : o.left+mid) + 'px',\n        top: (o.top == 'auto' ? tp.y-ep.y + (target.offsetHeight >> 1) : o.top+mid)  + 'px'\n      });\n    }\n\n    el.setAttribute('aria-role', 'progressbar');\n    self.lines(el, self.opts);\n\n    if (!useCssAnimations) {\n      // No CSS animation support, use setTimeout() instead\n      var i = 0;\n      var fps = o.fps;\n      var f = fps/o.speed;\n      var ostep = (1-o.opacity)/(f*o.trail / 100);\n      var astep = f/o.lines;\n\n      !function anim() {\n        i++;\n        for (var s=o.lines; s; s--) {\n          var alpha = Math.max(1-(i+s*astep)%f * ostep, o.opacity);\n          self.opacity(el, o.lines-s, alpha, o);\n        }\n        self.timeout = self.el && setTimeout(anim, ~~(1000/fps));\n      }();\n    }\n    return self;\n  },\n  stop: function() {\n    var el = this.el;\n    if (el) {\n      clearTimeout(this.timeout);\n      if (el.parentNode) el.parentNode.removeChild(el);\n      this.el = undefined;\n    }\n    return this;\n  },\n  lines: function(el, o) {\n    var i = 0;\n    var seg;\n\n    function fill(color, shadow) {\n      return css(createEl(), {\n        position: 'absolute',\n        width: (o.length+o.width) + 'px',\n        height: o.width + 'px',\n        background: color,\n        boxShadow: shadow,\n        transformOrigin: 'left',\n        transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',\n        borderRadius: (o.width>>1) + 'px'\n      });\n    }\n    for (; i < o.lines; i++) {\n      seg = css(createEl(), {\n        position: 'absolute',\n        top: 1+~(o.width/2) + 'px',\n        transform: o.hwaccel ? 'translate3d(0,0,0)' : '',\n        opacity: o.opacity,\n        animation: useCssAnimations && addAnimation(o.opacity, o.trail, i, o.lines) + ' ' + 1/o.speed + 's linear infinite'\n      });\n      if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}));\n      ins(el, ins(seg, fill(o.color, '0 0 1px rgba(0,0,0,.1)')));\n    }\n    return el;\n  },\n  opacity: function(el, i, val) {\n    if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////\n// VML rendering for IE\n/////////////////////////////////////////////////////////////////////////\n\n/**\n * Check and init VML support\n */\n!function() {\n\n  function vml(tag, attr) {\n    return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr);\n  }\n\n  var s = css(createEl('group'), {behavior: 'url(#default#VML)'});\n\n  if (!vendor(s, 'transform') && s.adj) {\n\n    // VML support detected. Insert CSS rule ...\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)');\n\n    Spinner.prototype.lines = function(el, o) {\n      var r = o.length+o.width;\n      var s = 2*r;\n\n      function grp() {\n        return css(vml('group', {coordsize: s +' '+s, coordorigin: -r +' '+-r}), {width: s, height: s});\n      }\n\n      var margin = -(o.width+o.length)*2+'px';\n      var g = css(grp(), {position: 'absolute', top: margin, left: margin});\n\n      var i;\n\n      function seg(i, dx, filter) {\n        ins(g,\n          ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),\n            ins(css(vml('roundrect', {arcsize: 1}), {\n                width: r,\n                height: o.width,\n                left: o.radius,\n                top: -o.width>>1,\n                filter: filter\n              }),\n              vml('fill', {color: o.color, opacity: o.opacity}),\n              vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change\n            )\n          )\n        );\n      }\n\n      if (o.shadow) {\n        for (i = 1; i <= o.lines; i++) {\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)');\n        }\n      }\n      for (i = 1; i <= o.lines; i++) seg(i);\n      return ins(el, g);\n    };\n    Spinner.prototype.opacity = function(el, i, val, o) {\n      var c = el.firstChild;\n      o = o.shadow && o.lines || 0;\n      if (c && i+o < c.childNodes.length) {\n        c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild;\n        if (c) c.opacity = val;\n      }\n    };\n  }\n  else {\n    useCssAnimations = vendor(s, 'animation');\n  }\n}();\n\nmodule.exports = Spinner;\n","/**\n * @license\n * File: matfile.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * MAT-files are a binary format directly supported by SigPlot.  A MAT-file consists of a 132-byte header\n * followed by binary data.\n * For more information on MAT-files, please visit https://www.mathworks.com/help/pdf_doc/matlab/matfile_format.pdf\n *\n * Offset   Name        Size    Type        Description\n * -----------------------------------------------------------------------------\n * 0        header     115   char[115]     Header\n * 116      subsys       7   char[7]\n * 124      version      2   int_2\n * 126      endianness   2   char[2]\n * 128      data_offset  4   int_4\n * 132      byte_offset  4   int_4\n *\n * @namespace matfile\n */\n(function(global) {\n    'use strict';\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);\n\n    // Descriptive text field\n    var headerTextBegin = 1;\n    var headerTextEnd = 116;\n\n    // Subsystem data offset field\n    var subsysOffsetBegin = 117;\n    var subsysOffsetEnd = 124;\n\n    // Version field\n    var versionOffsetBegin = 125;\n    var versionOffsetEnd = 126;\n\n    // Two character endian indicator. If the value reads \"MI\" then native computer\n    // has written the file in Big Endian, so no byte translation must occur.\n    // If value reads \"IM\" then native computer has written the file in Little Endian\n    // so byte-wise translation must be used on all data elements larger than 1 byte.\n    var endianCharsBegin = 127;\n    var endianCharsEnd = 128;\n\n    // Outermost data type and number of bytes. For data plottable in SigPlot this will\n    // most likely be a 1D array. The associated MATLAB type will most likely be \"miMATRIX\".\n\n    // WARNING: type \"miCOMPRESSED\" is the default for MATLAB files above version 6. These\n    // compressed files are currently UNREADABLE by this program as the file must be\n    // decompressed before reading.\n    var firstDataTypeOffsetBegin = 129;\n    var firstDataTypeOffsetEnd = 132;\n\n    var numBytesOffsetBegin = 133;\n    var numBytesOffsetEnd = 136;\n\n    // https://gist.github.com/TooTallNate/4750953\n    /**\n     * Returns the endianness of the browser\n     *\n     * @memberof matfile\n     * @private\n     */\n    function endianness() {\n        var b = new ArrayBuffer(4);\n        var a = new Uint32Array(b);\n        var c = new Uint8Array(b);\n        a[0] = 0xdeadbeef;\n        if (c[0] === 0xef) {\n            return 'LE';\n        }\n        if (c[0] === 0xde) {\n            return 'BE';\n        }\n        throw new Error('unknown endianness');\n    }\n\n    function getDataField(fileData, firstByte, lastByte) {\n        return fileData.slice(firstByte - 1, lastByte);\n    }\n\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var ARRAY_BUFFER_ENDIANNESS = endianness();\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var versionNames = {\n        256: \"MAT-file\"\n    };\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var dataTypeNames = {\n        1: {\n            name: \"miINT8\",\n            size: 1\n        },\n        2: {\n            name: \"miUINT8\",\n            size: 1\n        },\n        3: {\n            name: \"miINT16\",\n            size: 2\n        },\n        4: {\n            name: \"miUINT16\",\n            size: 2\n        },\n        5: {\n            name: \"miINT32\",\n            size: 4\n        },\n        6: {\n            name: \"miUINT32\",\n            size: 4\n        },\n        7: {\n            name: \"miSINGLE\",\n            size: 4\n        },\n        // 8 is reserved\n        9: {\n            name: \"miDOUBLE\",\n            size: 8\n        },\n        // 10 and 11 are reserved\n        12: {\n            name: \"miINT64\",\n            size: 8\n        },\n        13: {\n            name: \"miUINT64\",\n            size: 8\n        },\n        14: {\n            name: \"miMATRIX\",\n            size: null\n        },\n        15: {\n            name: \"miCOMPRESSED\",\n            size: null\n        },\n        16: {\n            name: \"miUTF8\",\n            size: null\n        },\n        17: {\n            name: \"miUTF16\",\n            size: null\n        },\n        18: {\n            name: \"miUTF32\",\n            size: null\n        }\n    };\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var arrayClassNames = {\n        1: \"mxCELL_CLASS\",\n        2: \"mxSTRUCT_CLASS\",\n        3: \"mxOBJECT_CLASS\",\n        4: \"mxCHAR_CLASS\",\n        5: \"mxSPARSE_CLASS\",\n        6: \"mxDOUBLE_CLASS\",\n        7: \"mxSINGLE_CLASS\",\n        8: \"mxINT8_CLASS\",\n        9: \"mxUINT8_CLASS\",\n        10: \"mxINT16_CLASS\",\n        11: \"mxUINT16_CLASS\",\n        12: \"mxINT32_CLASS\",\n        13: \"mxUINT32_CLASS\",\n        14: \"mxINT64_CLASS\",\n        15: \"mxUINT64_CLASS\"\n    };\n\n    /**\n     * @memberOf matfilee\n     * @private\n     */\n    var _SPA = {\n        'S': 1,\n        'C': 2,\n        'V': 3,\n        'Q': 4,\n        'M': 9,\n        'X': 10,\n        'T': 16,\n        'U': 1,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9\n    };\n\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _BPS = {\n        'P': 0.125,\n        'A': 1,\n        'O': 1,\n        'B': 1,\n        'I': 2,\n        'L': 4,\n        'X': 8,\n        'F': 4,\n        'D': 8\n    };\n\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _XM_TO_TYPEDARRAY = {\n        'P': null,\n        'A': null,\n        'O': Uint8Array,\n        'B': Int8Array,\n        'I': Int16Array,\n        'L': Int32Array,\n        'X': null,\n        'F': Float32Array,\n        'D': Float64Array\n    };\n\n    /**\n     * @memberof matfile\n     * @param   {array}     buf         Data bffer\n     * @param number\n     * @param bool\n     * @private\n     */\n    function getInt64(dataView, index, littleEndian) {\n        var highIndex, lowIndex;\n        var MAX_INT = Math.pow(2, 53);\n        if (littleEndian) {\n            highIndex = 4;\n            lowIndex = 0;\n        } else {\n            highIndex = 0;\n            lowIndex = 4;\n        }\n        var high = dataView.getInt32(index + highIndex, littleEndian);\n        var low = dataView.getInt32(index + lowIndex, littleEndian);\n        var rv = low + pow2(32) * high;\n        if (rv >= MAX_INT) {\n            window.console.info(\"Int is bigger than JS can represent.\");\n            return Infinity;\n        }\n        return rv;\n    }\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var _applySupportsTypedArray = true;\n    try {\n        var uintbuf = new Uint8Array(new ArrayBuffer(4));\n        uintbuf[0] = 66;\n        uintbuf[1] = 76;\n        uintbuf[2] = 85;\n        uintbuf[3] = 69;\n        var test = String.fromCharCode.apply(null, uintbuf);\n        if (test !== \"BLUE\") {\n            _applySupportsTypedArray = false;\n        }\n    } catch (error) {\n        _applySupportsTypedArray = false;\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {array}     buf         Data bffer\n     * @private\n     */\n    function ab2str(buf) {\n        var uintbuf = new Uint8Array(buf);\n        // Firefox 3.6 nor iOS devices can use ArrayBuffers with .apply\n        if (_applySupportsTypedArray) {\n            return String.fromCharCode.apply(null, uintbuf);\n        } else {\n            var str = \"\";\n            for (var i = 0; i < uintbuf.length; i++) {\n                str += String.fromCharCode(uintbuf[i]);\n            }\n            return str;\n        }\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {string}\n     * @private\n     */\n    function str2ab(str) {\n        var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        var bufView = new Uint16Array(buf);\n        for (var i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {number}\n     * @private\n     */\n    function pow2(n) {\n        return (n >= 0 && n < 31) ? (1 << n) : (pow2[n] || (pow2[n] = Math.pow(2, n)));\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {array}\n     * @param   {number}\n     * @param   {number}\n     * @param   {string}\n     * @param   {endian}\n     * @private\n     */\n    function getArray(arrayBuff, startByte, byteLength, type) {\n        // Get a JS array from MATLAB array\n        // TODO: big endian implemenation\n\n        var outArr = [];\n        var dv = new DataView(arrayBuff, startByte, byteLength);\n\n        var array;\n        if (type === \"miINT8\") {\n            array = new Int8Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miUINT8\") {\n            array = new Uint8Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miINT16\") {\n            array = new Int16Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miUINT16\") {\n            array = new Uint16Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miINT32\") {\n            array = new Int32Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miUINT32\") {\n            array = new Uint32Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miDOUBLE\") {\n            array = new Float64Array(arrayBuff, startByte, byteLength);\n        } else {\n            window.console.warn(\"Array data type not supported yet.\");\n            return;\n        }\n\n        array.forEach(function(element) {\n            outArr.push(element);\n        });\n\n        return outArr;\n    }\n\n    function getDataWithType(dv, typeName, offset, littleEndian) {\n        var output;\n        switch (typeName) {\n            case \"miINT8\":\n                output = dv.getInt8(offset, littleEndian);\n                break;\n            case \"miUINT8\":\n                output = dv.getInt8(offset, littleEndian);\n                break;\n            case \"miINT16\":\n                output = dv.getInt16(offset, littleEndian);\n                break;\n            case \"miUINT16\":\n                output = dv.getUint16(offset, littleEndian);\n                break;\n            case \"miINT32\":\n                output = dv.getInt32(offset, littleEndian);\n                break;\n            case \"miUINT32\":\n                output = dv.getUint32(offset, littleEndian);\n                break;\n            case \"miSINGLE\":\n                output = dv.getFloat32(offset, littleEndian);\n                break;\n            case \"miDOUBLE\":\n                output = dv.getFloat64(offset, littleEndian);\n                break;\n            case \"miINT64\":\n                output = getInt64(dv, offset, littleEndian);\n                break;\n            default:\n                window.console.warn(typeName + \" not supported at thsi time\");\n                break;\n                /* TODO:           \n                case \"miUINT64\":\n                    break;\n                case \"miMATRIX\":\n                    break;\n                case \"miCOMPRESSED\":\n                    break;\n                case \"miUTF8\":\n                    break;\n                case \"miUTF16\":\n                    break;\n                case \"miUTF32\":\n                    break;*/\n        }\n        return output;\n    }\n\n    /**\n     * Create matfile header and attach data buffer\n     * @memberof matfile\n     * @param   {array}     buf         Data bffer\n     */\n    function MatHeader(buf, options) {\n        this.file = null;\n        this.file_name = null;\n        this.buf = buf;\n        if (this.buf != null) {\n            var dvhdr = new DataView(this.buf);\n            this.headerStr = ab2str(this.buf.slice(headerTextBegin - 1, headerTextEnd));\n\n            // get endianness\n            this.datarep = ab2str(this.buf.slice(endianCharsBegin - 1, endianCharsEnd));\n            var littleEndianHdr = (this.datarep === \"IM\");\n            var littleEndianData = (this.datarep === \"IM\");\n\n            this.headerList = this.headerStr.split(\",\").map(function(str) {\n                return str.trim();\n            });\n            this.matfile = this.headerList[0];\n            this.platform = this.headerList[1];\n            this.createdOn = this.headerList[2];\n            this.subsystemOffset = ab2str(this.buf.slice(subsysOffsetBegin - 1, subsysOffsetEnd));\n            this.version = dvhdr.getUint16(versionOffsetBegin - 1, littleEndianHdr);\n            this.versionName = versionNames[this.version];\n\n            this.dataType = dvhdr.getUint32(firstDataTypeOffsetBegin - 1, littleEndianHdr);\n            this.dataTypeName = dataTypeNames[this.dataType].name;\n            this.arraySize = dvhdr.getUint32(numBytesOffsetBegin - 1, littleEndianHdr);\n\n            var beginArray = numBytesOffsetEnd + 1;\n\n            // Start reading the file linearly from beginning and inc index as you go...\n            var currIndex = numBytesOffsetEnd + 1;\n            var typeNum = dvhdr.getUint32(currIndex - 1, littleEndianHdr);\n            var typeName = dataTypeNames[typeNum].name;\n            var typeSize = dataTypeNames[typeNum].size;\n            currIndex += 4;\n\n            // bytes per ``typeName``\n            var flagLength = getDataWithType(dvhdr, typeName, currIndex - 1, littleEndianData);\n            currIndex += typeSize;\n\n            // Array flags\n            // If bit is set:\n            // - complex: the data element includes an imaginary part\n            // - global: \"MATLAB loads the data element as a global variable in the base workspace\"\n            // - logical: indicates the array is used for logical indexing.\n            var arrayFlag = getDataWithType(dvhdr, typeName, currIndex - 1, littleEndianData);\n            currIndex += typeSize;\n\n            // TODO: use flags for future implementation\n            var complexFlag = arrayFlag & 0x80;\n            var globalFlag = arrayFlag & 0x40;\n            var logicalFlag = arrayFlag & 0x20;\n\n            // Find array class\n            var arrayClassNum = arrayFlag & 0xF;\n            var arrayClassName = arrayClassNames[arrayClassNum];\n\n            // TODO: sparse array data format implementation: which uses next 4 bytes\n            // Skip to next type field (array dimensions)\n            currIndex += typeSize;\n\n            // Dimensions type:\n            var dimTypeNum = dvhdr.getUint32(currIndex - 1, littleEndianData);\n            currIndex += 4;\n\n            var dimTypeName = dataTypeNames[dimTypeNum].name;\n            var dimTypeSize = dataTypeNames[dimTypeNum].size;\n\n            // Dimensions size:\n            var arrayDimTotalSize = dvhdr.getUint32(currIndex - 1, littleEndianData);\n            currIndex += 4;\n\n            // Get number of rows\n            var rows = getDataWithType(dvhdr, dimTypeName, currIndex - 1, littleEndianData);\n            currIndex += dimTypeSize;\n\n            // TODO: support for >= 2D array types\n            if (rows > 1) {\n                window.console.warn(\"Only 1D arrays are currently supported.\");\n            }\n\n            // Get number of columns\n            var cols = getDataWithType(dvhdr, dimTypeName, currIndex - 1, littleEndianData);\n            currIndex += typeSize;\n\n            // array name type\n            var arrayNameTypeNum = dvhdr.getUint32(currIndex - 1, littleEndianData);\n            currIndex += 4;\n\n            var nameSize = 0;\n            var small = false;\n            if (arrayNameTypeNum > 15) {\n                arrayNameTypeNum &= 0x00FF;\n                small = true;\n                nameSize = dvhdr.getUint16(currIndex - 5, littleEndianData);\n            }\n\n            var arrayNameTypeName = dataTypeNames[arrayNameTypeNum].name;\n            var arrayNameTypeSize = dataTypeNames[arrayNameTypeNum].size;\n\n            if (!small) {\n                nameSize = getDataWithType(dvhdr, arrayNameTypeName, currIndex - 1, littleEndianData);\n                currIndex += 4;\n            }\n\n            var arrayName = ab2str(this.buf.slice(currIndex - 1, currIndex + nameSize - 1));\n\n            // Pad to end of 64 bit word if necessary\n            var rndUp;\n            if (small) {\n                // Pad from the middle to the end of a 64 bit word\n                rndUp = (4 - (nameSize % 4)) % 4;\n            } else {\n                // Pad from the start of a new word\n                rndUp = (8 - (nameSize % 8)) % 8;\n            }\n\n            var jumpTo = nameSize + rndUp;\n            currIndex += jumpTo;\n\n            // set the data field in the header\n            this.setData(this.buf, dvhdr, currIndex, littleEndianData);\n        }\n    }\n    MatHeader.prototype = {\n        /**\n         * @memberof bluefile\n         * @param   buf\n         * @param   dvhdr\n         * @param   data_end\n         * @param   littleEndian\n         *\n         */\n        setData: function(buf, dvhdr, currIndex, littleEndian) {\n            var arrayValSize;\n\n            // Array value(s) type:\n            var typeNum = dvhdr.getUint32(currIndex - 1, littleEndian);\n\n            // Check for MATLAB \"small element type\"\n            var small = false;\n            if (typeNum > 15) {\n                typeNum &= 0x00FF;\n                small = true;\n                arrayValSize = dvhdr.getUint16(currIndex + 1, 2, littleEndian);\n            } else {\n                currIndex += 4;\n            }\n\n            var typeName = dataTypeNames[typeNum].name;\n            var typeSize = dataTypeNames[typeNum].size;\n\n            if (!small) {\n                arrayValSize = dvhdr.getUint32(currIndex - 1, littleEndian);\n                small = false;\n            }\n\n            currIndex += 4;\n\n            // Get JS array from MATLAB array\n            this.dview = getArray(buf, currIndex - 1, arrayValSize / typeSize, typeName);\n        }\n    };\n\n    // Internal method from http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\n    /**\n     * This function creates a new anchor element and uses location\n     * properties (inherent) to get the desired URL data. Some String\n     * operations are used (to normalize results across browsers).\n     *\n     * @memberof bluefile\n     * @private\n     * @param   url\n     * @returns -\n     */\n    function parseURL(url) {\n        var a = document.createElement('a');\n        a.href = url;\n        return {\n            source: url,\n            protocol: a.protocol.replace(':', ''),\n            host: a.hostname,\n            port: a.port,\n            query: a.search,\n            params: (function() {\n                var ret = {},\n                    seg = a.search.replace(/^\\?/, '').split('&'),\n                    len = seg.length,\n                    i = 0,\n                    s;\n                for (; i < len; i++) {\n                    if (!seg[i]) {\n                        continue;\n                    }\n                    s = seg[i].split('=');\n                    ret[s[0]] = s[1];\n                }\n                return ret;\n            })(),\n            file: (a.pathname.match(/\\/([^\\/?#]+)$/i) || [null, ''])[1],\n            hash: a.hash.replace('#', ''),\n            path: a.pathname.replace(/^([^\\/])/, '/$1'),\n            relative: (a.href.match(/tps?:\\/\\/[^\\/]+(.+)/) || [null, ''])[1],\n            segments: a.pathname.replace(/^\\//, '').split('/')\n        };\n    }\n\n    /**\n     * @memberof bluefile\n     * @private\n     * @param   text\n     * @param   oncomplete\n     * @param   blocksize\n     */\n    function text2buffer(text, oncomplete, blocksize) {\n        blocksize = blocksize || 1024;\n        var i = 0;\n        var arrayBuffer = new ArrayBuffer(text.length);\n        var bufView = new Uint8Array(arrayBuffer);\n        var worker = function() {\n            var end = i + blocksize;\n            for (; i < end; i++) {\n                bufView[i] = (text.charCodeAt(i) & 0xff);\n            }\n            if (i >= text.length) {\n                oncomplete(arrayBuffer);\n            } else {\n                setTimeout(worker, 0);\n            }\n        };\n        setTimeout(worker, 0);\n    }\n\n    /**\n     * Matfile Reader\n     * @memberof    matfile\n     * @param   options\n     */\n    function MatFileReader(options) {\n        this.options = options;\n    }\n\n    MatFileReader.prototype = {\n        /**\n         * @memberof matfile\n         * @param   theFile\n         * @param   onload\n         *\n         */\n        readheader: function readheader(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            var blob = theFile.webkitSlice(0, 116); // Chrome specific\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var rawhdr = reader.result;\n                    var hdr = new MatHeader(rawhdr, that.options);\n                    hdr.file = theFile;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(blob);\n        },\n\n        /**\n         *\n         * @memberof matfile\n         * @param   theFile\n         * @param   onload\n         *\n         */\n        read: function read(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var raw = reader.result;\n                    var hdr = new MatHeader(raw, that.options);\n                    hdr.file = theFile;\n                    hdr.file_name = theFile.name;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(theFile);\n        },\n\n        /**\n         *\n         * @memberof matfile\n         * @param   href\n         * @param   onload\n         *\n         */\n        read_http: function read_http(href, onload) {\n            var that = this;\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"GET\", href, true);\n            oReq.responseType = \"arraybuffer\";\n            oReq.overrideMimeType('text\\/plain; charset=x-user-defined');\n            oReq.onload = function(oEvent) {\n                if (oReq.readyState === 4) {\n                    if ((oReq.status === 200) || (oReq.status === 0)) { // status = 0 is necessary for file URL\n                        var arrayBuffer = null; // Note: not oReq.responseText\n                        if (oReq.response) {\n                            arrayBuffer = oReq.response;\n                            var hdr = new MatHeader(arrayBuffer, that.options);\n                            parseURL(href);\n                            var fileUrl = parseURL(href);\n                            hdr.file_name = fileUrl.file;\n                            onload(hdr);\n                        } else if (oReq.responseText) {\n                            text2buffer(oReq.responseText, function(arrayBuffer) {\n                                var hdr = new MatHeader(arrayBuffer, that.options);\n                                parseURL(href);\n                                var fileUrl = parseURL(href);\n                                hdr.file_name = fileUrl.file;\n                                onload(hdr);\n                            });\n                        }\n                        return;\n                    }\n                }\n                onload(null);\n            };\n            oReq.onerror = function(oEvent) {\n                onload(null);\n            };\n            oReq.send(null);\n        }\n    };\n    global['MatHeader'] = global['MatHeader'] || MatHeader;\n    global['MatFileReader'] = global['MatFileReader'] || MatFileReader;\n}(this));\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n","/* global module */\n/* global require */\n (function() {\n     var tinycolor = require(\"tinycolor2\");\n     if (typeof Object.assign !== 'function') {\n         // Must be writable: true, enumerable: false, configurable: true\n         Object.defineProperty(Object, \"assign\", {\n             value: function assign(target, varArgs) { // .length of function is 2\n                 'use strict';\n                 if (target == null) { // TypeError if undefined or null\n                     throw new TypeError('Cannot convert undefined or null to object');\n                 }\n                 var to = Object(target);\n                 for (var index = 1; index < arguments.length; index++) {\n                     var nextSource = arguments[index];\n                     if (nextSource != null) { // Skip over if undefined or null\n                         for (var nextKey in nextSource) {\n                             // Avoid bugs when hasOwnProperty is shadowed\n                             if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                                 to[nextKey] = nextSource[nextKey];\n                             }\n                         }\n                     }\n                 }\n                 return to;\n             },\n             writable: true,\n             configurable: true\n         });\n     }\n     var ColorMap = window.ColorMap = function(colors, options) {\n         this.options = {\n             ncolors: 500,\n             alpha: 255\n         };\n         this.options = Object.assign(this.options, options);\n         this.map = [];\n         var _min = 0;\n         this._low = 0;\n         this._high = 1;\n         var ncolors = this.options.ncolors;\n         this._fscale = ncolors / (this._high - this._low);\n         var colorindex = 1;\n         var colorBlockIndex = 1;\n         colors = JSON.parse(JSON.stringify(colors)); //make a copy so we dont change the original colors\n         colors = this._parseColors(colors);\n         this.colors = colors;\n         var col1 = colors[0];\n         var col2 = colors[1];\n         var colorStop = colors[1].pos - colors[0].pos;\n         var colorsInBlock = ncolors * (colorStop / 100);\n         this.colorsInBlock = colorsInBlock;\n         var factorStep = 1 / colorsInBlock;\n         for (var n = 0; n < ncolors - 2; n++) {\n             if (colorBlockIndex > colorsInBlock) {\n                 col1 = colors[colorindex];\n                 col2 = colors[colorindex + 1];\n                 if (col2 === undefined) {\n                     break;\n                 }\n                 var colorStop = col2.pos - col1.pos;\n                 var colorsInBlock = ncolors * (colorStop / 100);\n                 this.colorsInBlock = colorsInBlock;\n                 var factorStep = 1 / colorsInBlock;\n                 var colorBlockIndex = 1;\n                 colorindex += 1;\n             }\n             this._addColor(this.interpolate(col1, col2, factorStep * colorBlockIndex));\n             colorBlockIndex += 1;\n         }\n         \n        this._addColor(colors[colors.length -1]);\n        this._addColor(colors[0], true);\n         \n     };\n     ColorMap.prototype = {\n         _addColor: function(color, front) {\n             color.hex = this._rgbToHex(color.red, color.green, color.blue);\n             color.color = (color.alpha << 24) | // alpha\n                 (color.blue << 16) | // blue\n                 (color.green << 8) | // green\n                 (color.red);\n             if (front) {\n                 this.map.unshift(color);\n             } else {\n                 this.map.push(color);\n             }\n         },\n         _parseColors: function(colors) {\n             for (var i = 0, c = colors.length; i < c; i++) {\n                 var color = colors[i];\n                 if (typeof color === \"string\") {\n                     colors[i] = this._hexToRgb(color);\n                     color = tinycolor(color);\n                     color = color.toRgb();\n                     colors[i] = {red:color.r,green:color.g,blue:color.b,alpha:this.options.alpha};\n\n                 } else if (color.hasOwnProperty(\"color\")) {\n                     var newColor = tinycolor(color.color);\n                     newColor = newColor.toRgb();\n                     newColor = {red:newColor.r,green:newColor.g,blue:newColor.b,alpha:this.options.alpha};\n                     if (color.hasOwnProperty(\"pos\")) {\n                         newColor.pos = color.pos;\n                     }\n                     colors[i] = newColor;\n                 } else {\n                     //assume if it has rgb values it is a percentage\n                     colors[i].red = Math.floor(Math.round(255 * (color.red / 100)));\n                     colors[i].green = Math.floor(Math.round(255 * (color.green / 100)));\n                     colors[i].blue = Math.floor(Math.round(255 * (color.blue / 100)));\n                 }\n                 if (!colors[i].hasOwnProperty(\"alpha\")) {\n                     colors[i].alpha = this.options.alpha;\n                 }\n             }\n             return this._checkColorStops(colors);\n         },\n         _checkColorStops: function(colors) {\n             var lastStop = 0;\n             var colorsWithNoStops = 0;\n             for (var i = 0, c = colors.length; i < c; i++) {\n                 var color = colors[i];\n                 if (!color.hasOwnProperty(\"pos\")) {\n                     colorsWithNoStops += 1;\n                 } else {\n                     if (colorsWithNoStops) {\n                         var stopSize = (color.pos - lastStop) / colorsWithNoStops;\n                         var currentPos = color.pos;\n                         for (var z = 1; z <= colorsWithNoStops; z++) {\n                             colors[i - z].pos = currentPos - stopSize;\n                             currentPos -= stopSize;\n                         }\n                     }\n                     colorsWithNoStops = 0;\n                 }\n             }\n             if (colorsWithNoStops) {\n                 var currentPos = 100;\n                 colors[colors.length - 1].pos = currentPos;\n                 if (lastStop === 0) {\n                     colors[0].pos = 0;\n                     colorsWithNoStops -= 1;\n                 }\n                 var stopSize = (currentPos - lastStop) / colorsWithNoStops;\n                 var i = colors.length - 1;\n                 for (var z = 1; z < colorsWithNoStops; z++) {\n                     colors[i - z].pos = currentPos - stopSize;\n                     currentPos -= stopSize;\n                 }\n             }\n             return colors;\n         },\n         _componentToHex: function(c) {\n             var hex = c.toString(16);\n             return hex.length === 1 ? \"0\" + hex : hex;\n         },\n         _rgbToHex: function(r, g, b) {\n             return \"#\" + this._componentToHex(r) + this._componentToHex(g) + this._componentToHex(b);\n         },\n         _hexToRgb: function(hex) {\n             var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n             return result ? {\n                 red: parseInt(result[1], 16),\n                 green: parseInt(result[2], 16),\n                 blue: parseInt(result[3], 16)\n             } : null;\n         },\n         getColor: function(number) {\n             var n = (number - this._low) * this._fscale;\n             var colorindex = ~~n; //make int fastest method\n             if (colorindex > this.map.length - 1) {\n                 colorindex = this.map.length - 1;\n             } else if (colorindex < 0) {\n                 colorindex = 0;\n             }\n             return this.map[colorindex];\n         },\n         setRange: function(low, high) {\n             // only recalculate if a value has changed\n             if ((this._low !== low) || (this._high !== high)) {\n                 this._low = low;\n                 this._high = high;\n                 this._fscale = this.map.length / Math.abs(this._high - this._low);\n             }\n         },\n         interpolate: function(col1, col2, factor) {\n             return {\n                 red: col1.red + factor * (col2.red - col1.red),\n                 green: col1.green + factor * (col2.green - col1.green),\n                 blue: col1.blue + factor * (col2.blue - col1.blue),\n                 alpha: col1.alpha + factor * (col2.alpha - col1.alpha)\n             };\n         }\n     };\n     module.exports = ColorMap;\n })();","/**\n * @license\n * File: CanvasInput.js\n *  CanvasInput v1.0.10\n *  http://goldfirestudios.com/blog/108/CanvasInput-HTML5-Canvas-Text-Input\n *\n *  (c) 2013, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  (c) 2013, Axios, Inc.\n *  Modifications made by Axios, Inc.\n *  axiosengineering.com\n *\n *  MIT License\n */\n\n/* global module */\n/* global require */\n\n(function() {\n    // create a buffer that stores all inputs so that tabbing\n    // between them is made possible.\n    var inputs = [];\n\n    // initialize the Canvas Input\n    var CanvasInput = window.CanvasInput = function(o) {\n        var self = this;\n\n        o = o ? o : {};\n\n        // setup the defaults\n        self._canvas = o.canvas || null;\n        self._ctx = self._canvas ? self._canvas.getContext('2d') : null;\n        self._x = o.x || 0;\n        self._y = o.y || 0;\n        self._extraX = o.extraX || 0;\n        self._extraY = o.extraY || 0;\n        self._fontSize = o.fontSize || 14;\n        self._fontFamily = o.fontFamily || 'Arial';\n        self._fontColor = o.fontColor || '#000';\n        self._placeHolderColor = o.placeHolderColor || '#bfbebd';\n        self._fontWeight = o.fontWeight || 'normal';\n        self._fontStyle = o.fontStyle || 'normal';\n        self._readonly = o.readonly || false;\n        self._maxlength = o.maxlength || null;\n        self._width = o.width || 150;\n        self._height = o.height || self._fontSize;\n        self._padding = o.padding >= 0 ? o.padding : 5;\n        self._borderWidth = o.borderWidth >= 0 ? o.borderWidth : 1;\n        self._borderColor = o.borderColor || '#959595';\n        self._borderRadius = o.borderRadius >= 0 ? o.borderRadius : 3;\n        self._backgroundImage = o.backgroundImage || '';\n        self._boxShadow = o.boxShadow || '1px 1px 0px rgba(255, 255, 255, 1)';\n        self._innerShadow = o.innerShadow || '0px 0px 4px rgba(0, 0, 0, 0.4)';\n        self._selectionColor = o.selectionColor || 'rgba(179, 212, 253, 0.8)';\n        self._placeHolder = o.placeHolder || '';\n        self._value = o.value || self._placeHolder;\n        self._onsubmit = o.onsubmit || function() {};\n        self._onkeydown = o.onkeydown || function() {};\n        self._onkeyup = o.onkeyup || function() {};\n        self._onfocus = o.onfocus || function() {};\n        self._onblur = o.onblur || function() {};\n        self._cursor = false;\n        self._cursorPos = 0;\n        self._hasFocus = false;\n        self._selection = [0, 0];\n        self._wasOver = false;\n        self._renderOnReturn = (o.renderOnReturn !== undefined ? o.renderOnReturn : true);\n        self._disableBlur = o.disableBlur || false;\n        self._tabToClear = o.tabToClear || false;\n\n        // parse box shadow\n        self.boxShadow(self._boxShadow, true);\n\n        // calculate the full width and height with padding, borders and shadows\n        self._calcWH();\n\n        // setup the off-DOM canvas\n        self._renderCanvas = document.createElement('canvas');\n        self._renderCanvas.setAttribute('width', self.outerW);\n        self._renderCanvas.setAttribute('height', self.outerH);\n        self._renderCtx = self._renderCanvas.getContext('2d');\n\n        // setup another off-DOM canvas for inner-shadows\n        self._shadowCanvas = document.createElement('canvas');\n        self._shadowCanvas.setAttribute('width', self._width + self._padding * 2);\n        self._shadowCanvas.setAttribute('height', self._height + self._padding * 2);\n        self._shadowCtx = self._shadowCanvas.getContext('2d');\n\n        // setup the background color\n        if (typeof o.backgroundGradient !== 'undefined') {\n            self._backgroundColor = self._renderCtx.createLinearGradient(\n                0,\n                0,\n                0,\n                self.outerH\n            );\n            self._backgroundColor.addColorStop(0, o.backgroundGradient[0]);\n            self._backgroundColor.addColorStop(1, o.backgroundGradient[1]);\n        } else {\n            self._backgroundColor = o.backgroundColor || '#fff';\n        }\n\n        // setup main canvas events\n        if (self._canvas) {\n            self.mousemoveCanvasListener = function(e) {\n                e = e || window.event;\n                self.mousemove(e, self);\n            };\n            self._canvas.addEventListener('mousemove', self.mousemoveCanvasListener, false);\n\n            self.mousedownCanvasListener = function(e) {\n                e = e || window.event;\n                self.mousedown(e, self);\n            };\n            self._canvas.addEventListener('mousedown', self.mousedownCanvasListener, false);\n\n            self.mouseupCanvasListener = function(e) {\n                e = e || window.event;\n                self.mouseup(e, self);\n            };\n            self._canvas.addEventListener('mouseup', self.mouseupCanvasListener, false);\n        }\n\n        // setup a global mouseup to blur the input outside of the canvas\n        self.mouseupWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus && !self._mouseDown) {\n                self.blur();\n            }\n        };\n        window.addEventListener('mouseup', self.mouseupWindowListener, true);\n\n        // setup the keydown listener\n        self.keydownWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus) {\n                self.keydown(e, self);\n            }\n        };\n        window.addEventListener('keydown', self.keydownWindowListener, false);\n\n        // setup the keyup listener\n        self.keyupWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus) {\n                self._onkeyup(e, self);\n            }\n        };\n        window.addEventListener('keyup', self.keyupWindowListener, false);\n\n        // setup the 'paste' listener\n        self.pasteWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus) {\n                var text = e.clipboardData.getData('text/plain'),\n                    startText = self._value.substr(0, self._cursorPos),\n                    endText = self._value.substr(self._cursorPos);\n                self._value = startText + text + endText;\n                self._cursorPos += text.length;\n\n                self.render();\n            }\n        };\n        window.addEventListener('paste', self.pasteWindowListener, false);\n\n        // add this to the buffer\n        inputs.push(self);\n        self._inputsIndex = inputs.length - 1;\n\n        // draw the text box\n        self.render();\n    };\n\n    // setup the prototype\n    CanvasInput.prototype = {\n        /**\n         * Get/set the main canvas.\n         * @param  {Object} data Canvas reference.\n         * @return {Mixed}      CanvasInput or current canvas.\n         */\n        canvas: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._canvas = data;\n                self._ctx = self._canvas.getContext('2d');\n\n                return self.render();\n            } else {\n                return self._canvas;\n            }\n        },\n\n        /**\n         * Get/set the x-position.\n         * @param  {Number} data The pixel position along the x-coordinate.\n         * @return {Mixed}      CanvasInput or current x-value.\n         */\n        x: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._x = data;\n\n                return self.render();\n            } else {\n                return self._x;\n            }\n        },\n\n        /**\n         * Get/set the y-position.\n         * @param  {Number} data The pixel position along the y-coordinate.\n         * @return {Mixed}      CanvasInput or current y-value.\n         */\n        y: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._y = data;\n\n                return self.render();\n            } else {\n                return self._y;\n            }\n        },\n\n        /**\n         * Get/set the extra x-position (generally used when no canvas is specified).\n         * @param  {Number} data The pixel position along the x-coordinate.\n         * @return {Mixed}      CanvasInput or current x-value.\n         */\n        extraX: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._extraX = data;\n\n                return self.render();\n            } else {\n                return self._extraX;\n            }\n        },\n\n        /**\n         * Get/set the extra y-position (generally used when no canvas is specified).\n         * @param  {Number} data The pixel position along the y-coordinate.\n         * @return {Mixed}      CanvasInput or current y-value.\n         */\n        extraY: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._extraY = data;\n\n                return self.render();\n            } else {\n                return self._extraY;\n            }\n        },\n\n        /**\n         * Get/set the font size.\n         * @param  {Number} data Font size.\n         * @return {Mixed}      CanvasInput or current font size.\n         */\n        fontSize: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontSize = data;\n\n                return self.render();\n            } else {\n                return self._fontSize;\n            }\n        },\n\n        /**\n         * Get/set the font family.\n         * @param  {String} data Font family.\n         * @return {Mixed}      CanvasInput or current font family.\n         */\n        fontFamily: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontFamily = data;\n\n                return self.render();\n            } else {\n                return self._fontFamily;\n            }\n        },\n\n        /**\n         * Get/set the font color.\n         * @param  {String} data Font color.\n         * @return {Mixed}      CanvasInput or current font color.\n         */\n        fontColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontColor = data;\n\n                return self.render();\n            } else {\n                return self._fontColor;\n            }\n        },\n\n        /**\n         * Get/set the place holder font color.\n         * @param  {String} data Font color.\n         * @return {Mixed}      CanvasInput or current place holder font color.\n         */\n        placeHolderColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._placeHolderColor = data;\n\n                return self.render();\n            } else {\n                return self._placeHolderColor;\n            }\n        },\n\n        /**\n         * Get/set the font weight.\n         * @param  {String} data Font weight.\n         * @return {Mixed}      CanvasInput or current font weight.\n         */\n        fontWeight: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontWeight = data;\n\n                return self.render();\n            } else {\n                return self._fontWeight;\n            }\n        },\n\n        /**\n         * Get/set the font style.\n         * @param  {String} data Font style.\n         * @return {Mixed}      CanvasInput or current font style.\n         */\n        fontStyle: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontStyle = data;\n\n                return self.render();\n            } else {\n                return self._fontStyle;\n            }\n        },\n\n        /**\n         * Get/set the width of the text box.\n         * @param  {Number} data Width in pixels.\n         * @return {Mixed}      CanvasInput or current width.\n         */\n        width: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._width = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._width;\n            }\n        },\n\n        /**\n         * Get/set the height of the text box.\n         * @param  {Number} data Height in pixels.\n         * @return {Mixed}      CanvasInput or current height.\n         */\n        height: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._height = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._height;\n            }\n        },\n\n        /**\n         * Get/set the padding of the text box.\n         * @param  {Number} data Padding in pixels.\n         * @return {Mixed}      CanvasInput or current padding.\n         */\n        padding: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._padding = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._padding;\n            }\n        },\n\n        /**\n         * Get/set the border width.\n         * @param  {Number} data Border width.\n         * @return {Mixed}      CanvasInput or current border width.\n         */\n        borderWidth: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._borderWidth = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._borderWidth;\n            }\n        },\n\n        /**\n         * Get/set the border color.\n         * @param  {String} data Border color.\n         * @return {Mixed}      CanvasInput or current border color.\n         */\n        borderColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._borderColor = data;\n\n                return self.render();\n            } else {\n                return self._borderColor;\n            }\n        },\n\n        /**\n         * Get/set the border radius.\n         * @param  {Number} data Border radius.\n         * @return {Mixed}      CanvasInput or current border radius.\n         */\n        borderRadius: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._borderRadius = data;\n\n                return self.render();\n            } else {\n                return self._borderRadius;\n            }\n        },\n\n        /**\n         * Get/set the background color.\n         * @param  {Number} data Background color.\n         * @return {Mixed}      CanvasInput or current background color.\n         */\n        backgroundColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._backgroundColor = data;\n\n                return self.render();\n            } else {\n                return self._backgroundColor;\n            }\n        },\n\n        /**\n         * Get/set the background gradient.\n         * @param  {Number} data Background gradient.\n         * @return {Mixed}      CanvasInput or current background gradient.\n         */\n        backgroundGradient: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._backgroundColor = self._renderCtx.createLinearGradient(\n                    0,\n                    0,\n                    0,\n                    self.outerH\n                );\n                self._backgroundColor.addColorStop(0, data[0]);\n                self._backgroundColor.addColorStop(1, data[1]);\n\n                return self.render();\n            } else {\n                return self._backgroundColor;\n            }\n        },\n\n        /**\n         * Get/set the box shadow.\n         * @param  {String} data     Box shadow in CSS format (1px 1px 1px rgba(0, 0, 0.5)).\n         * @param  {Boolean} doReturn (optional) True to prevent a premature render.\n         * @return {Mixed}          CanvasInput or current box shadow.\n         */\n        boxShadow: function(data, doReturn) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                // parse box shadow\n                var boxShadow = data.split('px ');\n                self._boxShadow = {\n                    x: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[0], 10),\n                    y: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[1], 10),\n                    blur: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[2], 10),\n                    color: self._boxShadow === 'none' ? '' : boxShadow[3]\n                };\n\n                // take into account the shadow and its direction\n                if (self._boxShadow.x < 0) {\n                    self.shadowL = Math.abs(self._boxShadow.x) + self._boxShadow.blur;\n                    self.shadowR = self._boxShadow.blur + self._boxShadow.x;\n                } else {\n                    self.shadowL = Math.abs(self._boxShadow.blur - self._boxShadow.x);\n                    self.shadowR = self._boxShadow.blur + self._boxShadow.x;\n                }\n                if (self._boxShadow.y < 0) {\n                    self.shadowT = Math.abs(self._boxShadow.y) + self._boxShadow.blur;\n                    self.shadowB = self._boxShadow.blur + self._boxShadow.y;\n                } else {\n                    self.shadowT = Math.abs(self._boxShadow.blur - self._boxShadow.y);\n                    self.shadowB = self._boxShadow.blur + self._boxShadow.y;\n                }\n\n                self.shadowW = self.shadowL + self.shadowR;\n                self.shadowH = self.shadowT + self.shadowB;\n\n                self._calcWH();\n\n                if (!doReturn) {\n                    self._updateCanvasWH();\n\n                    return self.render();\n                }\n            } else {\n                return self._boxShadow;\n            }\n        },\n\n        /**\n         * Get/set the inner shadow.\n         * @param  {String} data In the format of a CSS box shadow (1px 1px 1px rgba(0, 0, 0.5)).\n         * @return {Mixed}          CanvasInput or current inner shadow.\n         */\n        innerShadow: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._innerShadow = data;\n\n                return self.render();\n            } else {\n                return self._innerShadow;\n            }\n        },\n\n        /**\n         * Get/set the text selection color.\n         * @param  {String} data Color.\n         * @return {Mixed}      CanvasInput or current selection color.\n         */\n        selectionColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._selectionColor = data;\n\n                return self.render();\n            } else {\n                return self._selectionColor;\n            }\n        },\n\n        /**\n         * Get/set the place holder text.\n         * @param  {String} data Place holder text.\n         * @return {Mixed}      CanvasInput or current place holder text.\n         */\n        placeHolder: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._placeHolder = data;\n\n                return self.render();\n            } else {\n                return self._placeHolder;\n            }\n        },\n\n        /**\n         * Get/set the current text box value.\n         * @param  {String} data Text value.\n         * @return {Mixed}      CanvasInput or current text value.\n         */\n        value: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._value = data;\n\n                return self.focus();\n            } else {\n                return self._value;\n            }\n        },\n\n        /**\n         * Set or fire the onsubmit event.\n         * @param  {Function} fn Custom callback.\n         */\n        onsubmit: function(fn) {\n            var self = this;\n\n            if (typeof fn !== 'undefined') {\n                self._onsubmit = fn;\n\n                return self;\n            } else {\n                self._onsubmit();\n            }\n        },\n\n        /**\n         * Set or fire the onkeydown event.\n         * @param  {Function} fn Custom callback.\n         */\n        onkeydown: function(fn) {\n            var self = this;\n\n            if (typeof fn !== 'undefined') {\n                self._onkeydown = fn;\n\n                return self;\n            } else {\n                self._onkeydown();\n            }\n        },\n\n        /**\n         * Set or fire the onkeyup event.\n         * @param  {Function} fn Custom callback.\n         */\n        onkeyup: function(fn) {\n            var self = this;\n\n            if (typeof fn !== 'undefined') {\n                self._onkeyup = fn;\n\n                return self;\n            } else {\n                self._onkeyup();\n            }\n        },\n\n        /**\n         * Place focus on the CanvasInput box, placing the cursor\n         * either at the end of the text or where the user clicked.\n         * @param  {Number} pos (optional) The position to place the cursor.\n         * @return {CanvasInput}\n         */\n        focus: function(pos) {\n            var self = this,\n                input;\n\n            // if this is readonly, don't allow it to get focus\n            if (self._readonly) {\n                return;\n            }\n\n            // only fire the focus event when going from unfocussed\n            if (!self._hasFocus) {\n                self._onfocus(self);\n            }\n\n            // remove selection\n            if (!self._selectionUpdated) {\n                self._selection = [0, 0];\n            } else {\n                delete self._selectionUpdated;\n            }\n\n            // update the cursor position\n            self._cursorPos = (typeof pos === 'number') ? pos : self._clipText().length;\n\n            // clear the place holder\n            if (self._placeHolder === self._value) {\n                self._value = '';\n            }\n\n            self._hasFocus = true;\n            self._cursor = true;\n\n            // setup cursor interval\n            if (self._cursorInterval) {\n                clearInterval(self._cursorInterval);\n            }\n            self._cursorInterval = setInterval(function() {\n                self._cursor = !self._cursor;\n                self.render();\n            }, 500);\n\n            // check if this is Chrome for Android (there is a bug with returning incorrect character key codes)\n            var nav = navigator.userAgent.toLowerCase(),\n                isChromeMobile = (nav.indexOf('chrome') >= 0 && nav.indexOf('mobile') >= 0 && nav.indexOf('android') >= 0);\n\n            // add support for mobile\n            var isMobile = (typeof window.orientation !== 'undefined');\n            if (isMobile && !isChromeMobile && document && document.createElement && (input = document.createElement('input'))) {\n                input.type = 'text';\n                input.style.opacity = 0;\n                input.style.position = 'absolute';\n                input.style.left = (self._x + self._extraX + (self._canvas ? self._canvas.offsetLeft : 0)) + 'px';\n                input.style.top = (self._y + self._extraY + (self._canvas ? self._canvas.offsetTop : 0)) + 'px';\n                input.style.width = self._width;\n                input.style.height = 0;\n                document.body.appendChild(input);\n                input.focus();\n                input.addEventListener('blur', function() {\n                    self.blur(self);\n                }, false);\n            } else if (isMobile) {\n                self.value(prompt(self._placeHolder) || '');\n            }\n\n            return self.render();\n        },\n\n        /**\n         * Removes focus from the CanvasInput box.\n         * @param  {Object} _this Reference to this.\n         * @return {CanvasInput}\n         */\n        blur: function(_this) {\n            var self = _this || this;\n\n            if (!self._disableBlur) {\n                self._onblur(self);\n\n                if (self._cursorInterval) {\n                    clearInterval(self._cursorInterval);\n                }\n                self._hasFocus = false;\n                self._cursor = false;\n                self._selection = [0, 0];\n\n                // fill the place holder\n                if (self._value === '') {\n                    self._value = self._placeHolder;\n                }\n            }\n\n            return self.render();\n        },\n\n        /**\n         * Maintains continual focus on the CanvasInput by disabling blur.\n         * @param {Object} _this Reference to this.\n         */\n        disableBlur: function(_this) {\n            var self = _this || this;\n            self._disableBlur = true;\n        },\n\n        /**\n         * Allows the CanvasInput to blur or focus by re-enabling blur.\n         * @param {Object} _this Reference to this.\n         */\n        enableBlur: function(_this) {\n            var self = _this || this;\n            self._disableBlur = false;\n        },\n\n        /**\n         * Fired with the keydown event to draw the typed characters.\n         * @param  {Event}       e    The keydown event.\n         * @param  {CanvasInput} self\n         * @return {CanvasInput}\n         */\n        keydown: function(e, self) {\n            var keyCode = e.which,\n                isShift = e.shiftKey,\n                key = null,\n                startText, endText;\n\n            // make sure the correct text field is being updated\n            if (!self._hasFocus) {\n                return;\n            }\n\n            // fire custom user event\n            self._onkeydown(e, self);\n\n            // add support for Ctrl/Cmd+A selection\n            if (keyCode === 65 && (e.ctrlKey || e.metaKey)) {\n                self._selection = [0, self._value.length];\n                e.preventDefault();\n                return self.render();\n            }\n\n            // block keys that shouldn't be processed\n            if (keyCode === 17 || e.metaKey || e.ctrlKey) {\n                return self;\n            }\n\n            // prevent the default action\n            e.preventDefault();\n\n            if (keyCode === 8) { // backspace\n                if (!self._clearSelection()) {\n                    if (self._cursorPos > 0) {\n                        startText = self._value.substr(0, self._cursorPos - 1);\n                        endText = self._value.substr(self._cursorPos, self._value.length);\n                        self._value = startText + endText;\n                        self._cursorPos--;\n                    }\n                }\n            } else if (keyCode === 37) { // left arrow key\n                if (self._cursorPos > 0) {\n                    self._cursorPos--;\n                    self._cursor = true;\n                    self._selection = [0, 0];\n                }\n            } else if (keyCode === 39) { // right arrow key\n                if (self._cursorPos < self._value.length) {\n                    self._cursorPos++;\n                    self._cursor = true;\n                    self._selection = [0, 0];\n                }\n            } else if (keyCode === 13) { // enter key\n                self._onsubmit(e, self);\n            } else if (keyCode === 9) { // tab key\n                if (self._tabToClear) {\n                    self._value = \"\";\n                    self._cursorPos = 0;\n                } else {\n                    var next = (inputs[self._inputsIndex + 1]) ? self._inputsIndex + 1 : 0;\n                    if (next !== self._inputsIndex) {\n                        self.blur();\n                        setTimeout(function() {\n                            inputs[next].focus();\n                        }, 10);\n                    }\n                }\n            } else if (key = self._mapCodeToKey(isShift, keyCode)) {\n                self._clearSelection();\n\n                // enforce the max length\n                if (self._maxlength && self._maxlength <= self._value.length) {\n                    return;\n                }\n\n                startText = (self._value) ? self._value.substr(0, self._cursorPos) : '';\n                endText = (self._value) ? self._value.substr(self._cursorPos) : '';\n                self._value = startText + key + endText;\n                self._cursorPos++;\n            }\n\n            if ((keyCode == 13 && self._renderOnReturn) || keyCode !== 13) {\n                return self.render();\n            } else {\n                return function() {};\n            }\n        },\n\n        /**\n         * Fired with the click event on the canvas, and puts focus on/off\n         * based on where the user clicks.\n         * @param  {Event}       e    The click event.\n         * @param  {CanvasInput} self\n         * @return {CanvasInput}\n         */\n        click: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y;\n\n            if (self._endSelection) {\n                delete self._endSelection;\n                delete self._selectionUpdated;\n                return;\n            }\n\n            if (self._canvas && self._overInput(x, y) || !self._canvas) {\n                if (self._mouseDown) {\n                    self._mouseDown = false;\n                    self.click(e, self);\n                    return self.focus(self._clickPos(x, y));\n                }\n            } else {\n                return self.blur();\n            }\n        },\n\n        /**\n         * Fired with the mousemove event to update the default cursor.\n         * @param  {Event}       e    The mousemove event.\n         * @param  {CanvasInput} self\n         * @return {CanvasInput}\n         */\n        mousemove: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y,\n                isOver = self._overInput(x, y);\n\n            if (isOver && self._canvas) {\n                self._canvas.style.cursor = 'text';\n                self._wasOver = true;\n            } else if (self._wasOver && self._canvas) {\n                self._canvas.style.cursor = 'default';\n                self._wasOver = false;\n            }\n\n            if (self._hasFocus && self._selectionStart >= 0) {\n                var curPos = self._clickPos(x, y),\n                    start = Math.min(self._selectionStart, curPos),\n                    end = Math.max(self._selectionStart, curPos);\n\n                if (!isOver) {\n                    self._selectionUpdated = true;\n                    self._endSelection = true;\n                    delete self._selectionStart;\n                    self.render();\n                    return;\n                }\n\n                if (self._selection[0] !== start || self._selection[1] !== end) {\n                    self._selection = [start, end];\n                    self.render();\n                }\n            }\n        },\n\n        /**\n         * Fired with the mousedown event to start a selection drag.\n         * @param  {Event} e    The mousedown event.\n         * @param  {CanvasInput} self\n         */\n        mousedown: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y,\n                isOver = self._overInput(x, y);\n\n            // setup the 'click' event\n            self._mouseDown = isOver;\n\n            // start the selection drag if inside the input\n            if (self._hasFocus && isOver) {\n                self._selectionStart = self._clickPos(x, y);\n            }\n        },\n\n        /**\n         * Fired with the mouseup event to end a selection drag.\n         * @param  {Event} e    The mouseup event.\n         * @param  {CanvasInput} self\n         */\n        mouseup: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y;\n\n            // update selection if a drag has happened\n            var isSelection = self._clickPos(x, y) !== self._selectionStart;\n            if (self._hasFocus && self._selectionStart >= 0 && self._overInput(x, y) && isSelection) {\n                self._selectionUpdated = true;\n                delete self._selectionStart;\n                self.render();\n            } else {\n                delete self._selectionStart;\n            }\n\n            self.click(e, self);\n        },\n\n        /**\n         * Helper method to get the off-DOM canvas.\n         * @return {Object} Reference to the canvas.\n         */\n        renderCanvas: function() {\n            return this._renderCanvas;\n        },\n\n        /**\n         * Helper method to remove all event listeners, stop the blinking cursor and\n         * reset the cursor style.\n         */\n        cleanup: function() {\n            this._canvas.removeEventListener(\"mouseup\", this.mouseupCanvasListener, false);\n            this._canvas.removeEventListener(\"mousedown\", this.mousedownCanvasListener, false);\n            this._canvas.removeEventListener(\"mousemove\", this.mousemoveCanvasListener, false);\n            window.removeEventListener(\"keydown\", this.keydownWindowListener, false);\n            window.removeEventListener(\"keyup\", this.keyupWindowListener, false);\n            window.removeEventListener(\"mouseup\", this.mouseupWindowListener, true);\n            window.removeEventListener(\"paste\", this.pasteWindowListener, false);\n            clearInterval(this._cursorInterval);\n\n            this._canvas.style.cursor = 'default';\n            for (var i = (inputs.length- 1); i >= 0 ; i--) {\n                if (inputs[i] === this) {\n                    inputs.splice(i, 1);\n                }\n            }\n        },\n\n        /**\n         * Clears and redraws the CanvasInput on an off-DOM canvas,\n         * and if a main canvas is provided, draws it all onto that.\n         * @return {CanvasInput}\n         */\n        render: function() {\n            var self = this,\n                ctx = self._renderCtx,\n                w = self.outerW,\n                h = self.outerH,\n                br = self._borderRadius,\n                bw = self._borderWidth,\n                sw = self.shadowW,\n                sh = self.shadowH;\n\n            // clear the canvas\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n            // setup the box shadow\n            ctx.shadowOffsetX = self._boxShadow.x;\n            ctx.shadowOffsetY = self._boxShadow.y;\n            ctx.shadowBlur = self._boxShadow.blur;\n            ctx.shadowColor = self._boxShadow.color;\n\n            // draw the border\n            if (self._borderWidth > 0) {\n                ctx.fillStyle = self._borderColor;\n                self._roundedRect(ctx, self.shadowL, self.shadowT, w - sw, h - sh, br);\n                ctx.fill();\n\n                ctx.shadowOffsetX = 0;\n                ctx.shadowOffsetY = 0;\n                ctx.shadowBlur = 0;\n            }\n\n            // draw the text box background\n            self._drawTextBox(function() {\n                // make sure all shadows are reset\n                ctx.shadowOffsetX = 0;\n                ctx.shadowOffsetY = 0;\n                ctx.shadowBlur = 0;\n\n                // clip the text so that it fits within the box\n                var text = self._clipText();\n\n                // draw the selection\n                var paddingBorder = self._padding + self._borderWidth + self.shadowT;\n                if (self._selection[1] > 0) {\n                    var selectOffset = self._textWidth(text.substring(0, self._selection[0])),\n                        selectWidth = self._textWidth(text.substring(self._selection[0], self._selection[1]));\n\n                    ctx.fillStyle = self._selectionColor;\n                    ctx.fillRect(paddingBorder + selectOffset, paddingBorder, selectWidth, self._height);\n                }\n\n                // draw the cursor\n                ctx.fillStyle = (self._placeHolder === self._value && self._value !== '') ? self._placeHolderColor : self._fontColor;\n                if (self._cursor) {\n                    var cursorOffset = self._textWidth(text.substring(0, self._cursorPos));\n\n                    ctx.fillRect(paddingBorder + cursorOffset, paddingBorder, 1, self._height);\n                }\n\n                // draw the text\n                var textX = self._padding + self._borderWidth + self.shadowL,\n                    textY = Math.round(paddingBorder + self._height / 2);\n\n                ctx.font = self._fontStyle + ' ' + self._fontWeight + ' ' + self._fontSize + 'px ' + self._fontFamily;\n                ctx.textAlign = 'left';\n                ctx.textBaseline = 'middle';\n                ctx.fillText(text, textX, textY);\n\n                // parse inner shadow\n                var innerShadow = self._innerShadow.split('px '),\n                    isOffsetX = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[0], 10),\n                    isOffsetY = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[1], 10),\n                    isBlur = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[2], 10),\n                    isColor = self._innerShadow === 'none' ? '' : innerShadow[3];\n\n                // draw the inner-shadow (damn you canvas, this should be easier than this...)\n                if (isBlur > 0) {\n                    var shadowCtx = self._shadowCtx,\n                        scw = shadowCtx.canvas.width,\n                        sch = shadowCtx.canvas.height;\n\n                    shadowCtx.clearRect(0, 0, scw, sch);\n                    shadowCtx.shadowBlur = isBlur;\n                    shadowCtx.shadowColor = isColor;\n\n                    // top shadow\n                    shadowCtx.shadowOffsetX = 0;\n                    shadowCtx.shadowOffsetY = isOffsetY;\n                    shadowCtx.fillRect(-1 * w, -100, 3 * w, 100);\n\n                    // right shadow\n                    shadowCtx.shadowOffsetX = isOffsetX;\n                    shadowCtx.shadowOffsetY = 0;\n                    shadowCtx.fillRect(scw, -1 * h, 100, 3 * h);\n\n                    // bottom shadow\n                    shadowCtx.shadowOffsetX = 0;\n                    shadowCtx.shadowOffsetY = isOffsetY;\n                    shadowCtx.fillRect(-1 * w, sch, 3 * w, 100);\n\n                    // left shadow\n                    shadowCtx.shadowOffsetX = isOffsetX;\n                    shadowCtx.shadowOffsetY = 0;\n                    shadowCtx.fillRect(-100, -1 * h, 100, 3 * h);\n\n                    // create a clipping mask on the main canvas\n                    self._roundedRect(ctx, bw + self.shadowL, bw + self.shadowT, w - bw * 2 - sw, h - bw * 2 - sh, br);\n                    ctx.clip();\n\n                    // draw the inner-shadow from the off-DOM canvas\n                    ctx.drawImage(self._shadowCanvas, 0, 0, scw, sch, bw + self.shadowL, bw + self.shadowT, scw, sch);\n                }\n\n                // draw to the visible canvas\n                if (self._ctx) {\n                    self._ctx.clearRect(self._x, self._y, ctx.canvas.width, ctx.canvas.height);\n                    self._ctx.drawImage(self._renderCanvas, self._x, self._y);\n                }\n\n                return self;\n\n            });\n        },\n\n        /**\n         * Draw the text box area with either an image or background color.\n         * @param  {Function} fn Callback.\n         */\n        _drawTextBox: function(fn) {\n            var self = this,\n                ctx = self._renderCtx,\n                w = self.outerW,\n                h = self.outerH,\n                br = self._borderRadius,\n                bw = self._borderWidth,\n                sw = self.shadowW,\n                sh = self.shadowH;\n\n            // only draw the background shape if no image is being used\n            if (self._backgroundImage === '') {\n                ctx.fillStyle = self._backgroundColor;\n                self._roundedRect(ctx, bw + self.shadowL, bw + self.shadowT, w - bw * 2 - sw, h - bw * 2 - sh, br);\n                ctx.fill();\n\n                fn();\n            } else {\n                var img = new Image();\n                img.src = self._backgroundImage;\n                img.onload = function() {\n                    ctx.drawImage(img, 0, 0, img.width, img.height, bw + self.shadowL, bw + self.shadowT, w, h);\n\n                    fn();\n                };\n            }\n        },\n\n        /**\n         * Deletes selected text in selection range and repositions cursor.\n         * @return {Boolean} true if text removed.\n         */\n        _clearSelection: function() {\n            var self = this;\n\n            if (self._selection[1] > 0) {\n                // clear the selected contents\n                var start = self._selection[0],\n                    end = self._selection[1];\n\n                self._value = self._value.substr(0, start) + self._value.substr(end);\n                self._cursorPos = start;\n                self._cursorPos = (self._cursorPos < 0) ? 0 : self._cursorPos;\n                self._selection = [0, 0];\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Clip the text string to only return what fits in the visible text box.\n         * @param  {String} value The text to clip.\n         * @return {String} The clipped text.\n         */\n        _clipText: function(value) {\n            var self = this;\n            value = (typeof value === 'undefined') ? self._value : value;\n\n            var textWidth = self._textWidth(value),\n                fillPer = textWidth / (self._width - self._padding),\n                text = fillPer > 1 ? value.substr(-1 * Math.floor(value.length / fillPer)) : value;\n\n            return text + '';\n        },\n\n        /**\n         * Gets the pixel with of passed text.\n         * @param  {String} text The text to measure.\n         * @return {Number}      The measured width.\n         */\n        _textWidth: function(text) {\n            var self = this,\n                ctx = self._renderCtx;\n\n            ctx.font = self._fontStyle + ' ' + self._fontWeight + ' ' + self._fontSize + 'px ' + self._fontFamily;\n            ctx.textAlign = 'left';\n\n            return ctx.measureText(text).width;\n        },\n\n        /**\n         * Recalculate the outer with and height of the text box.\n         */\n        _calcWH: function() {\n            var self = this;\n\n            // calculate the full width and height with padding, borders and shadows\n            self.outerW = self._width + self._padding * 2 + self._borderWidth * 2 + self.shadowW;\n            self.outerH = self._height + self._padding * 2 + self._borderWidth * 2 + self.shadowH;\n        },\n\n        /**\n         * Update the width and height of the off-DOM canvas when attributes are changed.\n         */\n        _updateCanvasWH: function() {\n            var self = this,\n                oldW = self._renderCanvas.width,\n                oldH = self._renderCanvas.height;\n\n            // update off-DOM canvas\n            self._renderCanvas.setAttribute('width', self.outerW);\n            self._renderCanvas.setAttribute('height', self.outerH);\n            self._shadowCanvas.setAttribute('width', self._width + self._padding * 2);\n            self._shadowCanvas.setAttribute('height', self._height + self._padding * 2);\n\n            // clear the main canvas\n            if (self._ctx) {\n                self._ctx.clearRect(self._x, self._y, oldW, oldH);\n            }\n        },\n\n        /**\n         * Creates the path for a rectangle with rounded corners.\n         * Must call ctx.fill() after calling this to draw the rectangle.\n         * @param  {Object} ctx Canvas context.\n         * @param  {Number} x   x-coordinate to draw from.\n         * @param  {Number} y   y-coordinate to draw from.\n         * @param  {Number} w   Width of rectangle.\n         * @param  {Number} h   Height of rectangle.\n         * @param  {Number} r   Border radius.\n         */\n        _roundedRect: function(ctx, x, y, w, h, r) {\n            if (w < 2 * r) r = w / 2;\n            if (h < 2 * r) r = h / 2;\n\n            ctx.beginPath();\n\n            ctx.moveTo(x + r, y);\n            ctx.lineTo(x + w - r, y);\n            ctx.quadraticCurveTo(x + w, y, x + w, y + r);\n            ctx.lineTo(x + w, y + h - r);\n            ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n            ctx.lineTo(x + r, y + h);\n            ctx.quadraticCurveTo(x, y + h, x, y + h - r);\n            ctx.lineTo(x, y + r);\n            ctx.quadraticCurveTo(x, y, x + r, y);\n\n            ctx.closePath();\n        },\n\n        /**\n         * Checks if a coordinate point is over the input box.\n         * @param  {Number} x x-coordinate position.\n         * @param  {Number} y y-coordinate position.\n         * @return {Boolean}   True if it is over the input box.\n         */\n        _overInput: function(x, y) {\n            var self = this,\n                xLeft = x >= self._x + self._extraX,\n                xRight = x <= self._x + self._extraX + self._width + self._padding * 2,\n                yTop = y >= self._y + self._extraY,\n                yBottom = y <= self._y + self._extraY + self._height + self._padding * 2;\n\n            return xLeft && xRight && yTop && yBottom;\n        },\n\n        /**\n         * Use the mouse's x & y coordinates to determine\n         * the position clicked in the text.\n         * @param  {Number} x X-coordinate.\n         * @param  {Number} y Y-coordinate.\n         * @return {Number}   Cursor position.\n         */\n        _clickPos: function(x, y) {\n            var self = this,\n                value = self._value;\n\n            // don't count placeholder text in this\n            if (self._value === self._placeHolder) {\n                value = '';\n            }\n\n            // determine where the click was made along the string\n            var text = self._clipText(value),\n                totalW = 0,\n                pos = text.length;\n\n            if (x - (self._x + self._extraX) < self._textWidth(text)) {\n                // loop through each character to identify the position\n                for (var i = 0; i < text.length; i++) {\n                    totalW += self._textWidth(text[i]);\n                    if (totalW >= x - (self._x + self._extraX)) {\n                        pos = i;\n                        break;\n                    }\n                }\n            }\n\n            return pos;\n        },\n\n        /**\n         * Calculate the mouse position based on the event callback and the elements on the page.\n         * @param  {Event} e\n         * @return {Object}   x & y values\n         */\n        _mousePos: function(e) {\n            var elm = e.target,\n                style = document.defaultView.getComputedStyle(elm, undefined),\n                paddingLeft = parseInt(style['paddingLeft'], 10) || 0,\n                paddingTop = parseInt(style['paddingLeft'], 10) || 0,\n                borderLeft = parseInt(style['borderLeftWidth'], 10) || 0,\n                borderTop = parseInt(style['borderLeftWidth'], 10) || 0,\n                htmlTop = document.body.parentNode.offsetTop || 0,\n                htmlLeft = document.body.parentNode.offsetLeft || 0,\n                offsetX = 0,\n                offsetY = 0,\n                x, y;\n\n            // calculate the total offset\n            if (typeof elm.offsetParent !== 'unefined') {\n                do {\n                    offsetX += elm.offsetLeft;\n                    offsetY += elm.offsetTop;\n                } while ((elm = elm.offsetParent));\n            }\n\n            // take into account borders and padding\n            offsetX += paddingLeft + borderLeft + htmlLeft;\n            offsetY += paddingTop + borderTop + htmlTop;\n\n            return {\n                x: e.pageX - offsetX,\n                y: e.pageY - offsetY\n            };\n        },\n\n        /**\n         * Translate a keycode into the correct keyboard character.\n         * @param  {Boolean} isShift True if the shift key is being pressed.\n         * @param  {Number}  keyCode The character code.\n         * @return {String}          The translated character.\n         */\n        _mapCodeToKey: function(isShift, keyCode) {\n            var self = this,\n                blockedKeys = [8, 9, 13, 16, 17, 18, 20, 27, 91, 92],\n                key = '';\n\n            // block keys that we don't want to type\n            for (var i = 0; i < blockedKeys.length; i++) {\n                if (keyCode === blockedKeys[i]) {\n                    return;\n                }\n            }\n\n            // make sure we are getting the correct input\n            if (typeof isShift !== 'boolean' || typeof keyCode !== 'number') {\n                return;\n            }\n\n            var charMap = {\n                32: ' ',\n                48: ')',\n                49: '!',\n                50: '@',\n                51: '#',\n                52: '$',\n                53: '%',\n                54: '^',\n                55: '&',\n                56: '*',\n                57: '(',\n                59: ':',\n                107: '+',\n                173: '_', // firefox uses 173 instead of 189\n                189: '_',\n                186: ':',\n                187: '+',\n                188: '<',\n                190: '>',\n                191: '?',\n                192: '~',\n                219: '{',\n                220: '|',\n                221: '}',\n                222: '\"'\n            };\n\n            // convert the code to a character\n            if (isShift) {\n                key = (keyCode >= 65 && keyCode <= 90) ? String.fromCharCode(keyCode) : charMap[keyCode];\n            } else {\n                if (keyCode >= 65 && keyCode <= 90) {\n                    key = String.fromCharCode(keyCode).toLowerCase();\n                } else {\n                    if (keyCode === 96) {\n                        key = '0';\n                    } else if (keyCode === 97) {\n                        key = '1';\n                    } else if (keyCode === 98) {\n                        key = '2';\n                    } else if (keyCode === 99) {\n                        key = '3';\n                    } else if (keyCode === 100) {\n                        key = '4';\n                    } else if (keyCode === 101) {\n                        key = '5';\n                    } else if (keyCode === 102) {\n                        key = '6';\n                    } else if (keyCode === 103) {\n                        key = '7';\n                    } else if (keyCode === 104) {\n                        key = '8';\n                    } else if (keyCode === 105) {\n                        key = '9';\n                    } else if (keyCode === 188) {\n                        key = ',';\n                    } else if (keyCode === 190) {\n                        key = '.';\n                    } else if (keyCode === 191) {\n                        key = '/';\n                    } else if (keyCode === 192) {\n                        key = '`';\n                    } else if (keyCode === 220) {\n                        key = '\\\\';\n                    } else if (keyCode === 187) {\n                        key = '=';\n                    } else if ((keyCode === 189)  || (keyCode === 173)) {\n                        // firefox maps the minus key to 173, rather\n                        // then trying to use browser detection we\n                        // simply accept 173 as well...which means that\n                        // for Chrome using the mute button would\n                        // cause minus sign to appear\n                        key = '-';\n                    } else if (keyCode === 222) {\n                        key = '\\'';\n                    } else if (keyCode === 186) {\n                        key = ';';\n                    } else if (keyCode === 219) {\n                        key = '[';\n                    } else if (keyCode === 221) {\n                        key = ']';\n                    } else {\n                        key = String.fromCharCode(keyCode);\n                    }\n                }\n            }\n\n            return key;\n        }\n    };\n\n    module.exports = CanvasInput;\n})();\n","/**\n * @license\n * File: sigplot.layer1d.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* global module */\n/* global require */\n\n(function() {\n\n    var m = require(\"./m\");\n    var mx = require(\"./mx\");\n\n    /**\n     * @constructor\n     * @param plot\n     */\n\n    var Layer1D = function(plot) {\n        this.plot = plot;\n\n        this.xbuf = undefined; // raw (ArrayBuffer) of ABSC data\n        this.ybuf = undefined; // raw (ArrayBuffer) of ORD data\n\n        this.offset = 0.0;\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n        this.imin = 0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.name = \"\";\n        this.cx = false;\n        this.hcb = undefined; // index in Gx.HCB\n        // xbufn = xbuf.byteLength\n        // ybufn = ybuf.byteLength\n        this.size = 0;\n\n        this.display = true;\n        this.color = 0;\n        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting\n        this.thick = 1; // negative for dashed\n        this.symbol = 0;\n        this.radius = 3;\n\n        this.skip = 0; // number of elements between ord values\n        this.xsub = 0;\n        this.ysub = 0;\n        this.xdata = false; // true if X data is data from file\n        this.modified = false;\n        this.opacity = 1.0;\n        this.fillStyle = null;\n        this.preferred_origin = 1;\n\n        this.pointbufsize = 0;\n        this.xptr = null;\n        this.yptr = null;\n        this.xpoint = null; // PointArray backed by memory in xptr\n        this.ypoint = null; // PointArray backed by memory in yptr\n\n        this.options = {};\n    };\n\n    Layer1D.prototype = {\n\n        /**\n         * Initializes the layer to display the provided data.\n         *\n         * @param hcb\n         *            {BlueHeader} an opened BlueHeader file\n         * @param lyrn\n         *          the index of the added layer\n         *\n         * @memberOf Layer1D\n         * @private\n         */\n        init: function(hcb, options) {\n            var Gx = this.plot._Gx;\n\n            this.hcb = hcb;\n            this.hcb.buf_type = \"D\";\n\n            this.offset = 0;\n            this.size = 0;\n            this.xbufn = 0;\n            this.ybufn = 0;\n\n            if (!this.hcb.pipe) {\n                if (hcb[\"class\"] === 2) {\n                    m.force1000(hcb);\n                    this.size = hcb.subsize;\n                } else {\n                    this.size = hcb.size;\n                }\n            } else {\n                if (hcb[\"class\"] === 2) {\n                    m.force1000(hcb);\n                    this.size = hcb.subsize;\n                }\n            }\n\n            if (options.framesize) {\n                this.size = options.framesize;\n            }\n\n            // pipe data requires a valid size on overlay, but\n            // other data can work without a valid size because\n            // the reload() function will correctly update the size\n            if (this.hcb.pipe && !this.size) {\n                throw \"1D layer could not determine appropriate size for pipe, use framesize option\";\n            }\n\n            if (hcb[\"class\"] <= 2) {\n                this.xsub = -1;\n                this.ysub = 1;\n                this.cx = (hcb.format[0] === 'C');\n            } else {\n                // TODO\n            }\n\n            this.skip = 1;\n            if (this.cx) {\n                this.skip = 2;\n            }\n\n            this.xstart = hcb.xstart;\n            this.xdelta = hcb.xdelta;\n            var d = hcb.xstart + hcb.xdelta * (this.size - 1.0);\n            this.xmin = Math.min(hcb.xstart, d);\n            this.xmax = Math.max(hcb.xstart, d);\n\n            this.xlab = hcb.xunits;\n            this.ylab = hcb.yunits; // might be undefined\n\n            if (this.hcb.pipe) {\n                this.drawmode = \"scrolling\";\n                this.position = 0;\n                this.tle = options.tl;\n\n                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                this.ybuf = new ArrayBuffer(this.ybufn);\n\n                var self = this;\n                m.addPipeWriteListener(this.hcb, function() {\n                    self._onpipewrite();\n                });\n            }\n        },\n\n        _onpipewrite: function() {\n            var ybuf = new m.PointArray(this.ybuf);\n\n            var tle = this.tle; // in scalars\n            if (tle === undefined) {\n                // if the transfer length wasn't set then we read\n                // all the elements that are available\n                tle = Math.floor(m.pavail(this.hcb)) / this.hcb.spa;\n            }\n\n            // Calculate transfer length in scalars\n            var tl = tle * this.hcb.spa;\n            while (m.pavail(this.hcb) >= tl) {\n\n                if (this.drawmode === \"lefttoright\") {\n                    this.position = 0;\n                    ybuf.set(ybuf.subarray(0, this.size - tl), tl);\n                } else if (this.drawmode === \"righttoleft\") {\n                    this.position = this.size - tle;\n                    ybuf.set(ybuf.subarray(tl), 0);\n                } else if (this.drawmode === \"scrolling\") {\n                    // Nothing to do\n                } else {\n                    throw \"Invalid draw mode\";\n                }\n\n                // transfer length is adjusted to the remaining size \n                // before wrapping\n                var ngot = m.grabx(\n                    this.hcb, ybuf,\n                    Math.min(tle, this.size - this.position) * this.hcb.spa,\n                    this.position * this.hcb.spa\n                );\n                if (ngot === 0) {\n                    break;\n                }\n\n                // update the position\n                this.position = (this.position + tle) % this.size;\n\n                if (this.tle === undefined) {\n                    tle = Math.floor(m.pavail(this.hcb)) / this.hcb.spa;\n                }\n                tl = tle * this.hcb.spa;\n            }\n\n            if (this.plot._Gx.autol !== 0) {\n                this.plot.rescale();\n            }\n        },\n\n        get_data: function(xmin, xmax) {\n            var Gx = this.plot._Gx;\n            var HCB = this.hcb;\n\n            var skip = this.skip;\n\n            var size;\n            if (HCB[\"class\"] === 2) {\n                size = HCB.subsize;\n            } else {\n                size = HCB.size;\n            }\n\n            var imin = 0;\n            var imax = 0;\n            if (Gx.index) {\n                imin = Math.floor(xmin);\n                imax = Math.floor(xmax + 0.5);\n            } else if (HCB.xdelta >= 0.0) {\n                imin = Math.floor((xmin - HCB.xstart) / HCB.xdelta) - 1;\n                imax = Math.floor((xmax - HCB.xstart) / HCB.xdelta + 0.5);\n            } else {\n\n                imin = Math.floor((xmax - HCB.xstart) / HCB.xdelta) - 1;\n                imax = Math.floor((xmin - HCB.xstart) / HCB.xdelta + 0.5);\n            }\n            imin = Math.max(0.0, imin);\n            imax = Math.min(size, imax);\n\n            var npts = Math.max(0.0, Math.min(imax - imin + 1, Gx.bufmax));\n            if (HCB.xdelta < 0) {\n                imin = imax - npts + 1;\n            }\n\n            if ((imin >= this.imin) && (imin + npts <= this.imin + this.size) && (this.ybuf !== undefined)) {\n                // data already in buffers\n            } else if (this.modified) {\n                // modified data not yet saved off\n\n            } else if (HCB[\"class\"] <= 2) {\n                // load new data\n                var start = this.offset + imin;\n                var skip = this.skip;\n                this.ybufn = npts * Math.max(skip * m.PointArray.BYTES_PER_ELEMENT,\n                    m.PointArray.BYTES_PER_ELEMENT);\n                if ((this.ybuf === undefined) || (this.ybuf.byteLength < this.ybufn)) {\n                    this.ybuf = new ArrayBuffer(this.ybufn);\n                }\n                var ybuf = new m.PointArray(this.ybuf);\n                var ngot = m.grab(HCB, ybuf, start, npts);\n                this.imin = imin;\n                this.xstart = HCB.xstart + (imin) * this.xdelta;\n                this.size = ngot;\n            } else {\n                // type 3000, 4000, 5000\n                // TODO yeah right\n            }\n\n        },\n\n        change_settings: function(settings) {\n            if (settings.index !== undefined) {\n                if (settings.index) {\n                    this.xstart = 1.0;\n                    this.xdelta = 1.0;\n                    this.xmin = 1.0;\n                    this.xmax = this.size;\n                } else {\n                    this.xstart = this.hcb.xstart + (this.imin) * this.xdelta;\n                    this.xdelta = this.hcb.xdelta;\n                    var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);\n                    this.xmin = Math.min(this.hcb.xstart, d);\n                    this.xmax = Math.max(this.hcb.xstart, d);\n                }\n            }\n\n            if (settings.drawmode !== undefined) {\n                this.drawmode = settings.drawmode;\n                // Reset the buffer\n                this.position = 0;\n                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                this.ybuf = new ArrayBuffer(this.ybufn);\n            }\n\n            if (settings.framesize !== undefined) {\n                this.size = settings.framesize;\n                this.xstart = this.hcb.xstart + (this.imin) * this.xdelta;\n                this.xdelta = this.hcb.xdelta;\n                var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);\n                this.xmin = Math.min(this.hcb.xstart, d);\n                this.xmax = Math.max(this.hcb.xstart, d);\n                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                this.ybuf = new ArrayBuffer(this.ybufn);\n            }\n        },\n\n        reload: function(data, hdrmod) {\n            if (this.hcb.pipe) {\n                throw \"reload cannot be used with pipe, use push instead\";\n            }\n            var axis_change = (this.hcb.dview.length !== data.length) || hdrmod;\n            if (hdrmod) {\n                for (var k in hdrmod) {\n                    this.hcb[k] = hdrmod[k];\n                    if (k === \"xstart\" || k === \"xdelta\") {\n                        axis_change = true;\n                    }\n                }\n            }\n            this.hcb.setData(data);\n\n            // Setting these causes refresh() to refetch\n            this.imin = 0;\n            this.xstart = undefined;\n            this.size = 0;\n\n            var xmin = this.xmin;\n            var xmax = this.xmax;\n\n            if (axis_change) {\n                if (this.hcb[\"class\"] === 2) {\n                    m.force1000(this.hcb);\n                }\n                var d = this.hcb.xstart + this.hcb.xdelta * (this.hcb.size - 1.0);\n                this.xmin = Math.min(this.hcb.xstart, d);\n                this.xmax = Math.max(this.hcb.xstart, d);\n                this.xdelta = this.hcb.xdelta;\n                this.xstart = this.hcb.xstart;\n                xmin = undefined;\n                xmax = undefined;\n            }\n\n            return {\n                xmin: xmin,\n                xmax: xmax\n            };\n        },\n\n        push: function(data, hdrmod, sync) {\n            if (hdrmod) {\n                for (var k in hdrmod) {\n                    this.hcb[k] = hdrmod[k];\n                    if (k === \"type\") {\n                        this.hcb[\"class\"] = hdrmod[k] / 1000;\n                    }\n                }\n\n                if (hdrmod.subsize) {\n                    if (this.hcb[\"class\"] === 2) {\n                        m.force1000(this.hcb);\n                        this.size = this.hcb.subsize;\n                        // Reset the buffer\n                        this.position = null;\n                        this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                        this.ybuf = new ArrayBuffer(this.ybufn);\n                    }\n                }\n\n                var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);\n                this.xmin = this.hcb.xmin || Math.min(this.hcb.xstart, d);\n                this.xmax = this.hcb.xmax || Math.max(this.hcb.xstart, d);\n                this.xdelta = this.hcb.xdelta;\n                this.xstart = this.hcb.xstart;\n            }\n\n            if (data.length > 0) {\n                m.filad(this.hcb, data, sync);\n            }\n\n            return hdrmod ? true : false;\n\n        },\n\n        prep: function(xmin, xmax) {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            var npts = Math.ceil(this.size);\n\n            var skip = this.skip;\n\n            if (npts === 0) {\n                return {\n                    num: 0,\n                    start: 0,\n                    end: 0\n                };\n            }\n\n            if (npts * m.PointArray.BYTES_PER_ELEMENT > this.pointbufsize) {\n                this.pointbufsize = npts * m.PointArray.BYTES_PER_ELEMENT;\n                this.xptr = new ArrayBuffer(this.pointbufsize);\n                this.yptr = new ArrayBuffer(this.pointbufsize);\n                this.xpoint = new m.PointArray(this.xptr);\n                this.ypoint = new m.PointArray(this.yptr);\n            }\n\n            var dbuf = new m.PointArray(this.ybuf);\n            var qmin = this.xmin;\n            var qmax = this.xmax;\n            var n1, n2;\n            var mxmn;\n            // xsub isn't really used yet, so it can largely be ignored\n            if ((Gx.cmode === 5) || (this.xsub > 0)) {\n                if (npts <= 0) {\n                    // This is a degenerate case when there are no points\n                    qmin = Gx.panxmin;\n                    qmax = Gx.panxmax;\n                } else if (Gx.cmode !== 5) {\n                    // Largely unused code since xsub isn't used\n                    this.xpoint = new m.PointArray(this.xbuf);\n                } else if (this.cx) {\n                    // This is the pre-dominate condition\n                    m.vmov(dbuf, skip, this.xpoint, 1, npts);\n                } else if (this.line !== 0) {\n                    // If we have been asked to plot Real vs. Imaginary\n                    // for real data and there is a line being drawn\n                    // we take the min x and max x and then plot it\n                    // later on against the first two ypoints...it's\n                    // not clear if this is correct or not, but since\n                    // it's a degenerate case it is tolerated\n                    mxmn = m.vmxmn(dbuf, npts);\n                    this.xpoint[0] = mxmn.smax;\n                    this.xpoint[1] = mxmn.smin;\n                    n1 = 0;\n                    n2 = 2;\n                    npts = 2;\n                } else {\n                    // Otherwise we just plot the y-values\n                    this.xpoint = dbuf;\n                }\n                if (npts > 0) {\n                    mxmn = m.vmxmn(this.xpoint, npts);\n                    qmax = mxmn.smax;\n                    qmin = mxmn.smin;\n                    n1 = 0;\n                    n2 = npts;\n                }\n            } else if (npts > 0) {\n                var xstart = this.xstart;\n                var xdelta = this.xdelta;\n                var d = npts;\n                if (Gx.index) {\n                    n1 = 0;\n                    n2 = npts - 1;\n                } else if (xdelta >= 0.0) {\n                    n1 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta))) - 1.0;\n                    n2 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) + 2.0)) - 1.0;\n                } else {\n                    n1 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) - 1.0)) - 1.0;\n                    n2 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta) + 2.0)) - 1.0;\n                }\n\n                npts = n2 - n1 + 1;\n                if (npts < 0) {\n                    m.log.debug(\"Nothing to plot\");\n                    npts = 0;\n                }\n                dbuf = new m.PointArray(this.ybuf).subarray(n1 * skip);\n                xstart = xstart + xdelta * (n1);\n                for (var i = 0; i < npts; i++) {\n                    if (Gx.index) {\n                        this.xpoint[i] = this.imin + i + 1;\n                    } else {\n                        this.xpoint[i] = xstart + i * xdelta;\n                    }\n                }\n            }\n\n            if (Gx.panxmin > Gx.panxmax) {\n                Gx.panxmin = qmin;\n                Gx.panxmax = qmax;\n            } else {\n                Gx.panxmin = Math.min(Gx.panxmin, qmin);\n                Gx.panxmax = Math.max(Gx.panxmax, qmax);\n            }\n\n            if (npts <= 0) {\n                m.log.debug(\"Nothing to plot\");\n                return {\n                    num: npts,\n                    start: n1,\n                    end: n2\n                };\n            }\n            if (this.cx) {\n                if (Gx.cmode === 1) {\n                    m.cvmag(dbuf, this.ypoint, npts);\n                } else if (Gx.cmode === 2) {\n                    if (Gx.plab === 25) {\n                        m.cvpha(dbuf, this.ypoint, npts);\n                        m.vsmul(this.ypoint, 1.0 / (2 * Math.PI), this.ypoint, npts);\n                    } else if (Gx.plab !== 24) {\n                        m.cvpha(dbuf, this.ypoint, npts);\n                    } else {\n                        m.cvphad(dbuf, this.ypoint, npts);\n                    }\n                } else if (Gx.cmode === 3) {\n                    m.vmov(dbuf, skip, this.ypoint, 1, npts);\n                } else if (Gx.cmode >= 6) {\n                    m.cvmag2(dbuf, this.ypoint, npts);\n                } else if (Gx.cmode >= 4) {\n                    m.vmov(dbuf.subarray(1), skip, this.ypoint, 1, npts);\n                }\n            } else {\n                if (Gx.cmode === 5) { // I vs. R\n                    m.vfill(this.ypoint, 0, npts);\n                } else if ((Gx.cmode === 1) || (Gx.cmode >= 6)) { // Mag, log\n                    for (var i = 0; i < npts; i++) {\n                        this.ypoint[i] = Math.abs(dbuf[i]);\n                    }\n                } else {\n                    for (var i = 0; i < npts; i++) {\n                        this.ypoint[i] = dbuf[i];\n                    }\n                }\n            }\n\n            if (Gx.cmode >= 6) {\n                m.vlog10(this.ypoint, Gx.dbmin, this.ypoint);\n                var dbscale = 10.0;\n                if (Gx.cmode === 7) {\n                    dbscale = 20.0;\n                }\n                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                    dbscale = dbscale / 2.0;\n                }\n                m.vsmul(this.ypoint, dbscale, this.ypoint);\n            }\n            mxmn = m.vmxmn(this.ypoint, npts);\n\n            qmax = mxmn.smax;\n            qmin = mxmn.smin;\n\n            var yran = qmax - qmin;\n            if (yran < 0.0) {\n                qmax = qmin;\n                qmin = qmax + yran;\n                yran = -yran;\n            }\n            if (yran <= 1.0e-20) {\n                qmin = qmin - 1.0;\n                qmax = qmax + 1.0;\n            } else {\n                qmin = qmin - 0.02 * yran;\n                qmax = qmax + 0.02 * yran;\n            }\n\n            if (Mx.level === 0) {\n                if (Gx.panymin > Gx.panymax) {\n                    Gx.panymin = qmin;\n                    Gx.panymax = qmax;\n                } else {\n                    Gx.panymin = Math.min(Gx.panymin, qmin);\n                    Gx.panymax = Math.max(Gx.panymax, qmax);\n                }\n\n                if (Gx.autol > 1) {\n                    var fac = 1.0 / (Math.max(Gx.autol, 1));\n                    Gx.panymin = Gx.panymin * fac + Mx.stk[0].ymin * (1.0 - fac);\n                    Gx.panymax = Gx.panymax * fac + Mx.stk[0].ymax * (1.0 - fac);\n                }\n            }\n\n            return {\n                num: npts,\n                start: n1,\n                end: n2\n            };\n        },\n\n        draw: function() {\n            var Mx = this.plot._Mx;\n            var Gx = this.plot._Gx;\n\n            var ic = this.color;\n            var symbol = this.symbol;\n            var rad = this.radius;\n            var mask = 0;\n            var line = 0;\n            var traceoptions = {};\n\n            if (this.fillStyle) {\n                traceoptions.fillStyle = this.fillStyle;\n            } else if (Gx.fillStyle) {\n                traceoptions.fillStyle = Gx.fillStyle;\n            }\n            if (this.options) {\n                traceoptions.highlight = this.options.highlight;\n                traceoptions.noclip = this.options.noclip;\n            }\n\n            if (this.line === 0) {\n                line = 0;\n            } else {\n                line = 1;\n                if (this.thick > 0) {\n                    line = this.thick;\n                } else if (this.thick < 0) {\n                    line = Math.abs(this.thick);\n                    traceoptions.dashed = true;\n                }\n                if (this.line === 1) {\n                    traceoptions.vertsym = true;\n                }\n                if (this.line === 2) {\n                    traceoptions.horzsym = true;\n                }\n                if (this.line === 4) {\n                    traceoptions.horzsym = true;\n                    traceoptions.vertsym = true;\n                }\n            }\n\n            var segment = (Gx.segment) && (Gx.cmode !== 5) && (this.xsub > 0) && (mask === 0);\n            var xdelta = this.xdelta;\n\n            var xmin;\n            var xmax;\n            if (this.xdata) {\n                xmin = this.xmin;\n                xmax = this.xmax;\n            } else {\n                xmin = Math.max(this.xmin, Mx.stk[Mx.level].xmin);\n                xmax = Math.min(this.xmax, Mx.stk[Mx.level].xmax);\n                if (xmin >= xmax) { // no data but do scaling\n                    Gx.panxmin = Math.min(Gx.panxmin, this.xmin);\n                    Gx.panxmax = Math.max(Gx.panxmax, this.xmax);\n                }\n            }\n\n            if (!Gx.all) {\n                var xran = (Gx.bufmax - 1.0) * xdelta;\n                if (xran >= -0.0) {\n                    xmax = Math.min(xmax, xmin + xran);\n                } else {\n                    xmin = Math.max(xmin, xmax + xran);\n                }\n            }\n\n            if ((line === 0) && (symbol === 0)) {\n                // Nothing to draw\n                return;\n            }\n            while (xmin < xmax) {\n                //if (Gx.all) {\n                // TODO allow interrupt of all by mouse clicks\n                //}\n\n                if (!this.hcb.pipe) {\n                    // get_data fills in the layer xbuf/ybuf with data\n                    this.get_data(xmin, xmax);\n                }\n\n                // sigplot_prep fills in this.xptr and this.yptr (both m.PointArray)\n                // with the data to be plotted\n\n                var pts = this.prep(xmin, xmax);\n                if (pts.num > 0) {\n                    if (segment) {\n                        // TODO\n                    } else {\n                        mx.trace(Mx,\n                            ic,\n                            new m.PointArray(this.xptr),\n                            new m.PointArray(this.yptr),\n                            pts.num,\n                            pts.start,\n                            1,\n                            line,\n                            symbol,\n                            rad,\n                            traceoptions);\n                    }\n                }\n\n                if (Gx.all) {\n                    if (this.size === 0) {\n                        xmin = xmax;\n                    } else {\n                        if (Gx.index) {\n                            xmin = xmin + pts.num;\n                        } else {\n                            if (xdelta >= 0) {\n                                xmin = xmin + (this.size * xdelta);\n                            } else {\n                                xmax = xmax + (this.size * xdelta);\n                            }\n                        }\n                    }\n                } else {\n                    xmin = xmax;\n                }\n            }\n\n            if ((this.position) && (this.drawmode === \"scrolling\")) {\n                var pnt = mx.real_to_pixel(Mx, this.position * this.xdelta, 0);\n                if ((pnt.x > Mx.l) && (pnt.x < Mx.r)) {\n                    mx.draw_line(Mx, \"white\", pnt.x, Mx.t, pnt.x, Mx.b);\n                }\n            }\n        },\n\n        /**\n         * Add a highlight to a specific layer.\n         *\n         * @param {Number}\n         *            n the layer to add the highlight to\n         * @param highlight\n         *            the highlight to add\n         * @param {Number}\n         *            highlight.xstart x value to start the highlight\n         *            at\n         * @param {Number}\n         *            highlight.xend the maximum x value to end the highlight\n         *            at\n         * @param {String}\n         *            hightlight.color the color to use for the highlight\n         *\n         * @param {String}\n         *            hightlight.id the id for the highlight\n         */\n        add_highlight: function(highlight) {\n            if (!this.options.highlight) {\n                this.options.highlight = [];\n            }\n            // Check for nans\n\n            var xmin = highlight.xstart;\n            var xmax = highlight.xend;\n            var min_nan = isNaN(xmin);\n            var max_nan = isNaN(xmax);\n\n            if ((min_nan === true) || (xmin === null) || (xmin === undefined)) {\n\n                this.options.highlight = [];\n            }\n            if ((max_nan === true) || (xmax === null) || (xmax === undefined)) {\n\n                this.options.highlight = [];\n            }\n\n            if (highlight instanceof Array) {\n                this.options.highlight.push.apply(\n                    this.options.highlight, highlight);\n            } else {\n                this.options.highlight.push(highlight);\n            }\n            this.plot.refresh();\n        },\n\n        /**\n         * Remove a highlight from the layer.\n         *\n         * @param {String} {Object}\n         *             the id of the highlight to remove\n         *             or the highlight object itself\n         */\n        remove_highlight: function(highlight) {\n            if (this.options.highlight) {\n                var i = this.options.highlight.length;\n                while (i--) {\n                    if ((highlight === this.options.highlight[i]) || (highlight === this.options.highlight[i].id)) {\n                        this.options.highlight.splice(i, 1);\n                    }\n                }\n                this.plot.refresh();\n            }\n        },\n\n        get_highlights: function() {\n            if (this.options.highlight) {\n                return this.options.highlight.slice(0);\n            } else {\n                return [];\n            }\n        },\n\n        /**\n         * Clear all highlights from the layer.\n         */\n        clear_highlights: function() {\n            if (this.options.highlight) {\n                this.options.highlight = undefined;\n                this.plot.refresh();\n            }\n        }\n    };\n\n    /**\n     * Color positions for the various layers\n     *\n     * These magic numbers were conjured up by a wizard somewhere.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var mixc = [0, 53, 27, 80, 13, 40, 67, 93, 7, 60, 33, 87, 20, 47, 73, 100];\n\n    /**\n     * Factory to overlay the given file onto the given plot.\n     *\n     * @private\n     */\n    Layer1D.overlay = function(plot, hcb, layerOptions) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (hcb[\"class\"] === 2) {\n            m.force1000(hcb);\n        }\n        hcb.buf_type = \"D\";\n\n        // If the input is type 2000, each row becomes\n        // it's own layer\n        var n1 = 0;\n        var n2 = 1;\n        if ((hcb[\"class\"] === 2) && (hcb.size > 0)) {\n            var num_rows = hcb.size / hcb.subsize;\n            n2 = Math.min(num_rows, 16 - Gx.lyr.length);\n        }\n\n        // Extract the layer_name before enter the loop\n        var layer_name_override = layerOptions[\"name\"];\n        delete layerOptions[\"name\"];\n\n        for (var i = n1; i < n2; i++) {\n            // This is logic from within sigplot.for LOAD_FILES\n            var layer = new Layer1D(plot);\n            layer.init(hcb, layerOptions);\n\n            // Provide a default color for the layer\n            var n = (Gx.lyr.length) % mixc.length;\n            layer.color = mx.getcolor(Mx, m.Mc.colormap[3].colors, mixc[n]);\n\n            // Provide the layer name\n            if (hcb[\"class\"] === 2) {\n                if (layer_name_override !== undefined) {\n                    // If you get an array of names, pull the name\n                    // from this list...if we run out of names before\n                    // we run out of layers fall back\n                    if (Array.isArray(layer_name_override)) {\n                        layer.name = layer_name_override[i];\n                    } else {\n                        layer.name = layer_name_override;\n                        layer.name = layer.name + \".\" + mx.pad((i + 1).toString(), 3, \"0\");\n                    }\n                }\n                // If a name hasn't been assigned yet\n                if (!layer.name) {\n                    if (hcb.file_name) {\n                        layer.name = m.trim_name(hcb.file_name);\n                    } else {\n                        layer.name = \"layer_\" + Gx.lyr.length;\n                    }\n                    layer.name = layer.name + \".\" + mx.pad((i + 1).toString(), 3, \"0\");\n                }\n                layer.offset = i * hcb.subsize;\n            } else {\n                if (layer_name_override !== undefined) {\n                    layer.name = layer_name_override;\n                } else if (hcb.file_name) {\n                    layer.name = m.trim_name(hcb.file_name);\n                } else {\n                    layer.name = \"layer_\" + Gx.lyr.length;\n                }\n                layer.offset = 0;\n            }\n\n            for (var layerOption in layerOptions) {\n                if (layer[layerOption] !== undefined) {\n                    layer[layerOption] = layerOptions[layerOption];\n                }\n            }\n            if (plot.add_layer(layer)) {\n                return layer;\n            } else {\n                return null;\n            }\n        }\n    };\n\n    module.exports = Layer1D;\n\n}());\n","/**\n * @license\n * File: sigplot.layer2d.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License\n */\n\n/* global module */\n/* global require */\n\n(function() {\n\n    var m = require(\"./m\");\n    var mx = require(\"./mx\");\n\n    /**\n     * @constructor\n     * @param plot\n     */\n    var Layer2D = function(plot) {\n        this.plot = plot;\n\n        this.offset = 0.0;\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n        this.ystart = 0.0;\n        this.ydelta = 0.0;\n        this.imin = 0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.name = \"\";\n        this.cx = false;\n        this.hcb = undefined; // index in Gx.HCB\n\n        this.display = true;\n        this.color = 0;\n        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting\n        this.thick = 1; // negative for dashed\n        this.symbol = 0;\n        this.radius = 3;\n\n        this.skip = 0; // number of elements between ord values\n        this.xsub = 0;\n        this.ysub = 0;\n        this.xdata = false; // true if X data is data from file\n        this.modified = false;\n\n        this.preferred_origin = 4;\n        this.opacity = 1;\n\n        // LPB is kinda odd right now, since we read the entire file into memory anyways...\n        // given that often we are loading from an HREF so there is no downside to this...\n        // however, we keep LPB around (for now) so that the scaling behaves identical to\n        // the original code\n        this.lpb = undefined;\n\n        this.yc = 1; // y-compression factor...not yet used\n\n        this.options = {};\n    };\n\n    Layer2D.prototype = {\n\n        /**\n         * Initializes the layer to display the provided data.\n         *\n         * @param hcb\n         *            {BlueHeader} an opened BlueHeader file\n         * @param lyrn\n         *          the index of the added layer\n         *\n         * @memberOf Layer2D\n         * @private\n         */\n        init: function(hcb) {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            this.hcb = hcb;\n            this.hcb.buf_type = \"D\";\n\n            if (this.hcb.pipe) {\n                var self = this;\n                this.position = 0;\n                this.frame = 0;\n\n\n                this.lps = this.hcb.lps || Math.ceil(Math.max(1, (Mx.b - Mx.t)));\n                m.addPipeWriteListener(this.hcb, function() {\n                    self._onpipewrite();\n                });\n            } else {\n                this.lps = this.hcb.lps || Math.ceil(hcb.size);\n            }\n\n            this.offset = 0;\n            this.xbufn = 0;\n            this.ybufn = 0;\n            this.drawmode = \"scrolling\"; // \"falling\", \"rising\"\n\n\n            if (hcb[\"class\"] <= 2) {\n                this.xsub = -1;\n                this.ysub = 1;\n                this.cx = (hcb.format[0] === 'C');\n            } else {\n                // TODO\n            }\n\n            this.skip = 1;\n            if (this.cx) {\n                this.skip = 2;\n            }\n\n            if (Gx.index) {\n                this.xstart = 1.0;\n                this.xdelta = 1.0;\n                this.xmin = 1.0;\n                this.xmax = hcb.subsize;\n                this.ystart = 1.0;\n                this.ydelta = 1.0;\n                this.ymin = 1.0;\n                this.ymax = this.size;\n            } else {\n                this.xstart = hcb.xstart;\n                this.xdelta = hcb.xdelta;\n                var d = hcb.xstart + hcb.xdelta * (hcb.subsize - 1.0);\n                this.xmin = this.hcb.xmin || Math.min(hcb.xstart, d);\n                this.xmax = this.hcb.xmax || Math.max(hcb.xstart, d);\n                this.ystart = hcb.ystart;\n                this.ydelta = hcb.ydelta;\n                var d = hcb.ystart + hcb.ydelta * (this.lps - 1.0);\n                this.ymin = this.hcb.ymin || Math.min(hcb.ystart, d);\n                this.ymax = this.hcb.ymax || Math.max(hcb.ystart, d);\n            }\n\n            // TODO make this work with force 1000 applied\n            this.xframe = this.hcb.subsize;\n            this.yframe = (this.lps * this.hcb.subsize) / this.xframe;\n\n            if (this.lpb === 0) {\n                this.lpb = this.yframe;\n            }\n            if (!this.lpb || (this.lpb <= 0)) {\n                this.lpb = 16;\n            }\n            this.lpb = Math.max(1, this.lpb / this.yc) * this.yc;\n\n            this.xlab = hcb.xunits;\n            this.ylab = hcb.yunits; // might be undefined\n\n        },\n\n        _onpipewrite: function() {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            while (m.pavail(this.hcb) >= (this.hcb.subsize * this.hcb.spa)) {\n\n                // if we aren't scrolling, than update the values\n                // so that the axis scrolls with the data.  The below\n                // code might seem counter intuitive, but given the\n                // the behavior of other rendering code it is configured\n                // to have ymin always be the history (i.e prior to ystart)\n                // and ystart is always the relative \"now\" which is equivalent\n                // to ymax\n                if (this.drawmode !== \"scrolling\") {\n                    this.hcb.ystart += this.hcb.ydelta;\n                    this.ystart = this.hcb.ystart;\n                    this.ymin = this.hcb.ystart - (this.hcb.ydelta * (this.lps));\n                    this.ymax = this.hcb.ystart;\n                }\n\n                if (this.drawmode === \"falling\") {\n                    this.position = 0;\n                    if (this.img) {\n                        mx.shift_image_rows(Mx, this.img, 1);\n                    }\n                } else if (this.drawmode === \"rising\") {\n                    this.position = this.lps - 1;\n                    if (this.img) {\n                        mx.shift_image_rows(Mx, this.img, -1);\n                    }\n                } else if (this.drawmode === \"scrolling\") {\n                    var ylength = Math.abs(this.ymax - this.ymin);\n                    this.ystart = 0;\n                    this.ymin = 0;\n                    this.ymax = ylength;\n                    if (this.position >= this.lps) { // if lps got resized make sure we don't go out of bounds\n                        this.position = 0;\n                    }\n                } else {\n                    throw \"Invalid draw mode\";\n                }\n\n                if (!this.buf) {\n                    // the layer isn't setup correctly yet\n                    return;\n                }\n\n                // grab one row worth of data\n                var ngot = m.grabx(this.hcb, this.buf, this.hcb.subsize * this.hcb.spa);\n                if (ngot === 0) { // shouldn't happen because of the pavail check\n                    m.log.error(\"Internal error\");\n                    return;\n                }\n\n                var zpoint = new m.PointArray(this.hcb.subsize);\n                if (this.cx) {\n                    if (Gx.cmode === 1) {\n                        m.cvmag(this.buf, zpoint, zpoint.length);\n                    } else if (Gx.cmode === 2) {\n                        if (Gx.plab === 25) {\n                            m.cvpha(this.buf, zpoint, zpoint.length);\n                            m.vsmul(zpoint, 1.0 / (2 * Math.PI), zpoint, zpoint.length);\n                        } else if (Gx.plab !== 24) {\n                            m.cvpha(this.buf, zpoint, zpoint.length);\n                        } else {\n                            m.cvphad(this.buf, zpoint, zpoint.length);\n                        }\n                    } else if (Gx.cmode === 3) {\n                        m.vmov(this.buf, this.skip, zpoint, 1, zpoint.length);\n                    } else if (Gx.cmode === 4) {\n                        m.vmov(this.buf.subarray(1), this.skip, zpoint, 1, zpoint.length);\n                    } else if (Gx.cmode === 5) { // IR\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 10.0, zpoint);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 20.0, zpoint);\n                    }\n                } else {\n                    if (Gx.cmode === 1) { // mag\n                        m.vabs(this.buf, zpoint);\n                    } else if (Gx.cmode === 2) { // phase\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 3) { // real\n                        m.vmov(this.buf, this.skip, zpoint, 1, zpoint.length);\n                    } else if (Gx.cmode === 4) { // imag\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 5) { // IR\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.vlogscale(this.buf, Gx.dbmin, 10.0, zpoint);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.vlogscale(this.buf, Gx.dbmin, 20.0, zpoint);\n                    }\n                }\n\n                var min = zpoint[0];\n                var max = zpoint[0];\n                for (var i = 0; i < zpoint.length; i++) {\n                    if (zpoint[i] < min) {\n                        min = zpoint[i];\n                    }\n                    if (zpoint[i] > max) {\n                        max = zpoint[i];\n                    }\n                }\n\n                var zmin, zmax;\n                if (Gx.autol === 1) {\n                    zmin = min;\n                    zmax = max;\n                } else if (Gx.autol > 1) {\n                    var fac = 1.0 / (Math.max(Gx.autol, 1));\n                    zmin = Gx.zmin * fac + min * (1.0 - fac);\n                    zmax = Gx.zmax * fac + max * (1.0 - fac);\n                } else if (Gx.autol < 0) {\n                    // -1 means autol wasn't set so default to\n                    // 5 like the original XRTRASTER; however,\n                    // don't actually override Gx.autol since\n                    // other layers may behave differently\n                    var fac = 1.0 / (Math.max(5, 1));\n                    zmin = Gx.zmin * fac + min * (1.0 - fac);\n                    zmax = Gx.zmax * fac + max * (1.0 - fac);\n                }\n\n                if (((Gx.autoz & 1) !== 0)) {\n                    Gx.zmin = zmin;\n                }\n                if (((Gx.autoz & 2) !== 0)) {\n                    Gx.zmax = zmax;\n                }\n                if (Gx.p_cuts) {\n                    if (this.drawmode === \"scrolling\") {\n                        //fill in the next row of data.\n                        var start_write = this.position * this.hcb.subsize;\n                        var stop_write = start_write + this.hcb.subsize;\n                        var b = 0;\n                        for (var i = start_write; i < stop_write; i++) {\n                            this.zbuf[i] = zpoint[b];\n                            b++;\n                        }\n\n                    }\n                    if (this.drawmode === \"falling\") {\n                        //shift and fill in the next row of data.\n                        var cut_off = (this.lps - 1) * this.hcb.subsize;\n                        var tmp = this.zbuf.slice(0, cut_off);\n                        this.zbuf = [];\n                        for (var i = 0; i < this.hcb.subsize; i++) {\n                            this.zbuf.push(zpoint[i]);\n                        }\n                        this.zbuf.push.apply(this.zbuf, tmp);\n                        tmp = [];\n                    }\n                    if (this.drawmode === \"rising\") {\n                        //shift and fill in the next row of data.\n                        var cut_off = this.lps * this.hcb.subsize;\n                        var tmp = this.zbuf.slice(this.hcb.subsize, cut_off);\n                        this.zbuf = [];\n                        this.zbuf.push.apply(this.zbuf, tmp);\n                        for (var i = 0; i < this.hcb.subsize; i++) {\n                            this.zbuf.push(zpoint[i]);\n                        }\n                        tmp = [];\n                    }\n                }\n\n                if (this.img) {\n                    mx.update_image_row(Mx, this.img, zpoint, this.position, Gx.zmin, Gx.zmax, Gx.xcompression);\n                }\n                this.frame += 1;\n                if (this.drawmode === \"scrolling\") {\n                    this.position = (this.position + 1) % this.lps;\n                }\n\n                if (Mx.level === 0) {\n                    Gx.panymin = this.ymin;\n                    Gx.panymax = this.ymax;\n                    Mx.stk[0].ymin = this.ymin;\n                    Mx.stk[0].ymax = this.ymax;\n                }\n            }\n        },\n\n        get_data: function() {\n            var HCB = this.hcb;\n\n            if (!this.buf) {\n                if (this.hcb.pipe) {\n                    // For pipes, we allocate buf and zbuf to only hold one line of\n                    // data\n                    this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.hcb.subsize);\n                } else {\n                    // Otherwise, we allocate for the entire image\n                    this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                }\n            }\n\n            if (!this.hcb.pipe) {\n                m.grab(HCB, this.buf, 0, HCB.subsize);\n            }\n        },\n\n        /**\n         * Provisional API\n         *\n         * @private\n         * @param x\n         * @param y\n         */\n        get_z: function(x, y) {\n            var ix = Math.floor(x / this.hcb.xdelta);\n            var iy = Math.floor(y / this.hcb.ydelta);\n            var zidx = (iy * this.hcb.subsize) + ix;\n            return this.zbuf[zidx];\n        },\n\n        change_settings: function(settings) {\n            var Gx = this.plot._Gx;\n\n            if (settings.cmode !== undefined) {\n                this.img = undefined;\n                if (((Gx.autoz & 1) !== 0)) {\n                    Gx.zmin = undefined;\n                }\n                if (((Gx.autoz & 2) !== 0)) {\n                    Gx.zmax = undefined;\n                }\n            }\n            if ((settings.zmin !== undefined) ||\n                (settings.zmax !== undefined) ||\n                (settings.autoz !== undefined)) {\n                this.img = undefined;\n            }\n            if (settings.cmap !== undefined) {\n                this.img = undefined;\n            }\n            if ((settings.drawmode !== undefined) || (settings.xmin !== undefined) ||\n                (settings.xmax !== undefined) || (settings.xdelta !== undefined) ||\n                (settings.xstart !== undefined)) {\n                if (settings.drawmode === undefined) {\n                    settings.drawmode = this.drawmode;\n                }\n                this.drawmode = settings.drawmode;\n                // Reset the buffer\n                this.position = 0;\n                this.frame = 0;\n                if (this.hcb.pipe) {\n                    this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.hcb.subsize);\n                } else {\n                    this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                }\n                this.img = undefined;\n\n                if (this.drawmode === \"falling\") {\n                    this.plot._Mx.origin = 1;\n                    this.preferred_origin = 1;\n                } else {\n                    this.plot._Mx.origin = 4;\n                    this.preferred_origin = 4;\n                }\n            }\n            if (settings.opacity !== undefined) {\n                this.opacity = settings.opacity;\n            }\n            if (settings.p_cuts !== undefined) {\n                var p_cuts = Gx.p_cuts;\n                if (settings.p_cuts === null) {\n                    p_cuts = !p_cuts;\n                } else {\n                    p_cuts = settings.p_cuts;\n                }\n\n                // If p_cuts are enabled from streams, we need to keep the entire zbuf in memory\n                if (this.hcb.pipe) {\n                    if (!p_cuts) {\n                        this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                    } else {\n                        this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.hcb.subsize);\n                    }\n                }\n            }\n        },\n\n        push: function(data, hdrmod, sync) {\n            var Gx = this.plot._Gx;\n            var rescale = false;\n            var timestamp = null;\n            if (hdrmod) {\n                // handle timestamps in a unique manner\n                if (hdrmod.timestamp) {\n                    timestamp = hdrmod.timestamp;\n                    delete hdrmod[\"timestamp\"];\n                }\n\n                // If the subsize changes, we need to invalidate the buffer\n                if ((hdrmod.subsize) && (hdrmod.subsize !== this.hcb.subsize)) {\n                    this.hcb.subsize = hdrmod.subsize;\n                    if (this.hcb.pipe && !Gx.p_cuts) {\n                        this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.hcb.subsize);\n\n                    } else {\n                        this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                    }\n                    rescale = true;\n                }\n\n                for (var k in hdrmod) {\n                    if (this.hcb[k] !== hdrmod[k]) {\n                        this.hcb[k] = hdrmod[k];\n                        if (k === \"type\") {\n                            this.hcb[\"class\"] = hdrmod[k] / 1000;\n                        }\n                        rescale = true;\n                    }\n                }\n\n                if (hdrmod.lps) {\n                    this.lps = hdrmod.lps;\n                }\n\n                if (rescale) {\n                    var d = this.hcb.xstart + this.hcb.xdelta * (this.hcb.subsize - 1.0);\n                    this.xmin = Math.min(this.hcb.xstart, d);\n                    this.xmax = Math.max(this.hcb.xstart, d);\n                    this.xdelta = this.hcb.xdelta;\n                    this.xstart = this.hcb.xstart;\n\n                    this.ystart = this.hcb.ystart;\n                    this.ydelta = this.hcb.ydelta;\n                    var d = this.hcb.ystart + this.hcb.ydelta * (this.lps - 1.0);\n                    this.ymin = Math.min(this.hcb.ystart, d);\n                    this.ymax = Math.max(this.hcb.ystart, d);\n                }\n\n            }\n\n            if ((this.hcb.yunits === 1) || (this.hcb.yunits === 4)) {\n                if ((!this.hcb[\"timecode\"]) && (timestamp)) {\n                    // if we don't have a timecode set, we can use\n                    // the timestamp and reset ystart\n                    this.hcb.timecode = m.j1970toj1950(timestamp);\n                    this.hcb.ystart = 0;\n                    rescale = true;\n                } else {\n                    // otherwise, we need to look at timecode, ystart,\n                    // and ydelta to see if the timestamp indicates\n                    // any data drops...and then zero-fill accordingly\n                    // TODO\n                }\n            }\n\n            if (data.length > 0) {\n                m.filad(this.hcb, data, sync);\n            }\n\n            return rescale;\n\n        },\n\n        prep: function(xmin, xmax) {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            var npts = this.lps;\n\n            var skip = this.skip;\n\n            var qmin = this.xmin;\n            var qmax = this.xmax;\n            var n1, n2;\n\n            var xsize = this.hcb.subsize;\n            if (Gx.xcompression > 0) {\n                xsize = Math.ceil(Mx.r - Mx.l);\n            }\n\n            this.get_data(xmin, xmax);\n\n            if (!this.hcb.pipe) {\n                // if we aren't a pipe we do a full prep\n\n                if ((Gx.cmode === 5) || (this.xsub > 0)) {\n                    // TODO - is this mode supported in rasters?\n                } else if (npts > 0) {\n                    var xstart = this.xstart;\n                    var xdelta = this.xdelta;\n                    var d = npts;\n                    if (Gx.index) {\n                        n1 = 0;\n                        n2 = npts - 1;\n                    } else if (xdelta >= 0.0) {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta))) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) + 2.0)) - 1.0;\n                    } else {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) - 1.0)) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta) + 2.0)) - 1.0;\n                    }\n\n                    npts = n2 - n1 + 1;\n                    if (npts < 0) {\n                        m.log.debug(\"Nothing to plot\");\n                        npts = 0;\n                    }\n                }\n\n                if (Gx.panxmin > Gx.panxmax) {\n                    Gx.panxmin = qmin;\n                    Gx.panxmax = qmax;\n                } else {\n                    Gx.panxmin = Math.min(Gx.panxmin, qmin);\n                    Gx.panxmax = Math.max(Gx.panxmax, qmax);\n                }\n\n                if (npts <= 0) {\n                    m.log.debug(\"Nothing to plot\");\n                    return;\n                }\n\n                if ((Gx.cmode === 5) || (this.ysub > 0)) {\n                    // TODO - is this mode supported in rasters?\n                } else if (npts > 0) {\n                    var ystart = this.ystart;\n                    var ydelta = this.ydelta;\n                    var d = npts;\n                    if (Gx.index) {\n                        n1 = 0;\n                        n2 = npts - 1;\n                    } else if (ydelta >= 0.0) {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmin - ystart) / ydelta))) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmax - ystart) / ydelta) + 2.0)) - 1.0;\n                    } else {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmax - ystart) / ydelta) - 1.0)) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmin - ystart) / ydelta) + 2.0)) - 1.0;\n                    }\n\n                    npts = n2 - n1 + 1;\n                    if (npts < 0) {\n                        m.log.debug(\"Nothing to plot\");\n                        npts = 0;\n                    }\n                }\n\n                if (Gx.panymin > Gx.panxmax) {\n                    Gx.panymin = this.ymin;\n                    Gx.panymax = this.ymax;\n                } else {\n                    Gx.panymin = Math.min(Gx.panymin, this.ymin);\n                    Gx.panymax = Math.max(Gx.panymax, this.ymax);\n                }\n\n                if (this.cx) {\n                    if (Gx.cmode === 1) { // mag\n                        m.cvmag(this.buf, this.zbuf, this.zbuf.length);\n                    } else if (Gx.cmode === 2) { // phase\n                        if (Gx.plab === 25) {\n                            m.cvpha(this.buf, this.zbuf, this.zbuf.length);\n                            m.vsmul(this.zbuf, 1.0 / (2 * Math.PI), this.zbuf, this.zbuf.length);\n                        } else if (Gx.plab !== 24) {\n                            m.cvpha(this.buf, this.zbuf, this.zbuf.length);\n                        } else {\n                            m.cvphad(this.buf, this.zbuf, this.zbuf.length);\n                        }\n                    } else if (Gx.cmode === 3) { // real\n                        m.vmov(this.buf, this.skip, this.zbuf, 1, this.zbuf.length);\n                    } else if (Gx.cmode === 4) { // imag\n                        m.vmov(this.buf.subarray(1), this.skip, this.zbuf, 1, this.zbuf.length);\n                    } else if (Gx.cmode === 5) { // IR - what does this mean for a raster?\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 10.0, this.zbuf);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 20.0, this.zbuf);\n                    }\n                } else {\n                    if (Gx.cmode === 1) { // mag\n                        m.vabs(this.buf, this.zbuf);\n                    } else if (Gx.cmode === 2) { // phase\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 3) { // real\n                        m.vmov(this.buf, this.skip, this.zbuf, 1, this.zbuf.length);\n                    } else if (Gx.cmode === 4) { // imag\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 5) { // IR\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.vlogscale(this.buf, Gx.dbmin, 10.0, this.zbuf);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.vlogscale(this.buf, Gx.dbmin, 20.0, this.zbuf);\n                    }\n                }\n\n                // find z-min/z-max\n                // this is equivalent to setting XRASTER /LPB=0\n                var zpoint = this.zbuf;\n\n                var min = 0;\n                var max = 0;\n\n                if ((Gx.autol <= 0) || this.hcb.pipe) {\n                    // If autol is not used or the layer is rendering\n                    // a pipe, then use the basic z-scaling method\n                    if (zpoint.length > 0) {\n                        min = zpoint[0];\n                        max = zpoint[0];\n                        for (var i = 0; i < zpoint.length; i++) {\n                            if ((i / this.xframe) >= this.lpb) {\n                                break;\n                            }\n                            if (zpoint[i] < min) {\n                                min = zpoint[i];\n                            }\n                            if (zpoint[i] > max) {\n                                max = zpoint[i];\n                            }\n                        }\n                    }\n\n                    if (((Gx.autoz & 1) !== 0)) {\n                        if (Gx.zmin !== undefined) {\n                            Gx.zmin = Math.min(Gx.zmin, min);\n                        } else {\n                            Gx.zmin = min;\n                        }\n                    }\n                    if (((Gx.autoz & 2) !== 0)) {\n                        if (Gx.zmax !== undefined) {\n                            Gx.zmax = Math.min(Gx.zmax, max);\n                        } else {\n                            Gx.zmax = max;\n                        }\n                    }\n\n                    this.img = mx.create_image(Mx,\n                        this.zbuf,\n                        this.hcb.subsize,\n                        xsize,\n                        this.lps,\n                        Gx.zmin + Gx.zoff,\n                        Gx.zmax + Gx.zoff,\n                        Gx.xcompression);\n                } else {\n                    // otherwise autol > 1\n                    var nny = this.hcb.size;\n                    var fac = 1.0 / (Math.max(Gx.autol, 1));\n\n                    // If the image isn't yet created, make one now\n                    if (!this.img) {\n                        this.img = mx.create_image(Mx,\n                            this.zbuf,\n                            this.hcb.subsize,\n                            xsize,\n                            this.lps,\n                            Gx.zmin + Gx.zoff,\n                            Gx.zmax + Gx.zoff);\n                    }\n\n                    Gx.zmin = 0;\n                    Gx.zmax = 0;\n                    if (zpoint.length > 0) {\n                        for (var yy = 0; yy < nny; yy++) {\n                            var noff = yy * this.xframe;\n                            var min = zpoint[noff];\n                            var max = zpoint[noff];\n                            for (var i = 0; i < this.xframe; i++) {\n                                min = Math.min(zpoint[noff + i], min);\n                                max = Math.max(zpoint[noff + i], max);\n                            }\n\n                            // Auto-scale this raster line\n                            if ((Gx.autoz !== 2) && (min !== undefined)) {\n                                Gx.zmin = (min * fac) + (Gx.zmin * (1.0 - fac));\n                            }\n                            if ((Gx.autoz !== 1) && (max !== undefined)) {\n                                Gx.zmax = (max * fac) + (Gx.zmax * (1.0 - fac));\n                            }\n\n                            // Render the row\n                            mx.update_image_row(Mx,\n                                this.img,\n                                zpoint.subarray(noff, noff + this.xframe),\n                                yy,\n                                Gx.zmin,\n                                Gx.zmax);\n\n                        }\n                    }\n                }\n            } else {\n                // Setup image for pipe-mode\n                if (Gx.panxmin > Gx.panxmax) {\n                    Gx.panxmin = qmin;\n                    Gx.panxmax = qmax;\n                } else {\n                    Gx.panxmin = Math.min(Gx.panxmin, qmin);\n                    Gx.panxmax = Math.max(Gx.panxmax, qmax);\n                }\n                if (Gx.panymin > Gx.panxmax) {\n                    Gx.panymin = this.ymin;\n                    Gx.panymax = this.ymax;\n                } else {\n                    Gx.panymin = Math.min(Gx.panymin, this.ymin);\n                    Gx.panymax = Math.max(Gx.panymax, this.ymax);\n                }\n\n                if (!this.img) {\n                    if (Gx.zmin === undefined) {\n                        Gx.zmin = 0;\n                    }\n                    if (Gx.zmax === undefined) {\n                        Gx.zmax = 0;\n                    }\n                    this.img = mx.create_image(Mx,\n                        null,\n                        this.hcb.subsize,\n                        xsize,\n                        this.lps,\n                        Gx.zmin + Gx.zoff,\n                        Gx.zmax + Gx.zoff,\n                        Gx.xcompression);\n                }\n            }\n\n            this.img.cmode = Gx.cmode;\n            this.img.cmap = Gx.cmap;\n            this.img.origin = Mx.origin;\n\n            // Make the parts without data transparent\n            if (this.hcb.pipe && (this.frame < this.lps)) {\n                var imgd = new Uint32Array(this.img);\n                if (this.drawmode === \"rising\") {\n                    for (var i = 0; i < imgd.length - (this.frame * xsize); i++) {\n                        imgd[i] = 0;\n                    }\n                } else {\n                    for (var i = this.frame * xsize; i < imgd.length; i++) {\n                        imgd[i] = 0;\n                    }\n                }\n            }\n\n            return npts;\n        },\n\n        draw: function() {\n            var Mx = this.plot._Mx;\n            var Gx = this.plot._Gx;\n            var HCB = this.hcb;\n\n            if (this.hcb.pipe) {\n                var lps = this.hcb.lps || Math.ceil(Math.max(1, (Mx.b - Mx.t)));\n                if ((lps !== this.lps) && this.buf) {\n                    this.lps = lps;\n                    if (this.position >= this.lps) { // if lps got resized make sure we don't go out of bounds\n                        this.position = 0;\n                    }\n                    var d = HCB.ystart + HCB.ydelta * (this.lps - 1.0);\n                    this.ymin = Math.min(HCB.ystart, d);\n                    this.ymax = Math.max(HCB.ystart, d);\n                    // reset the image since we now have more lines to render\n                    // TODO - can we preserve the image data rather than resetting?\n                    this.img = null;\n                    this.plot.rescale();\n                }\n            }\n\n            var xmin = Math.max(this.xmin, Mx.stk[Mx.level].xmin);\n            var xmax = Math.min(this.xmax, Mx.stk[Mx.level].xmax);\n            if (xmin >= xmax) { // no data but do scaling\n                Gx.panxmin = Math.min(Gx.panxmin, this.xmin);\n                Gx.panxmax = Math.max(Gx.panxmax, this.xmax);\n                return;\n            }\n            var ymin = Math.max(this.ymin, Mx.stk[Mx.level].ymin);\n            var ymax = Math.min(this.ymax, Mx.stk[Mx.level].ymax);\n\n            var w = Math.abs(xmax - xmin) + 1;\n            var h = Math.abs(ymax - ymin) + 1;\n\n            w = Math.floor(w / HCB.xdelta);\n            h = Math.floor(h / HCB.ydelta);\n\n            w = Math.min(w, HCB.subsize);\n            h = Math.min(h, HCB.size);\n\n            var ul = mx.real_to_pixel(Mx, xmin, ymin);\n            var lr = mx.real_to_pixel(Mx, xmax, ymax);\n\n            var iw = lr.x - ul.x;\n            var ih = lr.y - ul.y;\n\n            var rx = iw / w;\n            var ry = ih / h;\n\n            Gx.xe = Math.max(1, Math.round(rx));\n            Gx.ye = Math.max(1, Math.round(ry));\n\n            // we might need to prep in certian situations\n            if ((!this.img) || (!this.buf) || (Gx.cmode !== this.img.cmode) || (Gx.cmap !== this.img.cmap) || (Mx.origin !== this.img.origin)) {\n                this.prep(xmin, xmax);\n            }\n\n            // if there is an image, render it\n            if (this.img) {\n                mx.draw_image(Mx, this.img, this.xmin, this.ymin, this.xmax, this.ymax, this.opacity, Gx.rasterSmoothing);\n            }\n\n            // render the scrolling pipe line\n            if (this.position !== null && this.drawmode === \"scrolling\") {\n                var pnt = mx.real_to_pixel(Mx, 0, this.position * this.ydelta);\n                if ((pnt.y > Mx.t) && (pnt.y < Mx.b)) {\n                    mx.draw_line(Mx, \"white\", Mx.l, pnt.y, Mx.r, pnt.y);\n                }\n            }\n        }\n    };\n\n    /**\n     * Factory to overlay the given file onto the given plot.\n     *\n     * @private\n     */\n    Layer2D.overlay = function(plot, hcb, layerOptions) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        hcb.buf_type = \"D\";\n\n        var layer = new Layer2D(plot);\n        layer.init(hcb);\n\n        if (hcb.file_name) {\n            layer.name = m.trim_name(hcb.file_name);\n        } else {\n            layer.name = \"layer_\" + Gx.lyr.length;\n        }\n\n        layer.change_settings(layerOptions);\n\n        if (plot.add_layer(layer)) {\n            return layer;\n        } else {\n            return null;\n        }\n    };\n\n    module.exports = Layer2D;\n\n}());\n"],"sourceRoot":""}