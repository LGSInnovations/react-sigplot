{"version":3,"sources":["webpack://react-sigplot/webpack/universalModuleDefinition","webpack://react-sigplot/webpack/bootstrap","webpack://react-sigplot/./node_modules/prop-types/index.js","webpack://react-sigplot/./node_modules/react/index.js","webpack://react-sigplot/./node_modules/sigplot/js/sigplot.js","webpack://react-sigplot/./node_modules/sigplot/js/m.js","webpack://react-sigplot/./src/sigplot.js","webpack://react-sigplot/./src/layer.js","webpack://react-sigplot/./src/arraylayer.js","webpack://react-sigplot/./src/pipelayer.js","webpack://react-sigplot/./src/hreflayer.js","webpack://react-sigplot/./src/websocketlayer.js","webpack://react-sigplot/./src/index.js","webpack://react-sigplot/./node_modules/sigplot/js/common.js","webpack://react-sigplot/./node_modules/sigplot/js/mx.js","webpack://react-sigplot/./node_modules/sigplot/js/bluefile.js","webpack://react-sigplot/./node_modules/tinycolor2/tinycolor.js","webpack://react-sigplot/./node_modules/object-assign/index.js","webpack://react-sigplot/./node_modules/react/cjs/react.production.min.js","webpack://react-sigplot/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://react-sigplot/./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://react-sigplot/./node_modules/spin/spin.js","webpack://react-sigplot/./node_modules/sigplot/js/matfile.js","webpack://react-sigplot/./node_modules/loglevel/lib/loglevel.js","webpack://react-sigplot/./node_modules/sigplot/js/ColorMap.js","webpack://react-sigplot/./node_modules/sigplot/js/CanvasInput.js","webpack://react-sigplot/./node_modules/sigplot/js/sigplot.layer1d.js","webpack://react-sigplot/./node_modules/sigplot/js/sigplot.layer2d.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Spinner","common","bluefile","matfile","mx","Layer1D","Layer2D","sigplot","element","options","this","Plot","version","KEYPRESS_HELP","SPINNER_OPTS","lines","length","width","radius","corners","rotate","color","speed","trail","shadow","hwaccel","className","zIndex","top","left","browserIsCompatible","hascanvas","document","createElement","hasarraybuf","_Mx","open","plot","Mx","_Gx","GX","parent","mouseOnCanvas","Gx","xlab","ylab","unit_lookup","xmin","undefined","xmax","address","havexmin","havexmax","cmode","RangeError","toUpperCase","line","ylabel","ymin","ymax","haveymin","haveymax","zmin","zmax","havezmin","havezmax","colors","setbgfg","bg","fg","xi","invertbgfg","forcelab","all","expand","xlabel","segment","plab","phunits","xdiv","ydiv","xcompression","xcmp","rasterSmoothing","smoothing","origin","yinv","pmt","bufmax","sections","nsec","anno_type","xfmt","yfmt","index","imode","slice","xdata","note","hold","always_show_marker","vstype","inputs","basefile","lyr","alert","basemode","change_settings","dbmin","dbscale","Math","max","log10","min","pow","level","xstart","xdelta","xmult","ymult","autox","autoy","autoz","autol","scale_base","get_data","stk","panxmin","panxmax","panymin","panymax","font_family","font_width","font_scaled","set_font","ncolors","cmap","xc","setup_cmap","xcnt","cntrls","default_rubberbox_mode","rubberbox_mode","default_rubberbox_action","rubberbox_action","default_rightclick_rubberbox_mode","rightclick_rubberbox_mode","default_rightclick_rubberbox_action","rightclick_rubberbox_action","cross","grid","nogrid","fillStyle","gridBackground","gridStyle","wheelZoom","wheelZoomPercent","legend","no_legend_button","legendBtnLocation","pan","nopan","nomenu","modmode","modlayer","modsource","modified","mod","nmark","iabsc","specs","nospecs","scroll_time_interval","autohide_readout","autohide_panbars","x_scrollbar_location","show_x_axis","noxaxis","show_y_axis","noyaxis","show_readout","noreadout","hide_note","xmrk","ymrk","nodragdrop","addEventListener","evt","preventDefault","files","dataTransfer","load_files","initialized","plot_init","mimicListeners","other","listeners","zoom","unzoom","xpan","ypan","_refresh","onmousemove","e","rect","target","getBoundingClientRect","xpos","offsetX","pageX","scrollX","ypos","pageY","scrollY","offsetY","re","pixel_to_real","retx","x","rety","y","widget","display_specs","createEvent","initEvent","dispatchEvent","warpbox","cross_xpos","rubberline","b","cross_ypos","draw_crosshairs","p_cuts","hcb","y_cut_press_on","x_cut_press_on","draw_p_cuts","throttledOnMouseMove","throttle","onmouseout","event","draw_panbars","prompt","input","enableBlur","onmouseover","disableBlur","onmousedown","type","refresh","ifevent","which","rect_x","rect_y","rect_width","rect_height","inPan","inPanRegion","command","scrollbar","position","scrollbar_x","scrollbar_y","onScrollbar","removeEventListener","menu","title","finalize","items","text","handler","middleClickScrollMenuAction","SB_EXPAND","SB_SHRINK","SB_FULL","sigplot_scrollScaleMenu","repeatPan","stillPanning","clearInterval","repeatPanning","setTimeout","setInterval","lButtonPressed","height","lg_colorbar","mouse_x","mouse_y","top_x1","cbb_top_x1","top_y1","cbb_top_y1","coordsInTriangle","cbb_width","cbb_height","cur_cmap","get_layer","img","current_map","Mc","colormap","pos","bot_x1","cbb_bot_x1","bot_y1","cbb_bot_y1","zoom_style","opacity","return_value","select_style","fill_color","hi","rubberbox","rubberbox_cb","sigplot_mainmenu","ontouchstart","targetTouches","touchClear","touches","clearTimeout","touchEvent","bound","touch_distance","ontouchmove","k","touchStart","new_xpos","new_ypos","delta_xpos","delta_ypos","xscl","ydelta","yscl","cur_distance","scaling","xran","yran","throttledOnTouchMove","ontouchend","console","log","panning","action","widget_callback","docMouseUp","mouseup","inCenter","inCenterRegion","th","text_h","tw","text_w","trunc","inPanCenterRegion","mtagevt","clientX","clientY","w","h","shift","shiftKey","redraw","stopPropagation","cancelBubble","emit_hidemenu","hideMenuEvt","mouseclick","mousedblclick","dragMouseDownHandler","axis","screenX","screenY","dragMouseMoveHandler","scrollAction","flag","rangeOut","range","SB_DRAG","scaleFactor","trange","mouseOffset","realOffset","drag_updateRange","smin","srange","redrawScrollbar","updateViewbox","drag_scrollbar","err","throttledDragOnMouseMove","dragMouseUpHandler","onresize","checkresize","wheelHandler","throttledPan","wheelscroll_mode_natural","deltaY","SB_WHEELDOWN","SB_WHEELUP","step","page","scroll","XW_COMMAND","throttledZoom","zoomperc","percent_zoom","addWheelListener","nokeypress","onkeypress","keyCode","getKeyCode","ctrlKey","altKey","metaKey","redraw_warpbox","xCut","xyKeys","x_pop_now","sigplot_show_x","yCut","y_pop_now","sigplot_show_y","msg","get_z","toString","message","sigplot_show_z","xunits","yunits","sec2tod","timecode","sigplot_show_timecode","fullscreen","invert","show_marker","setKeypressHandler","add_plugin","plugin","zorder","Number","MAX_VALUE","init","canvas","plugins","push","impl","sort","a","remove_plugin","dispose","parentNode","removeElement","splice","addListener","what","callback","removeListener","settings","changemode","newphunits","newplab","phscale","PI","dscl","changephunits","xcut_now","ycut_now","reread","oldLayerData","origHCB","HCB","deoverlay","overlay_bluefile","j","symbol","cleanup","reload","data","hdrmod","rsync","xbnds","rescale","headermod","sync","display","hdrmod_clone","JSON","parse","stringify","overlay_array","overrides","layerOptions","debug","initialize","overlay_pipe","pipe","overlay_websocket","wsurl","ws","WebSocket","binaryType","layer_n","onopen","onmessage","ArrayBuffer","createArray","warning","newHdr","overlay_href","href","onload","show_spinner","handleHeader","endsWith","overlay_matfile","hide_spinner","MatFileReader","BlueFileReader","read_http","error","spinner","xwfg","spin","stop","add_layer","layer","mfile","file_name","dview","basefiles","layers","layerType","overlay","user_data","forEach","resize","preferred_origin","draw_layer","form_plotnote","hdr","f","read","remove_layer","fileName","delete_layer","pixel_zoom","x1","y1","x2","y2","continuous","r1","r2","xperc","yperc","xadj","abs","yadj","ul","lr","xtmp","ytmp","zstk","inContinuousZoom","inZoom","levels","pop","mimic","mask","self","unmimic","xzoom","yzoom","that","keys","ctx","getContext","plotData","valid","drawImage","draw_plugins","draw_marker","render","enable_listeners","onmouseup","onkeydown","onkeyup","disable_listeners","addColorMaps","colormaps","cut_stash","x_cut_data","xframe","row","round","ystart","lps","start","finish","zbuf","old_drawmode","drawmode","old_autol","cx","UNITS","xcut_layer","mxmn","vmxmn","smax","y_cut_data","ycut_layer","pthk","ytimecode","pl","pr","pt","lbtn","pyl","prev_Mx_r","prev_Mx_b","x_box_w","x_box_h","y_box_h","y_box_w","clear_window","drawaxis_flags","noxtlab","noxtics","noxplab","noytics","noytlab","noyplab","xtimecode","drawaxis","shadowbox","noaxisbox","draw_layers","ln","ix","iy","yc","xs","ys","thk","ic","legendPos","maxLabelWidth","labelOffset","labelLength","measureText","strokeStyle","fillRect","strokeRect","floor","sign","thick","L_dashed","draw_line","on","off","draw_symbol","legend_colorbar","layerheight","sigplot_legend_menu","draw_legend","draw_accessories","cxm","cam","xptr","yptr","aretx","arety","zoff","pxscl","pyscl","format","pb","px1","px2","py1","py2","panmode","iysec","isec","lineSmoothing","x_box_x","x_box_y","y_box_x","y_box_y","p_cuts_xpos","p_cuts_ypos","xcut","ycut","ylabel_stash","element1","element2","Array","isArray","custom_cmap","ls","CONTROLS_MENU","checked","CXMODE_MENU","SCALING_MENU","style","setupPrompt","floatValidator","finalValue","parseFloat","GRID_MENU","SETTINGS_MENU","isValid","intValidator","maxXDIV","reason","maxYDIV","COLORMAP_MENU","colormap_handler","item","menuitem","traceoptionsmenu","ii","hexValidator","sym","rad","thickness","MAINMENU","tracemenu","deoverlaymenu","result","active_canvas","toDataURL","link","download","Date","getTime","body","appendChild","click","removeChild","DASHED","COLORS","SOLID","TOGGLE","SYMBOLS","LINE_TYPE","THICKNESS","OPACITY","LEGEND_TRACE","triggerEvent","xo","yo","xl","yl","takeAction","rwh","wpxl","hpxl","plugin_index","clearRect","plotnote","join","draw_pcut_x","plot_width","draw_box","beginPath","lineWidth","z","zrt","zpx","xrt","xpx","xnew","ynew","moveTo","lineTo","stroke","draw_pcut_y","plot_height","yrt","ypx","draw","ybufn","ybuf","yframe","pix","real_to_pixel","clipped","clipped_x","clipped_y","arc","textBaseline","textAlign","font","format_g","fillText","newmode","oldmode","out","ps","pe","need_y_scrollbar","need_x_scrollbar","mouseEvent","scrollbarState","sbx","SCROLLBAR","sby","SIGPLOT_PAN","substring","XW_UPDATE","promptText","onSuccess","inputValue","disableListeners","enableListeners","realOnSuccess","dretx","drety","xval","yval","sec2tspec","chara","charb","substr","LEGACY_RENDER","colorbar_height","button_width","button_height","button_x","button_y","fill","button_y_2","colorbar","xxmin","xxmax","load","noxmin","noxmax","npts","prep","size","dpts","ret","tri_x1","tri_y1","tri_x2","tri_y2","tri_x3","tri_y3","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","inv_denom","u","v","coord","outside_right_border","above_top_border","below_bottom_border","between_top_and_bottom","between_left_and_right","has_bottom_scrollbar","s1","sw","scrollReal2PixOut","scroll_real2pix","direction","scale","newMin","newMax","loglevel","navigator","userAgent","match","Float64Array","BYTES_PER_ELEMENT","PointArray","Float32Array","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","60","61","62","63","red","green","blue","reverse","PIPESIZE","unitInput","first","second","comparer1","comparer2","BlueHeader","field","subsize","enabled_streaming_pcut","in_byte","out_byte","pipesize","buf","setData","data_free","force1000","bpe","ape","grab","bufview","nget","ngot","set","subarray","filad","sidx","eidx","head","tail","byteLength","onwritelisteners","pavail","grabx","offset","navail","addPipeWriteListener","onwrite","indexOf","units_name","units","trim_name","pathfilename","label","mult","prefix","mult_prefix","touchA","touchB","xd","yd","sqrt","VECTOR","MV","MS","nbpt","view","pad2","number","ctype","lo_thresh","vlog10","src","dst","vlogscale","cvmag2logscale","vsmul","mul","count","vec","imax","imin","vmov","sstride","dest","dstride","vfill","inpval","vabs","cvmag","cxvec","cvmag2","cvpha","im","atan2","cvphad","a1","a2","sec","trim_trailing_zeros","tod","j1950","UTC","j1949","midnightToday","getFullYear","getMonth","getDate","millisecs","getHours","getMinutes","getSeconds","days","ceil","secMilli","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toPrecision","dloc","zloc","sec2tod_j1970","j1970toj1950","j1950toj1970","delay","previousCall","time","apply","arguments","SigPlot","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","state","Component","setState","_this2","_this$props","styles","propChildren","children","React","Children","map","child","cloneElement","react_default","_objectSpread","ref","childContextTypes","PropTypes","instanceOf","propTypes","node","string","defaultProps","Layer","context","contextTypes","arrayOf","ArrayLayer","nextProps","PipeLayer","HrefLayer","_this$props2","oldHref","oldOptions","newHref","newOnload","newOptions","func","WebsocketLayer","oldWsurl","newWsurl","newOverrides","__webpack_exports__","sigplot_SigPlot","end","Uint8Array","resultArray","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","cancelAnimFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCanelAnimationFrame","timeoutID","dashOn","setLineDash","mozDash","webkitLineDash","dashOff","charCode","attachEvent","String","search","this_len","obj","buffer","byteOffset","dv","DataView","maxlength","getFloat64","begin","info","warn","Int8Array","constructor","Int16Array","Uint16Array","Int32Array","Uint32Array","cls","_addEventListener","support","_addWheelListener","elem","eventName","useCapture","originalEvent","srcElement","deltaMode","deltaX","delatZ","returnValue","wheelDelta","wheelDeltaX","detail","onmousewheel","update","prop","val","tinycolor","ColorMap","CanvasInput","WARPBOX","MX","clientWidth","clientHeight","wid_canvas","STKSTRUCT","event_cb","rmode","linewidth","button_release","button_press","state_mask","pixel","_renderCanvas","in_fill_range","ele","range_begin","range_end","right","isLeft","p_x","p_y","e_x1","e_y1","e_x2","e_y2","update_winding_number","wn","XW_INIT","XW_DRAW","XW_EVENT","SB_STEPINC","SB_STEPDEC","SB_PAGEINC","SB_PAGEDEC","L_ArrowLeft","L_ArrowRight","L_ArrowUp","L_ArrowDown","GBorder","L_RModeOff","L_RModeOn","L_PixelSymbol","L_CircleSymbol","L_SquareSymbol","L_PlusSymbol","L_XSymbol","L_TriangleSymbol","L_ITriangleSymbol","L_HLineSymbol","L_VLineSymbol","tmin","dragoutline","initial_pause","repeat_pause","swmin","soff","arrow","mxevent","repeat_count","oncontextmenu","_ctx","alt_style","def_style","onWidgetLayer","erase_window","old_warpbox","offsetParent","offsetLeft","offsetTop","onCanvas","current_active","withWidgetLayer","_animationFrameHandle","mixcolor","color1","color2","perc1to2","c1","toRgb","c2","mix","g","toHexString","linear_gradient","step_size","lingrad","createLinearGradient","addColorStop","equals","xwbg","xwts","xwbs","xwms","xwlo","clr","settheme","theme","close","sb","xe","ye","qs","qe","stat","sblocal","scroll_loc","scroll_vals","sv","op","btn","rr","d2","tri","cnt","fillColor","strokeColor","fill_rectangle","draw_rectangle","tempTri","fill_poly","start_poly","closePath","draw_poly","draw_symbols","pixx","pixy","npix","istart","trace","xpoint","ypoint","skip","symb","dashed","stk4","yymin","noclip","clip","dx","dy","bufsize","ib","lvisible","vertsym","horzsym","sn","highlight","xend","rxs","rxe","cn","mid_x","mid_y","ie","visible","lx","ly","tL","tE","clipt","draw_lines","fillMin","fillMax","fill_trace","x_start","x_end","xstart_pixel_value","xend_pixel_value","pi_start","pi_end","pixx_new","pixy_new","q","this_point","this_point_y","draw_mode","isNaN","to_rgb","getColor","current_color","newcolor","save","restore","inorigin","outorigin","instk","outstk","diff","sum","end1","end2","absmax","kengr","onsubmit","errorTimeout","inputValid","pxIndex","fontIndex","fontSize","fontFamily","canvasInput","backgroundColor","fontColor","borderWidth","borderRadius","padding","boxShadow","innerShadow","renderOnReturn","tabToClear","subHandlerCreator","messageX","messageY","newValue","redrawPrompt","xssPrompt","xcc","ycc","yPos","inputXPos","widgetbox","inputYPos","redrawPromptCreator","focus","strict","isFinite","parseInt","test","render_message_box","textColor","center","linel","beg","split","cur","brk","endinreturn","replace","winlines","lastline","draw_round_box","fill_opacity","quadraticCurveTo","oldAlpha","globalAlpha","Uint8ClampedArray","dctx","imgd","getImageData","putImageData","ctx_wid","font_size","textline","yend","tics","dmin","dmax","ndiv","dtic","dtic1","nsig","df","sig","nseg","ddf","dft","flags","stk1","iscl","isct","iscr","iscb","exactbox","xTIC","yTIC","_xmult","_ymult","xticlabels","yticlabels","ontop","Function","fact","fmul","itext","jtext","inside","last_xlbl","endtic","ylbl","xlbl_maxlen","sp","xlbl","format_f","trimlabel","itexti","yonright","sep","inrect","MENU_CONSTANTS","sidelab","toplab","n_show","_menu_redraw","animationFrameHandle","avail_space","menu_item_height","n_items","yb","xss","yss","i_begin","queue","i_end","menu_counter","selected","_menu_takeaction","newmenu","_menu_callback","drag_x","drag_y","_menu_dismiss","unshift","next_item","inp","fromCharCode","keypresses","matches","denom","num","accept","lineColor","pc2px","perc","lbl","res","scaleImage","sx","sy","sh","imgctx","createImageData","ibuf","buf8","width_scaling","height_scaling","xx","yy","jj","xb","inx","iny","inw","inh","xt","yt","getcolor","iz","zf","zf1","display_warpbox","leading_nonzero","decloc","exp","eloc","dz","pad","toFixed","legacy_shadowbox","shape","bw","sigplot_shadowbox","alpha","chevron","x_offset","y_offset","eventXPos","eventYPos","ts2","ts1","p1","op1","iretx","irety","setRange","cidx","renderImage","imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","shift_image_rows","update_image_row","didx","create_image","nxc","put_image","nx","ny","nex","ney","draw_image","view_xmin","view_xmax","view_ymin","view_ymax","rx","ry","iw","ih","ARRAY_BUFFER_ENDIANNESS","Error","endianness","_SPA","S","C","V","Q","M","X","T","U","_BPS","P","A","O","B","I","L","F","D","_XM_TO_TYPEDARRAY","_XM_TO_DATAVIEW","dataView","littleEndian","highIndex","lowIndex","MAX_INT","high","getInt32","rv","pow2","Infinity","_applySupportsTypedArray","uintbuf","ab2str","str","parseURL","url","source","protocol","host","hostname","port","query","params","seg","len","file","pathname","hash","path","relative","segments","ext_header_type","dvhdr","headrep","datarep","littleEndianHdr","littleEndianData","ext_start","ext_size","getUint32","data_start","data_size","ds","de","ext_header","unpack_keywords","data_end","spa","bps","bpa","lbuf","lkey","lextra","ltag","tag","ldata","itag","idata","keywords","dic_index","dict_keywords","getInt16","getInt8","dictTypes","TypedArray","concat","readheader","theFile","reader","FileReader","blob","webkitSlice","onloadend","rawhdr","readAsArrayBuffer","raw","oReq","XMLHttpRequest","responseType","overrideMimeType","oEvent","readyState","status","arrayBuffer","response","fileUrl","responseText","oncomplete","blocksize","bufView","worker","charCodeAt","text2buffer","onerror","send","__WEBPACK_AMD_DEFINE_RESULT__","trimLeft","trimRight","tinyCounter","mathRound","mathMin","mathMax","mathRandom","random","opts","rgb","ok","toLowerCase","named","names","matchers","exec","rgba","hsl","hsla","hsv","hsva","hex8","parseIntFromHex","convertHexToDecimal","hex6","hex4","hex3","stringInputToObject","isValidCSSUnit","bound01","convertToPercentage","hsvToRgb","hue2rgb","hslToRgb","boundAlpha","inputToRGB","_originalInput","_r","_g","_b","_a","_roundA","_format","_gradientType","gradientType","_ok","_tc_id","rgbToHsl","rgbToHsv","rgbToHex","allow3Char","hex","charAt","rgbaToArgbHex","convertDecimalToHex","desaturate","amount","toHsl","clamp01","saturate","greyscale","lighten","brighten","darken","hue","complement","triad","tetrad","splitcomplement","analogous","results","slices","part","monochromatic","toHsv","modification","isDark","getBrightness","isLight","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","setAlpha","toHsvString","toHslString","toHex","toHex8","allow4Char","rgbaToHex","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","clone","_applyModification","fn","args","_applyCombination","fromRatio","newColor","rgb1","rgb2","readability","isReadable","wcag2","wcag2Parms","parms","validateWCAG2Parms","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","flipped","flip","isOnePointZero","processPercent","isPercentage","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","getOwnPropertySymbols","propIsEnumerable","propertyIsEnumerable","assign","test1","getOwnPropertyNames","test2","test3","letter","shouldUseNative","from","symbols","to","TypeError","toObject","for","iterator","encodeURIComponent","framesToPop","aa","E","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","G","refs","updater","H","isReactComponent","forceUpdate","J","isPureReactComponent","K","current","currentDispatcher","__self","__source","N","$$typeof","_owner","R","keyPrefix","next","done","=",":","escape","ca","da","W","ba","toArray","only","createRef","PureComponent","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","forwardRef","lazy","_ctor","_status","_result","memo","compare","Fragment","StrictMode","Suspense","createFactory","isValidElement","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","unstable_ConcurrentMode","unstable_Profiler","Y","default","Z","ReactPropTypesSecret","emptyFunction","shim","propName","componentName","location","propFullName","secret","getShim","isRequired","ReactPropTypes","array","bool","any","objectOf","oneOf","oneOfType","exact","checkPropTypes","useCssAnimations","prefixes","animations","createEl","el","ins","sheet","getElementsByTagName","styleSheet","addAnimation","pre","insertRule","vendor","pp","css","merge","def","defaults","fps","ep","tp","mid","insertBefore","firstChild","offsetWidth","offsetHeight","setAttribute","ostep","astep","anim","timeout","background","transformOrigin","transform","animation","childNodes","vml","attr","behavior","adj","addRule","grp","coordsize","coordorigin","margin","filter","rotation","arcsize","global","headerTextBegin","headerTextEnd","subsysOffsetBegin","subsysOffsetEnd","versionOffsetBegin","endianCharsBegin","endianCharsEnd","firstDataTypeOffsetBegin","numBytesOffsetBegin","numBytesOffsetEnd","versionNames","256","dataTypeNames","arrayClassNames","getDataWithType","typeName","output","getUint16","getFloat32","getInt64","MatHeader","headerStr","headerList","trim","platform","createdOn","subsystemOffset","versionName","dataType","dataTypeName","arraySize","currIndex","typeNum","typeSize","arrayFlag","dimTypeNum","dimTypeName","dimTypeSize","rows","arrayNameTypeNum","nameSize","small","arrayNameTypeName","arrayValSize","arrayBuff","startByte","outArr","getArray","__WEBPACK_AMD_DEFINE_FACTORY__","definition","noop","undefinedType","logMethods","bindMethod","methodName","method","replaceLoggingMethods","loggerName","methodFactory","defaultMethodFactory","realMethod","Logger","defaultLevel","currentLevel","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","TRACE","DEBUG","INFO","WARN","ERROR","SILENT","getLevel","setLevel","persist","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","enableAll","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","logger","_log","noConflict","getLoggers","varArgs","nextSource","nextKey","writable","configurable","_low","_high","_fscale","colorindex","colorBlockIndex","_parseColors","col1","col2","colorsInBlock","factorStep","_addColor","interpolate","front","_rgbToHex","_hexToRgb","_checkColorStops","colorsWithNoStops","stopSize","currentPos","_componentToHex","low","factor","_canvas","_x","_y","_extraX","extraX","_extraY","extraY","_fontSize","_fontFamily","_fontColor","_placeHolderColor","placeHolderColor","_fontWeight","fontWeight","_fontStyle","fontStyle","_readonly","readonly","_maxlength","_width","_height","_padding","_borderWidth","_borderColor","borderColor","_borderRadius","_backgroundImage","backgroundImage","_boxShadow","_innerShadow","_selectionColor","selectionColor","_placeHolder","placeHolder","_value","_onsubmit","_onkeydown","_onkeyup","_onfocus","onfocus","_onblur","onblur","_cursor","_cursorPos","_hasFocus","_selection","_wasOver","_renderOnReturn","_disableBlur","_tabToClear","_calcWH","outerW","outerH","_renderCtx","_shadowCanvas","_shadowCtx","backgroundGradient","_backgroundColor","mousemoveCanvasListener","mousemove","mousedownCanvasListener","mousedown","mouseupCanvasListener","mouseupWindowListener","_mouseDown","blur","keydownWindowListener","keydown","keyupWindowListener","pasteWindowListener","clipboardData","getData","startText","endText","_inputsIndex","_updateCanvasWH","doReturn","shadowL","shadowR","shadowT","shadowB","shadowW","shadowH","_selectionUpdated","_clipText","_cursorInterval","nav","isChromeMobile","isMobile","orientation","isShift","_clearSelection","_mapCodeToKey","mouse","_mousePos","_endSelection","_overInput","_clickPos","isOver","cursor","_selectionStart","curPos","isSelection","renderCanvas","br","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","_roundedRect","_drawTextBox","paddingBorder","selectOffset","_textWidth","selectWidth","cursorOffset","textX","textY","isOffsetX","isOffsetY","isBlur","isColor","shadowCtx","scw","sch","Image","fillPer","oldW","oldH","xLeft","xRight","yTop","yBottom","totalW","elm","defaultView","getComputedStyle","paddingLeft","paddingTop","borderLeft","borderTop","htmlTop","htmlLeft","blockedKeys","56","57","59","107","173","189","186","187","188","190","191","192","219","220","221","222","xbuf","xsub","ysub","pointbufsize","buf_type","xbufn","framesize","tle","tl","_onpipewrite","axis_change","n1","n2","dbuf","qmin","qmax","fac","traceoptions","pts","pnt","add_highlight","min_nan","max_nan","remove_highlight","id","get_highlights","clear_highlights","mixc","num_rows","layer_name_override","layerOption","lpb","frame","ylength","zpoint","start_write","stop_write","cut_off","tmp","zidx","timestamp","xsize","nny","noff"],"mappings":"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","file":"react-sigplot.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-sigplot\"] = factory();\n\telse\n\t\troot[\"react-sigplot\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * @license\n * File: sigplot.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jslint nomen: true, browser: true, devel: true */\n\n/* global module */\n/* global require */\n\n(function() {\n\n    var version = \"version-PLACEHOLDER\";\n\n    var Spinner = require(\"spin\");\n    var common = require(\"./common\");\n    var bluefile = require(\"./bluefile\");\n    var matfile = require(\"./matfile\");\n    var m = require(\"./m\");\n    var mx = require(\"./mx\");\n    var Layer1D = require(\"./sigplot.layer1d\");\n    var Layer2D = require(\"./sigplot.layer2d\");\n\n    function sigplot(element, options) {\n        if (!(this instanceof sigplot)) {\n            return new sigplot.Plot(element, options);\n        }\n    }\n\n    sigplot.bluefile = bluefile;\n    sigplot.matfile = matfile;\n    sigplot.m = m;\n    sigplot.mx = mx;\n    sigplot.Layer1D = Layer1D;\n    sigplot.Layer2D = Layer2D;\n    sigplot.version = version;\n\n    /**\n     * Text of the keypress help dialog.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var KEYPRESS_HELP = \"Keypress Table:\\n\" +\n        \"--------------\\n\" +\n        \"?       - Main help box.\\n\" +\n        \"A       - Toggle display x,y readouts:\\n\" +\n        \"          (absc) -> (index) -> (1/absc) -> (time).\\n\" +\n        \"B       - Toggle LM Drag Mode:\\n\" +\n        \"          (box) -> (horizontal) -> (vertical).\\n\" +\n        \"C       - Toggle controls.\\n\" +\n        \"K       - Show Marker.\\n\" +\n        \"L       - Toggle legend.\\n\" +\n        \"M       - Pops up main menu\\n\" +\n        \"R       - Toggle display specs (x/y readout)\\n\" +\n        \"S       - Toggle display specs and axes.\\n\" +\n        \"T       - Popup box with timecode value at mouse.\\n\" +\n        \"X       - In 1D mode, popup box with X value at mouse.\\n\" +\n        \"        - In 2D mode, toggle x-cut display.\\n\" +\n        \"Y       - In 1D mode, popup box with Y value at mouse.\\n\" +\n        \"        - In 2D mode, toggle y-cut display.\\n\" +\n        \"P       - In 2D mode, displays p-cuts along side and bottom.\\n\" +\n        \"F       - Toggle fullscreen.\\n\" +\n        \"Cntrl+I - Invert colors.\";\n\n    /**\n     * Text of the main help dialog.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var MAIN_HELP = \"To zoom, press and drag the left mouse (LM) over the region of interest and release. \" +\n        \"To unzoom, press right mouse (RM).  Press the middle mouse (MM) button or press the 'M' key to open the main menu.\" +\n        \"View the function of all keypresses by selecting 'Keypress Info' from the main menu.\";\n\n    /**\n     * Options used when displaying the spinner.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var SPINNER_OPTS = {\n        lines: 13, // The number of lines to draw\n        length: 7, // The length of each line\n        width: 4, // The line thickness\n        radius: 10, // The radius of the inner circle\n        corners: 1, // Corner roundness (0..1)\n        rotate: 0, // The rotation offset\n        color: '#FFF', // #rgb or #rrggbb\n        speed: 1, // Rounds per second\n        trail: 60, // Afterglow percentage\n        shadow: false, // Whether to render a shadow\n        hwaccel: false, // Whether to use hardware acceleration\n        className: 'spinner', // The CSS class to assign to the spinner\n        zIndex: 2e9, // The z-index (defaults to 2000000000)\n        top: 'auto', // Top position relative to parent in px\n        left: 'auto' // Left position relative to parent in px\n    };\n\n    /**\n     * Attempts basic checks to determine if the browser is compatible with\n     * sigplot.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    sigplot.browserIsCompatible = function browserIsCompatible() {\n        // We need a Canvas\n        var test_canvas = document.createElement('canvas');\n        var hascanvas = (test_canvas.getContext) ? true : false;\n\n        // We need ArrayBuffer\n        var hasarraybuf = (\"ArrayBuffer\" in window);\n\n        // File and FileReader are optional...and only\n        // required if the user wants to plot local files\n        return (hascanvas && hasarraybuf);\n    };\n\n\n\n    /**\n     * Construct and render a plot.\n     *\n     * @memberOf sigplot\n     * @constructor\n     *\n     * @example plot = new sigplot.Plot(document.getElementById('plot'), {[options]});\n     *\n     * @param element\n     *            a 'div' DOM element\n     * @param [options]\n     *            Key-value pairs whose values alter the behavior of the plot.\n     *\n     * @param {String}\n     *            options.cmode the plot rendering mode \"IN\" = Index, \"AB\" =\n     *            Abscissa (both of these, along with \"__\" can be added as prefixes to the other modes),\n     *            \"MA\", \"Magnitude\" = Magnitude, \"PH\", \"Phase\" = Phase, \"RE\", \"Real\" = Real,\n     *            \"IM\",\"Imaginary\" = Imaginary, \"LO\", \"D1\", \"10*log10\" = 10*log, \"L2\" or \"D2\"\n     *            , \"20*log10\" = 20*log, \"RI\", \"Real/Imag\", \"Imag/Real\",\"IR\" = Real vs. Imaginary\n     *\n     * @param {String}\n     *            options.phunits the phase units \"D\" = Degrees, \"R\" = Radians,\n     *            \"C\" = Cycles\n     *\n     * @param {Boolean}\n     *            options.cross display cross hairs on the plot\n     *\n     * @param {Boolean}\n     *            options.nogrid hide the background grid\n     *\n     * @param {Boolean}\n     *            options.legend set to false to hide the legend\n     *\n     * @param {Boolean}\n     *            options.no_legend_button set to true to hide the legend button\n     *\n     * @param {Boolean}\n     *            options.nopan disable panning on the plot\n     *\n     * @param {Boolean}\n     *            options.nomenu disable the middle-click menu\n     *\n     * @param {Boolean}\n     *            options.nospec hide all plot specification displays\n     *\n     * @param {Boolean}\n     *            options.noxaxis hide the x-axis\n     *\n     * @param {Boolean}\n     *            options.noyaxis hide the y-axis\n     *\n     * @param {Boolean}\n     *            options.noreadout hide the plot readout area\n     *\n     * @param {Boolean}\n     *            options.nodragdrop prevent file drag drop\n     *\n     * @param {Number}\n     *            options.scroll_time_interval set the time interval for scrolling\n     *\n     * @param {Boolean}\n     *            options.index use the data-index in the X axis\n     *\n     * @param {Number}\n     *            options.autox auto-scaling settings for X axis !!!!CHANGED\n     *\n     * @param {Number}\n     *            options.xmin the minimum range to display on the X axis\n     *\n     * @param {Number}\n     *            options.xmax the maximum range to display on the X axis\n     *\n     * @param {Number}\n     *            options.xlab the units that X-axis uses (see m.UNITS)\n     *\n     * @param {Object}\n     *            options.xlabel function or string for custom X-axis label\n     *\n     * @param {Number}\n     *            options.xdiv the number of divisions on the X axis\n     *\n     * @param {Number}\n     *            options.xcnt configure the mtag mouse controls 0 = Off, 1\n     *            (default) = LM Click, 2 = Continuous\n     *\n     * @param {String}\n     *            options.rubberbox_mode controls the behavior of the rubberbox\n     *            \"zoom\" (default) = zoom to the selected area \"box\" = trigger\n     *            an mtag action on the selected area\n     *\n     * @param {String}\n     *            options.rightclick_rubberbox_mode controls the behavior of the rubberbox\n     *            \"zoom\" = zoom to the selected area \"box\" = trigger\n     *            an mtag action on the selected area.  By default is null to disable\n     *            right-click boxes\n     *\n     * @param {Number}\n     *            options.line the line type to draw 0 = None, 1 = Verticals, 2 =\n     *            Horizontals, 3 (default) = Connecting\n     *\n     * @param {Number}\n     *            options.autoy auto-scaling settings for Y axis !!!! CHANGED\n     *            0 = Fix , 1 = Auto Min , 2 = Auto Max, 3 = Full Auto\n     *\n     * @param {Number}\n     *            options.ylab the units that Y-axis uses (see m.UNITS)\n     *\n     * @param {Object}\n     *            options.ylabel function or string for custom Y-axis label\n     *\n     * @param {Number}\n     *            options.ymin the minimum range to display on the Y axis\n     *\n     * @param {Number}\n     *            options.ymax the maximum range to display on the Y axis\n     *\n     * @param {Number}\n     *            options.ydiv the number of divisions on the Y axis\n     *\n     * @param {Number}\n     *            options.zmin the minimum range to display on the Z axis\n     *\n     * @param {Number}\n     *            options.zmax the maximum range to display on the Z axis\n     *\n     * @param {Boolean}\n     *            options.yinv invert the y-axis\n     *\n     * @param {String}\n     *            options.colors.fg the foreground color as a CSS color\n     *\n     * @param {String}\n     *            options.colors.bg the background color as a CSS color\n     *\n     * @param {Boolean}\n     *            options.xi invert the foreground/background colors\n     *\n     * @param {Boolean}\n     *            options.all show all of the data on the plot instead of just\n     *            one buffer\n     *\n     * @param {Boolean}\n     *            options.expand auto-scale the plot based on all the data (when\n     *            combined with the all option)\n     *\n     * @param {Number}\n     *            options.origin 1 = x1:xmin, x2:xmax, y1:ymax, y2:ymin\n     *            (default), 2 = x1:xmax, x2:xmin, y1:ymax, y2:ymin (x\n     *            inverted), 3 = x1:xmax, x2:xmin, y1:ymin, y2:ymax (x & y\n     *            inverted), 4 = x1:xmin, x2:xmax, y1:ymin, y2:ymax (y inverted)\n     *\n     * @param {Number}\n     *            options.bufmax the buffer size to use\n     *\n     * @param {Boolean}\n     *            options.nokeypress disable key press actions\n     *\n     * @param options.font_family\n     *            the font family to use for text rendered on the plot.  Monospace\n     *            font will generally work best.\n     *\n     * @param {Boolean}\n     *            options.font_scaled mimic the MIDAS plotting behaviour where the\n     *            plot font-size is scaled relative to the width of the\n     *\n     * @param {Boolean}\n     *            options.font_width sets the font width (default=8); if scaled_font\n     *            is set to true, then the font width will be the minimum of font_width\n     *            or plot width/64.\n     *\n     * @returns {Plot}\n     */\n    var Plot = function(element, options) {\n        if (!sigplot.browserIsCompatible()) {\n            throw \"Browser is not compatible\";\n        }\n        // Register with the Mx structure - Step #4\n        this._Mx = mx.open(element);\n        var Mx = this._Mx;\n\n        this._Gx = new GX();\n        this._Gx.parent = element;\n\n        // Variable which stores state of mouse position relative to the canvas\n        this.mouseOnCanvas = false;\n\n        if (!options) {\n            options = {};\n        }\n\n        plot_init(this, options);\n\n        this.mimicListeners = {\n            other: null,\n            listeners: {\n                zoom: null,\n                unzoom: null,\n                xpan: null,\n                ypan: null\n            }\n        };\n\n        this._refresh(); // Draw immediately\n\n        this.onmousemove = (function(plot) {\n            return function(e) {\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n\n                var rect = e.target.getBoundingClientRect();\n                var xpos = (e.offsetX === undefined) ? (e.pageX - rect.left - window.scrollX) : e.offsetX;\n                var ypos = (e.offsetX === undefined) ? (e.pageY - rect.top - window.scrollY) : e.offsetY;\n\n                // var xpos = (e.offsetX === undefined) ? e.layerX : e.offsetX;\n                // var ypos = (e.offsetY === undefined) ? e.layerY : e.offsetY;\n                var re = pixel_to_real(plot, xpos, ypos);\n                Gx.retx = re.x;\n                Gx.rety = re.y;\n\n                if (Mx.widget) {\n                    return;\n                }\n                display_specs(plot);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mmove', true, true);\n                evt.xpos = xpos;\n                evt.ypos = ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                var executeDefault = mx.dispatchEvent(Mx, evt);\n                if (!executeDefault) {\n                    return;\n                }\n\n                // The crosshair logic in websigplot is different\n                // because we need to clear the previous position\n                // of the line (via XOR) and then draw the new line\n                //\n                // The Mx.xpos and Mx.ypos may have already been\n                // updated to their new location so we need to store\n                // the crosshair position in the Gx structure\n                if (Gx.cross) {\n                    if (Mx.warpbox) {\n                        // during zoom operations undraw the crosshairs\n                        if (Gx.cross_xpos !== undefined) {\n                            mx.rubberline(Mx, Gx.cross_xpos, Mx.t,\n                                Gx.cross_xpos, Mx.b);\n                        }\n                        if (Gx.cross_ypos !== undefined) {\n                            mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r,\n                                Gx.cross_ypos);\n                        }\n                        Gx.cross_xpos = undefined;\n                        Gx.cross_ypos = undefined;\n                    } else {\n                        if (plot.mouseOnCanvas) {\n                            draw_crosshairs(plot);\n                            if (Gx.p_cuts && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                                if (!Gx.y_cut_press_on && !Gx.x_cut_press_on) {\n                                    draw_p_cuts(plot);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (Gx.cntrls === 2) {\n                    var evt = document.createEvent('Event');\n                    evt.initEvent('mtag', true, true);\n                    evt.x = Gx.retx;\n                    evt.y = Gx.rety;\n                    evt.xpos = xpos;\n                    evt.ypos = ypos;\n                    mx.dispatchEvent(Mx, evt);\n                }\n            };\n        }(this));\n\n        this.throttledOnMouseMove = m.throttle(this._Gx.scroll_time_interval,\n            this.onmousemove);\n\n        mx.addEventListener(Mx, \"mousemove\", this.throttledOnMouseMove, false);\n\n        this.onmouseout = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n                if (plot.mouseOnCanvas) {\n                    plot.mouseOnCanvas = false;\n\n                    if (Gx.autohide_readout) {\n                        display_specs(plot);\n                    }\n                    if (Gx.autohide_panbars) {\n                        draw_panbars(plot);\n                    }\n                    if (Mx.prompt) {\n                        Mx.prompt.input.enableBlur();\n                    }\n                }\n            };\n        }(this));\n        mx.addEventListener(Mx, \"mouseout\", this.onmouseout, false);\n\n        this.onmouseover = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n                plot.mouseOnCanvas = true;\n                if (Gx.autohide_panbars) {\n                    draw_panbars(plot);\n                }\n                if (Mx.prompt) {\n                    Mx.prompt.input.disableBlur();\n                }\n            };\n        }(this));\n        mx.addEventListener(Mx, \"mouseover\", this.onmouseover, false);\n\n        this.onmousedown = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // mouse down on the canvas should never do a browser default action\n\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n\n                if (Mx.widget && (Mx.widget.type === \"ONESHOT\")) {\n                    Mx.widget = null;\n                    plot.refresh();\n                }\n\n                // Update Mx event fields\n                mx.ifevent(Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mdown', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which;\n                var executeDefault = mx.dispatchEvent(Mx, evt);\n                if (!executeDefault) {\n                    return false;\n                }\n\n                // Check if event occured in the pan region\n                var inPan = inPanRegion(plot);\n\n                // Event processing\n                if (inPan.inPanRegion) { // Mouse position lies in a pan\n                    // region\n                    event.preventDefault();\n                    if (inPan.command !== ' ') {\n                        var scrollbar = null;\n                        var position = null;\n                        if (inPan.command === \"XPAN\") {\n                            scrollbar = Mx.scrollbar_x;\n                        } else if (inPan.command === \"YPAN\") {\n                            scrollbar = Mx.scrollbar_y;\n                        }\n\n                        if (event.which === 2) {\n                            position = {\n                                x: Mx.xpos,\n                                y: Mx.ypos\n                            };\n                            if ((scrollbar !== undefined) && (onScrollbar(position, scrollbar))) {\n                                // Only show menu if on the scrollbar itself\n                                sigplot_scrollScaleMenu(plot, inPan.command);\n                            }\n                        } else {\n                            if (inPan.command !== ' ') {\n                                position = {\n                                    x: Mx.xpos,\n                                    y: Mx.ypos\n                                };\n                                if (!onScrollbar(position, scrollbar) && event.which === 1) { // Left-clicking\n                                    // not on a\n                                    // scrollbar -\n                                    // handle\n                                    // typical pan\n                                    pan(plot, inPan.command, 0, event); // Execute\n                                    // the\n                                    // first\n                                    // pan\n                                    var repeatPan = function() {\n                                        if (!onScrollbar({\n                                                \"x\": Mx.xpos,\n                                                \"y\": Mx.ypos\n                                            }, scrollbar)) {\n                                            pan(plot, inPan.command, 0, event);\n                                            // execute\n                                            // a\n                                            // pan\n                                            // on\n                                            // every\n                                            // interval\n                                        } else {\n                                            // stop\n                                            // panning\n                                            // once you\n                                            // hit the\n                                            // scrollbar\n                                            if (Gx.stillPanning) {\n                                                window.clearInterval(Gx.stillPanning);\n                                                Gx.repeatPanning = undefined;\n                                            }\n                                        }\n                                    };\n\n                                    // Make scrolling smooth, the longer initial prevents\n                                    // a single click from counting twice\n                                    Gx.stillPanning = window.setTimeout(\n\n                                        function() {\n                                            Gx.repeatPanning = window.setInterval(repeatPan, 50);\n                                        }, 250);\n                                }\n                            }\n                        }\n                    }\n                } else { // Mouse not in a pan region, handle other cases\n                    if (event.which === 1 || event.which === 3) {\n                        var lButtonPressed = false;\n                        if (Gx.legendBtnLocation) {\n                            lButtonPressed = coordsInRectangle(Mx.xpos,\n                                Mx.ypos, Gx.legendBtnLocation.x,\n                                Gx.legendBtnLocation.y,\n                                Gx.legendBtnLocation.width,\n                                Gx.legendBtnLocation.height);\n                        }\n\n                        // If we have a large colorbar, we also have buttons:\n                        if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                            if (event.which === 1 || event.which === 3) {\n                                var mouse_x = Mx.xpos;\n                                var mouse_y = Mx.ypos;\n\n                                // Find vertex positions of top and bottom buttons\n                                var top_x1 = Gx.cbb_top_x1;\n                                var top_y1 = Gx.cbb_top_y1;\n                                var top_x2 = top_x1 + Gx.cbb_width;\n                                var top_y2 = top_y1;\n                                var top_x3 = top_x1 + (1 / 2) * Gx.cbb_width;\n                                var top_y3 = top_y1 - Gx.cbb_height;\n\n                                var topButtonPressed = coordsInTriangle(mouse_x, mouse_y, top_x1, top_y1, top_x2, top_y2, top_x3, top_y3);\n                                //console.log(\"Top \", topButtonPressed);\n\n                                if (topButtonPressed) {\n                                    var cur_cmap = Gx.cmap;\n                                    plot.get_layer(0).img = undefined;\n                                    var current_map = m.Mc.colormap[cur_cmap];\n\n                                    for (var i = 0; i < current_map.colors.length; i++) {\n                                        current_map.colors[i].pos += 5.0;\n                                    }\n                                    mx.colormap(Mx, current_map.colors, 16);\n                                    //Gx.zoff += (1/10)*(Gx.zmax - Gx.zmin);\n                                    plot.refresh();\n                                }\n\n                                // bottom\n                                var bot_x1 = Gx.cbb_bot_x1;\n                                var bot_y1 = Gx.cbb_bot_y1;\n                                var bot_x2 = bot_x1 + Gx.cbb_width;\n                                var bot_y2 = bot_y1;\n                                var bot_x3 = bot_x1 + (1 / 2) * Gx.cbb_width;\n                                var bot_y3 = bot_y1 + Gx.cbb_height;\n\n                                var botButtonPressed = coordsInTriangle(mouse_x, mouse_y, bot_x1, bot_y1, bot_x2, bot_y2, bot_x3, bot_y3);\n\n                                if (botButtonPressed) {\n                                    //Gx.zoff -= (1/10)*(Gx.zmax - Gx.zmin);\n                                    var cur_cmap = Gx.cmap;\n                                    var current_map = m.Mc.colormap[cur_cmap];\n                                    plot.get_layer(0).img = undefined;\n                                    for (var i = 0; i < current_map.colors.length; i++) {\n                                        current_map.colors[i].pos -= 5.0;\n                                    }\n                                    mx.colormap(Mx, current_map.colors, 16);\n                                    plot.refresh();\n                                }\n\n                            }\n\n                        }\n\n                        if (lButtonPressed) {\n                            plot.change_settings({\n                                legend: !Gx.legend\n                            }); // toggle the legend\n                        } else {\n                            display_specs(plot);\n\n                            // Styles for rubberbox\n                            var zoom_style = {\n                                opacity: 0,\n                                return_value: \"zoom\"\n                            };\n\n                            var select_style = {\n                                opacity: 0.4,\n                                fill_color: Mx.hi,\n                                return_value: \"select\"\n                            };\n\n                            if (event.which === 1) {\n                                if (Gx.default_rubberbox_action === \"zoom\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rubberbox_mode, zoom_style,\n                                        select_style);\n                                } else if (Gx.default_rubberbox_action === \"select\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rubberbox_mode,\n                                        select_style, zoom_style);\n                                } // otherwise rubber-box is considered disabled\n                            } else if (event.which === 3) {\n                                if (Gx.default_rightclick_rubberbox_action === \"zoom\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rightclick_rubberbox_mode, zoom_style,\n                                        select_style);\n                                } else if (Gx.default_rightclick_rubberbox_action === \"select\") {\n                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),\n                                        Gx.default_rightclick_rubberbox_mode,\n                                        select_style, zoom_style);\n                                } // otherwise right-click rubber-box is considered disabled\n                            }\n                        }\n                    } else if (event.which === 2) {\n                        if (!Gx.nomenu) {\n                            sigplot_mainmenu(plot);\n                        }\n                    }\n                }\n                return false;\n            };\n        }(this));\n        mx.addEventListener(Mx, \"mousedown\", this.onmousedown, false);\n\n        // Putting a finger on the screen and moving it, simulates\n        // pan.\n        this.ontouchstart = (function(plot) {\n            return function(event) {\n                event.preventDefault();\n\n                // See how many fingers are on the screen\n                // 1 finger == pan and/or unzoom\n                if (event.targetTouches.length === 1) {\n\n                    // See if this is a double-tap\n                    if (Mx.touchClear && Mx.touches) {\n                        // Double tap unzooms to L=0 and fully expands the plot\n                        window.clearTimeout(Mx.touchClear);\n                        plot.unzoom();\n                        middleClickScrollMenuAction(plot, mx.SB_FULL, \"XPAN\");\n                        middleClickScrollMenuAction(plot, mx.SB_FULL, \"YPAN\");\n                    } else {\n                        // Normal touch prepares for panning\n                        var touchEvent = event.targetTouches[0];\n                        // Determine the touch position, relative to the canvas\n                        var rect = touchEvent.target.getBoundingClientRect();\n                        var position = {\n                            x: (touchEvent.pageX - rect.left - window.scrollX),\n                            y: (touchEvent.pageY - rect.top - window.scrollY)\n                        };\n\n                        // Update the Mx coordinates\n                        Mx.xpos = m.bound(position.x, 0, Mx.width);\n                        Mx.ypos = m.bound(position.y, 0, Mx.height);\n\n                        // See if the finger lies on the pan-bars\n                        var inPan = inPanRegion(plot, position);\n                        if (!inPan.inPanRegion) {\n                            Mx.touches = event.targetTouches;\n                        } // TODO support touch 'pan' on the panbars\n                    }\n                } else if (event.targetTouches.length === 2) {\n                    Mx.touch_distance = m.touch_distance(event.targetTouches[0], event.targetTouches[1]);\n                }\n            };\n        }(this));\n\n        mx.addEventListener(Mx, \"touchstart\", this.ontouchstart, false);\n\n        this.ontouchmove = (function(plot) {\n            return function(event) {\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n                var k = Mx.level;\n\n                event.preventDefault();\n                if (event.targetTouches.length === 1) {\n                    // Determine the touch event position\n                    var touchStart = Mx.touches[0];\n                    var rect = touchStart.target.getBoundingClientRect();\n                    var startPosition = {\n                        x: (touchStart.pageX - rect.left - window.scrollX),\n                        y: (touchStart.pageY - rect.top - window.scrollY)\n                    };\n\n                    var touchEvent = event.targetTouches[0];\n                    var rect = touchEvent.target.getBoundingClientRect();\n                    var position = {\n                        x: (touchEvent.pageX - rect.left - window.scrollX),\n                        y: (touchEvent.pageY - rect.top - window.scrollY)\n                    };\n\n                    var new_xpos = m.bound(position.x, 0, Mx.width);\n                    var new_ypos = m.bound(position.y, 0, Mx.height);\n                    var delta_xpos = new_xpos - Mx.xpos;\n                    var delta_ypos = new_ypos - Mx.ypos;\n                    Mx.xpos = new_xpos;\n                    Mx.ypos = new_ypos;\n\n                    var inPan = inPanRegion(plot, position);\n                    // If we are in the pan region, don't take any action\n                    if (inPan.inPanRegion) {\n                        return;\n                    }\n\n                    // Pan proportionally to the movement of the touch\n                    var xdelta = (Mx.stk[k].xscl * delta_xpos);\n                    var ydelta = (Mx.stk[k].yscl * delta_ypos);\n\n                    if (Mx.origin === 1) {\n                        // regular x, regular y\n                        xdelta *= -1;\n                    } else if (Mx.origin === 2) {\n                        // inverted x, regular y\n                        ydelta *= -1;\n                    } else if (Mx.origin === 3) {\n                        // inverted x, inverted y\n                        ydelta *= -1;\n                    } else if (Mx.origin === 4) {\n                        // regular x, inverted y\n                        xdelta *= -1;\n                        ydelta *= -1;\n                    }\n\n                    var xmin = Mx.stk[k].xmin + xdelta;\n                    var xmax = Mx.stk[k].xmax + xdelta;\n                    var ymin = Mx.stk[k].ymin + ydelta;\n                    var ymax = Mx.stk[k].ymax + ydelta;\n\n                    if ((xmin >= Gx.xmin) && (xmax <= Gx.xmax)) {\n                        Mx.stk[k].xmin = xmin;\n                        Mx.stk[k].xmax = xmax;\n                    }\n\n                    if ((ymin >= Gx.ymin) && (ymax <= Gx.ymax)) {\n                        Mx.stk[k].ymin = ymin;\n                        Mx.stk[k].ymax = ymax;\n                    }\n\n                    if (Gx.cmode === Gx.basemode && Mx.level === 1) {\n                        Gx.xmin = Math.min(Gx.xmin, xmin);\n                        Gx.xmax = Math.max(Gx.xmax, xmax);\n                        Gx.ymin = Math.min(Gx.ymin, ymin);\n                        Gx.ymax = Math.max(Gx.ymax, ymax);\n                    }\n                    plot.refresh();\n                } else if (event.targetTouches.length === 2) {\n                    var cur_distance = m.touch_distance(event.targetTouches[0], event.targetTouches[1]);\n                    var scaling = (1 - (Mx.touch_distance / cur_distance)) * 0.05;\n\n                    var xran = Mx.stk[k].xmax - Mx.stk[k].xmin;\n                    var yran = Mx.stk[k].ymax - Mx.stk[k].ymin;\n\n                    var xmin = Mx.stk[k].xmin + (scaling * xran);\n                    var xmax = Mx.stk[k].xmax - (scaling * xran);\n                    var ymin = Mx.stk[k].ymin + (scaling * yran);\n                    var ymax = Mx.stk[k].ymax - (scaling * yran);\n\n                    Mx.stk[k].xmin = Math.max(Gx.xmin, xmin);\n                    Mx.stk[k].xmax = Math.min(Gx.xmax, xmax);\n                    Mx.stk[k].ymin = Math.max(Gx.ymin, ymin);\n                    Mx.stk[k].ymax = Math.min(Gx.ymax, ymax);\n\n                    plot.refresh();\n                }\n            };\n        }(this));\n\n        this.throttledOnTouchMove = m.throttle(\n            this._Gx.scroll_time_interval,\n            this.ontouchmove);\n\n        mx.addEventListener(Mx, \"touchmove\", this.throttledOnTouchMove, false);\n\n        this.ontouchend = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                event.preventDefault();\n                console.log(\"on touch end \", event.targetTouches.length);\n                Gx.panning = undefined;\n                plot._Mx.scrollbar_x.action = 0;\n                plot._Mx.scrollbar_y.action = 0;\n                Mx.touch_distance = undefined;\n\n                mx.widget_callback(Mx, event);\n                // Only clear the touches after a slight delay so we can\n                // detect double-tap\n                Mx.touchClear = window.setTimeout(\n\n                    function() {\n                        Mx.touches = undefined;\n                        Mx.touchClear = undefined;\n                    }, 100);\n            };\n        }(this));\n\n        mx.addEventListener(Mx, \"touchend\", this.ontouchend, false);\n\n        this.docMouseUp = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n\n                if (event.which === 1) {\n                    // in general, you shouldn't put anything in here\n                    // ...instead it should go into rubberbox_cb\n                    Gx.panning = undefined;\n                    plot._Mx.scrollbar_x.action = 0; // TODO Is this\n                    // necessary?\n                    plot._Mx.scrollbar_y.action = 0;\n                } //else if (event.which === 2) {\n                // nothing\n                //} else if (event.which === 3) {\n                // nothing\n                //}\n                if (Gx.stillPanning) {\n                    window.clearTimeout(Gx.stillPanning);\n                    Gx.stillPanning = undefined;\n                }\n                if (Gx.repeatPanning) { // Clear the panning interval on any\n                    // mouse up in the document\n                    window.clearInterval(Gx.repeatPanning);\n                    Gx.repeatPanning = undefined;\n                }\n                return false;\n            };\n        }(this));\n        document.addEventListener(\"mouseup\", this.docMouseUp, false);\n\n        this.mouseup = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // mouse up on the canvas should never do a browser default action\n\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                // Update Mx event fields\n                mx.ifevent(plot._Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mup', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which;\n                var executeDefault = mx.dispatchEvent(Mx, evt);\n\n                if (executeDefault) {\n                    if (Mx.warpbox || Mx.widget || Mx.prompt) {\n                        // If any of these are true, the mouseup is going\n                        // to be handled by them...but this is a fragile approach\n                        // because it relies upon implicit ordering of event dispatch\n                        // for mouseup events.  It should be improved/refactored at some point\n                        return;\n                    }\n\n                    // Normal mouse up handling\n                    if (event.which === 1) {\n                        // If we are in the pan region, perform the pan\n                        // otherwise emit an mtag\n                        var inCenter = inPanCenterRegion(plot);\n                        if (inCenter.inCenterRegion) {\n                            if (inCenter.command !== ' ') {\n                                pan(plot, inCenter.command, 0, event); // pan\n                            }\n                        } else if (Gx.cntrls === 1) {\n                            // Update the mark\n                            Gx.xmrk = Gx.retx;\n                            Gx.ymrk = Gx.rety;\n\n                            var mtagevt = document.createEvent('Event');\n                            mtagevt.initEvent('mtag', true, true);\n                            mtagevt.x = Gx.xmrk;\n                            mtagevt.y = Gx.ymrk;\n                            mtagevt.xpos = event.x || event.clientX;\n                            mtagevt.ypos = event.y || event.clientY;\n                            mtagevt.w = undefined;\n                            mtagevt.h = undefined;\n                            mtagevt.shift = event.shiftKey;\n                            mx.dispatchEvent(Mx, mtagevt);\n\n                            // Refresh to draw the new marker position\n                            //if (Gx.always_show_marker || Gx.show_marker) {\n                            plot.redraw();\n                            //}\n                        }\n                    } else if (event.which === 2) {\n                        if (Gx.nomenu) {\n                            // Send an event so that a custom menu can be displayed\n                            // if desired\n                            var evt = document.createEvent('Event');\n                            evt.initEvent('showmenu', true, true);\n                            evt.x = event.x || event.clientX;\n                            evt.y = event.y || event.clientY;\n                            var executeDefault = mx.dispatchEvent(Mx, evt);\n\n                            if (executeDefault) {\n                                if (event.stopPropagation) {\n                                    event.stopPropagation();\n                                }\n                                event.cancelBubble = true;\n                                mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n                                var emit_hidemenu = function() {\n                                    try {\n                                        var hideMenuEvt = document.createEvent('Event');\n                                        hideMenuEvt.initEvent('hidemenu', true, true);\n                                        if (mx.dispatchEvent(Mx, hideMenuEvt)) {\n                                            mx.addEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n                                        }\n                                    } finally {\n                                        document.removeEventListener(\"mouseup\", emit_hidemenu, false);\n                                    }\n                                };\n                                document.addEventListener(\"mouseup\", emit_hidemenu, false);\n                            }\n                        }\n                    } else if (event.which === 3) { // unzoom only happens on\n                        // right-clicks on plot\n                        // unzoom/expand\n                        event.preventDefault();\n\n                        plot.unzoom(1);\n                        plot.refresh();\n                    }\n                }\n\n            };\n        }(this));\n\n        mx.addEventListener(Mx, \"mouseup\", this.mouseup, false);\n\n        this.mouseclick = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // alway prevent any default browser actions on the plot\n\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                // Update Mx event fields\n                mx.ifevent(plot._Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mclick', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which; // not always available on all browser\n                if (mx.dispatchEvent(Mx, evt)) {\n                    // currently there isn't a default for mouseclick to cancel\n                }\n                return false;\n            };\n        }(this));\n        mx.addEventListener(Mx, \"click\", this.mouseclick, false);\n\n        this.mousedblclick = (function(plot) {\n            return function(event) {\n                event.preventDefault(); // alway prevent any default browser actions on the plot\n\n                var Gx = plot._Gx;\n                var Mx = plot._Mx;\n\n                // Update Mx event fields\n                mx.ifevent(plot._Mx, event);\n\n                var evt = document.createEvent('Event');\n                evt.initEvent('mdblclick', true, true);\n                evt.xpos = Mx.xpos;\n                evt.ypos = Mx.ypos;\n                evt.x = Gx.retx;\n                evt.y = Gx.rety;\n                evt.which = event.which; // not always available on all browser\n                if (mx.dispatchEvent(Mx, evt)) {\n                    // currently there isn't a default for mouseclick to cancel\n                }\n                return false;\n            };\n        }(this));\n        mx.addEventListener(Mx, \"dblclick\", this.mousedblclick, false);\n\n        // PANBAR DRAGGING mouse event handlers:\n        this.dragMouseDownHandler = (function(plot) {\n            return function(event) {\n                var Mx = plot._Mx;\n                var Gx = plot._Gx;\n\n                // Check if event occured in the pan region\n                var inPan = inPanRegion(plot);\n\n                // Event processing\n                if (inPan.inPanRegion) { // Mouse position lies in a pan\n                    // region\n                    event.preventDefault();\n                    if (inPan.command !== ' ') {\n                        var scrollbar;\n                        if (inPan.command === \"XPAN\") {\n                            scrollbar = Mx.scrollbar_x;\n                        } else if (inPan.command === \"YPAN\") {\n                            scrollbar = Mx.scrollbar_y;\n                        }\n\n                        var position = {\n                            x: Mx.xpos,\n                            y: Mx.ypos\n                        };\n                        if (scrollbar !== undefined && onScrollbar(position, scrollbar) && event.which === 1) { // On scrollbar, set up\n                            // a DRAG\n                            Gx.panning = {\n                                axis: inPan.command,\n                                xpos: event.screenX, // Use screen-relative\n                                // values here instead\n                                // of div/page-relative\n                                // values\n                                ypos: event.screenY,\n                                xmin: Mx.stk[Mx.level].xmin,\n                                xmax: Mx.stk[Mx.level].xmax,\n                                ymin: Mx.stk[Mx.level].ymin,\n                                ymax: Mx.stk[Mx.level].ymax\n                            };\n                        }\n                    }\n                }\n            };\n        }(this));\n        window.addEventListener(\"mousedown\", this.dragMouseDownHandler, false);\n\n        this.dragMouseMoveHandler = (function(plot) {\n            return function(e) {\n                var Gx = plot._Gx;\n\n                if (Gx.panning !== undefined) { // execute a scrollbar DRAG\n                    try {\n                        drag_scrollbar(plot, Gx.panning.axis, e);\n                    } catch (err) {\n                        console.log(\"Error: \" + err); // TODO Eventually come\n                        // up with better error\n                        // handling here\n                    }\n                }\n            };\n        }(this));\n\n        this.throttledDragOnMouseMove = m.throttle(this._Gx.scroll_time_interval,\n            this.dragMouseMoveHandler);\n\n        window.addEventListener(\"mousemove\", this.throttledDragOnMouseMove,\n            false);\n\n        this.dragMouseUpHandler = (function(plot) {\n            return function(event) {\n                var Gx = plot._Gx;\n\n                if (event.which === 1) {\n                    Gx.panning = undefined; // Panbar dragging completed - clear\n                    // the state variable\n                }\n            };\n        }(this));\n        window.addEventListener(\"mouseup\", this.dragMouseUpHandler, false);\n\n        // TODO this may need to be throttled or debounced\n        this.onresize = (function(plot) {\n            return function(event) {\n                if (mx.checkresize(plot._Mx)) {\n                    plot.refresh();\n                }\n            };\n        }(this));\n\n        // Mouse Wheel logic\n        this.wheelHandler = (function(plot) {\n\n            var Mx = plot._Mx;\n            var Gx = plot._Gx;\n\n            var throttledPan = m.throttle(100, function(inPan) {\n                // Mouse wheel\n                // event over a\n                // panning\n                // region\n\n                var scrollbar;\n                if (inPan.command === \"XPAN\") {\n                    scrollbar = Mx.scrollbar_x;\n                } else if (inPan.command === \"YPAN\") {\n                    scrollbar = Mx.scrollbar_y;\n                }\n\n                // For now, vertical mouse scrolling is the only action that\n                // will trigger a pan\n                // Later, we can add horizontal mouse scrolling if we choose\n                if (Gx.wheelscroll_mode_natural) { // Original Sig-Plot\n                    // orientation\n                    scrollbar.action = (event.deltaY < 0 ? mx.SB_WHEELDOWN : mx.SB_WHEELUP);\n                } else { // Inverted/\"un-natural\" orientation\n                    scrollbar.action = (event.deltaY < 0 ? mx.SB_WHEELUP : mx.SB_WHEELDOWN);\n                }\n\n                scrollbar.step = 0.1 * scrollbar.srange;\n                scrollbar.page = 9 * scrollbar.step;\n\n                // Execute wheel action on the scrollbar\n                mx.scroll(Mx, scrollbar, mx.XW_COMMAND, undefined,\n                    scrollbar);\n\n                // Update the viewbox\n                updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange, inPan.command.slice(0, 1));\n            });\n\n            var throttledZoom = m.throttle(100, function() {\n                var zoomperc = Gx.wheelZoomPercent || 0.2;\n                if (Gx.wheelscroll_mode_natural) {\n                    if (event.deltaY > 0) {\n                        zoomperc = -1 * zoomperc;\n                    }\n                } else { // Inverted/\"un-natural\" orientation\n                    if (event.deltaY < 0) {\n                        zoomperc = -1 * zoomperc;\n                    }\n                }\n\n                if (Gx.wheelZoom === \"x\") {\n                    plot.percent_zoom(zoomperc, 1, true);\n                } else if (Gx.wheelZoom === \"y\") {\n                    plot.percent_zoom(1, zoomperc, true);\n                } else {\n                    plot.percent_zoom(zoomperc, zoomperc, true);\n                }\n            });\n\n            return function(event) {\n                // Update Mx event fields\n                mx.ifevent(Mx, event);\n\n                // Check if event occured in the pan region\n                var inPan = inPanRegion(plot);\n\n                // Event processing\n                if (plot.mouseOnCanvas) {\n                    event.preventDefault();\n\n                    if (inPan.inPanRegion) {\n                        throttledPan(inPan);\n                    } else if (Gx.wheelZoom) {\n                        throttledZoom();\n                    }\n                }\n            };\n        }(this));\n\n        window.addWheelListener(window, this.wheelHandler, false);\n\n        window.addEventListener(\"resize\", this.onresize, false);\n\n        // If multiple plots are in the same window, then it\n        // may be desired to disable keypress behavior and implement\n        // it at a higher-level...by default keypress behavior\n        // is enabled and only works if the mouse if over the plot\n        if (!options.nokeypress) {\n            this.onkeypress = (function(plot) {\n                return function(event) {\n                    var Mx = plot._Mx;\n                    var Gx = plot._Gx;\n                    if (plot.mouseOnCanvas) {\n\n                        if (Mx.widget && (Mx.widget.type === \"MENU\")) {\n                            return; // The menu absorbs the keypress\n                        }\n\n                        if (Mx.widget && (Mx.widget.type === \"ONESHOT\")) {\n                            Mx.widget = null;\n                            plot.refresh();\n                            return;\n                        }\n\n                        var keyCode = common.getKeyCode(event);\n\n                        // Since the mouse is in the plot area, send a keypress event\n                        var evt = document.createEvent('Event');\n                        evt.initEvent('plotkeypress', true, true);\n                        evt.keyCode = keyCode;\n                        evt.shiftKey = event.shiftKey;\n                        evt.ctrlKey = event.ctrlKey;\n                        evt.altKey = event.altKey;\n                        evt.metaKey = event.metaKey;\n                        var executeDefault = mx.dispatchEvent(Mx, evt);\n                        if (!executeDefault) {\n                            return;\n                        }\n\n                        // Only respond to keypresses if the mouse is\n                        // in the plot area....\n\n                        if (keyCode === 97) { // 'a'\n                            Gx.iabsc = (Gx.iabsc + 1) % 4;\n                            // It's kinda up in the air if changing the 'specs'\n                            // area should also change the plotting mode itself...\n                            // on one hand, if you have multiple layers with different\n                            // xdeta's then switching the specs area to index mode will\n                            // give you only the index of the baselayer...on the other hand\n                            // the use may only want to change the readout and not the x-axis\n                            // or the plot...for now this is commented out to behave in the same\n                            // manner as SIGPLOT.\n                            //plot.change_settings({\n                            //\tindex : Gx.iabsc === 1\n                            //});\n                            display_specs(plot);\n                        } else if (keyCode === 108) { // 'l'\n                            plot.change_settings({\n                                legend: !Gx.legend\n                            }); // toggle the legend\n                        } else if (keyCode === 103) { // 'g'\n                            plot.change_settings({\n                                grid: !Gx.grid\n                            }); // toggle the grid\n                        } else if ((keyCode === 98) || (keyCode === 2)) { // 'b' and CTRL-'b'\n                            if (Mx.warpbox) {\n                                if (Mx.warpbox.mode === \"box\") {\n                                    Mx.warpbox.mode = \"horizontal\";\n                                } else if (Mx.warpbox.mode === \"horizontal\") {\n                                    Mx.warpbox.mode = \"vertical\";\n                                } else {\n                                    Mx.warpbox.mode = \"box\";\n                                }\n                                mx.redraw_warpbox(Mx);\n                            }\n                        } else if (keyCode === 99) { // 'c'\n                            plot.change_settings({\n                                xcnt: -1 * Gx.cntrls\n                            });\n                        } else if (keyCode === 114) { // 'r'\n                            plot.change_settings({\n                                show_readout: !Gx.show_readout\n                            });\n                        } else if (keyCode === 115) { // 's'\n                            plot.change_settings({\n                                specs: !Gx.specs\n                            });\n                        } else if (keyCode === 112) { // 'p'\n                            plot.change_settings({\n                                p_cuts: !Gx.p_cuts\n                            });\n                        } else if (keyCode === 120) { // 'x'\n                            if (Gx.x_cut_press_on) {\n                                // leave xCut\n                                plot.xCut();\n                            } else if (Gx.xyKeys === \"pop-up\") {\n                                if (!Gx.x_pop_now) {\n                                    sigplot_show_x(plot);\n                                    Gx.x_pop_now = true;\n                                } else {\n                                    Gx.x_pop_now = false;\n                                }\n                            } else if ((Gx.lyr[0].hcb[\"class\"] === 1) && (Gx.xyKeys === \"automatic\")) {\n                                if (!Gx.x_pop_now) {\n                                    sigplot_show_x(plot);\n                                    Gx.x_pop_now = true;\n                                } else {\n                                    Gx.x_pop_now = false;\n                                }\n                            } else if ((Gx.xyKeys !== \"disable\") && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                                // show xCut if xyKeys aren't disabled and the first layer is \n                                // type 2000 and y-cut isn't currently enabled (we already checked\n                                // that x_cut above)\n                                if (!Gx.y_cut_press_on) {\n                                    plot.xCut(pixel_to_real(plot, 0, Mx.ypos).y);\n                                }\n                            }\n                        } else if (keyCode === 121) { // 'y'\n                            if (Gx.y_cut_press_on) {\n                                plot.yCut();\n                            } else if (Gx.xyKeys === \"pop-up\") {\n                                if (!Gx.y_pop_now) {\n                                    sigplot_show_y(plot);\n                                    Gx.y_pop_now = true;\n                                } else {\n                                    Gx.y_pop_now = false;\n                                }\n                            } else if ((Gx.lyr[0].hcb[\"class\"] === 1) && (Gx.xyKeys === \"automatic\")) {\n                                if (!Gx.y_pop_now) {\n                                    sigplot_show_y(plot);\n                                    Gx.y_pop_now = true;\n                                } else {\n                                    Gx.y_pop_now = false;\n                                }\n                            } else if ((Gx.xyKeys !== \"disable\") && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                                // show xCut if xyKeys aren't disabled and the first layer is \n                                // type 2000 and y-cut isn't currently enabled (we already checked\n                                // that y_cut above)\n                                if (!Gx.x_cut_press_on) {\n                                    plot.yCut(pixel_to_real(plot, Mx.xpos, 0).x);\n                                }\n                            }\n                        } else if (keyCode === 122) { // 'z'\n                            sigplot_show_z(plot);\n                        } else if (keyCode === 116) { // 't'\n                            sigplot_show_timecode(plot);\n                        } else if (keyCode === 109) { // 'm'\n                            if (!Gx.nomenu) {\n                                var evt = document.createEvent('Event');\n                                evt.initEvent('showmenu', true, true);\n                                evt.x = Mx.x;\n                                evt.y = Mx.y;\n                                var executeDefault = mx.dispatchEvent(Mx, evt);\n                                if (executeDefault) {\n                                    sigplot_mainmenu(plot);\n                                }\n                            }\n                        } else if (keyCode === 63) { // '?'\n                            mx.message(Mx, MAIN_HELP);\n                        } else if (keyCode === 102) { // 'f'\n                            mx.fullscreen(Mx);\n                            plot.refresh();\n                        } else if ((keyCode === 9) && (event.ctrlKey)) { // ctrl-i\n                            plot.change_settings({\n                                invert: null\n                            });\n                        } else if (keyCode === 107) { // 'k' show marker\n                            Gx.show_marker = !Gx.show_marker;\n                            plot.redraw();\n\n                        }\n                    }\n                };\n            }(this));\n\n            common.setKeypressHandler(this.onkeypress);\n        }\n\n        return this;\n    };\n\n    // Public methods\n\n    Plot.prototype = { /** @lends Plot **/\n\n        /**\n         * Add a plugin to the plot\n         *\n         * @param plugin\n         *            the plugin object\n         *\n         * @param zorder\n         *            the zorder for the plugin to render, all plugins render as\n         *            overlays on top of the plot\n         */\n        add_plugin: function(plugin, zorder) {\n            if (zorder === undefined) {\n                zorder = Number.MAX_VALUE;\n            }\n            if (zorder <= 0) {\n                throw \"Invalid plugin zorder\";\n            }\n\n\n            plugin.init(this);\n\n            var canvas = document.createElement('canvas');\n            canvas.width = this._Mx.canvas.width;\n            canvas.height = this._Mx.canvas.height;\n\n            this._Gx.plugins.push({\n                impl: plugin,\n                zorder: zorder,\n                canvas: canvas\n            });\n\n            this._Gx.plugins.sort(function(a, b) {\n                return (a.zorder - b.zorder);\n            });\n\n\n            this.refresh();\n        },\n\n        /**\n         * Removes a plugin from the plot\n         *\n         * @param plugin\n         *            the plugin object\n         */\n        remove_plugin: function(plugin) {\n            var i = this._Gx.plugins.length;\n            while (i--) {\n                if (this._Gx.plugins[i].impl === plugin) {\n                    if (plugin.dispose) {\n                        plugin.dispose();\n                    }\n                    if (this._Gx.plugins[i].canvas.parentNode) {\n                        this._Gx.plugins[i].canvas.parentNode.removeElement(this._Gx.plugins[i].canvas);\n                    }\n                    this._Gx.plugins.splice(i, 1);\n                }\n            }\n            this._Gx.plugins.sort(function(a, b) {\n                return (a.zorder - b.zorder);\n            });\n\n            this.refresh();\n        },\n\n        /**\n         * Adds a listener to plot events.\n         *\n         * @example plot.addListener(what, function(event) {});\n         *\n         * @param what\n         *            the name of the event to listen to.  \"file_deoverlayed\" is\n         *            emitted when a file is deoverlayed (the name of the deoverlayed\n         *            file can be found in evt.filename), \"file_overlayed\" is emitted\n         *            when a file is overlayed (the name of the overlayed file can\n         *            be found in evt.filename), \"hidemenu\"\tis emitted when the\n         *            menu should be hidden (a selection is made or a mouse click\n         *            occurs away from the menu), \"mdown\"\tis emitted when the mouse\n         *            down event occurs (the evt has parts evt.xpos (the mouse x-position\n         *            relative to the canvas), evt.ypos (the mouse y-position relative\n         *            to the canvas), evt.x (the mouse x-position relative to the data),\n         *            evt.y (the mouse y-position relative to the data) and evt.which\n         *            (returns which mouse button was pressed for the event)) \"mmove\"\n         *            is emitted when a mouse move event occurs (the evt has parts\n         *            evt.xpos (the mouse x-position relative to the canvas), evt.ypos\n         *            (the mouse y-position relative to the canvas), evt.x (the mouse\n         *            x-position relative to the data), evt.y (the mouse y-position\n         *            relative to the data) and evt.which (returns which mouse button\n         *            was pressed for the event)), \"mtag\"\tis emitted when a mouse \"tag\"\n         *            event occurs (the evt of an mtag has different parts depending\n         *            on what triggered it. It will always contain evt.xpos (the mouse\n         *            x-position relative to the canvas), evt.ypos (the mouse y-position\n         *            relative to the canvas), evt.x (the mouse x-position relative\n         *            to the data), and evt.y (the mouse y-position relative to the data).\n         *            If the rubberboxes are enabled, evt.h and evt.w will contain\n         *            the width and height of the box. evt.shift will contain info\n         *            about the shift key if it is pressed), \"mmove\" is emitted when\n         *            a mouse move event has occurred, \"mdown\" is emitted when\n         *            a mouse down event has occurred (the evt has parts evt.xpos\n         *            (the mouse x-position relative to the canvas), evt.ypos (the\n         *            mouse y-position relative to the canvas), evt.x (the mouse\n         *            x-position relative to the data), evt.y (the mouse y-position\n         *            relative to the data) and evt.which (returns which mouse button\n         *            was pressed for the event)), \"mup\" is emitted when a mouse up\n         *            event occurs. (the evt has parts evt.xpos (the mouse x-position\n         *            relative to the canvas), evt.ypos (the mouse y-position relative\n         *            to the canvas), evt.x (the mouse x-position relative to the data),\n         *            evt.y (the mouse y-position relative to the data) and evt.which\n         *            (returns which mouse button was pressed for the event)),\n         *            \"reread\" is emitted when a reread has been performed, \"sigplotexit\"\n         *            is emitted when an exit plot event occurs, and \"showmenu\"\tis\n         *            emitted when the menu should be shown (the evt.x and evt.y\n         *            contain the coordinates on the plot where the menu will be displayed.\n         *\n         * @param [function]\n         *            callback the function that will be called when the event is heard\n         */\n        addListener: function(what, callback) {\n            var Mx = this._Mx;\n            mx.addEventListener(Mx, what, callback, false);\n        },\n\n        /**\n         * Removes a listener to plot events.\n         *\n         * @param what\n         *            the event that was listned to\n         * @param callback\n         */\n        removeListener: function(what, callback) {\n            var Mx = this._Mx;\n            mx.removeEventListener(Mx, what, callback, false);\n        },\n\n        /**\n         * Change one or more plot settings. For boolean types, passing null\n         * will toggle the setting.\n         *\n         * @example plot.change_settings({[settings]});\n         *\n         * @param settings\n         *            Key-value pairs whose values are the settings to change\n         *\n         * @param {Boolean}\n         *            settings.grid change grid visibility\n         *\n         * @param {Boolean}\n         *            settings.index change index setting\n         *\n         * @param {Boolean}\n         *            settings.all change the plot to show all data\n         *\n         * @param {Boolean}\n         *            settings.show_x_axis true displays the x axis\n         *\n         * @param {Boolean}\n         *            settings.show_y_axis true displays the y axis\n         *\n         * @param {Boolean}\n         *            settings.show_readout true displays the readout\n         *\n         * @param {Boolean}\n         *            settings.specs turns on and off specs\n         *\n         * @param {String}\n         *            settings.xcnt \"leftmouse\", \"continuous\", \"disable\",\n         *            \"enable\"\n         *\n         * @param {Boolean}\n         *            settings.legend true displays the legend\n         *\n         * @param {Boolean}\n         *            settings.pan true will display scrollbars and enable panning\n         *\n         * @param {Boolean}\n         *            settings.cross true displays cross hairs\n         *\n         * @param {String}\n         *            settings.rubberbox_action controls action of rubberbox.\n         *            \"zoom\" (default) = zoom to the selected area, \"select\" =\n         *            select the selected area, and \"null\" = disabled, no action\n         *\n         * @param {String}\n         *            settings.rubberbox_mode controls the behavior of the rubberbox.\n         *            \"zoom\" = zoom to the selected area, \"box\" = trigger an mtag\n         *            action on the selected area\n         *\n         * @param {String}\n         *            settings.rightclick_rubberbox_action controls action of\n         *            rubberbox on rightclick. \"zoom\" = zoom to the selected area,\n         *            \"select\" = select the selected area, and \"null\" (the default)\n         *            = disabled, no action\n         *\n         * @param {String}\n         *            settings.rightclick_rubberbox_mode controls the behavior of\n         *            the rubberbox on rightclck. \"zoom\" = zoom to the selected area,\n         *            \"box\" = trigger an mtag action on the selected area. By default\n         *            is null to disable right-click boxes\n         *\n         * @param {String}\n         *            settings.wheelscroll_mode_natural true indicates natural\n         *            mode, where scrolling the mousewheel forward will pan down\n         *            and backwards will pan up\n         *\n         * @param {String}\n         *            settings.cmode !!!! CHANGED\n         *\n         * @param {String}\n         *            settings.phunits The phase units \"D\" = Degrees, \"R\" = Radians,\n         *            \"C\" = Cycles\n         *\n         * @ param {Boolean}\n         *            settings.lg_colorbar true displays the large colorbar\n         *\n         * @param {Boolean}\n         *            settings.p_cuts true displays p_cuts on a 2D plot\n         */\n\n        change_settings: function(settings) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            for (var i = 0; i < Gx.lyr.length; i++) {\n                Gx.lyr[i].change_settings(settings);\n            }\n\n            if (settings.xyKeys !== undefined) {\n                if (settings.xyKeys === null) {\n                    Gx.xyKeys = \"automatic\";\n                } else {\n                    Gx.xyKeys = settings.xyKeys;\n                }\n            }\n\n            if (settings.grid !== undefined) {\n                if (settings.grid === null) {\n                    Gx.grid = !Gx.grid;\n                } else {\n                    Gx.grid = settings.grid;\n                }\n            }\n\n            if (settings.gridBackground !== undefined) {\n                Gx.gridBackground = settings.gridBackground;\n            }\n\n            if (settings.gridStyle !== undefined) {\n                Gx.gridStyle = settings.gridStyle;\n            }\n\n            if (settings.wheelZoom !== undefined) {\n                Gx.wheelZoom = settings.wheelZoom;\n            }\n\n            if (settings.wheelZoomPercent !== undefined) {\n                Gx.wheelZoomPercent = settings.wheelZoomPercent;\n            }\n\n            if (settings.autol !== undefined) {\n                Gx.autol = settings.autol;\n            }\n\n            if ((settings.index !== undefined) && (settings.index !== Gx.index)) {\n                if (settings.index === null) {\n                    Gx.index = !Gx.index;\n                } else {\n                    Gx.index = settings.index;\n                }\n\n                // the original sigplot.for fails\n                // to do this so that the specs area\n                // has the correct setting.\n                if ((Gx.index) && (Gx.iabsc !== 1)) {\n                    Gx.iabsc = 1;\n                } else if ((!Gx.index) && (Gx.iabsc === 1)) {\n                    Gx.iabsc = 0;\n                }\n\n                var xmin;\n                var xmax;\n                scale_base(this, {\n                    get_data: false\n                }, xmin, xmax);\n\n                // like sigplot, undo all zoom levels\n                this.unzoom();\n            }\n\n            if (settings.all !== undefined) {\n                if (settings.all === null) {\n                    Gx.all = !Gx.all;\n                } else {\n                    Gx.all = settings.all;\n                }\n            }\n\n            if (settings.show_x_axis !== undefined) {\n                if (settings.show_x_axis === null) {\n                    Gx.show_x_axis = !Gx.show_x_axis;\n                } else {\n                    Gx.show_x_axis = settings.show_x_axis;\n                }\n                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);\n            }\n\n            if (settings.show_y_axis !== undefined) {\n                if (settings.show_y_axis === null) {\n                    Gx.show_y_axis = !Gx.show_y_axis;\n                } else {\n                    Gx.show_y_axis = settings.show_y_axis;\n                }\n                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);\n            }\n\n            if (settings.show_readout !== undefined) {\n                if (settings.show_readout === null) {\n                    Gx.show_readout = !Gx.show_readout;\n                } else {\n                    Gx.show_readout = settings.show_readout;\n                }\n                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);\n            }\n\n            if (settings.specs !== undefined) {\n                if (settings.specs === null) {\n                    Gx.specs = !Gx.specs;\n                } else {\n                    Gx.specs = settings.specs;\n                }\n                if (Gx.specs) {\n                    Gx.show_x_axis = true;\n                    Gx.show_y_axis = true;\n                    Gx.show_readout = true;\n                } else {\n                    Gx.show_x_axis = false;\n                    Gx.show_y_axis = false;\n                    Gx.show_readout = false;\n                }\n            }\n\n            if (settings.xcnt !== undefined) {\n                if (settings.xcnt === \"leftmouse\") {\n                    Gx.cntrls = 1;\n                } else if (settings.xcnt === \"continuous\") {\n                    Gx.cntrls = 2;\n                } else if ((settings.xcnt === \"disable\") && (Gx.cntrls > 0)) {\n                    Gx.cntrls = -1 * Gx.cntrls;\n                } else if ((settings.xcnt === \"enable\") && (Gx.cntrls < 0)) {\n                    Gx.cntrls = -1 * Gx.cntrls;\n                } else {\n                    Gx.cntrls = settings.xcnt;\n                }\n            }\n\n            if (settings.legend !== undefined) {\n                if (settings.legend === null) {\n                    Gx.legend = !Gx.legend;\n                } else {\n                    Gx.legend = settings.legend;\n                }\n            }\n\n            if (settings.pan !== undefined) {\n                if (settings.pan === null) {\n                    Gx.pan = !Gx.pan;\n                } else {\n                    Gx.pan = settings.pan;\n                }\n            }\n\n            if (settings.cross !== undefined) {\n                if (settings.cross === null) { // catch null or undefined here\n                    Gx.cross = !Gx.cross;\n                } else {\n                    Gx.cross = settings.cross;\n                }\n                if (!Gx.cross) {\n                    if (Gx.cross_xpos !== undefined) {\n                        mx.rubberline(Mx, Gx.cross_xpos, Mx.t, Gx.cross_xpos,\n                            Mx.b);\n                    }\n                    if (Gx.cross_ypos !== undefined) {\n                        mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r,\n                            Gx.cross_ypos);\n                    }\n                    Gx.cross_xpos = undefined;\n                    Gx.cross_ypos = undefined;\n                } else {\n                    Gx.cross_xpos = undefined;\n                    Gx.cross_ypos = undefined;\n                    if ((!Mx.warpbox) && (this.mouseOnCanvas)) {\n                        draw_crosshairs(this);\n                    }\n                }\n            }\n\n            var cmode;\n            var address = settings.cmode === undefined ? \"\" : settings.cmode;\n            if (typeof address === \"string\") {\n                address = address + \"\";\n                cmode = address.toUpperCase();\n            } else {\n                cmode = address;\n            }\n\n            if (settings.cmode !== undefined) {\n                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                    Gx.cmode = 1;\n                } else {\n                    Gx.cmode = 3;\n                }\n\n                if ((cmode === \"MA\") || (cmode === \"INMA\") || (cmode === \"ABMA\") ||\n                    (cmode === \"__MA\") || (cmode === \"MAGNITUDE\") || (cmode === 1)) {\n                    Gx.cmode = 1;\n                }\n                if ((cmode === \"PH\") || (cmode === \"INPH\") || (cmode === \"ABPH\") ||\n                    (cmode === \"__PH\") || (cmode === \"PHASE\") || (cmode === 2)) {\n                    Gx.cmode = 2;\n                }\n                if ((cmode === \"RE\") || (cmode === \"INRE\") || (cmode === \"ABRE\") ||\n                    (cmode === \"__RE\") || (cmode === \"REAL\") || (cmode === 3)) {\n                    Gx.cmode = 3;\n                }\n                if ((cmode === \"IM\") || (cmode === \"INIM\") || (cmode === \"ABIM\") ||\n                    (cmode === \"__IM\") || (cmode === \"IMAGINARY\") || (cmode === 4)) {\n                    Gx.cmode = 4;\n                }\n                if ((cmode === \"LO\") || (cmode === \"D1\") || (cmode === \"INLO\") || (cmode === \"IND1\") ||\n                    (cmode === \"ABIM\") || (cmode === \"ABD1\") || (cmode === \"__LO\") ||\n                    (cmode === \"__D1\") || (cmode === \"10*LOG10\") || (cmode === 6)) {\n                    Gx.cmode = 6;\n                }\n                if ((cmode === \"L2\") || (cmode === \"D2\") || (cmode === \"INL2\") || (cmode === \"IND2\") ||\n                    (cmode === \"ABLO\") || (cmode === \"ABD2\") || (cmode === \"__L2\") ||\n                    (cmode === \"__D2\") || (cmode === \"20*LOG10\") || (cmode === 7)) {\n                    Gx.cmode = 7;\n                }\n                if ((cmode === \"RI\") || (cmode === \"IR\") || (cmode === \"INRI\") || (cmode === \"INIR\") ||\n                    (cmode === \"ABRI\") || (cmode === \"ABIR\") || (cmode === \"__RI\") ||\n                    (cmode === \"__IR\") || (cmode === \"IMAG/REAL\") || (cmode === \"REAL/IMAG\") || (cmode === 5)) {\n                    if (Gx.index) {\n                        alert(\"Imag/Real mode not permitted in INDEX mode\");\n                    } else {\n                        Gx.cmode = 5;\n                    }\n                }\n\n                Gx.basemode = Gx.cmode;\n                changemode(this, Gx.cmode);\n            }\n\n            if (settings.phunits !== undefined) {\n                changephunits(this, settings.phunits);\n            }\n\n            if (settings.rubberbox_action !== undefined) {\n                Gx.default_rubberbox_action = settings.rubberbox_action;\n            }\n\n            if (settings.rubberbox_mode !== undefined) {\n                Gx.default_rubberbox_mode = settings.rubberbox_mode;\n            }\n\n            if (settings.rightclick_rubberbox_action !== undefined) {\n                Gx.default_rightclick_rubberbox_action = settings.rightclick_rubberbox_action;\n            }\n\n            if (settings.rightclick_rubberbox_mode !== undefined) {\n                Gx.default_rightclick_rubberbox_mode = settings.rightclick_rubberbox_mode;\n            }\n\n            if (settings.wheelscroll_mode_natural !== undefined) {\n                Gx.wheelscroll_mode_natural = settings.wheelscroll_mode_natural;\n            }\n\n            if (settings.colors !== undefined) {\n                if (!settings.colors.fg) {\n                    settings.colors.fg = Mx.fg;\n                }\n                if (!settings.colors.bg) {\n                    settings.colors.bg = Mx.bg;\n                }\n                mx.setbgfg(Mx, settings.colors.bg, settings.colors.fg, Mx.xi);\n            }\n\n            if (settings.cmap !== undefined) {\n                if (settings.cmap === null) {\n                    // default\n                    if (Gx.cmode === 2) {\n                        Gx.cmap = 2; // wheel\n                    } else {\n                        Gx.cmap = 1; // ramp\n                    }\n                } else {\n                    Gx.cmap = settings.cmap; // TODO support string lookup\n                }\n\n                setup_cmap(this, Gx.cmap);\n            }\n\n            if (settings.yinv !== undefined) {\n                if (settings.yinv) {\n                    Mx.origin = 4;\n                } else {\n                    Mx.origin = 1;\n                }\n            }\n\n            if (settings.rasterSmoothing !== undefined) {\n                if (settings.rasterSmoothing === null) {\n                    Gx.rasterSmoothing = !Gx.rasterSmoothing;\n                } else {\n                    Gx.rasterSmoothing = settings.rasterSmoothing;\n                }\n            }\n\n            if (settings.fillStyle !== undefined) {\n                Gx.fillStyle = settings.fillStyle;\n            }\n\n            if (settings.invert !== undefined) {\n                if (settings.invert === null) {\n                    mx.invertbgfg(Mx);\n                } else if (settings.invert === true) {\n                    mx.setbgfg(this, \"white\", \"black\");\n                } else {\n                    mx.setbgfg(this, \"black\", \"white\");\n                }\n            }\n\n            if (settings.nomenu !== undefined) {\n                if (settings.nomenu === null) {\n                    Gx.nomenu = !Gx.nomenu;\n                } else {\n                    Gx.nomenu = settings.nomenu;\n                }\n            }\n\n            if (settings.ymax !== undefined) {\n                if (settings.ymax === null) {\n                    Gx.autoy = Gx.autoy | 2;\n                    Gx.panymax = undefined;\n                    scale_base(this, {});\n                    Gx.ymax = Gx.panymax;\n                } else {\n                    // autoy must be set correctly before calling updateViewbox\n                    Gx.autoy = Gx.autoy & 0xD;\n                    Gx.ymax = settings.ymax;\n                    updateViewbox(this, Mx.stk[0].ymin, settings.ymax, \"Y\");\n                    this.redraw();\n                }\n            }\n\n            if (settings.ymin !== undefined) {\n                if (settings.ymin === null) {\n                    Gx.autoy = Gx.autoy | 1;\n                    Gx.panymin = undefined;\n                    scale_base(this, {});\n                    Gx.ymin = Gx.panymin;\n                } else {\n                    // autoy must be set correctly before calling updateViewbox\n                    Gx.autoy = Gx.autoy & 0xE;\n                    Gx.ymin = settings.ymin;\n                    updateViewbox(this, settings.ymin, Mx.stk[0].ymax, \"Y\");\n                    this.redraw();\n                }\n            }\n\n            // Check autoy setting after checking ymin/ymax\n            // so that explicitly setting autoy will override\n            // implicit settings via ymin/ymax\n            if (settings.autoy !== undefined) {\n                Gx.autoy = settings.autoy;\n                if (((Gx.autoy & 1) !== 0)) {\n                    Gx.ymin = undefined;\n                }\n                if (((Gx.autoy & 2) !== 0)) {\n                    Gx.ymax = undefined;\n                }\n            }\n\n            if (settings.xmin !== undefined) {\n                updateViewbox(this, settings.xmin, Mx.stk[0].xmax, \"X\");\n                Gx.autox = (Gx.autox & 2);\n                this.redraw();\n            }\n\n            if (settings.xmax !== undefined) {\n                updateViewbox(this, Mx.stk[0].xmin, settings.xmax, \"X\");\n                Gx.autox = (Gx.autox & 1);\n                this.redraw();\n            }\n\n            if (settings.zmin !== undefined) {\n                Gx.zmin = settings.zmin;\n                Gx.autoz = (Gx.autoz & 2);\n            }\n\n            if (settings.zmax !== undefined) {\n                Gx.zmax = settings.zmax;\n                Gx.autoz = (Gx.autoz & 1);\n            }\n\n            if (settings.autoz !== undefined) {\n                Gx.autoz = settings.autoz;\n                if (((Gx.autoz & 1) !== 0)) {\n                    Gx.zmin = undefined;\n                }\n                if (((Gx.autoz & 2) !== 0)) {\n                    Gx.zmax = undefined;\n                }\n            }\n\n            if (settings.note !== undefined) {\n                Gx.note = settings.note;\n            }\n\n            if (settings.lg_colorbar !== undefined) {\n                // Change the plot area and then draw the large colorbar\n                Gx.lg_colorbar = !Gx.lg_colorbar;\n            }\n\n            if (settings.p_cuts !== undefined) {\n                // Change the plot area and then draw the p_cuts dipslay\n                if (settings.p_cuts === null) {\n                    Gx.p_cuts = !Gx.p_cuts;\n                } else {\n                    Gx.p_cuts = settings.p_cuts;\n                }\n            }\n\n            //this is a setting that is true if we are drawing an xcut\n            if (settings.xcut_now !== undefined) {\n                Gx.xcut_now = !Gx.xcut_now;\n            }\n\n            //this is a setting that is true if we are drawing a ycut\n            if (settings.ycut_now !== undefined) {\n                Gx.ycut_now = !Gx.ycut_now;\n            }\n\n            this.refresh();\n            if (settings.pan !== undefined) { // refactor - new code to handle\n                // disappearing specs\n                display_specs(this);\n            }\n        },\n\n        /**\n         * Reread all files and refresh the plot.\n         */\n        reread: function() {\n            var Gx = this._Gx;\n            var oldLayerData = [];\n            for (var k = 0; k < Gx.lyr.length; k++) { // make a copy of layer\n                // data before\n                // destroying Gx.lyr\n                // with the deoverlay\n                oldLayerData[k] = Gx.lyr[k];\n            }\n\n            var origHCB = Gx.HCB.slice();\n            this.deoverlay();\n            for (var i = 0; i < origHCB.length; i++) {\n                this.overlay_bluefile(origHCB[i]);\n            }\n\n            // propagate old layer attributes to re-read layers\n            for (var j = 0; j < Gx.lyr.length; j++) {\n                // TODO Assumes indices of old Gx.lyr and new Gx.lyr will match\n                // up correctly - should we instead use hcb and name to identify\n                Gx.lyr[j].symbol = oldLayerData[j].symbol;\n                Gx.lyr[j].radius = oldLayerData[j].radius;\n                // TODO re-copy other things like line type???\n            }\n            this.refresh();\n\n            // Notify listeners that a reread was performed\n            var evt = document.createEvent('Event');\n            evt.initEvent('reread', true, true);\n            mx.dispatchEvent(this._Mx, evt);\n        },\n\n        /**\n         * Placeholder for cleanup logic.\n         */\n        cleanup: function() {\n            // TODO not sure what we really want to do here yet\n        },\n\n        /**\n         * Reload data without adjusting other aspects about a plot\n         *\n         * @param {Number} n\n         *            the layer to push data into\n         * @param {Number[]} data\n         *            data to push\n         * @param {Object} hdrmod\n         *            optional changes to the file header\n         */\n        reload: function(n, data, hdrmod, rsync) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            if ((n < 0) || (n >= Gx.lyr.length)) {\n                return;\n            }\n\n            if (Gx.lyr[n].reload === undefined) {\n                return;\n            }\n\n            var xbnds = Gx.lyr[n].reload(data, hdrmod);\n\n            if (Mx.level === 0) {\n                // Unlike push(), always call scale_base\n                // when reload is invoked\n                scale_base(this, {\n                    get_data: false\n                }, xbnds.xmin, xbnds.xmax);\n            }\n\n            if (rsync) {\n                this._refresh();\n            } else {\n                this.refresh();\n            }\n\n        },\n\n        rescale: function() {\n            var Mx = this._Mx;\n\n            if (Mx.level === 0) {\n                scale_base(this, {\n                    get_data: false\n                }, undefined, undefined);\n            }\n\n            this.refresh();\n        },\n\n        /**\n         * Change the file header\n         *\n         * @param {Number} n\n         *            the layer to push header changes to\n         * @param {Object} hdrmod\n         *            changes to the file header\n         */\n        headermod: function(n, hdrmod) {\n            this.change_settings(hdrmod);\n            this.push(n, [], hdrmod);\n        },\n\n        /**\n         * Push data into a layer that was created with overlay_pipe\n         *\n         * @example plot.push(n, data);\n         *\n         * @param {Number} n\n         *            the layer to push data into\n         * @param {Number[]} data\n         *            data to push\n         * @param {Object} hdrmod\n         *            optional changes to the file header\n         * @param {boolean} [sync=false]\n         *            optional dispatch onpipewrite syncronously\n         * @param {boolean} [rsync=false]\n         *            optional dispatch refresh syncronously\n         */\n        push: function(n, data, hdrmod, sync, rsync) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            if ((n < 0) || (n >= Gx.lyr.length)) {\n                return;\n            }\n\n            if (Gx.lyr[n].push === undefined) {\n                return;\n            }\n\n            if (Gx.lyr[n].display === false) {\n                return;\n            }\n\n            var hdrmod_clone = hdrmod;\n\n            // quick deep copy of the header so we can\n            // add some necessary fields if this is\n            // a header-only push\n            if (hdrmod) {\n                var hdrmod_clone = JSON.parse(JSON.stringify(hdrmod));\n\n                // if it's a header-only push, the data should\n                // be an empty array\n                if (data.length === 0) {\n                    hdrmod_clone.xmin = Mx.stk[n].xmin;\n                    hdrmod_clone.xmax = Mx.stk[n].xmax;\n                    hdrmod_clone.ymin = Mx.stk[n].ymin;\n                    hdrmod_clone.ymax = Mx.stk[n].ymax;\n                }\n            }\n\n            var rescale = Gx.lyr[n].push(data, hdrmod_clone, sync);\n\n            if ((Mx.level === 0) && rescale) {\n                scale_base(this, {\n                    get_data: false\n                });\n            }\n\n            if (rsync) {\n                this._refresh();\n            } else {\n                this.refresh();\n            }\n        },\n\n        /**\n         * Create a plot layer with an array overlay\n         *\n         * @example plot.overlay_array(data, {[overrides]}, {[layerOptions]});\n         *\n         * @param data\n         *            data the data that you will be plotting\n         *\n         * @param [overrides]\n         *            Key-value pairs whose values alter plot settings\n         *\n         * @param {Number}\n         *            overrides.type 1000 = one dimensional, 2000 = two dimensional.\n         *            this is a convention of X-midas\n         *\n         * @param {Number}\n         *            overrides.subsize the subsize for data being read in by the plot\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framsize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n\n        overlay_array: function(data, overrides, layerOptions) {\n            m.log.debug(\"Overlay array\");\n            var hcb = m.initialize(data, overrides);\n            return this.overlay_bluefile(hcb, layerOptions);\n        },\n\n        /**\n         * Create a plot layer to hold data\n         *\n         * @example plot.overlay_pipe({[overrides]},{[layerOptions]});\n         *\n         * @param [overrides]\n         *            Key-value pairs whose values alter plot settings\n         *\n         * @param {Number}\n         *            overrides.type 1000 = one dimensional, 2000 = two dimensional.\n         *            this is a convention of X-midas\n         *\n         * @param {Number}\n         *            overrides.subsize the subsize for data being read in by the plot\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framsize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n\n        overlay_pipe: function(overrides, layerOptions) {\n            m.log.debug(\"Overlay pipe\");\n            if (!overrides) {\n                overrides = {};\n            }\n            overrides.pipe = true;\n            var hcb = m.initialize(null, overrides);\n            //console.log(\"pipe filename: \"+hcb.file_name);\n            return this.overlay_bluefile(hcb, layerOptions);\n        },\n\n        /**\n         * Create a plot layer to hold data\n         *\n         * @example plot.overlay_websocket({wsurl, {[overrides]}, {[layerOptions]}});\n         * @param {url:port_destination}\n         *            wsurl the url and port destination for the websocket being used\n         * @param [overrides]\n         *            Key-value pairs whose values alter plot settings\n         *\n         * @param {Number}\n         *            overrides.type 1000 = one dimensional, 2000 = two dimensional.\n         *            this is a convention of X-midas\n         *\n         * @param {Number}\n         *            overrides.subsize the subsize for data being read in by the plot\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framsize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n\n        overlay_websocket: function(wsurl, overrides, layerOptions) {\n            m.log.debug(\"Overlay websocket: \" + wsurl);\n            var ws = new WebSocket(wsurl, \"plot-data\");\n            ws.binaryType = \"arraybuffer\";\n\n            var plot = this;\n            if (!overrides) {\n                overrides = {};\n            }\n            overrides.pipe = true;\n            var hcb = m.initialize(null, overrides);\n            hcb.ws = ws;\n\n            var layer_n = this.overlay_bluefile(hcb, layerOptions);\n\n            ws.onopen = function(evt) {};\n\n            ws.onmessage = (function(theSocket) {\n                return function(evt) {\n                    if (evt.data instanceof ArrayBuffer) {\n                        var data = hcb.createArray(evt.data);\n                        plot.push(layer_n, data);\n                    } else if (typeof evt.data === \"string\") {\n                        var Gx = plot._Gx;\n                        var hdr = Gx.lyr[layer_n].hcb;\n                        if (!hdr) {\n                            m.log.warning(\"Couldn't find header for layer \" + layer_n);\n                        }\n\n                        var newHdr = JSON.parse(evt.data);\n                        plot.push(layer_n, [], newHdr);\n                    }\n                };\n            })(ws);\n\n            return layer_n;\n        },\n\n        /**\n         * Create a plot layer from an HREF that points to a BLUEFILE or MATFILE\n         *\n         * @example plot.overlay_href(href, function() {}, {[layeroptions]});\n         *\n         * @param {String}\n         *            href the url to the bluefile or matfile\n         * @param [onload]\n         *            callback to be called when the file has been loaded\n         *\n         * @param [layerOptions]\n         *            Key-value pairs whose values are the settings for the plot\n         *\n         * @param {String}\n         *            layerOptions.name the name of the layer\n         *\n         * @param {Number}\n         *            layerOptions.framesize the framesize of the plot\n         *\n         * @param {Varies}\n         *            layerOptions.etc all of the parameters for the change_settings\n         *            function except for lg_colorbar and p_cuts\n         *\n         * @returns data_layer\n         *\n         */\n        overlay_href: function(href, onload, layerOptions) {\n            m.log.debug(\"Overlay href: \" + href);\n            try {\n                this.show_spinner();\n\n                var handleHeader = (function(plot, onload) {\n                    return function(hcb) {\n                        try {\n                            if (!hcb) {\n                                alert(\"Failed to load data\");\n                            } else {\n                                var i;\n                                if (href.endsWith(\".mat\")) {\n                                    i = plot.overlay_matfile(hcb, layerOptions);\n                                } else {\n                                    i = plot.overlay_bluefile(hcb, layerOptions);\n                                }\n                                if (onload) {\n                                    onload(hcb, i);\n                                }\n                            }\n                        } finally {\n                            plot.hide_spinner();\n                        }\n                    };\n                }(this, onload));\n\n                var reader;\n                if (href.endsWith(\".mat\")) {\n                    reader = new matfile.MatFileReader();\n                } else {\n                    reader = new bluefile.BlueFileReader();\n                }\n                reader.read_http(href, handleHeader);\n            } catch (error) {\n                console.error(error);\n                alert(\"Failed to load data\");\n                this.hide_spinner();\n            }\n        },\n\n        show_spinner: function() {\n            if (!this._Gx.spinner) {\n                SPINNER_OPTS.color = this._Mx.xwfg;\n                this._Gx.spinner = new Spinner(SPINNER_OPTS).spin(this._Gx.parent);\n            }\n        },\n\n        hide_spinner: function() {\n            if (this._Gx.spinner) {\n                this._Gx.spinner.stop();\n            }\n            this._Gx.spinner = undefined;\n        },\n\n        add_layer: function(layer) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            // Notify listeners that a file was overlayed\n            var evt = document.createEvent('Event');\n            evt.initEvent('lyradd', true, true);\n            evt.name = layer.name; // the name of the layer\n            evt.layer = layer;\n            var executeDefault = mx.dispatchEvent(Mx, evt);\n            if (executeDefault) {\n                Gx.lyr.push(layer);\n                layer.index = Gx.lyr.length - 1; // the new index of the layer\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Get a layer of the plot\n         *\n         * @example plot.get_layer(n);\n         *\n         * @param {Number}\n         *              n the index of the layer\n         *\n         * @returns data_layer\n         *\n         */\n\n        get_layer: function(n) {\n            var Gx = this._Gx;\n            if ((n >= 0) && (n < Gx.lyr.length)) {\n                return Gx.lyr[n];\n            } else {\n                return null;\n            }\n        },\n\n        overlay_matfile: function(mfile, layerOptions) {\n            m.log.debug(\"Overlay matfile: \" + mfile.file_name);\n            return this.overlay_array(mfile.dview);\n        },\n\n        /**\n         * Create a plot layer backed by a bluefile header\n         *\n         * @param hcb\n         *            {BlueHeader} an opened BlueHeader file\n         * @returns the index of the new layer\n         */\n        overlay_bluefile: function(hcb, layerOptions) {\n            m.log.debug(\"Overlay bluefile: \" + hcb.file_name);\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            var size = 0;\n\n            layerOptions = layerOptions || {};\n\n            var basefiles = (Gx.HCB.length === 0);\n\n            Gx.HCB.push(hcb);\n\n            if (Gx.HCB.length === 1) {\n                basefile(this, true);\n            }\n\n            var layers = null;\n\n            if (layerOptions.layerType === undefined) {\n                if (hcb[\"class\"] === 1) {\n                    layers = Layer1D.overlay(this, hcb, layerOptions);\n                } else if (hcb[\"class\"] === 2) {\n                    layers = Layer2D.overlay(this, hcb, layerOptions);\n                }\n            } else {\n                if (layerOptions.layerType === \"1D\") {\n                    layers = Layer1D.overlay(this, hcb, layerOptions);\n                } else if (layerOptions.layerType === \"2D\") {\n                    layers = Layer2D.overlay(this, hcb, layerOptions);\n                } else {\n                    layers = layerOptions.layerType.overlay(this, hcb, layerOptions);\n                }\n            }\n\n            if (layers === null || layers.length === 0) {\n                m.log.debug(\"failed to create layers\");\n                return;\n            }\n\n            // Allow the user to store aribitary data with the layer\n            if (layerOptions.user_data) {\n                layers.forEach(function(layer) {\n                    layer.user_data = layerOptions.user_data;\n                });\n            }\n\n            // TODO - do we want to alert like the XM plot did?\n            //if (!Gx.all && size > Gx.bufmax && Gx.HCB.length == 1) {\n            // alert(\"Plot truncated to buffer size. Use panning or /ALL\n            // switch\");\n            //}\n            // The original code has a bug here. Fixed by moving changemode\n            // outside of\n            // the !basefiles check.\n            // You can recreate with SIGPLOT ,,, IR\n            // And then loading a file.\n            changemode(this, Gx.cmode);\n\n            // if this is not the first set of layers added and\n            // we haven't asked for the plot to expand to accomodate\n            // this layers new range, then simply draw the new layer.\n            if (!basefiles && !layerOptions.expand) {\n                var plot = this;\n                layers.forEach(function(layer) {\n                    draw_layer(plot, layer);\n                });\n            } else {\n                if (Gx.HCB.length === 0) { // TODO dead code that cannot be reached\n                    basefile(this, false);\n                } else {\n                    Gx.basemode = Gx.cmode;\n                    var xmin;\n                    var xmax;\n                    if ((Gx.autox & 1) === 0) {\n                        xmin = Gx.xmin;\n                    }\n                    if ((Gx.autox & 2) === 0) {\n                        xmax = Gx.xmax;\n                    }\n                    scale_base(this, {\n                        get_data: true\n                    }, xmin, xmax);\n                    Mx.level = 0;\n                    if ((Gx.autox & 1) !== 0) {\n                        Gx.xmin = Mx.stk[0].xmin;\n                    }\n                    if ((Gx.autox & 2) !== 0) {\n                        Gx.xmax = Mx.stk[0].xmax;\n                    }\n                    if ((Gx.autoy & 1) !== 0) {\n                        Gx.ymin = Mx.stk[0].ymin;\n                    }\n                    if ((Gx.autoy & 2) !== 0) {\n                        Gx.ymax = Mx.stk[0].ymax;\n                    }\n                    Mx.resize = true;\n                    if (Gx.lyr[0].preferred_origin) {\n                        Mx.origin = Gx.lyr[0].preferred_origin;\n                    } else {\n                        Mx.origin = 1;\n                    }\n                }\n            }\n            form_plotnote(this);\n            this.refresh();\n\n            return (Gx.HCB.length - 1);\n        },\n\n        /**\n         * Load one or more files.\n         *\n         * @param {File[]}\n         *            a list of files to plot\n         */\n        load_files: function(files, layerType) {\n            var onload = (function(plot) {\n                return function(hdr) {\n                    plot.overlay_bluefile(hdr, layerType);\n                };\n            })(this);\n\n            for (var i = 0; i < files.length; i++) {\n                var f = files[i];\n                var br = new bluefile.BlueFileReader();\n                br.read(f, onload);\n            }\n        },\n\n        /**\n         * Reemove layers\n         *\n         * @example plot.get_layer(n);\n         *\n         * @param {Number}\n         *             The index of the layer. If not provided, all layers will\n         *             be removed\n         *\n         * @returns data_layer\n         *\n         */\n\n        deoverlay: function(index) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            if (Gx.HCB.length > 0) {\n                if (index === undefined) {\n                    for (var n = Gx.HCB.length - 1; n >= 0; n--) {\n                        this.remove_layer(n);\n                    }\n                } else if (index < 0) {\n                    var n = Gx.HCB.length + index;\n                    if (n < 0) {\n                        return;\n                    }\n                    this.remove_layer(n);\n                } else if (index < Gx.HCB.length) {\n                    this.remove_layer(index);\n                }\n            }\n            if (Gx.lyr.length === 0) {\n                basefile(this, false);\n                scale_base(this, {});\n            }\n        },\n\n        /**\n         * Remove a layer.\n         *\n         * @param index\n         *            the layer to remove\n         */\n        remove_layer: function(index) {\n            var Gx = this._Gx;\n\n            var fileName = \"\";\n            var HCB = null;\n\n            if ((index >= 0) && (index < Gx.HCB.length)) {\n                fileName = Gx.HCB[index].file_name;\n                // TODO if (Gx.modsource > 0) {\n                //\n                // }\n                HCB = Gx.HCB[index];\n                Gx.HCB[index] = null;\n                for (var n = index; n < Gx.HCB.length - 1; n++) {\n                    Gx.HCB[n] = Gx.HCB[n + 1];\n                }\n                Gx.HCB.length -= 1;\n            }\n\n            for (var n = Gx.lyr.length - 1; n >= 0; n--) {\n                if (Gx.lyr[n].hcb === HCB) {\n                    delete_layer(this, n);\n                }\n            }\n            form_plotnote(this);\n            this.refresh();\n\n            // Notify listeners that a file has been deoverlayed\n            var evt = document.createEvent('Event');\n            evt.initEvent('file_deoverlayed', true, true);\n            if (fileName !== \"\") {\n                evt.fileName = fileName; // The fileName that was\n            }\n            // de-overlayed\n            mx.dispatchEvent(this._Mx, evt);\n        },\n\n        /**\n         * Zoom onto a given pixel range.\n         */\n        pixel_zoom: function(x1, y1, x2, y2, continuous) {\n            var r1 = pixel_to_real(this, x1, y1);\n            var r2 = pixel_to_real(this, x2, y2);\n\n            this.zoom(r1, r2, continuous);\n        },\n\n        percent_zoom: function(xperc, yperc, continuous) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n\n            var xadj = 0;\n            if (Math.abs(xperc) < 1) {\n                xadj = Math.abs(Mx.stk[Mx.level].xmax - Mx.stk[Mx.level].xmin);\n                xadj = (xadj * xperc) / 2;\n            }\n\n            var yadj = 0;\n            if (Math.abs(yperc) < 1) {\n                yadj = Math.abs(Mx.stk[Mx.level].ymax - Mx.stk[Mx.level].ymin);\n                yadj = (yadj * yperc) / 2;\n            }\n\n            var ul = {\n                x: Math.max(Mx.stk[Mx.level].xmin + xadj, Gx.panxmin),\n                y: Math.max(Mx.stk[Mx.level].ymin + yadj, Gx.panymin)\n            };\n\n            var lr = {\n                x: Math.min(Mx.stk[Mx.level].xmax - xadj, Gx.panxmax),\n                y: Math.min(Mx.stk[Mx.level].ymax - yadj, Gx.panymax)\n            };\n\n            this.zoom(ul, lr, continuous);\n        },\n\n        /**\n         * Zoom onto a given region.\n         *\n         * @param ul\n         *            the uppler left corner\n         * @param {Number}\n         *            ul.x the upper left x pos in real plot value\n         * @param {Number}\n         *            ul.y the upper left y pos in real plot values\n         *\n         * @param lr\n         *            the lower right corner\n         * @param {Number}\n         *            lr the lower right x pos in real plot value\n         * @param {Number}\n         *            lr the lower right y pos in real plot values\n         *\n         * @param continuous\n         *            enter continuous zoom mode.  This will create a\n         *            new if you are on level 0, but stay on the same level\n         *            otherwise\n         */\n        zoom: function(ul, lr, continuous) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n\n            if (Mx.level >= 9) { // currently only allow 10 zooms\n                return;\n            }\n\n            if (ul.x === undefined) {\n                ul.x = Mx.stk[Mx.level].xmin;\n            }\n            if (ul.y === undefined) {\n                ul.y = Mx.stk[Mx.level].ymin;\n            }\n            if (lr.x === undefined) {\n                lr.x = Mx.stk[Mx.level].xmax;\n            }\n            if (lr.y === undefined) {\n                lr.y = Mx.stk[Mx.level].ymax;\n            }\n\n            if (lr.x < ul.x) {\n                var xtmp = lr.x;\n                lr.x = ul.x;\n                ul.x = xtmp;\n            }\n            if (lr.y < ul.y) {\n                var ytmp = lr.y;\n                lr.y = ul.y;\n                ul.y = ytmp;\n            }\n\n            var zstk = {};\n\n            // xscl/yscl are reset in sigplot.refresh\n            zstk.xscl = Mx.stk[Mx.level].xscl;\n            zstk.yscl = Mx.stk[Mx.level].yscl;\n\n            zstk.xmin = ul.x; // real world val at x1(origin=1,4) or\n            // x2(origin=2,4)\n            zstk.xmax = lr.x; // real world val at x2(origin=1,4) or\n            // x1(origin=2,4)\n            zstk.ymin = ul.y; // real world val at y2(origin=1,2) or\n            // y1(origin=3,4)\n            zstk.ymax = lr.y; // real world val at y1(origin=1,2) or\n            // y2(origin=3,4)\n            if (Gx.index) {\n                zstk.xmin = Math.min(zstk.xmin / Gx.xdelta);\n                zstk.xmax = Math.min(zstk.xmax / Gx.xdelta);\n            }\n\n            if (!continuous || (!Gx.inContinuousZoom)) {\n                // We aren't yet in continuous zoom mode\n                // so create a new level\n                Mx.stk.push(zstk);\n                Mx.level = Mx.stk.length - 1;\n            } else {\n                // Once in continuous zoom mode update the current level\n                Mx.stk[Mx.level] = zstk;\n            }\n            Gx.inContinuousZoom = continuous;\n\n            this.inZoom = true; // prevent recursive zooms\n            var evt = document.createEvent('Event');\n            evt.initEvent('zoom', true, true);\n            evt.level = Mx.level;\n            evt.inContinuousZoom = Gx.inContinuousZoom;\n            evt.xmin = Mx.stk[Mx.level].xmin;\n            evt.ymin = Mx.stk[Mx.level].ymin;\n            evt.xmax = Mx.stk[Mx.level].xmax;\n            evt.ymax = Mx.stk[Mx.level].ymax;\n            mx.dispatchEvent(Mx, evt); // TODO should we allow zoom to be cancelled?\n            this.inZoom = false;\n\n            this.refresh();\n        },\n\n        /**\n         * Unzoom one or more levels.\n         *\n         * @param [levels]\n         *            the number of levels to unzoom, if not provided unzoom\n         *            all.\n         */\n        unzoom: function(levels) {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n\n            if (Mx.level === 0) {\n                return;\n            }\n\n            if (!levels) {\n                levels = Mx.stk.length;\n            }\n\n            while (levels > 0) {\n                if (Mx.level === 0) {\n                    break;\n                }\n                Mx.stk.pop();\n                Mx.level = Mx.stk.length - 1;\n                levels -= 1;\n            }\n\n            // If we are back at level 0, then\n            // rescale\n            if (Mx.level === 0) {\n                this.rescale();\n            }\n\n            // After any unzooms you can no longer remain in\n            // continuous zoom\n            Gx.inContinuousZoom = false;\n\n            this.inZoom = true; // prevent recursive zoom\n            // Send the event to listeners\n            var evt = document.createEvent('Event');\n            evt.initEvent('unzoom', true, true);\n            evt.level = Mx.level;\n            evt.xmin = Mx.stk[Mx.level].xmin;\n            evt.ymin = Mx.stk[Mx.level].ymin;\n            evt.xmax = Mx.stk[Mx.level].xmax;\n            evt.ymax = Mx.stk[Mx.level].ymax;\n            mx.dispatchEvent(Mx, evt);\n            this.inZoom = false;\n\n            this.refresh();\n        },\n\n        /**\n         * Register this plot to mimic zoom/unzoom of other plot\n         *\n         * @param other\n         *     the other plot to mimic\n         *\n         * @param mask\n         *     the set of event to respond to\n         *\n         * @param mask.zoom\n         *     if true, respond to zoom events\n         *\n         * @param mask.xzoom\n         *     if true, respond to zoom events for the x-axis only\n         *\n         * @param mask.yzoom\n         *     if true, respond to zoom events for the y-axis only\n         *\n         * @param mask.unzoom\n         *     if true, respond to unzoom events\n         *\n         * @param mask.pan\n         *     if true, respond to pan events\n         *\n         * @param mask.xpan\n         *     if true, respond to pan events for the x-axis only\n         *\n         * @param mask.ypan\n         *     if true, respond to pan events for the y-axis only\n         */\n        mimic: function(other, mask) {\n            var self = this;\n\n            if (!mask) {\n                throw \"mimic must be called with at least one event mask\";\n            }\n\n            this.unmimic(other);\n\n            if (mask.zoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    self.zoom({\n                            x: event.xmin,\n                            y: event.ymin\n                        }, {\n                            x: event.xmax,\n                            y: event.ymax\n                        },\n                        event.inContinuousZoom);\n                };\n                other.addListener(\"zoom\", f);\n                this.mimicListeners.listeners.zoom = f;\n            } else if (mask.xzoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    self.zoom({\n                            x: event.xmin,\n                            y: undefined\n                        }, {\n                            x: event.xmax,\n                            y: undefined\n                        },\n                        event.inContinuousZoom);\n                };\n                other.addListener(\"zoom\", f);\n                this.mimicListeners.listeners.zoom = f;\n            } else if (mask.yzoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    self.zoom({\n                            x: undefined,\n                            y: event.ymin\n                        }, {\n                            x: undefined,\n                            y: event.ymax\n                        },\n                        event.inContinuousZoom);\n                };\n                other.addListener(\"zoom\", f);\n                this.mimicListeners.listeners.zoom = f;\n            }\n\n            if (mask.unzoom) {\n                var f = function(event) {\n                    if (self.inZoom) {\n                        return;\n                    }\n                    if (event.level < self._Mx.level) {\n                        self.unzoom(self._Mx.level - event.level);\n                    }\n                };\n                other.addListener(\"unzoom\", f);\n                this.mimicListeners.listeners.unzoom = f;\n            }\n\n            if (mask.pan || mask.xpan) {\n                var f = function(event) {\n                    if (self.inPan) {\n                        return;\n                    }\n                    updateViewbox(self, event.xmin, event.xmax, \"X\");\n                };\n                other.addListener(\"xpan\", f);\n                this.mimicListeners.listeners.xpan = f;\n            }\n\n            if (mask.pan || mask.ypan) {\n                var f = function(event) {\n                    if (self.inPan) {\n                        return;\n                    }\n                    updateViewbox(self, event.ymin, event.ymax, \"Y\");\n                };\n                other.addListener(\"ypan\", f);\n                this.mimicListeners.listeners.ypan = f;\n            }\n\n            this.mimicListeners.other = other;\n        },\n\n\n        /**\n         * Unregister zoom/unzoom listeners added via previous call to unmimic.\n         */\n        unmimic: function(other) {\n            var other = this.mimicListeners.other;\n            if (other) {\n                var that = this;\n                Object.keys(this.mimicListeners.listeners).forEach(function(evt) {\n                    if (that.mimicListeners.listeners[evt]) {\n                        other.removeListener(evt, that.mimicListeners.listeners[evt]);\n                    }\n                });\n            }\n            this.mimicListeners = {\n                other: null,\n                listeners: {\n                    zoom: null,\n                    unzoom: null,\n                    xpan: null,\n                    ypan: null\n                }\n            };\n        },\n\n        /**\n         * Like refresh, but doesn't rerender data\n         *\n         * @example plot.redraw();\n         */\n        redraw: function() {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n            var ctx = Mx.canvas.getContext(\"2d\");\n            if (!Gx.plotData.valid) {\n                this.refresh();\n            } else {\n                ctx.drawImage(Gx.plotData,\n                    Mx.l - 1,\n                    Mx.t - 1, (Mx.r - Mx.l) + 2, (Mx.b - Mx.t) + 2,\n                    Mx.l - 1,\n                    Mx.t - 1, (Mx.r - Mx.l) + 2, (Mx.b - Mx.t) + 2\n                );\n\n                draw_plugins(this);\n\n                Gx.cross_xpos = undefined;\n                Gx.cross_ypos = undefined;\n                if ((!Mx.warpbox) && (this.mouseOnCanvas)) {\n                    draw_crosshairs(this);\n                }\n\n                if (Gx.always_show_marker || Gx.show_marker) {\n                    draw_marker(this);\n                }\n            }\n        },\n\n        /**\n         * Refresh the entire plot\n         *\n         * @example plot.refresh();\n         */\n        refresh: function() {\n            if (!this._Gx.initialized) {\n                return;\n            }\n            var self = this;\n            mx.render(this._Mx, function() {\n                self._refresh();\n            });\n        },\n\n        /**\n         * Enable listeners for events on plot\n         */\n\n        enable_listeners: function() {\n            var Mx = this._Mx;\n            mx.addEventListener(Mx, \"mousedown\", this.onmousedown, false);\n            mx.addEventListener(Mx, \"mousemove\", this.throttledOnMouseMove, false);\n            window.addEventListener(\"mouseup\", Mx.onmouseup, false);\n            window.addEventListener(\"keydown\", Mx.onkeydown, false);\n            window.addEventListener(\"keyup\", Mx.onkeyup, false);\n            window.addEventListener(\"resize\", this.onresize, false);\n            document.addEventListener(\"mouseup\", this.docMouseUp, false);\n            mx.addEventListener(Mx, \"mouseup\", this.mouseup, false);\n            window.addEventListener(\"mousedown\", this.dragMouseDownHandler, false);\n            window.addEventListener(\"mousemove\", this.throttledDragOnMouseMove, false);\n            window.addEventListener(\"mouseup\", this.dragMouseUpHandler, false);\n            window.addEventListener(\"wheel\", this.wheelHandler, false);\n            window.addEventListener(\"mousewheel\", this.wheelHandler, false);\n            window.addEventListener(\"DOMMouseScroll\", this.wheelHandler, false);\n            window.addEventListener(\"keypress\", this.onkeypress, false);\n        },\n\n        /**\n         * Enable listeners for events on plot\n         */\n\n        disable_listeners: function() {\n            var Mx = this._Mx;\n\n            mx.removeEventListener(Mx, \"mousedown\", this.onmousedown, false);\n            mx.removeEventListener(Mx, \"mousemove\", this.throttledOnMouseMove,\n                false);\n            mx.removeEventListener(Mx, \"mouseup\", this.mouseup, false);\n            window.removeEventListener(\"mouseup\", Mx.onmouseup, false);\n            window.removeEventListener(\"keydown\", Mx.onkeydown, false);\n            window.removeEventListener(\"keyup\", Mx.onkeyup, false);\n            window.removeEventListener(\"resize\", this.onresize, false);\n            document.removeEventListener(\"mouseup\", this.docMouseUp, false);\n            window.removeEventListener(\"mousedown\", this.dragMouseDownHandler,\n                false);\n            window.removeEventListener(\"mousemove\", this.throttledDragOnMouseMove,\n                false);\n            window.removeEventListener(\"mouseup\", this.dragMouseUpHandler, false);\n            window.removeEventListener(\"wheel\", this.wheelHandler, false);\n            window.removeEventListener(\"mousewheel\", this.wheelHandler, false);\n            window.removeEventListener(\"DOMMouseScroll\", this.wheelHandler, false);\n            window.removeEventListener(\"keypress\", this.onkeypress, false);\n        },\n\n        checkresize: function() {\n            if (mx.checkresize(this._Mx)) {\n                this.refresh();\n            }\n        },\n        addColorMaps: function(colormaps) {\n            colormaps.forEach(function(cmap) {\n                if (cmap.hasOwnProperty(\"name\")) {\n                    m.Mc.colormap.push(cmap);\n                }\n\n            });\n\n        },\n\n        /**\n         * Display an xCut\n         *\n         * @param ypos\n         *     the y-position to extract the x-cut, leave undefined to\n         *     leave xCut\n         */\n        xCut: function(ypos) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            //display the x-cut of the raster\n            if (ypos !== undefined) {\n\n                // Stash important values\n                Gx.cut_stash = {};\n                Gx.cut_stash.ylabel = Gx.ylabel;\n                Gx.cut_stash.xlabel = Gx.xlabel;\n                Gx.cut_stash.level = Mx.level;\n                Gx.cut_stash.stk = JSON.parse(JSON.stringify(Mx.stk));\n                Gx.cut_stash.panymin = Gx.panymin;\n                Gx.cut_stash.panymax = Gx.panymax;\n                Gx.cut_stash.panxmin = Gx.panxmin;\n                Gx.cut_stash.panxmax = Gx.panxmax;\n\n                if (!Gx.p_cuts) {\n                    Gx.x_cut_data = [];\n                    var width = Gx.lyr[0].xframe;\n                    var row = Math.round((ypos - Gx.lyr[0].ystart) / Gx.lyr[0].ydelta);\n                    if ((row < 0) || (row > Gx.lyr[0].lps)) {\n                        return;\n                    }\n                    var start = row * width;\n                    var finish = start + width;\n                    Gx.x_cut_data = Gx.lyr[0].zbuf.slice(start, finish);\n                }\n\n                //adjust for the values of the xcut\n                Gx.old_drawmode = Gx.lyr[0].drawmode;\n                Gx.old_autol = Gx.autol;\n                this.change_settings({\n                    drawmode: \"undefined\",\n                    autol: -1\n                });\n\n                var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);\n                if (Gx.cmode === 1) {\n                    Gx.ylabel = m.UNITS[28][0];\n                } else if (Gx.cmode === 2) {\n                    Gx.ylabel = Gx.plab;\n                } else if ((Gx.cmode === 3) && (cx)) {\n                    Gx.ylabel = m.UNITS[21][0];\n                } else if (Gx.cmode === 4) {\n                    Gx.ylabel = m.UNITS[22][0];\n                } else if (Gx.cmode === 5) {\n                    Gx.ylabel = m.UNITS[22][0];\n                } else if (Gx.cmode === 6) {\n                    Gx.ylabel = m.UNITS[26][0];\n                } else if (Gx.cmode === 7) {\n                    Gx.ylabel = m.UNITS[27][0];\n                } else {\n                    Gx.ylabel = \"Intensity\";\n                }\n\n                if ((m.UNITS[Gx.xlab][0] !== \"None\") && (m.UNITS[Gx.xlab][0] !== \"Unknown\")) {\n                    Gx.xlabel = m.UNITS[Gx.xlab][0];\n                } else {\n                    Gx.xlabel = \"Frequency\";\n                }\n                Gx.xlabel += \"    CURRENTLY IN X_CUT MODE\";\n                Mx.origin = 1;\n                Gx.xcut_layer = this.overlay_array(Gx.x_cut_data, {\n                    xstart: Gx.lyr[0].xstart,\n                    xdelta: Gx.lyr[0].xdelta\n                }, {\n                    name: \"x_cut_data\",\n                    line: 3\n                });\n                Gx.xcut_layer = Gx.lyr.length - 1;\n                //do not display any other layers\n                for (var i = 0; i < Gx.xcut_layer; i++) {\n                    Gx.lyr[i].display = !Gx.lyr[i].display;\n                }\n                Gx.x_cut_press_on = true;\n\n                // The y-axis is now the z-values\n                var mxmn = m.vmxmn(Gx.x_cut_data, Gx.lyr[0].xframe);\n                var ymax = mxmn.smax;\n                var ymin = mxmn.smin;\n                var yran = ymax - ymin;\n                if (yran < 0.0) {\n                    ymax = ymin;\n                    ymin = ymax + yran;\n                    yran = -yran;\n                }\n                if (yran <= 1.0e-20) {\n                    ymin = ymin - 1.0;\n                    ymax = ymax + 1.0;\n                } else {\n                    ymin = ymin - 0.02 * yran;\n                    ymax = ymax + 0.02 * yran;\n                }\n\n                Gx.panymin = mxmn.smin;\n                Gx.panymax = mxmn.smax;\n                for (var h = 1; h < Mx.level + 1; h++) {\n                    Mx.stk[h].ymin = ymin;\n                    Mx.stk[h].ymax = ymax;\n                    Mx.stk[h].yscl = (Mx.stk[h].ymax - Mx.stk[h].ymin) / (Mx.b - Mx.t);\n                }\n\n                this.rescale();\n\n            } else if (Gx.x_cut_press_on) {\n                // ypos wasn't provided so turn x-cut off\n                Gx.x_cut_press_on = false;\n                for (var h = 0; h < Gx.xcut_layer; h++) {\n                    Gx.lyr[h].display = !Gx.lyr[h].display;\n                }\n                delete_layer(this, Gx.xcut_layer);\n\n                // Restore settings\n                Gx.xlabel = Gx.cut_stash.xlabel;\n                Gx.ylabel = Gx.cut_stash.ylabel;\n                Mx.level = Gx.cut_stash.level;\n                Mx.stk = JSON.parse(JSON.stringify(Gx.cut_stash.stk));\n                Gx.panymin = Gx.cut_stash.panymin;\n                Gx.panymax = Gx.cut_stash.panymax;\n                Gx.panxmin = Gx.cut_stash.panxmin;\n                Gx.panxmax = Gx.cut_stash.panxmax;\n                Gx.cut_stash = undefined;\n\n                this.rescale();\n                this.refresh();\n                Gx.xcut_layer = undefined;\n                this.change_settings({\n                    drawmode: Gx.old_drawmode,\n                    autol: Gx.old_autol\n                });\n            }\n        },\n\n        /**\n         * Display an yCut\n         *\n         * @param xpos\n         *     the x-position to extract the y-cut, leave undefined to\n         *     leave yCut\n         */\n        yCut: function(xpos) {\n            var Gx = this._Gx;\n            var Mx = this._Mx;\n\n            //display the x-cut of the raster\n            if (xpos !== undefined) {\n                // Stash important values\n                Gx.cut_stash = {};\n                Gx.cut_stash.xlabel = Gx.xlabel;\n                Gx.cut_stash.ylabel = Gx.ylabel;\n                Gx.cut_stash.level = Mx.level;\n                Gx.cut_stash.stk = JSON.parse(JSON.stringify(Mx.stk));\n                Gx.cut_stash.ymax = Mx.stk[Mx.level].ymax;\n                Gx.cut_stash.panymin = Gx.panymin;\n                Gx.cut_stash.panymax = Gx.panymax;\n                Gx.cut_stash.panxmin = Gx.panxmin;\n                Gx.cut_stash.panxmax = Gx.panxmax;\n\n                if (!Gx.p_cuts) {\n                    var height = Gx.lyr[0].lps;\n                    var width = Gx.lyr[0].xframe;\n                    var i = 0;\n\n                    Gx.y_cut_data = [];\n                    var col = Math.round((xpos - Gx.lyr[0].xstart) / Gx.lyr[0].xdelta);\n                    for (i = col; i < (width * height); i += width) {\n                        Gx.y_cut_data.push(Gx.lyr[0].zbuf[i]);\n                    }\n                }\n\n                //adjust for the values of the xcut\n                Gx.old_drawmode = Gx.lyr[0].drawmode;\n                Gx.old_autol = Gx.autol;\n                this.change_settings({\n                    drawmode: \"undefined\",\n                    autol: -1\n                });\n\n\n                var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);\n                if (Gx.cmode === 1) {\n                    Gx.ylabel = m.UNITS[28][0];\n                } else if (Gx.cmode === 2) {\n                    Gx.ylabel = Gx.plab;\n                } else if ((Gx.cmode === 3) && (cx)) {\n                    Gx.ylabel = m.UNITS[21][0];\n                } else if (Gx.cmode === 4) {\n                    Gx.ylabel = m.UNITS[22][0];\n                } else if (Gx.cmode === 5) {\n                    Gx.ylabel = m.UNITS[22][0];\n                } else if (Gx.cmode === 6) {\n                    Gx.ylabel = m.UNITS[26][0];\n                } else if (Gx.cmode === 7) {\n                    Gx.ylabel = m.UNITS[27][0];\n                } else {\n                    Gx.ylabel = \"Intensity\";\n                }\n\n                if ((m.UNITS[Gx.ylab][0] !== \"None\") && (m.UNITS[Gx.ylab][0] !== \"Unknown\")) {\n                    Gx.xlabel = m.UNITS[Gx.ylab][0];\n                } else {\n                    Gx.xlabel = \"Time\";\n                }\n                Gx.xlabel += \"    CURRENTLY IN Y_CUT MODE\";\n                Mx.origin = 1;\n                Gx.ycut_layer = this.overlay_array(Gx.y_cut_data, {\n                    xstart: Gx.lyr[0].ystart,\n                    xdelta: Gx.lyr[0].ydelta\n                }, {\n                    name: \"y_cut_data\",\n                    line: 3\n                });\n                Gx.ycut_layer = Gx.lyr.length - 1;\n                //do not display any other layers\n                for (var k = 0; k < Gx.ycut_layer; k++) {\n                    Gx.lyr[k].display = !Gx.lyr[k].display;\n                }\n                Gx.y_cut_press_on = true;\n\n                // The y-axis is now the z-values\n                var mxmn = m.vmxmn(Gx.y_cut_data, Gx.lyr[0].lps);\n                var ymax = mxmn.smax;\n                var ymin = mxmn.smin;\n                var yran = ymax - ymin;\n                if (yran < 0.0) {\n                    ymax = ymin;\n                    ymin = ymax + yran;\n                    yran = -yran;\n                }\n                if (yran <= 1.0e-20) {\n                    ymin = ymin - 1.0;\n                    ymax = ymax + 1.0;\n                } else {\n                    ymin = ymin - 0.02 * yran;\n                    ymax = ymax + 0.02 * yran;\n                }\n\n                Gx.panymin = mxmn.smin;\n                Gx.panymax = mxmn.smax;\n                for (var h = 1; h < Mx.level + 1; h++) {\n                    // the x-axis is now the yvalues\n                    Mx.stk[h].xmin = Mx.stk[h].ymin;\n                    Mx.stk[h].xmax = Mx.stk[h].ymax;\n                    Mx.stk[h].xscl = (Mx.stk[h].xmax - Mx.stk[h].xmin) / (Mx.r - Mx.t);\n\n                    // the y-axis is now the zvalues\n                    Mx.stk[h].ymin = ymin;\n                    Mx.stk[h].ymax = ymax;\n                    Mx.stk[h].yscl = (Mx.stk[h].ymax - Mx.stk[h].ymin) / (Mx.b - Mx.t);\n                }\n\n                this.rescale();\n            } else if (Gx.y_cut_press_on) {\n                Gx.y_cut_press_on = false;\n                for (var j = 0; j < Gx.ycut_layer; j++) {\n                    Gx.lyr[j].display = !Gx.lyr[j].display;\n                }\n                delete_layer(this, Gx.ycut_layer);\n\n                // Restore settings\n                Gx.xlabel = Gx.cut_stash.xlabel;\n                Gx.ylabel = Gx.cut_stash.ylabel;\n                Mx.level = Gx.cut_stash.level;\n                Mx.stk = JSON.parse(JSON.stringify(Gx.cut_stash.stk));\n                Gx.panymin = Gx.cut_stash.panymin;\n                Gx.panymax = Gx.cut_stash.panymax;\n                Gx.panxmin = Gx.cut_stash.panxmin;\n                Gx.panxmax = Gx.cut_stash.panxmax;\n                Gx.cut_stash = undefined;\n\n                this.rescale();\n                this.refresh();\n                Gx.ycut_layer = undefined;\n                this.change_settings({\n                    drawmode: Gx.old_drawmode,\n                    autol: Gx.old_autol\n                });\n            }\n        },\n\n        _refresh: function() {\n            var Mx = this._Mx;\n            var Gx = this._Gx;\n            var ctx = Mx.canvas.getContext(\"2d\");\n            var plugin_index = 0;\n\n            if (Gx.hold) {\n                return;\n            }\n            var font_width = Mx.font_width;\n            if (Mx.font_scaled) {\n                font_width = Math.min(Mx.font_width, Mx.width / 64);\n            }\n            mx.set_font(Mx, font_width);\n            Gx.pthk = Mx.text_w * 1.5;\n\n            if (Gx.specs) {\n                var ytimecode = false;\n                if (Gx.ylab === 4) { //time-based tics\n                    ytimecode = true;\n                }\n                // Set left and right edges\n                if (Gx.show_y_axis === true) {\n                    Mx.l = Mx.text_w * 6;\n                    if (ytimecode) {\n                        // If we are in ytimecode, determine if we need the extra\n                        // space to hold the entire YYYY:MM:DD\n                        var need_full_ymd = ((Math.abs(Mx.stk[0].ymin) >= 31536000) ||\n                            (Math.abs(Mx.stk[0].ymax) >= 31536000));\n                        if (need_full_ymd) {\n                            Mx.l = Mx.text_w * 11;\n                        }\n                    }\n                } else {\n                    Mx.l = 1;\n                }\n                if (Gx.pan === true) {\n                    Mx.r = Mx.width - (Gx.pthk + 2 * Mx.text_w);\n                } else {\n                    Mx.r = Mx.width - 5;\n                }\n\n                // Set top and bottom\n                if (Gx.show_readout) {\n                    Mx.t = Mx.text_h * 2;\n                    if (Gx.show_x_axis) {\n                        Mx.b = Mx.height - Mx.text_h * 4;\n                    } else {\n                        Mx.b = Mx.height - Mx.text_h * 3;\n                    }\n                } else if (Gx.x_scrollbar_location === \"bottom\") {\n                    Mx.t = Mx.text_h * 2;\n                    if (Gx.pan) {\n                        if (Gx.show_x_axis) {\n                            Mx.b = Mx.height - Mx.text_h * 3;\n                        } else {\n                            Mx.b = Mx.height - Mx.text_h * 2;\n                        }\n                    } else {\n                        if (Gx.show_x_axis) {\n                            Mx.b = Mx.height - Mx.text_h * 2;\n                        } else {\n                            Mx.b = Mx.height - 5;\n                        }\n                    }\n                } else {\n                    if (Gx.pan) {\n                        Mx.t = Gx.pthk + 2 * Mx.text_w;\n                    } else {\n                        Mx.t = 1;\n                    }\n                    if (Gx.show_x_axis) {\n                        Mx.b = Mx.height - (Mx.text_h * 3) / 2;\n                    } else {\n                        Mx.b = Mx.height - 2;\n                    }\n                }\n\n                // set left and right edges for X scrollbar\n                if (Gx.show_readout) {\n                    // If there is a readout, show it in the bottom-right\n                    // next to the readout\n                    Gx.pl = Mx.text_w * 50;\n                } else {\n                    // Otherwise, by default it conforms to legacy\n                    // behaviour and renders at the top next to the label\n                    if (Gx.x_scrollbar_location === \"bottom\") {\n                        Gx.pl = Mx.l;\n                    } else {\n                        Gx.pl = Mx.text_w * 35;\n                    }\n                }\n                Gx.pr = Math.max(Gx.pl + Mx.text_w * 9, Mx.r);\n\n                // set top scrollbar edge for X scrollbar\n                if (Gx.show_readout) {\n                    if (Gx.show_x_axis) {\n                        Gx.pt = Mx.b + Mx.text_h + (Mx.height - Mx.b - Mx.text_h - Gx.pthk) / 2;\n                    } else {\n                        Gx.pt = Mx.b + (Mx.height - Mx.b - Gx.pthk) / 2;\n                    }\n                } else {\n                    // Otherwise, by default it conforms to legacy\n                    // behaviour and renders at the top\n                    if (Gx.x_scrollbar_location === \"bottom\") {\n                        if (Gx.show_x_axis) {\n                            Gx.pt = Mx.b + Mx.text_h + (Mx.height - Mx.b - Mx.text_h - Gx.pthk) / 2;\n                        } else {\n                            Gx.pt = Mx.b + (Mx.height - Mx.b - Gx.pthk) / 2;\n                        }\n                    } else {\n                        Gx.pt = (Mx.t - Gx.pthk) / 2;\n                    }\n                }\n                Gx.lbtn = Mx.text_h + Mx.text_w + 2;\n            } else {\n                if (Gx.pan) {\n                    Mx.t = Gx.pthk + 2 * Mx.text_w;\n                    Mx.r = Mx.width - (Gx.pthk + Mx.text_w);\n                } else {\n                    Mx.t = 1;\n                    Mx.r = Mx.width - 2;\n                }\n                Mx.b = Mx.height - 2;\n                Mx.l = 1;\n                Gx.pl = Mx.l;\n                Gx.pr = Mx.r;\n                Gx.pt = (Mx.t - Gx.pthk) / 2;\n                Gx.lbtn = 0;\n            }\n\n            // pan select ranges\n            Gx.pyl = Mx.r + (Mx.width - Mx.r - Gx.pthk) / 2 + 1;\n\n            if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                // Move the plot over to make room\n                var prev_Mx_r = Mx.r;\n                Mx.r = prev_Mx_r - 100;\n\n            }\n\n            if (Gx.p_cuts && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                //turn cross hairs on\n                Gx.cross = true;\n\n                //Move the plot over to make room\n                var prev_Mx_r = Mx.r;\n                Mx.r = prev_Mx_r - 100;\n\n                //Move the plot up to make room\n                var prev_Mx_b = Mx.b;\n                Mx.b = prev_Mx_b - 100;\n            }\n\n            if (Gx.xcut_now) {\n                Mx.canvas.width = Gx.x_box_w - 1;\n                Mx.canvas.height = Gx.x_box_h;\n                Mx.r = Gx.x_box_w - 1;\n                Mx.l = 0;\n                Mx.b = Gx.x_box_h;\n                Mx.t = 0;\n            }\n\n            if (Gx.ycut_now) {\n                Mx.canvas.width = Gx.y_box_h - 1;\n                Mx.canvas.height = Gx.y_box_w;\n                Mx.r = Gx.y_box_h - 1;\n                Mx.l = 0;\n                Mx.b = Gx.y_box_w;\n                Mx.t = 0;\n            }\n\n            // set virtual window size/pos/scaling for current level\n            var k = Mx.level;\n            Mx.stk[k].x1 = Mx.l;\n            Mx.stk[k].y1 = Mx.t;\n            Mx.stk[k].x2 = Mx.r;\n            Mx.stk[k].y2 = Mx.b;\n            Mx.stk[k].xscl = (Mx.stk[k].xmax - Mx.stk[k].xmin) / (Mx.r - Mx.l);\n            Mx.stk[k].yscl = (Mx.stk[k].ymax - Mx.stk[k].ymin) / (Mx.b - Mx.t);\n\n            // In case things have rescaled\n            var re = pixel_to_real(this, Mx.xpos, Mx.ypos);\n            Gx.retx = re.x;\n            Gx.rety = re.y;\n\n            // modify stack for section plotting\n            //if (Gx.sections) {\n            // TODO\n            //}\n\n            if (Gx.panning === 0 || Gx.panning !== 0) { // TODO Gx.panning !==\n                // 0?? Does this work?\n                Gx.plotData.valid = false;\n                mx.clear_window(Mx);\n            } //else if (!Gx.specs) {\n            // TODO\n            //} else if (Gx.panning === 1) {\n            // TODO\n            //} else {\n            // TODO\n            //}\n\n            var xlab = Gx.xlab;\n            var ylab = Gx.ylab;\n\n            if (xlab === undefined) {\n                xlab = 30;\n            }\n            if (Gx.index) {\n                xlab = 0;\n            }\n\n            if (ylab === undefined) {\n                var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);\n                if (Gx.cmode === 1) {\n                    ylab = 28;\n                } else if (Gx.cmode === 2) {\n                    ylab = Gx.plab;\n                } else if ((Gx.cmode === 3) && (cx)) {\n                    ylab = 21;\n                } else if (Gx.cmode === 4) {\n                    ylab = 22;\n                } else if (Gx.cmode === 5) {\n                    ylab = 22;\n                    xlab = 21;\n                } else if (Gx.cmode === 6) {\n                    ylab = 26;\n                } else if (Gx.cmode === 7) {\n                    ylab = 27;\n                } else {\n                    ylab = 0;\n                }\n            }\n\n            if (Gx.specs) {\n                if (Gx.sections === 0) {\n                    var drawaxis_flags = {\n                        grid: Gx.grid\n                    };\n                    if (Gx.panning === 2) {\n                        drawaxis_flags.noxtlab = true;\n                    } // TODO Does this work??\n                    if (!Gx.show_x_axis) {\n                        drawaxis_flags.noxtics = true;\n                        drawaxis_flags.noxtlab = true;\n                        drawaxis_flags.noxplab = true;\n                    }\n                    if (!Gx.show_y_axis) {\n                        drawaxis_flags.noytics = true;\n                        drawaxis_flags.noytlab = true;\n                        drawaxis_flags.noyplab = true;\n                    }\n                    if (Gx.specs && !Gx.show_readout && !Gx.pan) {\n                        drawaxis_flags.noyplab = true;\n                        drawaxis_flags.noxplab = true;\n                    }\n                    if (Gx.gridBackground) {\n                        drawaxis_flags.fillStyle = Gx.gridBackground;\n                    }\n                    if (Gx.gridStyle) {\n                        drawaxis_flags.gridStyle = Gx.gridStyle;\n                    }\n                    if (Gx.xmult) {\n                        drawaxis_flags.xmult = Gx.xmult;\n                    }\n                    if (Gx.ymult) {\n                        drawaxis_flags.ymult = Gx.ymult;\n                    }\n                    if (xlab === 4) { //time-based tics\n                        drawaxis_flags.xtimecode = true;\n                    }\n                    if (ylab === 4) { //time-based tics\n                        drawaxis_flags.ytimecode = true;\n                    }\n                    if (Gx.xlabel !== undefined) {\n                        drawaxis_flags.xlabel = Gx.xlabel;\n                    }\n                    if (Gx.ylabel !== undefined) {\n                        drawaxis_flags.ylabel = Gx.ylabel;\n                    }\n                    mx.drawaxis(Gx, Mx, Gx.xdiv, Gx.ydiv, xlab, ylab, drawaxis_flags);\n                } //else {\n                // Not implemented yet\n                //}\n\n                var i = Gx.lbtn - 2;\n\n                if (Gx.show_readout && Gx.pan && !Gx.no_legend_button) {\n                    if (Gx.legend) {\n                        Gx.legendBtnLocation = {\n                            x: Mx.width - Gx.lbtn,\n                            y: 2,\n                            width: i,\n                            height: i\n                        };\n                        mx.shadowbox(Mx, Mx.width - Gx.lbtn, 2, i, i, 1, -2,\n                            'L');\n                    } else {\n                        Gx.legendBtnLocation = {\n                            x: Mx.width - Gx.lbtn,\n                            y: 2,\n                            width: i,\n                            height: i\n                        };\n                        mx.shadowbox(Mx, Mx.width - Gx.lbtn, 2, i, i, 1,\n                            2, 'L');\n                    }\n                    display_specs(this);\n                } else {\n                    Gx.legendBtnLocation = null;\n                }\n            } else if (Gx.grid && Gx.sections >= 0) {\n                var drawaxis_flags = {\n                    grid: true,\n                    noaxisbox: true,\n                    noxtics: true,\n                    noxtlab: true,\n                    noxplab: true,\n                    noytics: true,\n                    noytlab: true,\n                    noyplab: true\n                };\n                mx.drawaxis(Gx, Mx, Gx.xdiv, Gx.ydiv, xlab, ylab,\n                    drawaxis_flags);\n            }\n\n            draw_layers(this);\n\n            draw_accessories(this, 4);\n\n\n\n            draw_plugins(this);\n\n\n            Gx.cross_xpos = undefined;\n            Gx.cross_ypos = undefined;\n            if ((!Mx.warpbox) && (this.mouseOnCanvas)) {\n                draw_crosshairs(this);\n                if (!Gx.y_cut_press_on && !Gx.x_cut_press_on && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                    draw_p_cuts(this);\n                }\n            }\n\n            if (Gx.always_show_marker || Gx.show_marker) {\n                draw_marker(this);\n            }\n        }\n\n    };\n\n    // /////////////////////////////////////////////////////////////////////////\n    // Private methods and objects\n    // /////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Map integer cmode to string equivalent.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var cxm = [\"Ma\", \"Ph\", \"Re\", \"Im\", \"IR\", \"Lo\", \"L2\"];\n\n    /**\n     * Map integer abscissa mode to string equivalent.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var cam = [\"(absc)\", \"(indx)\", \"(1/ab)\", \"(dydx)\"];\n\n\n\n    /**\n     * This object holds the data associated with layers in the plot.\n     *\n     * @constructor\n     * @memberOf sigplot\n     * @private\n     */\n    function SIGPLOTLAYER() {\n\n        this.xbuf = undefined; // raw (ArrayBuffer) of ABSC data\n        this.ybuf = undefined; // raw (ArrayBuffer) of ORD data\n\n        this.offset = 0.0;\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n        this.imin = 0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.name = \"\";\n        this.cx = false;\n        this.hcb = undefined; // index in Gx.HCB\n        // xbufn = xbuf.byteLength\n        // ybufn = ybuf.byteLength\n        this.size = 0;\n\n        this.display = true;\n        this.color = 0;\n        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting\n        this.thick = 1; // negative for dashed\n        this.symbol = 0;\n        this.radius = 3;\n\n        this.skip = 0; // number of elements between ord values\n        this.xsub = 0;\n        this.ysub = 0;\n        this.xdata = false; // true if X data is data from file\n\n        this.options = {};\n    }\n\n    /**\n     * The graphics structure object used to hold state about the plot.\n     *\n     * @constructor\n     * @memberOf sigplot\n     * @private\n     */\n    function GX() {\n        this.initialized = false;\n        this.xptr = undefined; // xpoints as anything \"array-like\"...\n        this.yptr = undefined; // ypoints as anything \"array-like\"...\n\n        this.retx = 0.0; // absc coord. at mouse location\n        this.rety = 0.0;\n        this.xmrk = 0.0; // absc coord of mark\n        this.ymrk = 0.0;\n        this.aretx = 0.0; // absc coord. at mouse location\n        this.arety = 0.0;\n\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n\n        this.panxmin = 0.0;\n        this.panxmax = 0.0;\n        this.panymin = 0.0;\n        this.panymax = 0.0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.xmult = undefined;\n        this.ymin = 0.0;\n        this.ymax = 0.0;\n        this.ymult = undefined;\n        this.zmin = undefined;\n        this.zmax = undefined;\n        this.zoff = 0;\n        this.dbmin = 0.0;\n        this.pxscl = 0.0;\n        this.pyscl = 0.0;\n        this.pmt = 0.0;\n\n        this.note = \"\";\n        // this.mouse unnecssary because we don't have res table\n        this.format = \"\";\n\n        this.pl = 0;\n        this.pr = 0;\n        this.pt = 0;\n        this.pb = 0;\n        this.px1 = 0; // specifies plotting field\n        this.px2 = 0;\n        this.py1 = 0;\n        this.py2 = 0;\n\n        this.pyl = 0;\n        this.pthk = 0; // thickness of pan drag box\n\n        this.modlayer = 0;\n        this.modsource = 0;\n        this.modified = false;\n        this.modmode = 0;\n\n        this.xdiv = 0;\n        this.ydiv = 0;\n\n        this.all = false;\n        this.expand = false;\n        this.cross = false;\n        this.grid = true;\n        this.gridBackground = undefined;\n        this.index = false;\n        this.pan = true;\n        this.specs = true;\n        this.legend = true;\n        this.xdata = false;\n\n        this.show_x_axis = true;\n        this.show_y_axis = true;\n        this.show_readout = true;\n        this.hide_note = false;\n        this.autohide_readout = false;\n        this.autohide_panbars = false;\n        this.panning = undefined;\n        this.panmode = 0; // TODO Is this a good default value? Where is this\n        // changed?\n        this.hold = false;\n\n        this.sections = 0; // number of plot sections, -1 for layers\n        this.iysec = 0;\n        this.nsec = 0; // actual number of sections\n        this.isec = 0; // current sections\n\n        this.xlab = undefined;\n        this.xlabel = undefined;\n        this.ylab = undefined;\n        this.ylabel = undefined;\n\n        // 0 - use HTML5 canvas smoothing\n        // 1 - average\n        // 2 - min\n        // 3 - max\n        // 4 - first\n        // 5 - max abs\n        this.xcompression = 0;\n\n        this.default_rubberbox_action = \"zoom\";\n        this.default_rubberbox_mode = \"box\";\n\n        this.wheelscroll_mode_natural = true;\n        this.scroll_time_interval = 10;\n\n        this.repeatPanning = undefined;\n        this.stillPanning = undefined; // TODO maybe merge this variable with\n        // Gx.panning in future?\n\n        this.autol = -1;\n\n        this.lineSmoothing = false; // not implemented\n        this.rasterSmoothing = false;\n\n        this.wheelZoom = false;\n        this.wheelZoomPercent = 0.2;\n        this.inContinuousZoom = false;\n\n        this.lyr = [];\n        this.HCB = [];\n        this.plugins = [];\n\n        this.plotData = document.createElement(\"canvas\");\n        this.plotData.valid = false;\n\n        // Large colorbar info, like button locations\n        this.lg_colorbar = false;\n\n        // Colorbar button top or bottom positions\n        this.cbb_top_x1 = 0;\n        this.cbb_top_y1 = 0;\n        this.cbb_bot_x1 = 0;\n        this.cbb_bot_y1 = 0;\n        this.cbb_width = 0;\n        this.cbb_height = 0;\n\n        //P_cuts info\n        this.p_cuts = false;\n        this.x_box_x = 0;\n        this.x_box_y = 0;\n        this.x_box_h = 0;\n        this.x_box_w = 0;\n        this.y_box_x = 0;\n        this.y_box_y = 0;\n        this.y_box_h = 0;\n        this.y_box_w = 0;\n        this.p_cuts_xpos = undefined;\n        this.p_cuts_ypos = undefined;\n        this.x_cut_data = [];\n        this.y_cut_data = [];\n        //the plot to hold the x-cut on bottom\n        this.xcut = undefined;\n        //layer xcut that will be displayed on pop-up\n        this.xcut_layer = undefined;\n        this.x_cut_press_on = false;\n        //variable that is true if the bottom xcut is being drawn\n        this.xcut_now = false;\n        //the plot to hold the y-cut\n        this.ycut = undefined;\n        //layer ycut that will be displayed on pop-up\n        this.ycut_layer = undefined;\n        this.y_cut_press_on = false;\n        //variable that is true if the ycut is being drawn\n        this.ycut_now = false;\n        this.ylabel_stash = undefined;\n        this.cut_stash = undefined;\n        //div to hold x-cut\n        this.element1 = undefined;\n        //div to hold y cut\n        this.element2 = undefined;\n\n        //x and y sticky key configuration (\"automatic\" displays point on\n        //1D and cut on 2D, \"disable\" doesn't display anything, \"pop-up\"\n        //displays point on both, and \"cuts\" displays only cuts on 2D)\n        this.xyKeys = \"automatic\";\n        //true if the x value is being displayed on plot\n        this.x_pop_now = false;\n        //true if the y value is being displayed on plot\n        this.y_pop_now = false;\n\n        //the drawmode and autol before the x or y cut was showing\n        this.old_drawmode = undefined;\n        this.old_autol = undefined;\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function setup_cmap(plot, cmap) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        // If a color map array was provided make a custom map\n        if (Array.isArray(cmap)) {\n            var custom_cmap = {\n                name: \"Custom\",\n                colors: cmap\n            };\n            if (m.Mc.colormap[m.Mc.colormap.length - 1].name === \"Custom\") {\n                m.Mc.colormap[m.Mc.colormap.length - 1].colors = cmap;\n            } else {\n                m.Mc.colormap.push(custom_cmap);\n            }\n            Gx.cmap = m.Mc.colormap.length - 1;\n        } else if (typeof cmap === \"string\") {\n            Gx.cmap = -1;\n            for (var xc = 0; xc < m.Mc.colormap.length; xc++) {\n                if (m.Mc.colormap[xc].name === cmap) {\n                    Gx.cmap = xc;\n                    break;\n                }\n            }\n        } else {\n            Gx.cmap = cmap;\n        }\n\n        if (Gx.ncolors < 0) {\n            Gx.ncolors = -1 * Gx.ncolors;\n            Gx.cmap = Math.max(1, Gx.cmap);\n        }\n        if ((Gx.cmap < 0) || (Gx.cmap > m.Mc.colormap.length)) {\n            if (Gx.cmode === 2) {\n                Gx.cmap = 2; // wheel\n            } else {\n                Gx.cmap = 1; // ramp\n            }\n        }\n\n        mx.colormap(Mx, m.Mc.colormap[Gx.cmap].colors, Gx.ncolors);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_x(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var ls = Gx.aretx.toString();\n        if (Gx.iabsc === 1) {\n            mx.message(Mx, \"INDEX = \" + ls);\n        } else if (Gx.iabsc === 2) {\n            mx.message(Mx, \"1/X = \" + ls);\n        } else {\n            //if (Gx.xlab === 4) {\n            // TODO\n            //}\n            mx.message(Mx, \"X = \" + ls);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_timecode(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.lyr.length > 0) {\n            //var hcb = Gx.HCB[Gx.lyr[0].hcb];\n            var hcb = Gx.lyr[0].hcb; // mmm-TODO-needs investigation\n            if ((hcb[\"class\"] === 1) && ((hcb.xunits === 1) || (hcb.xunits === 4))) {\n                mx.message(Mx, \"Time = \" + m.sec2tod(hcb.timecode + Gx.retx), true);\n            } else if ((hcb[\"class\"] === 2) && ((hcb.yunits === 1) || (hcb.yunits === 4))) {\n                mx.message(Mx, \"Time = \" + m.sec2tod(hcb.timecode + Gx.rety), true);\n            } else {\n                mx.message(Mx, \"Time = UNK\");\n            }\n\n        }\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_y(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var ls = Gx.arety.toString();\n        if (Gx.iabsc === 2) {\n            mx.message(Mx, \"1/Y = \" + ls);\n        } else {\n            //if (Gx.xlab === 4) {\n            // TODO\n            //}\n            mx.message(Mx, \"Y = \" + ls);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_show_z(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.zmin && Gx.zmax) { // at least one layer has a z dimension\n            var msg = \"\";\n            if (Gx.lyr.length === 1) {\n                var msg = \"Z = \" + Gx.lyr[0].get_z(Gx.retx, Gx.rety).toString();\n            } else {\n                var msg = \"TODO\"; // TODO we need to think of what we want to display here\n            }\n            mx.message(Mx, msg);\n        }\n    }\n\n    /**\n     * Constructs a menu for updating the pan scale of the plot.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param command\n     *            The scroll direction to use. Either \"XPAN\" or \"YPAN\" are\n     *            acceptable.\n     * @private\n     */\n    function sigplot_scrollScaleMenu(plot, command) {\n        var Mx = plot._Mx;\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n        mx.menu(Mx, {\n            title: \"SCROLLBAR\",\n            refresh: function() {\n                plot.refresh();\n            },\n            finalize: function() {\n                mx.addEventListener(Mx, \"mousedown\",\n                    plot.onmousedown, false);\n                plot.refresh();\n            },\n            items: [{\n                text: \"Expand Range\",\n                handler: function() {\n                    middleClickScrollMenuAction(plot,\n                        mx.SB_EXPAND, command);\n                }\n            }, {\n                text: \"Shrink Range\",\n                handler: function() {\n                    middleClickScrollMenuAction(plot,\n                        mx.SB_SHRINK, command);\n                }\n            }, {\n                text: \"Expand Full\",\n                handler: function() {\n                    middleClickScrollMenuAction(plot,\n                        mx.SB_FULL, command);\n                }\n            }]\n        });\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_mainmenu(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        // show mainmenu\n        //\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n        // Sub-menus\n        var CONTROLS_MENU = {\n            text: \"Cntrls...\",\n            menu: {\n                title: \"CONTROLS OPTIONS\",\n                items: [{\n                    text: \"Continuous (Disabled)\",\n                    checked: Gx.cntrls === -2,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: -2\n                        });\n                    }\n                }, {\n                    text: \"LM Click (Disabled)\",\n                    checked: Gx.cntrls === -1,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: -1\n                        });\n                    }\n                }, {\n                    text: \"Off\",\n                    checked: Gx.cntrls === 0,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: 0\n                        });\n                    }\n                }, {\n                    text: \"LM Click\",\n                    checked: Gx.cntrls === 1,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: 1\n                        });\n                    }\n                }, {\n                    text: \"Continuous\",\n                    checked: Gx.cntrls === 2,\n                    handler: function() {\n                        plot.change_settings({\n                            xcnt: 2\n                        });\n                    }\n                }]\n            }\n        };\n\n        var CXMODE_MENU = {\n            text: \"CX Mode...\",\n            menu: {\n                title: \"COMPLEX MODE\",\n                items: [{\n                    text: \"Magnitude\",\n                    checked: Gx.cmode === 1,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 1\n                        });\n                    }\n                }, {\n                    text: \"Phase\",\n                    checked: Gx.cmode === 2,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 2\n                        });\n                    }\n                }, {\n                    text: \"Real\",\n                    checked: Gx.cmode === 3,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 3\n                        });\n                    }\n                }, {\n                    text: \"Imaginary\",\n                    checked: Gx.cmode === 4,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 4\n                        });\n                    }\n                }, {\n                    text: \"IR: Imag/Real\",\n                    checked: Gx.cmode === 5,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 5\n                        });\n                    }\n                }, {\n                    text: \"10*Log10\",\n                    checked: Gx.cmode === 6,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 6\n                        });\n                    }\n                }, {\n                    text: \"20*Log10\",\n                    checked: Gx.cmode === 7,\n                    handler: function() {\n                        plot.change_settings({\n                            cmode: 7\n                        });\n                    }\n                }]\n            }\n        };\n\n        var SCALING_MENU = {\n            text: \"Scaling...\",\n            menu: {\n                title: \"SCALING\",\n                items: [{\n                    text: \"Y Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Parameters...\",\n                    checked: (Gx.autoy === 0),\n                    handler: function() {\n                        Gx.autoy = 0;\n\n                        var nextPrompt = function() {\n                            setupPrompt(\n                                plot,\n                                \"Y Axis Max:\",\n                                mx.floatValidator,\n                                function(finalValue) {\n                                    if (parseFloat(finalValue) !== Mx.stk[Mx.level].ymax) {\n                                        // Only update if different\n                                        // value\n                                        if (finalValue === \"\") {\n                                            finalValue = 0;\n                                        }\n                                        updateViewbox(\n                                            plot,\n                                            Mx.stk[Mx.level].ymin,\n                                            parseFloat(finalValue),\n                                            \"Y\");\n                                    } else {\n                                        plot.refresh();\n                                    }\n                                }, Mx.stk[Mx.level].ymax,\n                                undefined, undefined, undefined);\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Y Axis Min:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Mx.stk[Mx.level].ymin) {\n                                    // Only update if different\n                                    // value\n                                    if (finalValue === \"\") {\n                                        finalValue = 0;\n                                    }\n                                    updateViewbox(plot,\n                                        parseFloat(finalValue),\n                                        Mx.stk[Mx.level].ymax,\n                                        \"Y\");\n                                } else {\n                                    plot.refresh();\n                                }\n\n                            }, Mx.stk[Mx.level].ymin, undefined,\n                            undefined, nextPrompt);\n                    }\n                }, {\n                    text: \"Min Auto\",\n                    checked: (Gx.autoy === 1),\n                    handler: function() {\n                        Gx.autoy = 1;\n                    }\n                }, {\n                    text: \"Max Auto\",\n                    checked: (Gx.autoy === 2),\n                    handler: function() {\n                        Gx.autoy = 2;\n                    }\n                }, {\n                    text: \"Full Auto\",\n                    checked: (Gx.autoy === 3),\n                    handler: function() {\n                        Gx.autoy = 3;\n                    }\n                }, {\n                    text: \"X Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Parameters...\",\n                    checked: (Gx.autox === 0),\n                    handler: function() {\n                        Gx.autox = 0;\n\n                        var nextPrompt = function() {\n                            setupPrompt(\n                                plot,\n                                \"X Axis Max:\",\n                                mx.floatValidator,\n                                function(finalValue) {\n                                    if (parseFloat(finalValue) !== Mx.stk[Mx.level].xmax) {\n                                        // Only update if different\n                                        // value\n                                        if (finalValue === \"\") {\n                                            finalValue = 0;\n                                        }\n                                        updateViewbox(\n                                            plot,\n                                            Mx.stk[Mx.level].xmin,\n                                            parseFloat(finalValue),\n                                            \"X\");\n                                    } else {\n                                        plot.refresh();\n                                    }\n                                }, Mx.stk[Mx.level].xmax,\n                                undefined, undefined, undefined);\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"X Axis Min:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Mx.stk[Mx.level].xmin) {\n                                    // Only update if different\n                                    // value\n                                    if (finalValue === \"\") {\n                                        finalValue = 0;\n                                    }\n                                    updateViewbox(plot,\n                                        parseFloat(finalValue),\n                                        Mx.stk[Mx.level].xmax,\n                                        \"X\");\n                                } else {\n                                    plot.refresh();\n                                }\n                            }, Mx.stk[Mx.level].xmin, undefined,\n                            undefined, nextPrompt);\n                    }\n                }, {\n                    text: \"Min Auto\",\n                    checked: (Gx.autox === 1),\n                    handler: function() {\n                        Gx.autox = 1;\n                    }\n                }, {\n                    text: \"Max Auto\",\n                    checked: (Gx.autox === 2),\n                    handler: function() {\n                        Gx.autox = 2;\n                    }\n                }, {\n                    text: \"Full Auto\",\n                    checked: (Gx.autox === 3),\n                    handler: function() {\n                        Gx.autox = 3;\n                    }\n                }, {\n                    text: \"Z Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Parameters...\",\n                    checked: (Gx.autoz === 0),\n                    handler: function() {\n                        Gx.autoz = 0;\n\n                        var nextPrompt = function() {\n                            setupPrompt(\n                                plot,\n                                \"Z Axis Max:\",\n                                mx.floatValidator,\n                                function(finalValue) {\n                                    if (parseFloat(finalValue) !== Gx.zmax) {\n                                        // Only update if different\n                                        // value\n                                        if (finalValue === \"\") {\n                                            finalValue = 0;\n                                        }\n                                        plot.change_settings({\n                                            zmax: finalValue\n                                        });\n                                    }\n                                }, Gx.zmax,\n                                undefined, undefined, undefined);\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Z Axis Min:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.zmin) {\n                                    if (finalValue === \"\") {\n                                        finalValue = 0;\n                                    }\n                                    plot.change_settings({\n                                        zmin: finalValue\n                                    });\n                                }\n                            }, Gx.zmin, undefined,\n                            undefined, nextPrompt);\n                    }\n                }, {\n                    text: \"Min Auto\",\n                    checked: (Gx.autoz === 1),\n                    handler: function() {\n                        plot.change_settings({\n                            autoz: 1\n                        });\n                    }\n                }, {\n                    text: \"Max Auto\",\n                    checked: (Gx.autoz === 2),\n                    handler: function() {\n                        plot.change_settings({\n                            autoz: 2\n                        });\n                    }\n                }, {\n                    text: \"Full Auto\",\n                    checked: (Gx.autoz === 3),\n                    handler: function() {\n                        plot.change_settings({\n                            autoz: 3\n                        });\n                    }\n                }]\n            }\n        };\n\n        var GRID_MENU = {\n            text: \"Grid\",\n            handler: function() {\n                plot.change_settings({\n                    grid: !Gx.grid\n                });\n            }\n        };\n\n        var SETTINGS_MENU = {\n            text: \"Settings...\",\n            menu: {\n                title: \"SETTINGS\",\n                items: [{\n                    text: \"ALL Mode\",\n                    checked: Gx.all,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            all: !Gx.all\n                        });\n                    }\n                }, {\n                    text: \"Controls...\",\n                    menu: {\n                        title: \"CONTROLS OPTIONS\",\n                        items: [{\n                            text: \"Continuous (Disabled)\",\n                            checked: Gx.cntrls === -2,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: -2\n                                });\n                            }\n                        }, {\n                            text: \"LM Click (Disabled)\",\n                            checked: Gx.cntrls === -1,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: -1\n                                });\n                            }\n                        }, {\n                            text: \"Off\",\n                            checked: Gx.cntrls === 0,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: 0\n                                });\n                            }\n                        }, {\n                            text: \"LM Click\",\n                            checked: Gx.cntrls === 1,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: 1\n                                });\n                            }\n                        }, {\n                            text: \"Continuous\",\n                            checked: Gx.cntrls === 2,\n                            handler: function() {\n                                plot.change_settings({\n                                    xcnt: 2\n                                });\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Mouse...\",\n                    menu: {\n                        title: \"MOUSE OPTIONS\",\n                        items: [{\n                            text: \"LM Drag (Zoom)\",\n                            checked: Gx.default_rubberbox_action === \"zoom\",\n                            handler: function() {\n                                Gx.default_rubberbox_action = \"zoom\";\n                            }\n                        }, {\n                            text: \"LM Drag (Select)\",\n                            checked: Gx.default_rubberbox_action === \"select\",\n                            handler: function() {\n                                Gx.default_rubberbox_action = \"select\";\n                            }\n                        }, {\n                            text: \"LM Drag (Disabled)\",\n                            checked: Gx.default_rubberbox_action === null,\n                            handler: function() {\n                                Gx.default_rubberbox_action = null;\n                            }\n                        }, {\n                            text: \"RM Drag (Zoom)\",\n                            checked: Gx.default_rightclick_rubberbox_action === \"zoom\",\n                            handler: function() {\n                                Gx.default_rightclick_rubberbox_action = \"zoom\";\n                            }\n                        }, {\n                            text: \"RM Drag (Select)\",\n                            checked: Gx.default_rightclick_rubberbox_action === \"select\",\n                            handler: function() {\n                                Gx.default_rightclick_rubberbox_action = \"select\";\n                            }\n                        }, {\n                            text: \"RM Drag (Disabled)\",\n                            checked: Gx.default_rightclick_rubberbox_action === null,\n                            handler: function() {\n                                Gx.default_rightclick_rubberbox_action = null;\n                            }\n                        }, {\n                            text: \"Mode...\",\n                            menu: {\n                                title: \"MOUSE Mode\",\n                                items: [{\n                                    text: \"Box\",\n                                    checked: Gx.default_rubberbox_mode === \"box\",\n                                    handler: function() {\n                                        Gx.default_rubberbox_mode = \"box\";\n                                    }\n\n                                }, {\n                                    text: \"Horizontal\",\n                                    checked: Gx.default_rubberbox_mode === \"horizontal\",\n                                    handler: function() {\n                                        Gx.default_rubberbox_mode = \"horizontal\";\n                                    }\n                                }, {\n                                    text: \"Vertical\",\n                                    checked: Gx.default_rubberbox_mode === \"vertical\",\n                                    handler: function() {\n                                        Gx.default_rubberbox_mode = \"vertical\";\n                                    }\n                                }]\n                            }\n                        }, {\n                            text: \"CROSShairs...\",\n                            menu: {\n                                title: \"Crosshairs Mode\",\n                                items: [{\n                                    text: \"Off\",\n                                    checked: !Gx.cross,\n                                    handler: function() {\n                                        Gx.cross = false;\n                                    }\n\n                                }, {\n                                    text: \"On\",\n                                    checked: Gx.cross === true,\n                                    handler: function() {\n                                        Gx.cross = true;\n                                    }\n                                }, {\n                                    text: \"Horizontal\",\n                                    checked: Gx.cross === \"horizontal\",\n                                    handler: function() {\n                                        Gx.cross = \"horizontal\";\n                                    }\n                                }, {\n                                    text: \"Vertical\",\n                                    checked: Gx.cross === \"vertical\",\n                                    handler: function() {\n                                        Gx.cross = \"vertical\";\n                                    }\n                                }]\n                            }\n                        }, {\n                            text: \"Mousewheel Natural Mode\",\n                            checked: Gx.wheelscroll_mode_natural,\n                            style: \"checkbox\",\n                            handler: function() {\n                                plot\n                                    .change_settings({\n                                        wheelscroll_mode_natural: !Gx.wheelscroll_mode_natural\n                                    });\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"CROSShairs\",\n                    checked: Gx.cross,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            cross: !Gx.cross\n                        });\n                    }\n                }, {\n                    text: \"GRID\",\n                    checked: Gx.grid,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            grid: !Gx.grid\n                        });\n                    }\n                }, {\n                    text: \"INDEX Mode\",\n                    checked: Gx.index,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            index: !Gx.index\n                        });\n                    }\n                }, {\n                    text: \"LEGEND\",\n                    checked: Gx.legend,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            legend: !Gx.legend\n                        });\n                    }\n                }, {\n                    text: \"PAN Scrollbars\",\n                    checked: Gx.pan,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            pan: !Gx.pan\n                        });\n                    }\n                }, {\n                    text: \"PHase UNITS...\",\n                    menu: {\n                        title: \"PHASE UNITS\",\n                        items: [{\n                            text: \"Radians\",\n                            checked: Gx.plab === 23,\n                            handler: function() {\n                                plot.change_settings({\n                                    phunits: 'R'\n                                });\n                            }\n\n                        }, {\n                            text: \"Degrees\",\n                            checked: Gx.plab === 24,\n                            handler: function() {\n                                plot.change_settings({\n                                    phunits: 'D'\n                                });\n                            }\n                        }, {\n                            text: \"Cycles\",\n                            checked: Gx.plab === 25,\n                            handler: function() {\n                                plot.change_settings({\n                                    phunits: 'C'\n                                });\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"SPECS\",\n                    checked: Gx.specs,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            specs: !Gx.specs\n                        });\n                    }\n                }, {\n                    text: \"P-Cuts\",\n                    checked: Gx.p_cuts,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            p_cuts: !Gx.p_cuts\n                        });\n                    }\n                }, {\n                    text: \"Large Colorbar\",\n                    checked: Gx.lg_colorbar,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            lg_colorbar: !Gx.lg_colorbar\n                        });\n                    }\n                }, {\n                    text: \"XDIVisions...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            var isValid = mx.intValidator(value);\n                            var maxXDIV = m.trunc(Mx.width / 2); // TODO\n                            // Make value an option on the plot?\n                            // Maybe still a little too high\n                            // while dotted-line grids are\n                            // being drawn?\n                            if (isValid.valid && value > maxXDIV) {\n                                return {\n                                    valid: false,\n                                    reason: \"Exceeds maximum number of divisions (\" + maxXDIV + \").\"\n                                };\n                            } else {\n                                return isValid;\n                            }\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"X Divisions:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.xdiv) { // Only\n                                    // update if different value\n                                    if (finalValue === \"\") {\n                                        finalValue = 1;\n                                    }\n                                    Gx.xdiv = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.xdiv, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"XLABel...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            console.log(\"The value is \" + value);\n                            var isValid = mx.intValidator(value);\n                            return isValid;\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"X Units:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.xlab) { // Only\n                                    // update if different value\n                                    if (finalValue < 0) {\n                                        finalValue = 0;\n                                    }\n                                    Gx.xlab = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.xlab, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"YDIVisions...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            var isValid = mx.intValidator(value);\n                            var maxYDIV = m.trunc(Mx.height / 2); // TODO\n                            // Make value an option on the plot?\n                            // Maybe still a little too high\n                            // while dotted-line grids are\n                            // being drawn?\n                            if (isValid.valid && value > maxYDIV) {\n                                return {\n                                    valid: false,\n                                    reason: \"Exceeds maximum number of divisions (\" + maxYDIV + \").\"\n                                };\n                            } else {\n                                return isValid;\n                            }\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Y Divisions:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.ydiv) {\n                                    // Only update if different\n                                    // value\n                                    if (finalValue === \"\") {\n                                        finalValue = 1;\n                                    }\n                                    Gx.ydiv = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.ydiv, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"YINVersion\",\n                    checked: (Mx.origin === 4),\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            yinv: (Mx.origin !== 4)\n                        });\n                    }\n                }, {\n                    text: \"YLABel...\",\n                    handler: function() {\n                        var validator = function(value) {\n                            var isValid = mx.intValidator(value);\n                            return isValid;\n                        };\n\n                        setupPrompt(\n                            plot,\n                            \"Y Units:\",\n                            validator,\n                            function(finalValue) {\n                                if (parseFloat(finalValue) !== Gx.ylab) { // Only\n                                    // update if different value\n                                    if (finalValue < 0) {\n                                        finalValue = 0;\n                                    }\n                                    Gx.ylab = parseFloat(finalValue);\n                                }\n                                plot.refresh();\n\n                            }, Gx.ylab, undefined, undefined,\n                            undefined);\n                    }\n                }, {\n                    text: \"X-axis\",\n                    checked: Gx.show_x_axis,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            show_x_axis: !Gx.show_x_axis\n                        });\n                    }\n                }, {\n                    text: \"Y-axis\",\n                    checked: Gx.show_y_axis,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            show_y_axis: !Gx.show_y_axis\n                        });\n                    }\n                }, {\n                    text: \"Readout\",\n                    checked: Gx.show_readout,\n                    style: \"checkbox\",\n                    handler: function() {\n                        plot.change_settings({\n                            show_readout: !Gx.show_readout\n                        });\n                    }\n                }, {\n                    text: \"Invert Colors\",\n                    checked: Mx.xi,\n                    style: \"checkbox\",\n                    handler: function() {\n                        mx.invertbgfg(Mx);\n                    }\n                }]\n            }\n        };\n\n        var COLORMAP_MENU = {\n            text: \"Colormap...\",\n            menu: {\n                title: \"COLORMAP\",\n                items: []\n            }\n        };\n\n        var colormap_handler = function(item) {\n            plot.change_settings({\n                cmap: this.cmap\n            });\n        };\n\n        for (var xc = 0; xc < m.Mc.colormap.length; xc++) {\n            var menuitem = {\n                text: m.Mc.colormap[xc].name,\n                cmap: xc,\n                checked: (Gx.cmap === xc),\n                handler: colormap_handler\n            };\n            COLORMAP_MENU.menu.items.push(menuitem);\n        }\n\n        var traceoptionsmenu = function(index) {\n            return {\n                title: \"TRACE OPTIONS\",\n                items: [{\n                    text: \"Dashed...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var thk = 1;\n                        if (index !== undefined) {\n                            thk = Math.abs(plot._Gx.lyr[index].thick);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n\n                            thk = Math.abs(plot._Gx.lyr[0].thick);\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                                    thk = 1;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Line thickness:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 3;\n                                    plot._Gx.lyr[index].thick = -1 * finalValue;\n                                    plot._Gx.lyr[index].symbol = 0;\n                                } else {\n                                    for (var ii = 0; ii < Gx.lyr.length; ii++) {\n                                        plot._Gx.lyr[ii].line = 3;\n                                        plot._Gx.lyr[ii].thick = -1 * finalValue;\n                                        plot._Gx.lyr[ii].symbol = 0;\n                                    }\n                                }\n                            }, thk);\n                    }\n                }, {\n                    text: \"Colors...\",\n                    menu: {\n                        title: \"COLORS\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"Red\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"red\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"red\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"red\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Pink\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"pink\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"pink\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"pink\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Hot Pink\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#ff009e\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"#ff009e\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"#ff009e\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Orange\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"orange\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"orange\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"orange\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Yellow\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"yellow\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"yellow\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"yellow\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Lime Green\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#80f741\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"#80f741\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"#80f741\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Green\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"green\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"green\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"green\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Blue\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"blue\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"blue\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"blue\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Purple\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"purple\" : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = \"purple\";\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].color = \"purple\";\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Custom Hexcode\",\n                            handler: function() {\n                                setupPrompt(\n                                    plot,\n                                    \"Color code (requires #):\",\n                                    mx.hexValidator,\n                                    function(finalValue) {\n                                        if (index !== undefined) {\n                                            plot._Gx.lyr[index].color = finalValue;\n                                        } else {\n                                            for (var ii = 0; ii < Gx.lyr.length; index++) {\n                                                plot._Gx.lyr[ii].color = finalValue;\n                                            }\n                                        }\n                                    }, undefined, undefined, undefined, undefined);\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Dots...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var radius = 3;\n                        if (index !== undefined) {\n                            radius = Math.abs(plot._Gx.lyr[index].radius);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n                            var i;\n                            for (i = 0; i < Gx.lyr.length; i++) {\n                                if (radius !== Math.abs(plot._Gx.lyr[i].radius)) {\n                                    radius = 3;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Radius/Shape:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                var sym;\n                                var rad;\n                                if (finalValue < 0) {\n                                    sym = 3; // square\n                                    rad = Math.abs(finalValue);\n                                } else if (finalValue > 0) {\n                                    sym = 2; // circle\n                                    rad = finalValue;\n                                } else {\n                                    sym = 1;\n                                    rad = 0;\n                                }\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 0;\n                                    plot._Gx.lyr[index].radius = rad;\n                                    plot._Gx.lyr[index].symbol = sym;\n                                } else {\n                                    var i;\n                                    for (i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 0;\n                                        plot._Gx.lyr[i].radius = rad;\n                                        plot._Gx.lyr[i].symbol = sym;\n                                    }\n                                }\n                            }, radius);\n                    }\n                }, {\n                    text: \"Radius...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var radius = 3;\n                        if (index !== undefined) {\n                            radius = Math.abs(plot._Gx.lyr[index].radius);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                if (radius !== Math.abs(plot._Gx.lyr[i].radius)) {\n                                    radius = 3;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Radius:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                var sym;\n                                var rad;\n                                if (finalValue < 0) {\n                                    rad = Math.abs(finalValue);\n                                } else if (finalValue > 0) {\n                                    rad = finalValue;\n                                } else {\n                                    sym = 1;\n                                    rad = 0;\n                                }\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 0;\n                                    plot._Gx.lyr[index].radius = rad;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 0;\n                                        plot._Gx.lyr[i].radius = rad;\n                                    }\n                                }\n                            }, radius);\n                    }\n                }, {\n                    text: \"Solid...\",\n                    handler: function() {\n                        // Figure out the current thickness\n                        var thk = 1;\n                        if (index !== undefined) {\n                            thk = Math.abs(plot._Gx.lyr[index].thick);\n                        } else {\n                            if (Gx.lyr.length === 0) {\n                                return;\n                            }\n\n                            thk = Math.abs(plot._Gx.lyr[0].thick);\n                            var i;\n                            for (i = 0; i < Gx.lyr.length; i++) {\n                                if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                                    thk = 1;\n                                    break;\n                                }\n                            }\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Line thickness:\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 3;\n                                    plot._Gx.lyr[index].thick = finalValue;\n                                    plot._Gx.lyr[index].symbol = 0;\n                                } else {\n                                    var i;\n                                    for (i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 3;\n                                        plot._Gx.lyr[i].thick = finalValue;\n                                        plot._Gx.lyr[i].symbol = 0;\n                                    }\n                                }\n                            }, thk);\n                    }\n                }, {\n                    text: \"Toggle\",\n                    style: (index !== undefined) ? \"checkbox\" : undefined,\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].display : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].display = !plot._Gx.lyr[index].display;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].display = !plot._Gx.lyr[i].display;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Symbols...\",\n                    menu: {\n                        title: \"SYMBOLS\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"None\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 0 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 0;\n                                    plot._Gx.lyr[index].symbol = 0;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 0;\n                                        plot._Gx.lyr[i].symbol = 0;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Pixels\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 1 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 1;\n                                    plot._Gx.lyr[index].symbol = 1;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 1;\n                                        plot._Gx.lyr[i].symbol = 1;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Circles\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 2 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 2;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 2;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Squares\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 3 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 3;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 3;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Plusses\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 4 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 4;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 4;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"X's\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 5 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 4;\n                                    plot._Gx.lyr[index].symbol = 5;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 4;\n                                        plot._Gx.lyr[i].symbol = 5;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Triangles\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 6 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 6;\n                                    plot._Gx.lyr[index].symbol = 6;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 6;\n                                        plot._Gx.lyr[i].symbol = 6;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Downward Triangles\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 7 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].radius = 6;\n                                    plot._Gx.lyr[index].symbol = 7;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].radius = 6;\n                                        plot._Gx.lyr[i].symbol = 7;\n                                    }\n                                }\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Line Type...\",\n                    menu: {\n                        title: \"LINE TYPE\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"None\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 0 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 0;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 0;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Verticals\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 1 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 1;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 1;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Horizontals\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 2 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 2;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 2;\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Connecting\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 3 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].line = 3;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].line = 3;\n                                    }\n                                }\n                            }\n                        }]\n                    }\n                }, {\n                    text: \"Thickness...\",\n                    handler: function() {\n                        var thickness = 1;\n                        if (index !== undefined) {\n                            thickness = plot._Gx.lyr[index].thick;\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Thickness\",\n                            mx.intValidator,\n                            function(finalValue) {\n                                if (finalValue === \"\") {\n                                    finalValue = 1;\n                                }\n                                finalValue = Math.max(0, finalValue);\n\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].thick = finalValue;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].thick = finalValue;\n                                    }\n                                }\n                            }, thickness, undefined,\n                            undefined, undefined);\n                    }\n                }, {\n                    text: \"Opacity...\",\n                    handler: function() {\n                        var opacity = 1.0;\n                        if (index !== undefined) {\n                            opacity = plot._Gx.lyr[index].opacity;\n                        }\n                        setupPrompt(\n                            plot,\n                            \"Opacity:\",\n                            mx.floatValidator,\n                            function(finalValue) {\n                                if (finalValue === \"\") {\n                                    finalValue = 1.0;\n                                }\n                                finalValue = Math.max(0, finalValue);\n                                finalValue = Math.min(1, finalValue);\n\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].opacity = finalValue;\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[i].opacity = finalValue;\n                                    }\n                                }\n                            }, opacity, undefined,\n                            undefined, undefined);\n                    }\n                }, {\n                    text: \"XCompression...\",\n                    menu: {\n                        title: \"XCOMPRESSION\",\n                        items: [{\n                            text: \"Retain Current\"\n                        }, {\n                            text: \"Smoothing\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 0 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 0\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 0\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Average\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 1 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 1\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 1\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Minimum\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 2 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 2\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 2\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Maximum\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 3 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 3\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 3\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"First\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 4 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 4\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 4\n                                        });\n                                    }\n                                }\n                            }\n                        }, {\n                            text: \"Max (Abs)\",\n                            checked: (index !== undefined) ? plot._Gx.lyr[index].xcompression === 5 : undefined,\n                            handler: function() {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].change_settings({\n                                        xcmp: 5\n                                    });\n                                } else {\n                                    for (var i = 0; i < Gx.lyr.length; i++) {\n                                        plot._Gx.lyr[index].change_settings({\n                                            xcmp: 5\n                                        });\n                                    }\n                                }\n                            }\n                        }]\n                    }\n                }]\n            };\n        };\n\n        var VIEW_MENU = {\n            text: \"View...\",\n            menu: {\n                title: \"VIEW\",\n                items: [{\n                    text: \"Reset\",\n                    handler: function() {\n                        plot.unzoom();\n                    }\n                }, {\n                    text: \"Y Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Expand Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_EXPAND, \"YPAN\");\n                    }\n                }, {\n                    text: \"Shrink Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_SHRINK, \"YPAN\");\n                    }\n                }, {\n                    text: \"Expand Full\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_FULL, \"YPAN\");\n                    }\n                }, {\n                    text: \"X Axis\",\n                    style: \"separator\"\n                }, {\n                    text: \"Expand Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_EXPAND, \"XPAN\");\n                    }\n                }, {\n                    text: \"Shrink Range\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_SHRINK, \"XPAN\");\n                    }\n                }, {\n                    text: \"Expand Full\",\n                    handler: function() {\n                        middleClickScrollMenuAction(plot,\n                            mx.SB_FULL, \"XPAN\");\n                    }\n                }]\n            }\n        };\n\n        var TRACES_MENU = {\n            text: \"Traces...\",\n            menu: function() {\n                var Gx = plot._Gx;\n                var tracemenu = {\n                    title: \"TRACE\",\n                    items: []\n                };\n                // Add the ALL option\n                tracemenu.items.push({\n                    text: \"All\",\n                    menu: traceoptionsmenu()\n                });\n                // Add all the active layers\n                for (var i = 0; i < Gx.lyr.length; i++) {\n                    tracemenu.items.push({\n                        text: Gx.lyr[i].name,\n                        menu: traceoptionsmenu(i)\n                    });\n                }\n                return tracemenu;\n            }\n        };\n\n        var FILES_MENU = {\n            text: \"Files...\",\n            menu: {\n                title: \"FILES OPTIONS\",\n                items: [\n                    // Overlay File... is disabled\n                    // because it's actually very\n                    // difficult to bring up a\n                    // a file upload browse dialog\n                    /*\n                     * { text: \"Overlay File...\", handler: function() {\n                     * plot.change_settings( {phunits: 'R'} ); } },\n                     */\n                    {\n                        text: \"Deoverlay File...\",\n                        menu: function() {\n                            var Gx = plot._Gx;\n                            var deoverlaymenu = {\n                                title: \"DEOVERLAY\",\n                                items: []\n                            };\n                            deoverlaymenu.items.push({\n                                text: \"Deoverlay All\",\n                                handler: function() {\n                                    plot.deoverlay();\n                                }\n                            });\n                            /* jshint -W083 */\n                            /* TODO figure out how to not create functions within a loop */\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                var handler = (function(index) {\n                                    return function() {\n                                        plot.deoverlay(index);\n                                    };\n                                }(i));\n\n                                deoverlaymenu.items.push({\n                                    text: Gx.lyr[i].name,\n                                    handler: handler\n                                });\n                            }\n                            /* jshint +W083 */\n                            return deoverlaymenu;\n                        }\n                    }\n                ]\n            }\n        };\n\n        var PLUGINS_MENU = {\n            text: \"Plugins...\",\n            menu: {\n                title: \"PLUGINS\",\n                items: (function() { // Immediately\n                    // Invoked\n                    // Function\n                    var result = [];\n                    for (var i = 0; i < Gx.plugins.length; i++) {\n                        var plugin = Gx.plugins[i];\n                        if (plugin.impl.menu) {\n                            if (typeof plugin.impl.menu === 'function') {\n                                result.push(plugin.impl.menu());\n                            } else {\n                                result.push(plugin.impl.menu);\n                            }\n                        }\n                    }\n                    return result;\n                }())\n            }\n        };\n\n        var SAVE_MENU = {\n            text: \"Save as...\",\n            menu: {\n                title: \"SAVE AS\",\n                items: [{\n                    text: \"PNG\",\n                    handler: function() {\n                        var img = plot._Mx.active_canvas.toDataURL(\"image/png\");\n                        var link = document.createElement(\"a\");\n                        link.href = img;\n                        link.download = \"SigPlot.\" + (new Date()).getTime() + \".png\";\n                        link.display = \"none\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                }, {\n                    text: \"JPG\",\n                    handler: function() {\n                        var img = plot._Mx.active_canvas.toDataURL(\"image/jpg\");\n                        var link = document.createElement(\"a\");\n                        link.href = img;\n                        link.download = \"SigPlot.\" + (new Date()).getTime() + \".jpg\";\n                        link.display = \"none\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                }, {\n                    text: \"SVG\",\n                    handler: function() {\n                        var img = plot._Mx.active_canvas.toDataURL(\"image/svg\");\n                        var link = document.createElement(\"a\");\n                        link.href = img;\n                        link.download = \"SigPlot.\" + (new Date()).getTime() + \".svg\";\n                        link.display = \"none\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                }]\n            }\n        };\n\n        var REFRESH_ITEM = {\n            text: \"Refresh\"\n            // no handler, just let the finalizer deal with it\n        };\n\n        var KEYPRESSINFO_ITEM = {\n            text: \"Keypress Info\",\n            handler: function() {\n                mx.message(Mx, KEYPRESS_HELP);\n            }\n        };\n\n        var EXIT_ITEM = {\n            text: \"Exit\",\n            handler: function() {\n                var evt = document.createEvent('Event');\n                evt.initEvent('sigplotexit', true, true);\n                mx.dispatchEvent(Mx, evt);\n            }\n        };\n\n        // Main Menu\n        var MAINMENU = {\n            title: \"SIG-PLOT\",\n            finalize: function() {\n                if (!Mx.prompt) {\n                    // A prompt may have been\n                    // created by a menu handler\n                    // - let it deal with\n                    // eventListener re-setting\n                    mx.addEventListener(Mx, \"mousedown\", plot.onmousedown,\n                        false);\n                }\n                plot.refresh();\n            },\n            items: [REFRESH_ITEM, CONTROLS_MENU, CXMODE_MENU, SCALING_MENU, VIEW_MENU,\n                GRID_MENU, SETTINGS_MENU, COLORMAP_MENU, TRACES_MENU, FILES_MENU,\n                PLUGINS_MENU, KEYPRESSINFO_ITEM, SAVE_MENU, EXIT_ITEM\n            ]\n        };\n\n        mx.menu(Mx, MAINMENU);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function sigplot_legend_menu(plot, index) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n\n        var DASHED = {\n            text: \"Dashed...\",\n            handler: function() {\n                // Figure out the current thickness\n                var thk = 1;\n                if (index !== undefined) {\n                    thk = Math.abs(plot._Gx.lyr[index].thick);\n                } else {\n                    if (Gx.lyr.length === 0) {\n                        return;\n                    }\n\n                    thk = Math.abs(plot._Gx.lyr[0].thick);\n                    for (var i = 0; i < Gx.lyr.length; i++) {\n                        if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                            thk = 1;\n                            break;\n                        }\n                    }\n                }\n                setupPrompt(\n                    plot,\n                    \"Line thickness:\",\n                    mx.intValidator,\n                    function(finalValue) {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 3;\n                            plot._Gx.lyr[index].thick = -1 * finalValue;\n                            plot._Gx.lyr[index].symbol = 0;\n                        } else {\n                            for (var ii = 0; ii < Gx.lyr.length; ii++) {\n                                plot._Gx.lyr[ii].line = 3;\n                                plot._Gx.lyr[ii].thick = -1 * finalValue;\n                                plot._Gx.lyr[ii].symbol = 0;\n                            }\n                        }\n                    }, thk);\n            }\n\n        };\n\n        var COLORS = {\n            text: \"Colors...\",\n            menu: {\n                title: \"COLORS\",\n                items: [{\n                    text: \"Retain Current\"\n                }, {\n                    text: \"Red\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"red\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"red\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"red\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Pink\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"pink\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"pink\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"pink\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Hot Pink\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#ff009e\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"#ff009e\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"#ff009e\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Orange\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"orange\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"orange\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"orange\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Yellow\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"yellow\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"yellow\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"yellow\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Lime Green\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"#80f741\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"#80f741\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"#80f741\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Green\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"green\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"green\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"green\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Blue\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"blue\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"blue\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"blue\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Purple\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].color === \"purple\" : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].color = \"purple\";\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].color = \"purple\";\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Custom Hexcode\",\n                    handler: function() {\n                        setupPrompt(\n                            plot,\n                            \"Color code (requires #):\",\n                            mx.hexValidator,\n                            function(finalValue) {\n                                if (index !== undefined) {\n                                    plot._Gx.lyr[index].color = finalValue;\n                                } else {\n                                    for (var ii = 0; ii < Gx.lyr.length; ii++) {\n                                        plot._Gx.lyr[ii].color = finalValue;\n                                    }\n                                }\n                            }, undefined, undefined, undefined, undefined);\n                    }\n                }]\n            }\n        };\n\n        var SOLID = {\n            text: \"Solid...\",\n            handler: function() {\n                // Figure out the current thickness\n                var thk = 1;\n                if (index !== undefined) {\n                    thk = Math.abs(plot._Gx.lyr[index].thick);\n                } else {\n                    if (Gx.lyr.length === 0) {\n                        return;\n                    }\n\n                    thk = Math.abs(plot._Gx.lyr[0].thick);\n                    var i;\n                    for (i = 0; i < Gx.lyr.length; i++) {\n                        if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {\n                            thk = 1;\n                            break;\n                        }\n                    }\n                }\n                setupPrompt(\n                    plot,\n                    \"Line thickness:\",\n                    mx.intValidator,\n                    function(finalValue) {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 3;\n                            plot._Gx.lyr[index].thick = finalValue;\n                            plot._Gx.lyr[index].symbol = 0;\n                        } else {\n                            var i;\n                            for (i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 3;\n                                plot._Gx.lyr[i].thick = finalValue;\n                                plot._Gx.lyr[i].symbol = 0;\n                            }\n                        }\n                    }, thk);\n            }\n        };\n\n        var TOGGLE = {\n            text: \"Toggle\",\n            style: (index !== undefined) ? \"checkbox\" : undefined,\n            checked: (index !== undefined) ? plot._Gx.lyr[index].display : undefined,\n            handler: function() {\n                if (index !== undefined) {\n                    plot._Gx.lyr[index].display = !plot._Gx.lyr[index].display;\n                } else {\n                    for (var i = 0; i < Gx.lyr.length; i++) {\n                        plot._Gx.lyr[i].display = !plot._Gx.lyr[i].display;\n                    }\n                }\n            }\n        };\n\n        var SYMBOLS = {\n            text: \"Symbols...\",\n            menu: {\n                title: \"SYMBOLS\",\n                items: [{\n                    text: \"Retain Current\"\n                }, {\n                    text: \"None\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 0 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 0;\n                            plot._Gx.lyr[index].symbol = 0;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 0;\n                                plot._Gx.lyr[i].symbol = 0;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Pixels\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 1 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 1;\n                            plot._Gx.lyr[index].symbol = 1;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 1;\n                                plot._Gx.lyr[i].symbol = 1;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Circles\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 2 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 2;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 2;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Squares\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 3 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 3;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 3;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Plusses\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 4 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 4;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 4;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"X's\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 5 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 4;\n                            plot._Gx.lyr[index].symbol = 5;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 4;\n                                plot._Gx.lyr[i].symbol = 5;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Triangles\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 6 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 6;\n                            plot._Gx.lyr[index].symbol = 6;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 6;\n                                plot._Gx.lyr[i].symbol = 6;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Downward Triangles\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 7 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].radius = 6;\n                            plot._Gx.lyr[index].symbol = 7;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].radius = 6;\n                                plot._Gx.lyr[i].symbol = 7;\n                            }\n                        }\n                    }\n                }]\n            }\n        };\n\n        var LINE_TYPE = {\n            text: \"Line Type...\",\n            menu: {\n                title: \"LINE TYPE\",\n                items: [{\n                    text: \"Retain Current\"\n                }, {\n                    text: \"None\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 0 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 0;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 0;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Verticals\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 1 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 1;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 1;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Horizontals\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 2 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 2;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 2;\n                            }\n                        }\n                    }\n                }, {\n                    text: \"Connecting\",\n                    checked: (index !== undefined) ? plot._Gx.lyr[index].line === 3 : undefined,\n                    handler: function() {\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].line = 3;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].line = 3;\n                            }\n                        }\n                    }\n                }]\n            }\n        };\n\n        var THICKNESS = {\n            text: \"Thickness...\",\n            handler: function() {\n                var thickness = 1;\n                if (index !== undefined) {\n                    thickness = plot._Gx.lyr[index].thick;\n                }\n                setupPrompt(\n                    plot,\n                    \"Thickness\",\n                    mx.intValidator,\n                    function(finalValue) {\n                        if (finalValue === \"\") {\n                            finalValue = 1;\n                        }\n                        finalValue = Math.max(0, finalValue);\n\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].thick = finalValue;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].thick = finalValue;\n                            }\n                        }\n                    }, thickness, undefined,\n                    undefined, undefined);\n            }\n        };\n\n        var OPACITY = {\n            text: \"Opacity...\",\n            handler: function() {\n                var opacity = 1.0;\n                if (index !== undefined) {\n                    opacity = plot._Gx.lyr[index].opacity;\n                }\n                setupPrompt(\n                    plot,\n                    \"Opacity:\",\n                    mx.floatValidator,\n                    function(finalValue) {\n                        if (finalValue === \"\") {\n                            finalValue = 1.0;\n                        }\n                        finalValue = Math.max(0, finalValue);\n                        finalValue = Math.min(1, finalValue);\n\n                        if (index !== undefined) {\n                            plot._Gx.lyr[index].opacity = finalValue;\n                        } else {\n                            for (var i = 0; i < Gx.lyr.length; i++) {\n                                plot._Gx.lyr[i].opacity = finalValue;\n                            }\n                        }\n                    }, opacity, undefined,\n                    undefined, undefined);\n            }\n        };\n\n        var LEGEND_TRACE = {\n            title: Gx.lyr[index].name,\n            finalize: function() {\n                if (!Mx.prompt) {\n                    // A prompt may have been\n                    // created by a menu handler\n                    // - let it deal with\n                    // eventListener re-setting\n                    mx.addEventListener(Mx, \"mousedown\", plot.onmousedown,\n                        false);\n                }\n                plot.refresh();\n            },\n            items: [DASHED, COLORS, SOLID, TOGGLE, SYMBOLS, LINE_TYPE, THICKNESS, OPACITY]\n        };\n\n        mx.menu(Mx, LEGEND_TRACE);\n    }\n\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function rubberbox_cb(plot, triggerEvent) {\n        return function(event, xo, yo, xl, yl, action, mode) {\n            var Gx = plot._Gx;\n            var Mx = plot._Mx;\n\n            var x = Math.min(xo, xl);\n            var y = Math.min(yo, yl);\n            var w = Math.abs(xl - xo);\n            var h = Math.abs(yl - yo);\n\n            var takeAction = false;\n            if (event.which === triggerEvent) {\n                // On some browsers, a click will actually be sent as\n                // mousedown/mousemove/mouseup so\n                // don't make insanely small zooms...instead treat them as a\n                // click\n                if (mode === \"horizontal\") {\n                    takeAction = (w > 2);\n                } else if (mode === \"vertical\") {\n                    takeAction = (h > 2);\n                } else {\n                    takeAction = ((w > 2) && (h > 2));\n                }\n            }\n\n            if (!takeAction) {\n                // The mouse didn't shift enough to be considered\n                // as a rubberbox action so treat it as mouseup\n                plot.mouseup(event);\n            } else {\n                // action === null is disabled, but undefined is default\n                if ((action === undefined) || (action === \"zoom\")) {\n                    plot.pixel_zoom(xo, yo, xl, yl);\n                    plot.refresh();\n                } else if (action === \"select\") {\n                    var evt = document.createEvent('Event');\n                    evt.initEvent('mtag', true, true);\n                    var re = pixel_to_real(plot, x, y);\n                    var rwh = pixel_to_real(plot, x + w, y + h);\n                    evt.x = re.x;\n                    evt.y = re.y;\n                    evt.xpos = x;\n                    evt.ypos = y;\n                    evt.w = Math.abs(rwh.x - re.x);\n                    evt.h = Math.abs(rwh.y - re.y);\n                    evt.wpxl = w;\n                    evt.hpxl = h;\n                    evt.shift = event.shiftKey;\n                    mx.dispatchEvent(Mx, evt);\n                }\n            }\n        };\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function plot_init(plot, o) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if (!o.xlab) {\n            o.xlab = 0;\n        }\n        if (!o.ylab) {\n            o.ylab = 0;\n        }\n\n        //Convert xunits and yunits to numbers if they are strings\n        o.xlab = m.unit_lookup(o.xlab);\n        o.ylab = m.unit_lookup(o.ylab);\n\n        // Equivalent to reading cmd line args\n        Gx.xmin = o.xmin === undefined ? 0.0 : o.xmin;\n        Gx.xmax = o.xmax === undefined ? 0.0 : o.xmax;\n        var havexmin = (o.xmin !== undefined);\n        var havexmax = (o.xmax !== undefined);\n        var address;\n        if (typeof o.cmode === \"number\") {\n            switch (o.cmode) {\n                case 1:\n                    address = \"MA\";\n                    break;\n                case 2:\n                    address = \"PH\";\n                    break;\n                case 3:\n                    address = \"RE\";\n                    break;\n                case 4:\n                    address = \"IM\";\n                    break;\n                case 5:\n                    address = \"IR\";\n                    break;\n                case 6:\n                    address = \"LO\";\n                    break;\n                case 7:\n                    address = \"L2\";\n                    break;\n                default:\n                    throw new RangeError(\"Invalid cmode value\");\n            }\n        } else {\n            address = o.cmode === undefined ? \"\" : o.cmode.toUpperCase();\n        }\n        var line = o.line === undefined ? 3 : o.line;\n        Gx.ylab = o.ylab;\n        Gx.ylabel = o.ylabel;\n        Gx.ymin = o.ymin === undefined ? 0.0 : o.ymin;\n        Gx.ymax = o.ymax === undefined ? 0.0 : o.ymax;\n        var haveymin = (o.ymin !== undefined);\n        var haveymax = (o.ymax !== undefined);\n        Gx.zmin = o.zmin;\n        Gx.zmax = o.zmax;\n        var havezmin = (o.zmin !== undefined);\n        var havezmax = (o.zmax !== undefined);\n\n        if (o.colors !== undefined) {\n            mx.setbgfg(Mx, o.colors.bg, o.colors.fg, Mx.xi);\n        }\n\n        if (o.xi !== undefined) {\n            mx.invertbgfg(Mx);\n        }\n\n        Gx.forcelab = o.forcelab === undefined ? true : o.forcelab;\n\n        Gx.all = o.all === undefined ? false : o.all;\n        // By default, SIGPLOT auto-scales only on the first buffer size.\n        // \"expand\" is a feature added for websigplot that when\n        // combined with \"all\" will expand the y-range automaticall\n        // to accomodate all of the samples\n        Gx.expand = o.expand === undefined ? false : o.expand;\n\n        // TODO Gx.mimic = M$GET_SWITCH ('MIMIC')\n        Gx.xlab = o.xlab;\n        Gx.xlabel = o.xlabel;\n        Gx.segment = o.segment === undefined ? false : o.segment;\n        Gx.plab = 24;\n\n        var phunits = (o.phunits === undefined) ? 'D' : o.phunits;\n        if (phunits[0] === 'R') {\n            Gx.plab = 23;\n        } else if (phunits[0] === 'C') {\n            Gx.plab = 25;\n        }\n        Gx.xdiv = o.xdiv === undefined ? 5 : o.xdiv;\n        Gx.ydiv = o.ydiv === undefined ? 5 : o.ydiv;\n\n        Gx.xcompression = o.xcmp || 0;\n        Gx.rasterSmoothing = o.smoothing || false;\n\n        Mx.origin = 1;\n        if (o.yinv) {\n            Mx.origin = 4;\n        }\n        Gx.pmt = o.pmt === undefined ? 1.0 : o.pmt;\n        Gx.bufmax = o.bufmax === undefined ? 32768 : o.bufmax;\n        Gx.sections = o.nsec === undefined ? 0 : o.nsec;\n        Gx.anno_type = o.anno_type === undefined ? 0 : o.anno_type;\n\n        Gx.xfmt = o.xfmt === undefined ? \"\" : o.xfmt;\n        Gx.yfmt = o.yfmt === undefined ? \"\" : o.yfmt;\n\n        // TODO Gx.xf.msgid = M$GET_SWITCH ('MSGID')\n        // Gx.xf.msgmask = max (0, M$GET_SWITCH ('MASK'))\n\n        Gx.index = o.index === undefined ? false : o.index;\n        var imode = (Gx.index || (address.slice(0, 2) === \"IN\"));\n        if (imode) {\n            if (havexmin && (Gx.xmin === 1.0)) {\n                havexmin = false;\n            }\n            if (havexmax && (Gx.xmin === 1.0)) {\n                havexmax = false;\n            }\n        }\n\n        Gx.xdata = false;\n        Gx.note = \"\";\n        Gx.hold = 0;\n        Gx.always_show_marker = o.always_show_marker || false;\n\n        m.vstype('D');\n\n        if (!o.inputs) {\n            basefile(plot, false);\n        } else {\n            // TODO load files\n        }\n\n        var cmode = address;\n\n        if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n            Gx.cmode = 1;\n        } else {\n            Gx.cmode = 3;\n        }\n\n        if ((cmode === \"MA\") || (cmode === \"INMA\") || (cmode === \"ABMA\") ||\n            (cmode === \"__MA\") || (cmode === \"MAGNITUDE\")) {\n            Gx.cmode = 1;\n        }\n        if ((cmode === \"PH\") || (cmode === \"INPH\") || (cmode === \"ABPH\") ||\n            (cmode === \"__PH\") || (cmode === \"PHASE\")) {\n            Gx.cmode = 2;\n        }\n        if ((cmode === \"RE\") || (cmode === \"INRE\") || (cmode === \"ABRE\") ||\n            (cmode === \"__RE\") || (cmode === \"REAL\")) {\n            Gx.cmode = 3;\n        }\n        if ((cmode === \"IM\") || (cmode === \"INIM\") || (cmode === \"ABIM\") ||\n            (cmode === \"__IM\") || (cmode === \"IMAGINARY\")) {\n            Gx.cmode = 4;\n        }\n        if ((cmode === \"LO\") || (cmode === \"D1\") || (cmode === \"INLO\") || (cmode === \"IND1\") ||\n            (cmode === \"ABIM\") || (cmode === \"ABD1\") || (cmode === \"__LO\") ||\n            (cmode === \"__D1\") || (cmode === \"10*LOG10\")) {\n            Gx.cmode = 6;\n        }\n        if ((cmode === \"L2\") || (cmode === \"D2\") || (cmode === \"INL2\") || (cmode === \"IND2\") ||\n            (cmode === \"ABLO\") || (cmode === \"ABD2\") || (cmode === \"__L2\") ||\n            (cmode === \"__D2\") || (cmode === \"20*LOG10\")) {\n            Gx.cmode = 7;\n        }\n        if ((cmode === \"RI\") || (cmode === \"IR\") || (cmode === \"INRI\") || (cmode === \"INIR\") ||\n            (cmode === \"ABRI\") || (cmode === \"ABIR\") || (cmode === \"__RI\") ||\n            (cmode === \"__IR\") || (cmode === \"IMAG/REAL\") || (cmode === \"REAL/IMAG\")) {\n            if (Gx.index) {\n                alert(\"Imag/Real mode not permitted in INDEX mode\");\n            } else {\n                Gx.cmode = 5;\n            }\n        }\n\n        Gx.basemode = Gx.cmode;\n\n        plot.change_settings({\n            cmode: Gx.cmode\n        });\n\n        // if ( (Gx.forcelab) .and. (Gx.xlab .le. 0) .and.\n        // & (Gx.ylab .le. 0) ) then\n        // call M$WARNING\n        // & ('/xlab or /ylab is missing with /forcelab usage')\n        // Gx.forcelab = .false.\n        // endif\n\n        Gx.dbmin = 1.0e-20;\n        if (Gx.cmode >= 6) {\n            var dbscale = 10.0;\n            if (Gx.cmode === 7) {\n                dbscale = 20.0;\n            }\n            if ((cmode[0] === \"L\") || (cmode[0] === \"1\") || (cmode[0] === \"2\")) {\n                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                    Gx.ymin = Math.max(Gx.ymin, 1e-10);\n                    Gx.ymax = Math.max(Gx.ymax, 1e-10);\n                } else {\n                    Gx.ymin = Math.max(Gx.ymin, 1e-20);\n                    Gx.ymax = Math.max(Gx.ymax, 1e-20);\n                }\n                Gx.ymin = m.log10(Gx.ymin) * dbscale;\n                Gx.ymax = m.log10(Gx.ymax) * dbscale;\n            } else if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                Gx.ymin = Math.max(-18.0 * dbscale, Gx.ymin);\n                Gx.ymax = Math.max(-18.0 * dbscale, Gx.ymax);\n                Gx.dbmin = 1e-37;\n            } else if (Math.min(Gx.ymin, Gx.ymax) < -20.0 * dbscale) {\n                Gx.ymin = Math.max(-37.0 * dbscale, Gx.ymin);\n                Gx.ymax = Math.max(-37.0 * dbscale, Gx.ymax);\n                Gx.dbmin = Math.pow(10, Math.min(Gx.ymin, Gx.ymax) / dbscale);\n            }\n        }\n\n        Mx.level = 0;\n        if (imode && !Gx.index) {\n            if (havexmin) {\n                Gx.xmin = Gx.xstart + Gx.xdelta * (Gx.xmin - 1.0);\n            }\n            if (havexmin) {\n                Gx.xmax = Gx.xstart + Gx.xdelta * (Gx.xmax - 1.0);\n            }\n        }\n        Gx.xmult = o.xmult;\n        Gx.ymult = o.xmult;\n\n        //Convert string inputs of autox to numbers\n        switch (o.autox) {\n            case \"none\":\n                o.autox = -1;\n                break;\n            case \"min\":\n                o.autox = 1;\n                break;\n            case \"max\":\n                o.autox = 2;\n                break;\n            case \"full\":\n                o.autox = 3;\n                break;\n        }\n\n        Gx.autox = o.autox === undefined ? -1 : o.autox;\n        if (Gx.autox < 0) {\n            Gx.autox = 0;\n            if (!havexmin) {\n                Gx.autox += 1;\n            }\n            if (!havexmax) {\n                Gx.autox += 2;\n            }\n        }\n\n        //Convert string inputs of autoy to numbers\n\n        switch (o.autoy) {\n            case \"none\":\n                o.autoy = -1;\n                break;\n            case \"min\":\n                o.autoy = 1;\n                break;\n            case \"max\":\n                o.autoy = 2;\n                break;\n            case \"full\":\n                o.autoy = 3;\n                break;\n        }\n\n        Gx.autoy = o.autoy === undefined ? -1 : o.autoy;\n        if (Gx.autoy < 0) {\n            Gx.autoy = 0;\n            if (!haveymin) {\n                Gx.autoy += 1;\n            }\n            if (!haveymax) {\n                Gx.autoy += 2;\n            }\n        }\n\n        //Convert string inputs of autoz to numbers\n\n        switch (o.autoz) {\n            case \"none\":\n                o.autoz = -1;\n                break;\n            case \"min\":\n                o.autoz = 1;\n                break;\n            case \"max\":\n                o.autoz = 2;\n                break;\n            case \"full\":\n                o.autoz = 3;\n                break;\n        }\n\n        Gx.autoz = o.autoz === undefined ? -1 : o.autoz;\n        if (Gx.autoz < 0) {\n            Gx.autoz = 0;\n            if (!havezmin) {\n                Gx.autoz += 1;\n            }\n            if (!havezmax) {\n                Gx.autoz += 2;\n            }\n        }\n        Gx.autol = o.autol === undefined ? -1 : o.autol;\n\n        if (!havexmin) {\n            Gx.xmin = undefined;\n        }\n        if (!havexmax) {\n            Gx.xmax = undefined;\n        }\n\n        scale_base(plot, {\n            get_data: true\n        }, Gx.xmin, Gx.xmax, Gx.xlab, Gx.ylab);\n\n        if (!havexmin) {\n            Gx.xmin = Mx.stk[0].xmin;\n        }\n        if (!havexmax) {\n            Gx.xmax = Mx.stk[0].xmax;\n        }\n        if (!haveymin) {\n            Gx.ymin = Mx.stk[0].ymin;\n        }\n        if (!haveymax) {\n            Gx.ymax = Mx.stk[0].ymax;\n        }\n\n        if (Gx.xmin > Gx.xmax) {\n            Mx.stk[0].xmin = Gx.xmax;\n            Gx.xmax = Gx.xmin;\n            Gx.xmin = Mx.stk[0].xmin;\n        }\n        if (Gx.ymin > Gx.ymax) {\n            Mx.stk[0].ymin = Gx.ymax;\n            Gx.ymax = Gx.ymin;\n            Gx.ymin = Mx.stk[0].ymin;\n        }\n        Mx.stk[0].xmin = Gx.xmin;\n        Mx.stk[0].xmax = Gx.xmax;\n        Mx.stk[0].ymin = Gx.ymin;\n        Mx.stk[0].ymax = Gx.ymax;\n        Gx.panxmin = Math.min(Gx.panxmin, Gx.xmin);\n        Gx.panxmax = Math.max(Gx.panxmax, Gx.xmax);\n        Gx.panymin = Math.min(Gx.panymin, Gx.ymin);\n        Gx.panymax = Math.max(Gx.panymax, Gx.ymax);\n\n        Gx.xmin = Mx.stk[0].xmin;\n        Gx.ymin = Mx.stk[0].ymin;\n\n        if (o.font_family) {\n            Mx.font_family = o.font_family;\n        }\n        if (o.font_width) {\n            Mx.font_width = o.font_width;\n        }\n        if (o.font_scaled) {\n            Mx.font_scaled = true;\n        }\n\n        var font_width = Mx.font_width;\n        if (Mx.font_scaled) {\n            font_width = Math.min(Mx.font_width, Mx.width / 64);\n        }\n        mx.set_font(Mx, font_width);\n\n        Gx.ncolors = o.ncolors === undefined ? 500 : o.ncolors;\n        Gx.cmap = null;\n        if (o.cmap) {\n            Gx.cmap = o.cmap;\n        } else {\n            Gx.cmap = o.xc === undefined ? -1 : o.xc;\n        }\n\n        setup_cmap(plot, Gx.cmap);\n\n        // TODO setup annotate, boxes and points facilities\n\n        // TODO initialize layer structure line types\n\n        if (o.xcnt === \"leftmouse\") {\n            Gx.cntrls = 1;\n        } else if (o.xcnt === \"continuous\") {\n            Gx.cntrls = 2;\n        } else {\n            Gx.cntrls = o.xcnt === undefined ? 1 : o.xcnt;\n        }\n\n        Gx.default_rubberbox_mode = o.rubberbox_mode === undefined ? \"box\" : o.rubberbox_mode;\n        Gx.default_rubberbox_action = o.rubberbox_action === undefined ? \"zoom\" : o.rubberbox_action;\n        Gx.default_rightclick_rubberbox_mode = o.rightclick_rubberbox_mode === undefined ? \"box\" : o.rightclick_rubberbox_mode;\n        Gx.default_rightclick_rubberbox_action = o.rightclick_rubberbox_action === undefined ? null : o.rightclick_rubberbox_action;\n\n        Gx.cross = o.cross === undefined ? false : o.cross;\n        Gx.grid = o.nogrid === undefined ? true : !o.nogrid;\n        Gx.fillStyle = o.fillStyle;\n        Gx.gridBackground = o.gridBackground;\n        Gx.gridStyle = o.gridStyle;\n        Gx.wheelZoom = o.wheelZoom;\n        Gx.wheelZoomPercent = o.wheelZoomPercent;\n        Gx.legend = o.legend === undefined ? false : o.legend;\n        Gx.no_legend_button = o.no_legend_button === undefined ? false : o.no_legend_button;\n        Gx.legendBtnLocation = null;\n        Gx.pan = o.nopan === undefined ? true : !o.nopan;\n        Gx.nomenu = o.nomenu === undefined ? false : o.nomenu;\n\n        // TODO Gx.lmap.ip = 0\n        Gx.modmode = 0;\n        Gx.modlayer = -1; // 0-based indexing instead of 1\n        Gx.modsource = 0;\n        Gx.modified = (o.mod && Gx.lyr.length > 0);\n        // TODO Gx.marks(5) = 5\n        Gx.nmark = 0;\n        Gx.iabsc = 0;\n        if (Gx.index) {\n            Gx.iabsc = 1;\n        }\n        // TODO if (o.specs > 0) Gx.iabsc = M$SEARCH('IRS',c(1:1))\n        Gx.specs = !o.nospecs;\n\n        Gx.scroll_time_interval = o.scroll_time_interval === undefined ? Gx.scroll_time_interval : o.scroll_time_interval;\n\n        Gx.autohide_readout = o.autohide_readout;\n        Gx.autohide_panbars = o.autohide_panbars;\n        Gx.x_scrollbar_location = o.x_scrollbar_location;\n        if (Gx.specs) {\n            Gx.show_x_axis = !o.noxaxis;\n            Gx.show_y_axis = !o.noyaxis;\n            Gx.show_readout = !o.noreadout;\n            if (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout) {\n                Gx.specs = true;\n            } else {\n                Gx.specs = false;\n            }\n        } else {\n            Gx.show_x_axis = false;\n            Gx.show_y_axis = false;\n            Gx.show_readout = false;\n        }\n        Gx.hide_note = o.hide_note || false;\n\n        Gx.xmrk = 0.0;\n        Gx.ymrk = 0.0;\n\n        if (!o.nodragdrop) {\n            mx.addEventListener(Mx, \"dragover\", function(evt) {\n                evt.preventDefault();\n            }, false);\n\n            mx.addEventListener(Mx, \"drop\", (function(plot) {\n                return function(evt) {\n                    var files = evt.dataTransfer.files;\n                    if (files.length > 0) {\n                        evt.preventDefault();\n                        plot.load_files(files);\n                    }\n                };\n            }(plot)), false);\n        }\n\n        Gx.initialized = true;\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function basefile(plot, open) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        // != BASEFILE(false)\n\n        // unlike SIGPLOT, where if Gx.index == 1\n        // then xstart = 1.0 and xdelta = 1.0...technically\n        // Gx.retx is supposed to be the real X coordinate\n        // and Gx.aretx is supposed to be the X coordinate in the\n        // current abscissa mode\n        if (open) {\n            var hcb = Gx.HCB[0];\n            Gx.xstart = hcb.xstart;\n            Gx.xdelta = hcb.xdelta;\n            Mx.origin = 1;\n        } else {\n            Gx.xstart = 0.0;\n            Gx.xdelta = 1.0;\n            Gx.autol = -1;\n            Mx.origin = 1;\n        }\n\n        // if (!open) {\n        // Gx.lay[0].cx = false;\n        // }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_accessories(plot, mode) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n        if (mode > 0) {\n            if ((mode >= 4) && (Gx.show_readout) && (!Gx.hide_note)) {\n                var ln = Gx.note.length;\n                mx.text(Mx, Mx.width - Gx.lbtn - (ln + 1) * Mx.text_w,\n                    Mx.text_h, Gx.note);\n            }\n            if (mode >= 4) {\n                draw_panbars(plot);\n            }\n            if ((mode >= 1) && (Gx.legend)) {\n                draw_legend(plot);\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_plugins(plot) {\n        var Gx = plot._Gx;\n        var ctx = plot._Mx.canvas.getContext(\"2d\");\n        var canvas;\n\n        var plugin_index = 0;\n        while (plugin_index < Gx.plugins.length) {\n            var plugin = Gx.plugins[plugin_index].impl;\n            if (plugin.refresh) {\n                canvas = Gx.plugins[plugin_index].canvas;\n\n                // Ensure the plugin canvas has the same size as the plot\n                if (canvas.width !== plot._Mx.canvas.width) {\n                    canvas.width = plot._Mx.canvas.width;\n                }\n                if (canvas.height !== plot._Mx.canvas.height) {\n                    canvas.height = plot._Mx.canvas.height;\n                }\n\n                // If the plugin canvas is visible, draw it\n                if (canvas.height !== 0 && canvas.width !== 0) {\n                    if (canvas.width !== plot._Mx.canvas.width) {\n                        canvas.width = plot._Mx.canvas.width;\n                    }\n                    if (canvas.height !== plot._Mx.canvas.height) {\n                        canvas.height = plot._Mx.canvas.height;\n                    }\n                    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n                    Gx.plugins[plugin_index].impl.refresh(canvas);\n                    ctx.drawImage(canvas, 0, 0);\n                }\n            }\n            plugin_index = plugin_index + 1;\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_legend(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n        //Gx.always_show_marker = true;\n        var ctx = Mx.canvas.getContext(\"2d\");\n\n        var i = 0;\n        var n = 0; // integer*4\n        var ix = 0; // integer*4\n        var iy = 0; // integer*4\n        var ln = 0; // integer*4\n        var tw = 0; // integer*4\n        var xc = 0; // integer*4\n        var yc = 0; // integer*4\n        var xs = 0; // integer*4\n        var ys = 0; // integer*4\n        var thk = 0; // integer*4\n        var ic = 0; // integer*4\n\n        tw = Mx.text_w;\n        xs = tw * 23;\n        ys = (Gx.lyr.length + 1) * Mx.text_h;\n        xc = Mx.r - xs;\n        yc = Mx.t;\n\n        var legendPos = {\n            x: xc + 2,\n            y: yc + 2,\n            width: xs - 5,\n            height: ys - 5\n        }; // default legend size\n\n        // Determine legend position and label offset based on label sizes\n        var defLabelWidth = 98; // a magic number - default width of pixels\n        var maxLabelWidth = 0;\n        var labelOffset = 0;\n        for (n = 0; n < Gx.lyr.length; n++) { // figure out maximum label\n            // length\n            var labelLength = ctx.measureText(Gx.lyr[n].name).width;\n            if (labelLength > maxLabelWidth) {\n                maxLabelWidth = labelLength;\n            }\n        }\n        if (maxLabelWidth > defLabelWidth) {\n            labelOffset = (maxLabelWidth - defLabelWidth);\n            legendPos.width += labelOffset;\n            legendPos.x -= labelOffset;\n        }\n\n        ctx.strokeStyle = Mx.fg; // Mx.xwfg swapped in for FGColor\n        ctx.fillStyle = Mx.bg;\n        ctx.fillRect(legendPos.x, legendPos.y, legendPos.width,\n            legendPos.height); // Creating a filled box instead of using\n        // clear_area\n        ctx.strokeRect(legendPos.x, legendPos.y, legendPos.width,\n            legendPos.height);\n\n        for (n = 0; n < Gx.lyr.length; n++) {\n            ix = xc + 4 * tw;\n            iy = yc + n * Mx.text_h + Mx.text_h; // additional text_h to\n            // account for 0-based\n            // indexing\n            if (n === Gx.modlayer) {\n                mx.text(Mx, xc + tw - labelOffset, iy + Math.floor(Mx.text_w / 2), '**'); // Added text_w/2\n                // offset\n            }\n            if (Gx.lyr[n].display) {\n                ic = Gx.lyr[n].color;\n                if (Gx.lyr[n].line > 0) {\n                    thk = m.sign(Math.min(tw, Math.abs(Gx.lyr[n].thick)),\n                        Gx.lyr[n].thick);\n                    // added magic -3 offset to y coordinates to center lines\n                    // with text\n                    if (thk < 0 || thk === mx.L_dashed) {\n                        mx.draw_line(Mx, ic, ix - labelOffset, iy - 3, (ix + tw * 2) - labelOffset, iy - 3, Math.abs(thk), {\n                            mode: \"dashed\",\n                            on: 4,\n                            off: 4\n                        });\n                    } else {\n                        mx.draw_line(Mx, ic, ix - labelOffset, iy - 3, (ix + tw * 2) - labelOffset, iy - 3, Math.abs(thk));\n                    }\n                }\n                if (Gx.lyr[n].symbol > 0) {\n                    // New logic here with 0.6*tw to help with legend symbol\n                    // sizing\n                    if (Gx.lyr[n].radius < 0) {\n                        thk = -m.trunc(0.6 * tw);\n                    } else {\n                        thk = Math.min(Gx.lyr[n].radius, m.trunc(0.6 * tw));\n                    }\n\n                    mx.draw_symbol(Mx, ic, ix + tw - labelOffset, iy - 3,\n                        Gx.lyr[n].symbol, thk);\n                }\n                if (Gx.lyr[n].hcb[\"class\"] === 2) {\n                    //draw colormap\n                    mx.legend_colorbar(Mx, legendPos.x + 10, legendPos.y + (legendPos.height / 4),\n                        (legendPos.width / 4) - 10, legendPos.height / 2);\n                }\n            }\n            ix = ix + tw * 3;\n            iy = iy + Mx.text_h * 0.3;\n            mx.text(Mx, ix - labelOffset, iy, Gx.lyr[n].name);\n        }\n        // a variable to hold the legend y positon of each layer\n        var layerheight = legendPos.height / Gx.lyr.length;\n\n        for (i = 0; i < Gx.lyr.length; i++) {\n            if ((legendPos.x <= Mx.xpos) && ((legendPos.x + legendPos.width) >= Mx.xpos) &&\n                ((legendPos.y <= Mx.ypos)) && (legendPos.y + layerheight) >= Mx.ypos) {\n                //find a way to pull up the menu\n                sigplot_legend_menu(plot, i);\n            }\n            legendPos.y += layerheight;\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function form_plotnote(plot) {\n        var Gx = plot._Gx;\n        if (Gx.HCB.length === 0) {\n            Gx.note = \"\";\n        } else if (Gx.HCB[0].plotnote === undefined) {\n            var files = [];\n            for (var n = 0; n < Gx.HCB.length; n++) {\n                if (Gx.HCB[n].file_name) {\n                    files.push(Gx.HCB[n].file_name);\n                }\n            }\n            Gx.note = files.join(\"|\").toUpperCase();\n        }\n    }\n\n    function draw_pcut_x(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((Gx.zmin === undefined) || (Gx.zmax === undefined)) {\n            return;\n        }\n\n        //fill variables to draw x-cut box along bottom\n        // one-pixel lines need to be draw on half-pixel boundaries\n        var plot_width = Mx.r - Mx.l;\n        Gx.x_box_x = Math.floor(Mx.l - 2) + 0.5;\n        Gx.x_box_y = Math.floor(Mx.b + 25) + 0.5;\n        Gx.x_box_w = Math.floor(plot_width + 4);\n        Gx.x_box_h = Math.floor((5 * Mx.text_h) + 20);\n\n        mx.draw_box(Mx, Mx.fg, Gx.x_box_x, Gx.x_box_y, Gx.x_box_w, Gx.x_box_h, 1, Mx.bg);\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = Mx.fg;\n\n        var x = null;\n        var y = null;\n        for (var ii = 0; ii < plot._Gx.x_cut_data.length; ii++) {\n            var z = plot._Gx.x_cut_data[ii]; // the real z-value\n            // constrain to bounds\n            z = Math.min(Math.max(z, Gx.zmin), Gx.zmax);\n            var zrt = plot._Gx.x_box_h / (Gx.zmax - Gx.zmin); // the z-value to pixel ratio\n            var zpx = Math.round((z - Gx.zmin) * zrt);\n\n            var xrt = plot._Gx.x_box_w / plot._Gx.x_cut_data.length;\n            var xpx = Math.round(ii * xrt);\n\n            var xnew = plot._Gx.x_box_x + xpx;\n            var ynew = (plot._Gx.x_box_y + plot._Gx.x_box_h - zpx);\n\n            if (ii === 0) {\n                ctx.moveTo(xnew, ynew);\n            } else if ((xnew !== x) || (ynew !== y)) {\n                // only draw the line if we are moving to a new point\n                ctx.lineTo(xnew, ynew);\n                x = xnew;\n                y = ynew;\n            }\n        }\n        ctx.stroke();\n    }\n\n    function draw_pcut_y(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((Gx.zmin === undefined) || (Gx.zmax === undefined)) {\n            return;\n        }\n\n        var plot_height = Mx.b - Mx.t;\n\n        //fill variables to draw y-cut box along right sidea\n        // one-pixel lines need to be draw on half-pixel boundaries\n        Gx.y_box_x = Math.floor(Mx.r + 25) + 0.5;\n        Gx.y_box_y = Math.floor(Mx.t - 2) + 0.5;\n        Gx.y_box_w = Math.floor((5 * Mx.text_w) + 20);\n        Gx.y_box_h = Math.floor(plot_height + 2);\n\n        if (Gx.lg_colorbar) { //move over box if large colorbar displayed\n            Gx.y_box_x += 100;\n        }\n\n        //draw y-cut box\n        mx.draw_box(Mx, Mx.fg, Gx.y_box_x, Gx.y_box_y, Gx.y_box_w, Gx.y_box_h, 1, Mx.bg);\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = Mx.fg;\n\n        var x = null;\n        var y = null;\n        for (var ii = 0; ii < plot._Gx.y_cut_data.length; ii++) {\n            var z = plot._Gx.y_cut_data[ii]; // the real z-value\n            // constrain to bounds\n            z = Math.min(Math.max(z, Gx.zmin), Gx.zmax);\n            var zrt = plot._Gx.y_box_w / (Gx.zmax - Gx.zmin); // the z-value to pixel ratio\n            var zpx = Math.round((z - Gx.zmin) * zrt);\n\n            var yrt = plot._Gx.y_box_h / plot._Gx.y_cut_data.length;\n            var ypx = Math.round(ii * yrt);\n\n            var xnew = (plot._Gx.y_box_x + zpx);\n            var ynew = plot._Gx.y_box_y + ypx;\n\n            if (ii === 0) {\n                ctx.moveTo(xnew, ynew);\n            } else if ((xnew !== x) || (ynew !== y)) {\n                // only draw the line if we are moving to a new point\n                ctx.lineTo(xnew, ynew);\n                x = xnew;\n                y = ynew;\n            }\n        }\n        ctx.stroke();\n    }\n\n    function draw_layers(plot) {\n        var layers = plot._Gx.lyr;\n        for (var n = 0; n < layers.length; n++) {\n            //if (Gx.sections !== 0) {\n            // TODO\n            //}\n            draw_layer(plot, layers[n]);\n        }\n    }\n\n    /**\n     * Draws the specified layer.\n     *\n     * This is expected to be called after clearing the plot.\n     *\n     * @param {sigplot.Plot}\n     *            the plot object\n     * @param {Number}\n     *            the layer to draw\n     * @private\n     * @memberOf sigplot\n     */\n    function draw_layer(plot, layer) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((!layer.display) || (Gx.hold !== 0)) {\n            return;\n        }\n\n        layer.draw();\n\n        // TODO consider if this is a source of performance\n        // issues on streaming plots\n        var evt = document.createEvent('Event');\n        evt.initEvent('lyrdraw', true, true);\n        evt.index = layer.index;\n        evt.name = layer.name; // the name of the layer\n        evt.layer = layer;\n        mx.dispatchEvent(Mx, evt);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function delete_layer(plot, n) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        //if (n < Gx.modlayer) Gx.modlayer = Gx.modlayer - 1;\n        //if (n < Gx.modsource) Gx.modsource = Gx.modsource - 1;\n\n        // Notify listeners that a layer is about to be deleted\n        var evt = document.createEvent('Event');\n        evt.initEvent('lyrdel', true, true);\n        evt.index = n;\n        evt.name = Gx.lyr[n].name; // the name of the layer\n        evt.layer = Gx.lyr[n];\n        var executeDefault = mx.dispatchEvent(Mx, evt);\n        if (!executeDefault) {\n            return; // Delete was prevented\n        }\n\n        Gx.lyr[n].ybufn = 0;\n        Gx.lyr[n].ybuf = null;\n        if (n < Gx.lyr.length - 1) {\n            var lyr = Gx.lyr[n];\n            for (var i = n; i < Gx.lyr.length - 1; i++) {\n                Gx.lyr[i] = Gx.lyr[i + 1];\n            }\n        }\n        Gx.lyr.length -= 1;\n\n        if (Gx.HCB.length > 0) {\n            Gx.panxmin = 1.0;\n            Gx.panxmax = -1.0;\n            Gx.panymin = 1.0;\n            Gx.panymax = -1.0;\n        }\n    }\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n\n    function draw_p_cuts(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        if (Gx.lyr[0].hcb[\"class\"] !== 2) {\n            return;\n        }\n\n        var plot_height = Mx.b - Mx.t;\n        var plot_width = Mx.r - Mx.l;\n        var height = Gx.lyr[0].yframe;\n        var width = Gx.lyr[0].xframe;\n\n        if (Gx.p_cuts) {\n            if (!Gx.lyr[0].hcb.pipe) {\n                if (((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r) && (Gx.p_cuts_xpos !== Mx.xpos))) {\n                    var line = 0;\n                    var i = 0;\n\n                    //fill data for y_cut for this mouse xpos\n                    Gx.y_cut_data = [];\n                    line = Math.floor((width * (Mx.xpos - Mx.l)) / plot_width);\n                    for (i = line; i < (width * height); i += width) {\n                        Gx.y_cut_data.push(Gx.lyr[0].zbuf[i]);\n                    }\n                    draw_pcut_y(plot);\n                    Gx.p_cuts_xpos = Mx.xpos;\n                }\n                if (((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b) && (Gx.p_cuts_ypos !== Mx.ypos))) {\n                    var row = 0;\n                    var start = 0;\n                    var finish = 0;\n                    var i = 0;\n\n                    //fill data for x_cut for this mouse ypos\n                    row = Math.floor((height * (Mx.ypos - Mx.t)) / plot_height);\n                    start = row * width;\n                    finish = start + width;\n                    Gx.x_cut_data = Gx.lyr[0].zbuf.slice(start, finish);\n                    draw_pcut_x(plot);\n\n                    Gx.p_cuts_ypos = Mx.ypos;\n                }\n            } else {\n                if ((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r)) {\n                    var line = 0;\n                    var i = 0;\n                    height = Gx.lyr[0].lps;\n                    //fill data for y_cut for this mouse xpos\n                    Gx.y_cut_data = [];\n                    line = Math.floor((width * (Mx.xpos - Mx.l)) / plot_width);\n                    for (i = line; i < (width * height); i += width) {\n                        Gx.y_cut_data.push(Gx.lyr[0].zbuf[i]);\n                    }\n                    draw_pcut_y(plot);\n                }\n\n                if ((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b)) {\n                    var row = 0;\n                    var start = 0;\n                    var finish = 0;\n                    //fill data for x_cut for this mouse ypos\n                    Gx.x_cut_data = [];\n                    row = Math.floor((height * (Mx.ypos - Mx.t)) / plot_height);\n                    start = row * width;\n                    finish = start + width;\n                    Gx.x_cut_data = Gx.lyr[0].zbuf.slice(start, finish);\n                    draw_pcut_x(plot);\n                }\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_crosshairs(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.cross) {\n            if ((Gx.cross === \"vertical\") || (Gx.cross === true)) {\n                if ((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r) && (Gx.cross_xpos !== Mx.xpos)) {\n                    if (Gx.cross_xpos !== undefined) {\n                        mx.rubberline(Mx, Gx.cross_xpos, Mx.t, Gx.cross_xpos, Mx.b);\n                    }\n                    mx.rubberline(Mx, Mx.xpos, Mx.t, Mx.xpos, Mx.b);\n                    Gx.cross_xpos = Mx.xpos;\n                }\n            }\n            if ((Gx.cross === \"horizontal\") || (Gx.cross === true)) {\n                if ((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b) && (Gx.cross_ypos !== Mx.ypos)) {\n                    if (Gx.cross_ypos !== undefined) {\n                        mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r, Gx.cross_ypos);\n                    }\n\n                    mx.rubberline(Mx, Mx.l, Mx.ypos, Mx.r, Mx.ypos);\n                    Gx.cross_ypos = Mx.ypos;\n                }\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_marker(plot) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (Gx.xmrk !== null && Gx.ymrk !== null) {\n            var pix = mx.real_to_pixel(Mx, Gx.xmrk, Gx.ymrk);\n            if ((Gx.lyr.length > 0) && (Gx.lyr[0].hcb[\"class\"] === 1)) {\n                if (pix.clipped) {\n                    return;\n                }\n            } else if ((Gx.lyr.length > 0) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                if (pix.clipped_x || !pix.clipped_y) {\n                    return;\n                }\n            }\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            ctx.beginPath();\n            ctx.strokeStyle = Mx.xwfg;\n            ctx.fillStyle = Mx.xwfg;\n            ctx.arc(pix.x, pix.y, 2, 0, 360);\n            ctx.stroke(); // just draw the arc's outline\n\n            // TODO add x/y coord\n            ctx.textBaseline = \"alphabetic\";\n            ctx.textAlign = \"left\";\n            ctx.fillStyle = Mx.fg;\n            ctx.font = Mx.font.font;\n\n            var text = \"x:\" + mx.format_g(Gx.xmrk, 6, 3, true);\n            ctx.fillText(text, pix.x + 5, pix.y - 5);\n            text = \"y:\" + mx.format_g(Gx.ymrk, 6, 3, true);\n            ctx.fillText(text, pix.x + 5, pix.y - 5 + Mx.text_h);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function changephunits(plot, newphunits) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n        var newplab = Gx.plab;\n        if (newphunits === 'R') {\n            newplab = 23;\n        } else if (newphunits === 'D') {\n            newplab = 24;\n        }\n        if (newphunits === 'C') {\n            newplab = 25;\n        }\n        if (newplab !== Gx.plab) {\n            var phscale = [Math.PI, 180.0, 0.5];\n            var dscl = phscale[newplab - 23] / phscale[Gx.plab - 23];\n            Gx.plab = newplab;\n            if (Gx.cmode === 2) {\n                for (var i = 0; i <= Mx.level; i++) {\n                    Mx.stk[i].ymin = Mx.stk[i].ymin * dscl;\n                    Mx.stk[i].ymax = Mx.stk[i].ymax * dscl;\n                    Mx.stk[i].yscl = Mx.stk[i].yscl * dscl;\n                }\n\n                Gx.panymin = Gx.panymin * dscl;\n                Gx.panymax = Gx.panymax * dscl;\n                plot.refresh();\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function changemode(plot, newmode) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        Gx.xdata = false;\n        for (var n = 0; n < Gx.lyr.length; n++) {\n            if (newmode === 5) {\n                Gx.lyr[n].xdata = true;\n            } else {\n                Gx.lyr[n].xdata = false; // TODO (Gx.lyr(n).xsub > 0)\n            }\n            if (Gx.lyr[n].xdata) {\n                Gx.xdata = true;\n            }\n        }\n\n        if (newmode === Gx.cmode) {\n            return;\n        } else if (newmode === 5 && Gx.index) {\n            alert(\"Imag/Real mode not permitted in INDEX mode\");\n        } else if (Gx.lyr.length <= 0) {\n            Gx.cmode = newmode;\n            // The call to display specs isn't found in sigplot.for;\n            // which causes a small bug where the plot mode is\n            // changed but the mode label in the specs area\n            // isn't updated.\n            display_specs(plot);\n        } else if (newmode > 0) {\n            var oldmode = Gx.cmode;\n            Gx.cmode = newmode;\n\n            var autox = Gx.autox;\n            var autoy = Gx.autoy;\n            Gx.autox = 3;\n            Gx.autoy = 3;\n\n            if ((newmode === 5) || (oldmode === 5)) {\n                Gx.panxmin = 1.0;\n                Gx.panxmax = -1.0;\n                Gx.panymin = 1.0;\n                Gx.panymax = -1.0;\n                Mx.level = 0;\n\n                if (newmode === Gx.basemode) {\n                    Mx.stk[0].xmin = Gx.xmin;\n                    Mx.stk[0].xmax = Gx.xmax;\n                    Mx.stk[0].ymin = Gx.ymin;\n                    Mx.stk[0].ymax = Gx.ymax;\n                } else if ((newmode === 5) || (Gx.basemode === 5)) {\n                    scale_base(plot, {\n                        get_data: true\n                    });\n                } else {\n                    Mx.stk[0].xmin = Gx.xmin;\n                    Mx.stk[0].xmax = Gx.xmax;\n                    scale_base(plot, {\n                        get_data: true\n                    }, Gx.xmin, Gx.xmax);\n                }\n            } else {\n                if (newmode === Gx.basemode) { // This is only correct if we\n                    // didn't load a basefile\n                    Gx.panymin = 1.0;\n                    Gx.panymax = -1.0;\n                    Mx.stk[0].ymin = Gx.ymin;\n                    Mx.stk[0].ymax = Gx.ymax;\n                } else {\n                    scale_base(plot, {}, Mx.stk[Mx.level].xmin,\n                        Mx.stk[Mx.level].xmax);\n                }\n                for (var n = 1; n <= Mx.level; n++) {\n                    Mx.stk[n].ymin = Mx.stk[0].ymin;\n                    Mx.stk[n].ymax = Mx.stk[0].ymax;\n                }\n            }\n            Gx.autox = autox;\n            Gx.autoy = autoy;\n            plot.refresh();\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function draw_panbars(plot) {\n        var k; // integer*4\n        //var i1; // integer*4\n        //var itext; // integer*4\n\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        if ((!Gx.pan) || (Mx.widget)) {\n            return;\n        }\n\n        k = Mx.level; // Y scrollbar\n\n        var out = {\n            ps: Mx.stk[k].ymin,\n            pe: Mx.stk[k].ymax\n        };\n        var need_y_scrollbar = ((out.ps !== Gx.panymin) || (out.pe !== Gx.panymax));\n        need_y_scrollbar = need_y_scrollbar && (Mx.level > 0);\n\n        if (Gx.autohide_panbars && (!need_y_scrollbar || !plot.mouseOnCanvas) && !Gx.panning) {\n            var ctx = Mx.canvas.getContext(\"2d\");\n            ctx.fillStyle = Mx.bg;\n            ctx.fillRect(Gx.pyl, Mx.t, Gx.pyl + Gx.pthk, Mx.b - Mx.t);\n        } else {\n            var i1 = mx.scrollbar(Mx, 0, Gx.pyl, Gx.pyl + Gx.pthk, Mx.t, Mx.b, out,\n                Gx.panymin, Gx.panymax, undefined, Mx.scrollbar_y);\n            Mx.stk[k].ymin = out.ps;\n            Mx.stk[k].ymax = out.pe;\n        }\n\n        if (Gx.pl < Mx.width) { // X scrollbar\n            out = {\n                ps: Mx.stk[k].xmin,\n                pe: Mx.stk[k].xmax\n            };\n            var need_x_scrollbar = ((out.ps !== Gx.panxmin) || (out.pe !== Gx.panxmax));\n            need_x_scrollbar = need_x_scrollbar && (!Gx.all || (Mx.level > 0));\n\n            if (Gx.autohide_panbars && (!need_x_scrollbar || !plot.mouseOnCanvas) && !Gx.panning) {\n                var ctx = Mx.canvas.getContext(\"2d\");\n                ctx.fillStyle = Mx.bg;\n                ctx.fillRect(Gx.pl, Gx.pt - 1, Gx.pr - Gx.pl, Gx.pthk + 4);\n            } else {\n                var i1 = mx.scrollbar(Mx, 0, Gx.pl, Gx.pr, Gx.pt, Gx.pt + Gx.pthk, out,\n                    Gx.panxmin, Gx.panxmax, undefined, Mx.scrollbar_x);\n                Mx.stk[k].xmin = out.ps;\n                Mx.stk[k].xmax = out.pe;\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function pan(plot, action, flag, mouseEvent) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var i; // an integer*4\n        var k; // an integer*4\n        // var ih // an integer*4\n        // var iw; // an integer*4\n        // var imin; // an integer*4\n        // var imax; // an integer*4\n        var j; // an integer*4\n        var xmin; // a real*8\n        var xmax; // a real*8\n        var xran; // a real*8\n        // var xtemp; // a real*8\n        var ymin; // a real*8\n        var ymax; // a real*8\n        var yran; // a real*8\n        // var ytemp; // a real*8\n        var warn; // a logical*4\n\n        var scrollbarState;\n\n        var sbx = new mx.SCROLLBAR(); // a SCROLLBAR\n        var sby = new mx.SCROLLBAR(); // a SCROLLBAR\n\n        var SIGPLOT_PAN = false;\n        k = Mx.level;\n        if (Gx.panmode > 0) {\n            sbx.flag = 11;\n            sby.flag = 11;\n        } else {\n            sbx.flag = -12;\n            sby.flag = -12;\n        }\n        if (flag === 0) {\n            sbx.action = 0;\n            sby.action = 0;\n        }\n\n        warn = true;\n        if (action.substring(0, 1) === 'Y') {\n            ymin = Mx.stk[k].ymin;\n            ymax = Mx.stk[k].ymax;\n            yran = ymax - ymin;\n            if (action === 'YPAN') {\n                scrollbarState = Mx.scrollbar_y;\n\n                var out = {\n                    ps: ymin,\n                    pe: ymax\n                };\n                i = mx\n                    .scrollbar(Mx, sby, Gx.pyl, Gx.pyl + Gx.pthk, Mx.t,\n                        Mx.b, out, Gx.panymin, Gx.panymax, mouseEvent,\n                        scrollbarState);\n                ymin = out.ps;\n                ymax = out.pe;\n                // TODO: Warn only if Scrollbar arrow is pressed and no\n                // movement.\n                if (sby.action !== 0) {\n                    j = mx.scroll(Mx, sby, mx.XW_UPDATE, undefined,\n                        scrollbarState);\n                }\n                warn = false;\n            } else if (action === 'YCENTER') {\n                // Orig code : ymin = ymin - yran * (Mx.ypos - (Mx.t + Mx.b) /\n                // 2) / (Mx.b - Mx.t) // TODO Worry about any int division here?\n                ymin = ymin - yran * (Mx.ypos - (Mx.t + Mx.b) / 2) / (Mx.b - Mx.t);\n                ymax = ymin + yran;\n                warn = false;\n            }\n\n            if (ymin !== Mx.stk[k].ymin || ymax !== Mx.stk[k].ymax) {\n                Mx.stk[k].ymin = ymin;\n                Mx.stk[k].ymax = ymax;\n                if (Gx.cmode === Gx.basemode && Mx.level === 1) {\n                    Gx.ymin = Math.min(Gx.ymin, ymin);\n                    Gx.ymax = Math.max(Gx.ymax, ymax);\n                }\n\n                this.inPan = true; // prevent recursive pans\n                var evt = document.createEvent('Event');\n                evt.initEvent('ypan', true, true);\n                evt.level = Mx.level;\n                evt.xmin = Mx.stk[Mx.level].xmin;\n                evt.ymin = Mx.stk[Mx.level].ymin;\n                evt.xmax = Mx.stk[Mx.level].xmax;\n                evt.ymax = Mx.stk[Mx.level].ymax;\n                mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n                this.inPan = false;\n\n                plot.refresh();\n                // MSGDO(MSK_PANY, Mx.level); // just sets plotinfo.xmin and\n                // xmax into the MQD for the menu\n                SIGPLOT_PAN = true;\n            }\n            // TODO Later - Implement a messagebox status method\n            // else if (warn) {\n            // mx.message('All panned out', -1.0);\n            // }\n        } else {\n            xmin = Mx.stk[k].xmin;\n            xmax = Mx.stk[k].xmax;\n            xran = xmax - xmin;\n            if (action === 'XPAN') {\n                scrollbarState = Mx.scrollbar_x;\n\n                var out = {\n                    ps: xmin,\n                    pe: xmax\n                };\n                i = mx\n                    .scrollbar(Mx, sbx, Gx.pl, Gx.pr, Gx.pt, Gx.pt + Gx.pthk, out, Gx.panxmin, Gx.panxmax,\n                        mouseEvent, scrollbarState);\n                xmin = out.ps;\n                xmax = out.pe;\n                // TODO: Warn only if Scrollbox arrow is pressed and no\n                // movement.\n                if (sbx.action !== 0) {\n                    j = mx.scroll(Mx, sbx, mx.XW_UPDATE, undefined,\n                        scrollbarState);\n                }\n                warn = false;\n            } else if (action === 'XCENTER') {\n                // Original code : xmin = xmin + xran * (Mx.xpos - (Mx.l + Gx.r)\n                // / 2) / (Mx.r - Mx.l) // TODO Worry about any int division\n                // here?\n                xmin = xmin + xran * (Mx.xpos - (Mx.l + Mx.r) / 2) / (Mx.r - Mx.l);\n                if (xmin !== Mx.stk[k].xmin) {\n                    xmax = xmin + xran;\n                }\n                warn = false;\n            }\n\n            if (Mx.stk[k].xmin !== xmin || Mx.stk[k].xmax !== xmax) {\n                Mx.stk[k].xmin = xmin;\n                Mx.stk[k].xmax = xmax;\n                if (!Gx.xdata && Mx.level === 1) {\n                    Gx.xmin = Mx.stk[1].xmin;\n                    Gx.xmax = Mx.stk[1].xmax;\n                }\n\n                this.inPan = true; // prevent recursive pans\n                var evt = document.createEvent('Event');\n                evt.initEvent('xpan', true, true);\n                evt.level = Mx.level;\n                evt.xmin = Mx.stk[Mx.level].xmin;\n                evt.ymin = Mx.stk[Mx.level].ymin;\n                evt.xmax = Mx.stk[Mx.level].xmax;\n                evt.ymax = Mx.stk[Mx.level].ymax;\n                mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n                this.inPan = false;\n\n                plot.refresh();\n                // MSGDO (MSK_PANX, Mx.level); // just sets plotinfo.xmin and\n                // xmax into the MQD for the menu\n                SIGPLOT_PAN = true;\n            }\n            // TODO Later - Implement a messagebox status method\n            // else if (warn) {\n            // mx.message('All panned out', -1.0);\n            // }\n        }\n\n        return SIGPLOT_PAN;\n    }\n\n    /**\n     * Direct method to handle the dragging of a scrollbar.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param scrollAction\n     *            The scroll action being performed. Either \"YPAN\" or \"XPAN\" are\n     *            accepted.\n     * @param event\n     *            The mouse move event.\n     * @private\n     * @memberOf sigplot\n     */\n    function drag_scrollbar(plot, scrollAction, event) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n        var min;\n        var max;\n\n        // ----- Retrieve appropriate SCROLLBAR -----\n        var scrollbar;\n        if (scrollAction === \"XPAN\") {\n            scrollbar = plot._Mx.scrollbar_x;\n        } else if (scrollAction === \"YPAN\") {\n            scrollbar = plot._Mx.scrollbar_y;\n        } else {\n            throw \"Unable to drag scrollbar - scrollAction is not 'XPAN' or 'YPAN'!!\";\n        }\n\n        // ----- OLD SIGPLOT.PAN Logic -----\n        scrollbar.flag = -12; // TODO Necessary?\n        var k = Mx.level;\n        if (scrollAction === \"XPAN\") {\n            min = Mx.stk[k].xmin;\n            max = Mx.stk[k].xmax;\n        } else if (scrollAction === \"YPAN\") {\n            min = Mx.stk[k].ymin;\n            max = Mx.stk[k].ymax;\n        } else {\n            min = undefined;\n            max = undefined;\n        }\n\n        // ----- MX.SCROLLBAR Logic -----\n        var rangeOut = {\n            \"min\": min,\n            \"max\": max\n        };\n        drag_updateRange(Mx, Gx, scrollbar, scrollAction, rangeOut, event);\n        min = rangeOut.min;\n        max = rangeOut.max;\n\n        // ----- UPDATE SCROLLBAR -----\n        scrollbar.smin = min;\n        scrollbar.srange = max - min;\n        mx.redrawScrollbar(scrollbar, Mx, undefined);\n\n        // ----- Update the viewbox -----\n        updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange,\n            scrollAction.slice(0, 1));\n\n        this.inPan = true; // prevent recursive pans\n        var evt = document.createEvent('Event');\n        if (scrollAction === \"XPAN\") {\n            evt.initEvent('xpan', true, true);\n        } else if (scrollAction === \"YPAN\") {\n            evt.initEvent('ypan', true, true);\n        }\n        evt.level = Mx.level;\n        evt.xmin = Mx.stk[Mx.level].xmin;\n        evt.ymin = Mx.stk[Mx.level].ymin;\n        evt.xmax = Mx.stk[Mx.level].xmax;\n        evt.ymax = Mx.stk[Mx.level].ymax;\n        mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n        this.inPan = false;\n\n        scrollbar.action = 0; // TODO New step - reset action of the scrollbar\n        // after drag is done...\n        plot.refresh();\n    }\n\n    /**\n     * Method to update plot range based on a drag event. Takes the mouse offset\n     * introduced by the drag and adds a scale factor.\n     *\n     * @param Gx\n     *            The GX Context to work with.\n     * @param scrollbar\n     *            The Scrollbar to use.\n     * @param scrollAction\n     *            The scroll action being performed. Either \"YPAN\" or \"XPAN\" are\n     *            accepted.\n     * @param range\n     *            The plot' min and max range values to update.\n     * @param event\n     *            The mouse move event.\n     *\n     * @private\n     * @memberOf sigplot\n     */\n    function drag_updateRange(Mx, Gx, scrollbar, scrollAction, range, event) {\n        scrollbar.action = mx.SB_DRAG;\n\n        if (scrollAction === \"YPAN\") {\n            var scaleFactor = Mx.scrollbar_y.trange / Mx.scrollbar_y.h;\n            if (scrollbar.origin === 4) { // inverted y\n                scaleFactor *= -1;\n            }\n            var mouseOffset = event.screenY - Gx.panning.ypos;\n            var realOffset = mouseOffset * scaleFactor;\n\n            if ((Gx.panning.ymin - realOffset) < Gx.panymin) { // At the left\n                // edge\n                range.max = Gx.panymin + (range.max - range.min);\n                range.min = Gx.panymin;\n            } else if ((Gx.panning.ymax - realOffset) > Gx.panymax) { // At\n                // the\n                // right\n                // edge\n                range.min = Gx.panymax - (range.max - range.min);\n                range.max = Gx.panymax;\n            } else {\n                range.min = Gx.panning.ymin - realOffset;\n                range.max = Gx.panning.ymax - realOffset;\n            }\n        } else if (scrollAction === \"XPAN\") {\n            var scaleFactor = Mx.scrollbar_x.trange / Mx.scrollbar_x.w;\n            if (scrollbar.origin === 3) { // inverted x\n                scaleFactor *= -1;\n            }\n            var mouseOffset = event.screenX - Gx.panning.xpos;\n            var realOffset = mouseOffset * scaleFactor;\n\n            if ((Gx.panning.xmin + realOffset) < Gx.panxmin) { // At the left\n                // edge\n                range.max = Gx.panxmin + (range.max - range.min);\n                range.min = Gx.panxmin;\n            } else if ((Gx.panning.xmax + realOffset) > Gx.panxmax) { // At\n                // the\n                // right\n                // edge\n                range.min = Gx.panxmax - (range.max - range.min);\n                range.max = Gx.panxmax;\n            } else {\n                range.min = Gx.panning.xmin + realOffset;\n                range.max = Gx.panning.xmax + realOffset;\n            }\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function setupPrompt(plot, promptText, isValid, onSuccess, inputValue,\n        xpos, ypos, callback) {\n        var Mx = plot._Mx;\n\n        if (Mx.prompt) {\n            throw \"Prompt already exists! Can only have one prompt at a time!\";\n        }\n\n        // Disable Mx keypress/mouse listeners\n        mx.disableListeners(Mx);\n\n        // Disable Plot keypress/mouse listeners\n        plot.disable_listeners();\n\n        // Add on to the onSuccess method with plot specifics\n        var realOnSuccess = function(plot, onSuccess) {\n            return function(value) {\n                onSuccess(value);\n\n                // Re-enable Mx keypress/mouse listeners\n                mx.enableListeners(Mx);\n\n                // Re-enable Plot keypress/mouse listeners\n                plot.enable_listeners();\n\n                plot.refresh();\n\n                if (callback !== undefined) {\n                    callback();\n                }\n            };\n        };\n\n        var refresh = function() { // TODO Refactor this setup method to be\n            // more like mx.menu/main menu widget?\n            plot.refresh();\n        };\n\n        // Create the prompt\n        var errorMessageTimeout = 5000;\n\n        try {\n            mx.prompt(Mx, promptText, isValid, realOnSuccess(plot, onSuccess),\n                refresh, inputValue, xpos, ypos, errorMessageTimeout);\n        } catch (err) {\n            console.log(\"ERROR: Failed to set up prompt due to: \" + err);\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function enable_listeners(plot) {\n        var Mx = plot._Mx;\n        mx.addEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n        mx.addEventListener(Mx, \"mousemove\", plot.throttledOnMouseMove, false);\n        document.addEventListener(\"mouseup\", plot.docMouseUp, false);\n        mx.addEventListener(Mx, \"mouseup\", plot.mouseup, false);\n        window.addEventListener(\"mousedown\", plot.dragMouseDownHandler, false);\n        window.addEventListener(\"mousemove\", plot.throttledDragOnMouseMove, false);\n        window.addEventListener(\"mouseup\", plot.dragMouseUpHandler, false);\n        window.addEventListener(\"wheel\", plot.wheelHandler, false);\n        window.addEventListener(\"mousewheel\", plot.wheelHandler, false);\n        window.addEventListener(\"DOMMouseScroll\", plot.wheelHandler, false);\n        window.addEventListener(\"keypress\", plot.onkeypress, false);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function disable_listeners(plot) {\n        var Mx = plot._Mx;\n\n        mx.removeEventListener(Mx, \"mousedown\", plot.onmousedown, false);\n        mx.removeEventListener(Mx, \"mousemove\", plot.throttledOnMouseMove,\n            false);\n        document.removeEventListener(\"mouseup\", plot.docMouseUp, false);\n        mx.removeEventListener(Mx, \"mouseup\", plot.mouseup, false);\n        window.removeEventListener(\"mousedown\", plot.dragMouseDownHandler,\n            false);\n        window.removeEventListener(\"mousemove\", plot.throttledDragOnMouseMove,\n            false);\n        window.removeEventListener(\"mouseup\", plot.dragMouseUpHandler, false);\n        window.removeEventListener(\"wheel\", plot.wheelHandler, false);\n        window.removeEventListener(\"mousewheel\", plot.wheelHandler, false);\n        window.removeEventListener(\"DOMMouseScroll\", plot.wheelHandler, false);\n        window.removeEventListener(\"keypress\", plot.onkeypress, false);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function display_specs(plot) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var ctx = Mx.canvas.getContext(\"2d\");\n\n        // section logic\n        if (Gx.sections !== 0) {\n            // TODO\n        } else {\n            Gx.isec = 0;\n        }\n\n        // transform into realworld coordinates\n        // is already done by the mousemove listener\n        // adjust for abscissa mode\n        if (Mx.warpbox) {\n            var re = pixel_to_real(plot, Mx.warpbox.xo, Mx.warpbox.yo);\n            var rwh = pixel_to_real(plot, Mx.warpbox.xl, Mx.warpbox.yl);\n\n            Gx.aretx = re.x;\n            Gx.arety = re.y;\n            Gx.dretx = rwh.x - re.x;\n            Gx.drety = rwh.y - re.y;\n        } else {\n            Gx.aretx = Gx.retx;\n            Gx.arety = Gx.rety;\n            Gx.dretx = Gx.retx - Gx.xmrk;\n            Gx.drety = Gx.rety - Gx.ymrk;\n        }\n\n        if ((Gx.cmode === 5) && (Gx.iabsc === 1)) {\n            Gx.iabsc = 2;\n        } // R/I mode\n        if (Gx.iabsc === 1) { // index\n            Gx.aretx = Math.round((Gx.aretx - Gx.xstart) / Gx.xdelta);\n            if (!Gx.index) {\n                Gx.aretx += 1;\n            }\n            Gx.dretx = Math.round(Gx.dretx / Gx.xdelta);\n        } else if (Gx.iabsc === 2) { // 1/absc\n            if (Gx.aretx !== 0.0) {\n                Gx.aretx = 1.0 / Gx.aretx;\n            }\n            if (Gx.arety !== 0.0) {\n                Gx.arety = 1.0 / Gx.arety;\n            }\n            if (Gx.dretx !== 0.0) {\n                Gx.dretx = 1.0 / Gx.dretx;\n            }\n            if (Gx.drety !== 0.0) {\n                Gx.drety = 1.0 / Gx.drety;\n            }\n        }\n\n        if ((!Gx.show_readout) || (Mx.widget)) {\n            return;\n        }\n\n        // Clear the specs area\n        // First clear the y-row\n        ctx.fillStyle = Mx.bg;\n        var iy = Math.floor(Mx.height - 2.5 * Mx.text_h);\n        ctx.fillRect(Mx.text_w, iy - 1, 49 * Mx.text_w, iy + 1.5 * Mx.text_h);\n\n        // Then clear the x-row\n        iy = Math.floor(Mx.height - 0.5 * Mx.text_h);\n        var k = Math.max(Gx.pr + Mx.text_w, Mx.width - Mx.text_w * 2);\n        ctx.fillStyle = Mx.bg;\n        ctx.fillRect(k, iy - Mx.text_h, Mx.text_w, Mx.text_h);\n\n        if (Gx.autohide_readout && !plot.mouseOnCanvas && !Gx.panning) {\n            return;\n        }\n\n        var xval, yval, xdelta, ydelta;\n        // TODO handle xfmt/yfmt using m.d2a_form equivalent\n        if ((Gx.iabsc === 0) && (Gx.ylab === 4)) {\n            yval = (m.sec2tspec(Gx.arety) + \"                \").substring(0, 16);\n            ydelta = (m.sec2tspec(Gx.drety, \"delta\") + \"                \").substring(0, 16);\n        } else {\n            yval = mx.format_g(Gx.arety, 16, 9, true);\n            ydelta = mx.format_g(Gx.drety, 16, 9);\n        }\n        if ((Gx.iabsc === 0) && (Gx.xlab === 4)) {\n            xval = (m.sec2tspec(Gx.aretx) + \"                \").substring(0, 16);\n            xdelta = (m.sec2tspec(Gx.dretx, \"delta\") + \"                \").substring(0, 16);\n        } else {\n            xval = mx.format_g(Gx.aretx, 16, 9, true);\n            xdelta = mx.format_g(Gx.dretx, 16, 9);\n        }\n\n        var chara = \"y: \" + yval + \" dy: \" + ydelta + \" L=\" + Mx.level + \" \" + cxm[Gx.cmode - 1];\n        var charb = \"x: \" + xval + \" dx: \" + xdelta + \" \" + cam[Gx.iabsc];\n        if (Gx.iabsc === 3) {\n            if (Gx.dretx === 0.0) {\n                chara = chara.substr(0, 20) + \"sl: Inf             \" + chara.substr(40, chara.length);\n            } else {\n                chara = chara.substr(0, 20) + \"sl: \" + mx.format_g(Gx.drety / Gx.dretx, 16, 9) + chara.substr(40, chara.length);\n            }\n        }\n\n        iy = Math.floor(Mx.height - 1.5 * Mx.text_h);\n        mx.text(Mx, Mx.text_w, iy, chara);\n        iy = Math.floor(Mx.height - 0.5 * Mx.text_h);\n        mx.text(Mx, Mx.text_w, iy, charb);\n\n        if (mx.LEGACY_RENDER) {\n            // display controls indicator\n            if (k < Mx.width) {\n                if (Gx.cntrls > 0) {\n                    mx.text(Mx, k, iy, 'C');\n                } else {\n                    mx.text(Mx, k, iy, ' ');\n                }\n            }\n        }\n\n        // draw color bar - large\n        var x = 0;\n        var y = 0;\n        var w = 0;\n        var h = 0;\n        if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n            var plot_height = Mx.b - Mx.t;\n\n            x = Mx.r + 35;\n            y = Mx.t + (1 / 8) * plot_height;\n            w = 5 * Mx.text_w;\n            h = (3 / 4) * plot_height;\n\n            // If I have a large color bar, I probably also want to add buttons\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            ctx.strokeStyle = \"rgba(124, 123, 121, 0.8)\";\n            ctx.fillStyle = \" rgba(124, 123, 121, 0.8)\";\n\n            // For more precise referencing\n            var colorbar_x = x;\n            var colorbar_y = y;\n            var colorbar_width = w;\n            var colorbar_height = h;\n            var button_width = colorbar_width - 2;\n            var button_height = button_width / 2;\n            var button_x = colorbar_x + ((colorbar_width - button_width) / 2);\n            var button_y = colorbar_y - 10;\n\n            // Draw the top button\n            ctx.beginPath();\n            ctx.moveTo(button_x, button_y);\n            ctx.lineTo(button_x + button_width, button_y);\n            ctx.lineTo(button_x + (1 / 2) * button_width, button_y - button_height);\n            ctx.lineTo(button_x, button_y);\n            ctx.stroke();\n            ctx.fill();\n\n            // Draw the bottom button\n            var button_y_2 = button_y + colorbar_height + 20;\n\n            ctx.beginPath();\n            ctx.moveTo(button_x, button_y_2);\n            ctx.lineTo(button_x + button_width, button_y_2);\n            ctx.lineTo(button_x + (1 / 2) * button_width, button_y_2 + button_height);\n            ctx.lineTo(button_x, button_y_2);\n            ctx.stroke();\n            ctx.fill();\n\n            // Store this info so we can access it later\n\n            Gx.cbb_top_x1 = button_x;\n            Gx.cbb_top_y1 = button_y;\n            Gx.cbb_bot_x1 = button_x;\n            Gx.cbb_bot_y1 = button_y_2;\n            Gx.cbb_width = button_width;\n            Gx.cbb_height = button_height;\n\n        } else { // draw a small colorbar\n            x = (49 * Mx.text_w) - 3;\n            y = Mx.height - Mx.text_h * 2.5;\n            w = Mx.text_w;\n            h = Mx.text_h * 2;\n        }\n\n        mx.colorbar(Mx, x, y, w, h);\n\n        //draw boxes for the p_cuts\n        if (Gx.p_cuts && (Gx.lyr.length === 1) && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n            draw_pcut_y(plot);\n            draw_pcut_x(plot);\n        }\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function scale_base(plot, mode, xxmin, xxmax, xlab, ylab) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var load = (mode.get_data === true);\n\n        Gx.panxmin = 1.0;\n        Gx.panxmax = -1.0;\n        Gx.panymin = 1.0;\n        Gx.panymax = -1.0;\n        var xmin = xxmin;\n        var xmax = xxmax;\n        var noxmin = (xmin === undefined);\n        var noxmax = (xmax === undefined);\n        if (Gx.lyr.length === 0) {\n            Gx.panxmin = -1.0;\n            Gx.panxmax = 1.0;\n            Gx.panymin = -1.0;\n            Gx.panymax = 1.0;\n        } else {\n            if (xlab === undefined) {\n                Gx.xlab = Gx.lyr[0].xlab;\n            }\n            if (ylab === undefined) {\n                Gx.ylab = Gx.lyr[0].ylab;\n            }\n\n            for (var n = 0; n < Gx.lyr.length; n++) {\n                if (Gx.lyr[n].display === false) {\n                    continue;\n                }\n                if (noxmin) {\n                    xmin = Gx.lyr[n].xmin;\n                }\n\n                if (noxmax) {\n                    xmax = Gx.lyr[n].xmax;\n                }\n\n                if (Gx.xlab !== Gx.lyr[n].xlab) {\n                    Gx.xlab = 0; // If the layers aren't consistent use None\n                }\n                if (Gx.ylab !== Gx.lyr[n].ylab) {\n                    Gx.ylab = 0; // If the layers aren't consistent use None\n                }\n\n                if (load) {\n                    Gx.lyr[n].get_data(xmin, xmax);\n                }\n\n                if (Gx.autox > 0 || Gx.autoy > 0) {\n                    while (xmin < xmax) {\n                        // get_data fills in the layer xbuf/ybuf with data\n                        Gx.lyr[n].get_data(xmin, xmax);\n\n                        // have the layer prep it's data to be rendered\n                        var npts = Gx.lyr[n].prep(xmin, xmax);\n\n                        // If both All and Expand are provided we\n                        // need to look at the entire file to auto-scale it\n                        if (Gx.all && Gx.expand) {\n                            if (Gx.lyr[n].size === 0) {\n                                xmin = xmax;\n                            } else {\n                                if (Gx.index) {\n                                    xmin = xmin + npts;\n                                } else {\n                                    if (Gx.lyr[n].xdelta >= 0) {\n                                        xmin = xmin + (Gx.lyr[n].size * Gx.lyr[n].xdelta);\n                                    } else {\n                                        xmax = xmax + (Gx.lyr[n].size * Gx.lyr[n].xdelta);\n                                    }\n                                }\n                            }\n                        } else {\n                            xmin = xmax;\n                        }\n                    }\n                } else {\n                    Gx.lyr[n].prep(1.0, -1.0);\n                }\n            }\n        }\n\n        var xran = Gx.panxmax - Gx.panxmin;\n        if (xran < 0.0) {\n            Gx.panxmax = Gx.panxmin;\n            Gx.panxmin = Gx.panxmax + xran;\n            xran = -xran;\n        }\n        if (xran <= 1.0e-20) {\n            Gx.panxmin = Gx.panxmin - 1.0;\n            Gx.panxmax = Gx.panxmax + 1.0;\n        }\n\n        if (((Gx.autox & 1) !== 0) && noxmin) {\n            Mx.stk[0].xmin = Gx.panxmin;\n        }\n        if (((Gx.autox & 2) !== 0) && noxmax) {\n            Mx.stk[0].xmax = Gx.panxmax;\n            if (!(Gx.all || Gx.xdata)) {\n                for (var n = 0; n < Gx.lyr.length; n++) {\n                    xmax = Math.min(Gx.lyr[n].xmax, Mx.stk[0].xmax);\n                    var dpts = Math.abs((xmax - Gx.lyr[n].xmin) / Gx.lyr[n].xdelta) - Gx.bufmax + 1.0;\n                    if (dpts > 0) {\n                        Mx.stk[0].xmax = xmax - dpts * Math.abs(Gx.lyr[n].xdelta);\n                    }\n                }\n            }\n        }\n\n        if (((Gx.autoy & 1) !== 0)) {\n            Mx.stk[0].ymin = Gx.panymin;\n        }\n        if (((Gx.autoy & 2) !== 0)) {\n            Mx.stk[0].ymax = Gx.panymax;\n        }\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function pixel_to_real(plot, xpos, ypos) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var ret = mx.pixel_to_real(Mx, xpos, ypos);\n        if (Gx.index) {\n            ret.x = ret.x * Gx.xdelta;\n        }\n\n        return ret;\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function coordsInRectangle(x, y, rect_x, rect_y, rect_width, rect_height) {\n        return (x >= rect_x && x <= rect_x + rect_width && y >= rect_y && y <= rect_y + rect_height);\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function coordsInTriangle(x, y, tri_x1, tri_y1, tri_x2, tri_y2, tri_x3, tri_y3) {\n        // Uses barycentric coordinates\n        // https://en.wikipedia.org/wiki/Barycentric_coordinate_system ( and http://blackpawn.com/texts/pointinpoly/)\n\n        // Compute vectors\n        var v0 = [tri_x3 - tri_x1, tri_y3 - tri_y1];\n        var v1 = [tri_x2 - tri_x1, tri_y2 - tri_y1];\n        var v2 = [x - tri_x1, y - tri_y1];\n\n        // Compute dot products\n        var dot00 = (v0[0] * v0[0]) + (v0[1] * v0[1]);\n        var dot01 = (v0[0] * v1[0]) + (v0[1] * v1[1]);\n        var dot02 = (v0[0] * v2[0]) + (v0[1] * v2[1]);\n        var dot11 = (v1[0] * v1[0]) + (v1[1] * v1[1]);\n        var dot12 = (v1[0] * v2[0]) + (v1[1] * v2[1]);\n\n        var inv_denom = 1 / (dot00 * dot11 - dot01 * dot01);\n\n        var u = (dot11 * dot02 - dot01 * dot12) * inv_denom;\n        var v = (dot00 * dot12 - dot01 * dot02) * inv_denom;\n\n        /*\n        console.log(\"u \", u);\n        console.log(\"v \", v);\n        */\n\n        return (u >= 0 && v >= 0 && u + v < 1);\n\n    }\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function inPanRegion(plot, coord) {\n        var inPanRegion = false;\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        var x = 0;\n        var y = 0;\n        if (coord === undefined) {\n            x = Mx.xpos;\n            y = Mx.ypos;\n\n            if (!plot.mouseOnCanvas) {\n                return false;\n            }\n        } else {\n            x = coord.x;\n            y = coord.y;\n        }\n\n        var command = ' ';\n\n        if (!Gx.pan) {\n            return false;\n        }\n\n        var outside_right_border = (x > Mx.r);\n        var above_top_border = (y <= Gx.pt + Gx.pthk + 2);\n        var below_bottom_border = (y > Gx.pt - 2);\n        var between_top_and_bottom = (y >= Mx.t && y <= Mx.b);\n        var between_left_and_right = (x >= Gx.pl && x <= Gx.pr);\n        var has_bottom_scrollbar = (Gx.show_readout || (Gx.x_scrollbar_location === \"bottom\"));\n\n        if (outside_right_border && between_top_and_bottom) { // YPAN\n            command = 'YPAN'; // Y scrollbar\n            // TODO do we want to\n            // reset the xposition?\n\n            if (Gx.lg_colorbar && (Gx.lyr[0].hcb[\"class\"] === 2)) {\n                // Need to do an additional check since there is area outside Mx.r that is NOT the pan region\n                var right_of_colorbar = (x > Mx.r + 100); // Mx.r = Mx.r - 100 is how we moved it initally\n                if (right_of_colorbar) {\n                    inPanRegion = true;\n                } else {\n                    inPanRegion = false;\n                }\n\n            } else {\n                Mx.xpos = Gx.pyl + m.trunc(Gx.pthk / 2);\n                inPanRegion = true;\n            }\n            //possibly do another check for p_cuts as well;\n        } else if (has_bottom_scrollbar && between_left_and_right && below_bottom_border) {\n            command = 'XPAN'; // X scrollbar\n            Mx.ypos = Gx.pt + m.trunc(Gx.pthk / 2); // TODO Do we want to reset\n            // the yposition?\n            inPanRegion = true;\n        } else if (!has_bottom_scrollbar && between_left_and_right && above_top_border) {\n            command = 'XPAN'; // X scrollbar\n            Mx.ypos = Gx.pt + m.trunc(Gx.pthk / 2); // TODO Do we want to reset\n            // the yposition?\n            inPanRegion = true;\n        }\n\n        return {\n            inPanRegion: inPanRegion,\n            command: command\n        };\n    }\n\n\n    /**\n     * @memberOf sigplot\n     * @private\n     */\n    function inPanCenterRegion(plot) {\n        var inCenterRegion = false;\n        var Mx = plot._Mx;\n        var x = Mx.xpos;\n        var y = Mx.ypos;\n        var th = Mx.text_h;\n        var tw = Mx.text_w;\n        var command = ' ';\n\n        if (x < Mx.l - tw && y <= Mx.b && y >= Mx.t) { // YCENTER\n            // Mx.canvas.getContext(\"2d\").strokeStyle = \"blue\";\n            // Mx.canvas.getContext(\"2d\").strokeRect(0, Mx.t, Mx.l - tw, Mx.b -\n            // Mx.t);\n            command = 'YCENTER';\n            inCenterRegion = true;\n        } else if (y > Mx.b + m.trunc(0.5 * tw) && y <= Mx.b + m.trunc(m.trunc(3 * th) / 2) && x >= Mx.l && x <= Mx.r) { // XCENTER\n            // Mx.canvas.getContext(\"2d\").strokeStyle = \"red\";\n            // Mx.canvas.getContext(\"2d\").strokeRect(Mx.l, Mx.b + m.trunc(.5 *\n            // tw),\n            // Mx.r - Mx.l, (Mx.b + m.trunc(m.trunc(3 * th) / 2)) - (Mx.b +\n            // m.trunc(.5 * tw)));\n            command = 'XCENTER';\n            inCenterRegion = true;\n        }\n\n        return {\n            inCenterRegion: inCenterRegion,\n            command: command\n        };\n    }\n\n    /**\n     * Returns true if position is within the given scrollbar's area. Depends on\n     * mx.scroll_real2pix method.\n     *\n     * @param position\n     *            An object containing 'x' and 'y' pixel values that represent a\n     *            position.\n     * @param scrollbar\n     *            The scrollbar object itself.\n     *\n     * @private\n     * @memberOf sigplot\n     */\n    function onScrollbar(position, scrollbar) {\n        var s1;\n        var sw;\n\n        /*\n         * Compute s, the offset in pixels from the 'origin' of the scrollbar's\n         * on-screen region.\n         */\n        var s;\n        if (scrollbar.origin & 1) {\n            s = position.x - scrollbar.x;\n            if (scrollbar.origin & 2) {\n                s = scrollbar.w - s;\n            }\n        } else {\n            s = position.y - scrollbar.y;\n            if (scrollbar.origin <= 2) {\n                s = scrollbar.h - s;\n            }\n        }\n\n        // Update s1 and sw values\n        var scrollReal2PixOut = mx.scroll_real2pix(scrollbar);\n        s1 = scrollReal2PixOut.s1;\n        sw = scrollReal2PixOut.sw;\n\n        // Determine if mouse is on scrollbar\n        if (s >= s1 && s <= s1 + sw) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Performs the middle-click scroll-menu action specified on the plot.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param action\n     *            The scrollbar action to perform.\n     * @param direction\n     *            The scroll direction to update. Acceptable directions are\n     *            either \"XPAN\" or \"YPAN\".\n     * @memberOf sigplot\n     * @private\n     */\n    function middleClickScrollMenuAction(plot, action, direction) {\n        var Mx = plot._Mx;\n\n        // Determine the appropriate scrollbar to work with\n        var scrollbar;\n        if (direction === \"XPAN\") {\n            scrollbar = Mx.scrollbar_x;\n        } else if (direction === \"YPAN\") {\n            scrollbar = Mx.scrollbar_y;\n        }\n\n        // Set scrollbar action\n        scrollbar.action = action;\n        scrollbar.step = 0.1 * scrollbar.srange;\n        scrollbar.page = 9 * scrollbar.step;\n        scrollbar.scale = 2.0;\n\n        // Update min and range to the appropriate values based on action\n        mx.scroll(Mx, scrollbar, mx.XW_COMMAND, undefined, scrollbar);\n\n        // Update the viewbox based on new min and max values\n        updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange,\n            direction.slice(0, 1));\n\n        this.inPan = true; // prevent recursive pans\n        var evt = document.createEvent('Event');\n        if (direction === \"XPAN\") {\n            evt.initEvent('xpan', true, true);\n        } else if (direction === \"YPAN\") {\n            evt.initEvent('ypan', true, true);\n        }\n        evt.level = Mx.level;\n        evt.xmin = Mx.stk[Mx.level].xmin;\n        evt.ymin = Mx.stk[Mx.level].ymin;\n        evt.xmax = Mx.stk[Mx.level].xmax;\n        evt.ymax = Mx.stk[Mx.level].ymax;\n        mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?\n        this.inPan = false;\n\n    }\n\n    /**\n     * Updates a plot's viewbox along a given axis to the provided min and max\n     * values.\n     *\n     * @param plot\n     *            The plot to work with.\n     * @param newMin\n     *            The new minimum axis value to use\n     * @param newMax\n     *            The new maximum axis value to use\n     * @param axis\n     *            The axis to update. Acceptable axis values are \"X\" or \"Y\".\n     * @memberOf sigplot\n     * @private\n     */\n    function updateViewbox(plot, newMin, newMax, axis) {\n        var Mx = plot._Mx;\n        var Gx = plot._Gx;\n\n        var k = Mx.level;\n\n        if (axis === \"X\") {\n            var xmin = newMin;\n            var xmax = newMax;\n\n            if (Mx.stk[k].xmin !== xmin || Mx.stk[k].xmax !== xmax) {\n                Mx.stk[k].xmin = xmin;\n                Mx.stk[k].xmax = xmax;\n                if (!Gx.xdata && Mx.level === 1) {\n                    Gx.xmin = Mx.stk[1].xmin;\n                    Gx.xmax = Mx.stk[1].xmax;\n                }\n                plot.refresh();\n            }\n        } else if (axis === \"Y\") {\n            var ymin = newMin;\n            var ymax = newMax;\n\n            if (ymin !== Mx.stk[k].ymin || ymax !== Mx.stk[k].ymax) {\n                Mx.stk[k].ymin = ymin;\n                Mx.stk[k].ymax = ymax;\n                if (Gx.cmode === Gx.basemode && Mx.level === 1) {\n                    Gx.ymin = Math.min(Gx.ymin, ymin);\n                    Gx.ymax = Math.max(Gx.ymax, ymax);\n                }\n                plot.refresh();\n            }\n        }\n    }\n\n    sigplot.Plot = Plot;\n    module.exports = sigplot;\n\n}());\n","/**\n * @license\n * File: m.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jslint nomen: true, browser: true, devel: true*/\n\n//Uses Immediately-invoked Function Expressions (IIFE)s for namespaces\n//See http://addyosmani.com/blog/essential-js-namespacing/ for details.\n\n/* global module */\n/* global require */\n\n(function() {\n    'use strict';\n\n    var bluefile = require(\"./bluefile\");\n    var loglevel = require(\"loglevel\");\n\n    function m() {}\n\n    m.log = loglevel;\n\n    /**\n     *\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var PointArray = null;\n\n    /**\n     * True if we detected that we are on an iOS device\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);\n    if ((iOS) || // iOS doesn't support Float64\n        (typeof Float64Array === 'undefined') || // If it's undefined it's obviously not supported\n        (Float64Array.emulated) || // If it's emulated, don't waste time on extra precision\n        (!Float64Array.BYTES_PER_ELEMENT)) { // If bytes per element isn't defined, it's a buggy implementation (i.e. PhantomJS)\n        m.PointArray = Float32Array;\n    } else {\n        m.PointArray = Float64Array;\n    }\n\n\n    /** UNITS Structure:\n     *\t\t0: [\"None\", \"U\"],\n     *\t\t1: [\"Time\", \"sec\"],\n     *\t\t2: [\"Delay\", \"sec\"],\n     *\t\t3: [\"Frequency\", \"Hz\"],\n     *\t\t4: [\"Time code format\", \"\"],\n     *\t\t5: [\"Distance\", \"m\"],\n     *\t\t6: [\"Speed\", \"m/s\"],\n     *\t\t7: [\"Acceleration\", \"m/sec^2\"],\n     *\t\t8: [\"Jerk\", \"m/sec^3\"],\n     *\t\t9: [\"Doppler\", \"Hz\"],\n     *\t\t10: [\"Doppler rate\", \"Hz/sec\"],\n     *\t\t11: [\"Energy\", \"J\"],\n     *\t\t12: [\"Power\", \"W\"],\n     *\t\t13: [\"Mass\", \"g\"],\n     *\t\t14: [\"Volume\", \"l\"],\n     *\t\t15: [\"Angular power density\", \"W/ster\"],\n     *\t\t16: [\"Integrated power density\", \"W/rad\"],\n     *\t\t17: [\"Spatial power density\", \"W/m^2\"],\n     *\t\t18: [\"Integrated power density\", \"W/m\"],\n     *\t\t19: [\"Spectral power density\", \"W/MHz\"],\n     *\t\t20: [\"Amplitude\", \"U\"],\n     *\t\t21: [\"Real\", \"U\"],\n     *\t\t22: [\"Imaginary\", \"U\"],\n     *\t\t23: [\"Phase\", \"rad\"],\n     *\t\t24: [\"Phase\", \"deg\"],\n     *\t\t25: [\"Phase\", \"cycles\"],\n     *\t\t26: [\"10*Log\", \"U\"],\n     *\t\t27: [\"20*Log\", \"U\"],\n     *\t\t28: [\"Magnitude\", \"U\"],\n     *\t\t29: [\"Unknown\", \"U\"],\n     *\t\t30: [\"Unknown\", \"U\"],\n     *\t\t31: [\"General dimensionless\", \"\"],\n     *\t\t32: [\"Counts\", \"\"],\n     *\t\t33: [\"Angle\", \"rad\"],\n     *\t\t34: [\"Angle\", \"deg\"],\n     *\t\t35: [\"Relative power\", \"dB\"],\n     *\t\t36: [\"Relative power\", \"dBm\"],\n     *\t\t37: [\"Relative power\", \"dBW\"],\n     *\t\t38: [\"Solid angle\", \"ster\"],\n     *\t\t40: [\"Distance\", \"ft\"],\n     *\t\t41: [\"Distance\", \"nmi\"],\n     *\t\t42: [\"Speed\", \"ft/sec\"],\n     *\t\t43: [\"Speed\", \"nmi/sec\"],\n     *\t\t44: [\"Speed\", \"knots=nmi/hr\"],\n     *\t\t45: [\"Acceleration\", \"ft/sec^2\"],\n     *\t\t46: [\"Acceleration\", \"nmi/sec^2\"],\n     *\t\t47: [\"Acceleration\", \"knots/sec\"],\n     *\t\t48: [\"Acceleration\", \"G\"],\n     *\t\t49: [\"Jerk\", \"G/sec\"],\n     *\t\t50: [\"Rotation\", \"rps\"],\n     *\t\t51: [\"Rotation\", \"rpm\"],\n     *\t\t52: [\"Angular velocity\", \"rad/sec\"],\n     *\t\t53: [\"Angular velocity\", \"deg/sec\"],\n     *\t\t54: [\"Angular acceleration\", \"rad/sec^2\"],\n     *\t\t55: [\"Angular acceleration\", \"deg/sec^2\"],\n     *\t\t60: [\"Latitude\", \"deg\"],\n     *\t\t61: [\"Longitude\", \"deg\"],\n     *\t\t62: [\"Altitude\", \"ft\"],\n     *\t\t63: [\"Altitude\", \"m\"]\n     * @global\n     */\n    var UNITS = {\n        0: [\"None\", \"U\", true, true],\n        1: [\"Time\", \"sec\", true, true],\n        2: [\"Delay\", \"sec\", true, false],\n        3: [\"Frequency\", \"Hz\", true, true],\n        4: [\"Time code format\", \"\", true, false],\n        5: [\"Distance\", \"m\", true, true],\n        6: [\"Speed\", \"m/s\", true, true],\n        7: [\"Acceleration\", \"m/sec^2\", true, true],\n        8: [\"Jerk\", \"m/sec^3\", true, true],\n        9: [\"Doppler\", \"Hz\", true, false],\n        10: [\"Doppler rate\", \"Hz/sec\", true, true],\n        11: [\"Energy\", \"J\", true, true],\n        12: [\"Power\", \"W\", true, true],\n        13: [\"Mass\", \"g\", true, true],\n        14: [\"Volume\", \"l\", true, true],\n        15: [\"Angular power density\", \"W/ster\", true, true],\n        16: [\"Integrated power density\", \"W/rad\", true, true],\n        17: [\"Spatial power density\", \"W/m^2\", true, true],\n        18: [\"Integrated power density\", \"W/m\", false, true],\n        19: [\"Spectral power density\", \"W/MHz\", true, true],\n        20: [\"Amplitude\", \"U\", true, false],\n        21: [\"Real\", \"U\", true, false],\n        22: [\"Imaginary\", \"U\", true, false],\n        23: [\"Phase\", \"rad\", true, true],\n        24: [\"Phase\", \"deg\", false, true],\n        25: [\"Phase\", \"cycles\", false, true],\n        26: [\"10*Log\", \"U\", true, false],\n        27: [\"20*Log\", \"U\", true, false],\n        28: [\"Magnitude\", \"U\", true, false],\n        29: [\"Unknown\", \"U\", true, false],\n        30: [\"Unknown\", \"U\", false, false],\n        31: [\"General dimensionless\", \"\", true, true],\n        32: [\"Counts\", \"\", true, false],\n        33: [\"Angle\", \"rad\", true, false],\n        34: [\"Angle\", \"deg\", false, false],\n        35: [\"Relative power\", \"dB\", true, true],\n        36: [\"Relative power\", \"dBm\", false, true],\n        37: [\"Relative power\", \"dBW\", false, true],\n        38: [\"Solid angle\", \"ster\", true, true],\n        40: [\"Distance\", \"ft\", false, true],\n        41: [\"Distance\", \"nmi\", false, true],\n        42: [\"Speed\", \"ft/sec\", false, true],\n        43: [\"Speed\", \"nmi/sec\", false, true],\n        44: [\"Speed\", \"knots=nmi/hr\", false, true],\n        45: [\"Acceleration\", \"ft/sec^2\", false, true],\n        46: [\"Acceleration\", \"nmi/sec^2\", false, true],\n        47: [\"Acceleration\", \"knots/sec\", false, true],\n        48: [\"Acceleration\", \"G\", false, true],\n        49: [\"Jerk\", \"G/sec\", false, true],\n        50: [\"Rotation\", \"rps\", true, false],\n        51: [\"Rotation\", \"rpm\", false, false],\n        52: [\"Angular velocity\", \"rad/sec\", true, true],\n        53: [\"Angular velocity\", \"deg/sec\", false, true],\n        54: [\"Angular acceleration\", \"rad/sec^2\", true, true],\n        55: [\"Angular acceleration\", \"deg/sec^2\", false, true],\n        60: [\"Latitude\", \"deg\", true, false],\n        61: [\"Longitude\", \"deg\", true, false],\n        62: [\"Altitude\", \"ft\", true, false],\n        63: [\"Altitude\", \"m\", false, false]\n    };\n\n    m.UNITS = UNITS;\n\n    /** Common structure\n     * @private\n     */\n    m.Mc = {\n        // Colormaps are stored as 7 element tables which are then\n        //\tinterpolated to the number of colors actually used in a graphics routine\n        //\tcall to MX$COLORMAP.\n\n        // There are 4 colormap tables stored in the environment: A GREYSCALE,\n        // COLORRAMP, COLORWHEEL, COLORSPECTRUM, or SUNSET.  The specific values that\n        // are listed here are from xcolordef.prm (use the XCOLORMAP widget).\n        //\n        // The actual values are a result of tribal knowledge and years of experience\n        colormap: [{\n                name: \"Greyscale\",\n                colors: [{\n                    pos: 0,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 60,\n                    red: 50,\n                    green: 50,\n                    blue: 50\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                }]\n            }, {\n                name: \"Ramp Colormap\",\n                colors: [{\n                    pos: 0,\n                    red: 0,\n                    green: 0,\n                    blue: 15\n                }, {\n                    pos: 10,\n                    red: 0,\n                    green: 0,\n                    blue: 50\n                }, {\n                    pos: 31,\n                    red: 0,\n                    green: 65,\n                    blue: 75\n                }, {\n                    pos: 50,\n                    red: 0,\n                    green: 85,\n                    blue: 0\n                }, {\n                    pos: 70,\n                    red: 75,\n                    green: 80,\n                    blue: 0\n                }, {\n                    pos: 83,\n                    red: 100,\n                    green: 60,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 0,\n                    blue: 0\n                }]\n            }, {\n                name: \"Color Wheel\",\n                colors: [{\n                    pos: 0,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 20,\n                    red: 0,\n                    green: 80,\n                    blue: 40\n                }, {\n                    pos: 30,\n                    red: 0,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 50,\n                    red: 10,\n                    green: 10,\n                    blue: 0\n                }, {\n                    pos: 65,\n                    red: 100,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 88,\n                    red: 100,\n                    green: 40,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }]\n            }, {\n                name: \"Spectrum\",\n                colors: [{\n                    pos: 0,\n                    red: 0,\n                    green: 75,\n                    blue: 0\n                }, {\n                    pos: 22,\n                    red: 0,\n                    green: 90,\n                    blue: 90\n                }, {\n                    pos: 37,\n                    red: 0,\n                    green: 0,\n                    blue: 85\n                }, {\n                    pos: 49,\n                    red: 90,\n                    green: 0,\n                    blue: 85\n                }, {\n                    pos: 68,\n                    red: 90,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 80,\n                    red: 90,\n                    green: 90,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 95,\n                    green: 95,\n                    blue: 95\n                }]\n            }, {\n                name: \"calewhite\",\n                colors: [{\n                    pos: 0,\n                    red: 100,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 16.666,\n                    red: 0,\n                    green: 0,\n                    blue: 100\n                }, {\n                    pos: 33.333,\n                    red: 0,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 50,\n                    red: 0,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 66.666,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 83.333,\n                    red: 100,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 0,\n                    blue: 100\n                }]\n            }, {\n                name: \"HotDesat\",\n                colors: [{\n                    pos: 0,\n                    red: 27.84,\n                    green: 27.84,\n                    blue: 85.88\n                }, {\n                    pos: 14.2857,\n                    red: 0,\n                    green: 0,\n                    blue: 35.69\n                }, {\n                    pos: 28.571,\n                    red: 0,\n                    green: 100,\n                    blue: 100\n                }, {\n                    pos: 42.857,\n                    red: 0,\n                    green: 49.8,\n                    blue: 0\n                }, {\n                    pos: 57.14286,\n                    red: 100,\n                    green: 100,\n                    blue: 0\n                }, {\n                    pos: 71.42857,\n                    red: 100,\n                    green: 37.65,\n                    blue: 0\n                }, {\n                    pos: 85.7143,\n                    red: 41.96,\n                    green: 0,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 87.84,\n                    green: 29.8,\n                    blue: 29.8\n                }]\n            }, {\n                name: \"Sunset\",\n                colors: [{\n                    pos: 0,\n                    red: 10,\n                    green: 0,\n                    blue: 23\n                }, {\n                    pos: 18,\n                    red: 34,\n                    green: 0,\n                    blue: 60\n                }, {\n                    pos: 36,\n                    red: 58,\n                    green: 20,\n                    blue: 47\n                }, {\n                    pos: 55,\n                    red: 74,\n                    green: 20,\n                    blue: 28\n                }, {\n                    pos: 72,\n                    red: 90,\n                    green: 43,\n                    blue: 0\n                }, {\n                    pos: 87,\n                    red: 100,\n                    green: 72,\n                    blue: 0\n                }, {\n                    pos: 100,\n                    red: 100,\n                    green: 100,\n                    blue: 76\n                }]\n            },\n            {\n                name: \"Hot\",\n                colors: [\"#000000\", \"#7f0000\", \"#b30000\", \"#d7301f\", \"#ef6548\", \"#fc8d59\", \"#fdbb84\", \"#fdd49e\", \"#fee8c8\", \"#fff7ec\", \"#ffffff\"]\n            }, {\n                name: \"Cold\",\n                colors: [\"#000000\", \"#023858\", \"#045a8d\", \"#0570b0\", \"#3690c0\", \"#74a9cf\", \"#a6bddb\", \"#d0d1e6\", \"#ece7f2\", \"#fff7fb\", \"#ffffff\"]\n            },\n            {\n                name: \"Purple\",\n                colors: [\"#230022\", \"#4d004b\", \"#810f7c\", \"#88419d\", \"#8c6bb1\", \"#8c96c6\", \"#9ebcda\", \"#bfd3e6\", \"#e0ecf4\", \"#f7fcfd\"]\n            }, {\n                name: \"BuGn\",\n                colors: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b']\n            }, {\n                name: \"YlOrBr\",\n                colors: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506']\n            }, {\n                name: \"YlGnBu\",\n                colors: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58']\n            }, {\n                name: \"YlOrRd\",\n                colors: [\"#000000\", \"#662506\", \"#993404\", \"#cc4c02\", \"#ec7014\", \"#fe9929\", \"#fec44f\", \"#fee391\", \"#fff7bc\", \"#ffffe5\", \"#ffffff\"]\n            }, {\n                name: \"GreyNRed\",\n                colors: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'].reverse()\n            }\n        ]\n    };\n\n    /** Pipe Size\n     * @private\n     */\n    m.PIPESIZE = 1024 * 1024;\n\n    /**\n     * Converts unit strings to number code\n     * @param\t{string}\tunitInput\tUser unit input\n     */\n    m.unit_lookup = function(unitInput) {\n        for (var i = 0; i < 64; i++) {\n            var u;\n            if (UNITS[i] === undefined) {\n                u = UNITS[0];\n            } else {\n                u = UNITS[i];\n            }\n            var first = u[0];\n            var second = u[1];\n            var comparer1 = u[0] + \" \" + u[1];\n            var comparer2 = u[0] + \"_\" + u[1];\n            if (unitInput === first) {\n                if (u[2]) {\n                    return i;\n                }\n            } else if (unitInput === second) {\n                if (u[3]) {\n                    return i;\n                }\n            } else if ((unitInput === comparer1) || (unitInput === comparer2)) {\n                return i;\n            }\n        }\n        return unitInput;\n    };\n\n    /**\n     * Creates new file with header initialized to type-1000 defaults\n     * and data appended. (tbd)\n     * @param\t{string}\tfilename\tName of File to Create\n     * @param  \t{array}\t\tdata\t\tInput data buffer\n     * @param  \t{array}\t  \toverrides\tList of fields/values to be overridden in the bluefile header\n     * @return \t{header} \thcb\t\tReturn <hcb> type-1000 bluefile header, filename=null\n     */\n    m.initialize = function(data, overrides) {\n        var hcb = new bluefile.BlueHeader(null);\n\n        hcb.version = 'BLUE';\n        hcb.size = 0;\n        hcb.type = 1000;\n        hcb.format = 'SF';\n        hcb.timecode = 0.0;\n        hcb.xstart = 0.0;\n        hcb.xdelta = 1.0;\n        hcb.xunits = 0;\n        hcb.subsize = 1;\n        hcb.ystart = 0.0;\n        hcb.ydelta = 1.0;\n        hcb.yunits = 0;\n        hcb.enabled_streaming_pcut = false;\n\n        if (!overrides) { /* if no overrides provided...set it to empty*/\n            overrides = {};\n        }\n\n        for (var field in overrides) {\n            hcb[field] = overrides[field];\n        }\n\n        //Convert xunits and yunits to numbers if they are strings\n        hcb[\"xunits\"] = m.unit_lookup(hcb[\"xunits\"]);\n        hcb[\"yunits\"] = m.unit_lookup(hcb[\"yunits\"]);\n\n\n        // Force type 2000 is subsize is specified\n        if (hcb[\"subsize\"] > 1) {\n            hcb.type = 2000;\n        } else if (Array.isArray(data) && Array.isArray(data[0])) {\n            //If this is a 2-D array automatically set subsize\n            hcb.type = 2000;\n            hcb.subsize = data[0].length;\n        }\n        hcb[\"class\"] = hcb.type / 1000;\n        // If this is a type 2000 , subsize *must* be provided\n        if ((hcb[\"class\"] === 2) && (hcb[\"subsize\"] === undefined)) {\n            throw \"subsize must be provided with type 2000 files\";\n        }\n\n\n        if (!overrides.pipe) {\n            hcb.setData(data);\n        } else {\n            hcb.pipe = true;\n            hcb.in_byte = 0;\n            hcb.out_byte = 0;\n            // TODO round pipe size to nearest number of elements\n            var pipesize = overrides.pipesize || m.PIPESIZE;\n\n            hcb.buf = new ArrayBuffer(pipesize);\n            hcb.setData(hcb.buf);\n            hcb.data_free = hcb.dview.length;\n        }\n\n        return hcb;\n    };\n\n    /**\n     * Convert type-2000 header internals to force GRAB and FILAD routines to treat file as a 1000-type file.\n     * @param\t{header}\thcb\t\tBluefile header control block\n     */\n    m.force1000 = function(hcb) {\n        if (hcb[\"class\"] === 2) {\n            if ((hcb.size) && (!hcb.pipe)) {\n                hcb.size = hcb.subsize * hcb.size;\n            } else {\n                // assume the size is 0\n                hcb.size = 0;\n            }\n            hcb.bpe = hcb.bpe / hcb.subsize;\n            hcb.ape = 1;\n        }\n    };\n\n    /**\n     * Get data from file at specified start location.\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @param\t{array}\t\tbufview\t\tData buffer to receive data\n     * @param\t{number}\tstart\t\tStart location\n     * @param\t{number}\tnget\t\tNumber of requested data\n     * @return\t{number}\tngot\t\tNumber of received data\n     */\n    m.grab = function(hcb, bufview, start, nget) {\n        if (!hcb.dview) {\n            return 0;\n        }\n\n        // TODO reformat\n        if (hcb.format[0] === 'C') {\n            start = start * 2;\n        }\n\n        nget = hcb.ape * nget; // TODO - this is never used????\n\n        //var ngot = Math.min(bufview.length, (hcb.dview.length-start)); //mmm\n        var ngot = Math.min(bufview.length, (hcb.dview.length - start));\n        // iOS doesn't have .set on TypedArrays\n        if (bufview.set === undefined) {\n            for (var i = 0; i < ngot; i++) {\n                bufview[i] = hcb.dview[start + i];\n            }\n        } else {\n            bufview.set(hcb.dview.subarray(start, start + ngot));\n        }\n        if (hcb.format[0] === 'C') {\n            ngot = ngot / 2;\n        }\n        return ngot;\n    };\n\n    /**\n     * Append data buffer to file specified in the bluefile header control block.\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @param\t{array}\t\tdata\t\tData buffer\n     * @param   {boolean}       [sync=false]    dispatch onpipewrite syncronously\n     */\n    m.filad = function(hcb, data, sync) {\n        if (hcb.data_free < data.length) {\n            throw \"Pipe full\";\n        }\n        var sidx = hcb.in_byte / hcb.dview.BYTES_PER_ELEMENT;\n        var eidx = (sidx + data.length);\n        if (eidx > hcb.dview.length) {\n            var head = hcb.dview.length - sidx;\n            var tail = data.length - head;\n            if (data.subarray) {\n                hcb.dview.set(data.subarray(0, head), sidx);\n                hcb.dview.set(data.subarray(head, data.length), 0);\n            } else {\n                hcb.dview.set(data.slice(0, head), sidx);\n                hcb.dview.set(data.slice(head, data.length), 0);\n            }\n            hcb.in_byte = (tail * hcb.dview.BYTES_PER_ELEMENT);\n        } else {\n            hcb.dview.set(data, sidx);\n            hcb.in_byte = (eidx * hcb.dview.BYTES_PER_ELEMENT) % hcb.buf.byteLength;\n        }\n        hcb.data_free -= data.length;\n        if (hcb.onwritelisteners) {\n            for (var i = 0; i < hcb.onwritelisteners.length; i++) {\n                if (!sync) {\n                    window.setTimeout(hcb.onwritelisteners[i], 0);\n                } else {\n                    hcb.onwritelisteners[i]();\n                }\n            }\n        }\n    };\n\n    /**\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @return\t{number}\telements available\n     * @private\n     */\n    m.pavail = function(hcb) {\n        return hcb.dview.length - hcb.data_free;\n    };\n\n    /**\n     * Get data from file in dataflow fashion.\n     * @param\t{array}\t\thcb\tBluefile header control block\n     * @param \t{array}\t\tdview\tData buffer to receive data\n     * @param\t{number}\tnget\tInput variable name of parameter to receive data\n     * @param\t{number}\toffset\tOffset into file\n     * @return\t{number}\tngot\tNumber of data values gotten\n     */\n    // WARNING - nget is number of scalars...which differs from the normal API\n    m.grabx = function(hcb, dview, nget, offset) {\n        var navail = hcb.dview.length - hcb.data_free;\n        if (offset === undefined) {\n            offset = 0;\n        }\n        if (!nget) {\n            nget = Math.min(dview.length - offset, navail);\n        } else if (nget > dview.length - offset) {\n            throw \"m.grabx : nget larger then available buffer space\";\n        }\n        if (nget < 0) {\n            throw \"m.grabx : nget cannot be negative\";\n        }\n        if (nget > navail) {\n            return 0;\n        }\n\n        var sidx = hcb.out_byte / hcb.dview.BYTES_PER_ELEMENT;\n        var eidx = (sidx + nget);\n        if (eidx >= hcb.dview.length) {\n            var head = hcb.dview.length - sidx;\n            eidx = eidx - hcb.dview.length;\n            dview.set(hcb.dview.subarray(sidx, hcb.dview.length), offset);\n            dview.set(hcb.dview.subarray(0, eidx), offset + head);\n        } else {\n            dview.set(hcb.dview.subarray(sidx, eidx), offset);\n        }\n        hcb.out_byte = (eidx * hcb.dview.BYTES_PER_ELEMENT) % hcb.buf.byteLength;\n        hcb.data_free += nget;\n        var ngot = nget;\n        return ngot;\n    };\n\n\n    /**\n     * @param\t{header}\thcb\t\tBluefile header control block\n     * @param\t{number}\tonwrite\t\t-\n     * @private\n     */\n    m.addPipeWriteListener = function(hcb, onwrite) {\n        if (!hcb.onwritelisteners) {\n            hcb.onwritelisteners = [];\n        }\n        if (hcb.onwritelisteners.indexOf(onwrite) === -1) {\n            hcb.onwritelisteners.push(onwrite);\n        }\n    };\n\n    /**\n     * Returns ASCII description of units code\n     * @param \t{number}\tUNITS array index (see global UNITS)\n     * @return \t{string}\tASCII code pair\n     */\n    // ~= M$UNITS_NAME\n    m.units_name = function(units) {\n        var u = UNITS[units];\n        return u[0] + \" (\" + u[1] + \")\";\n    };\n\n    /**\n     * Extract filename from full path\n     * @param \t{string}\tpathfilename\tFull path, including filename\n     * @return\t{string}\tfilename\t    Trimmed filename\n     */\n    m.trim_name = function(pathfilename) {\n        var i = pathfilename.indexOf(']');\n        if (i === -1) {\n            i = pathfilename.indexOf('/');\n        }\n        if (i === -1) {\n            i = pathfilename.indexOf(':');\n        }\n        var j = pathfilename.substr(i + 1, pathfilename.length).indexOf('.');\n        if (j < 0) {\n            j = pathfilename.length - i;\n        }\n        var filename = pathfilename.substr(i + 1, i + j + 1);\n        return filename;\n    };\n\n    /**\n     * Takes an integer code for units and a multiplier and returns the string representation of the two.\n     * Example: l = m.label(1,1.0e3) ==> l =  Time (Ksec)\n     * @param \t{number}\tunits\tInteger code for Unit (see global UNITS)\n     * @param \t{number} \tmult\tUnits multiplier (i.e 1.0e3 ==> 'K')\n     * @return {string} representation of units and multiplier\n     */\n    // ~= M$LABEL\n    m.label = function(units, mult) {\n        var u = [\"Unknown\", \"U\"];\n\n        if (typeof units === \"string\") {\n            u = [units, null];\n        } else if (Array.isArray(units)) {\n            u = units;\n        } else {\n            u = UNITS[units];\n            if (u === undefined) {\n                u = [\"Unknown\", \"U\"];\n            }\n        }\n\n        var prefix = m.mult_prefix(mult);\n\n        if (u[1]) {\n            return u[0] + \" (\" + prefix + u[1] + \")\";\n        } else {\n            return u[0];\n        }\n    };\n\n    /**\n     * @method bound\n     * @param a\n     * @param b\n     * @param c\n     */\n    m.bound = function(a, b, c) {\n        return a < b ? b : (a > c ? c : a);\n    };\n\n    m.touch_distance = function(touchA, touchB) {\n        var xd = (touchA.pageX - touchB.pageX);\n        var yd = (touchA.pageY - touchB.pageY);\n        return Math.sqrt((xd * xd) + (yd * yd));\n    };\n\n    m.mult_prefix = function(mult) {\n        var prefix = \"?\";\n\n        /* jshint -W116 */\n        if (mult == 1) {\n            prefix = \"\";\n        } else if (mult == 10) {\n            prefix = 'da';\n        } else if (mult == 0.1) {\n            prefix = 'd';\n        } else if (mult == 100) {\n            prefix = 'h';\n        } else if (mult == 0.01) {\n            prefix = 'c';\n        } else if (mult == 1.0e3) {\n            prefix = 'K';\n        } else if (mult == 1.0e-3) {\n            prefix = 'm';\n        } else if (mult == 1.0e6) {\n            prefix = 'M';\n        } else if (mult == 1.0e-6) {\n            prefix = 'u';\n        } else if (mult == 1.0e9) {\n            prefix = 'G';\n        } else if (mult == 1.0e-9) {\n            prefix = 'n';\n        } else if (mult == 1.0e12) {\n            prefix = 'T';\n        } else if (mult == 1.0e-12) {\n            prefix = 'p';\n        }\n        /* jshint +W116 */\n\n        return prefix;\n    };\n\n    /**\n     * @private\n     */\n    var VECTOR = {\n        MV: 'F', // vector type\n        MS: 'F', // scalar type...not really necessary in javascript\n        nbpt: 4,\n        view: undefined\n    };\n\n\n    /**\n     * Sets data type for all subsequent calls to vector libraries.  Remains in effect until another call to this routine.\n     * @param ctype\n     */\n    // ~= VSTYPE - not really necessary\n    m.vstype = function(ctype) {\n        VECTOR.MS = ctype;\n        VECTOR.MV = ctype;\n        if (VECTOR.MV === 'D') {\n            VECTOR.nbpt = 8;\n        } else if ((VECTOR.MV === 'L') || (VECTOR.MV === 'F')) {\n            VECTOR.nbpt = 4;\n        } else if (VECTOR.MV === 'I') {\n            VECTOR.nbpt = 2;\n        } else if (VECTOR.MV === 'B') {\n            VECTOR.nbpt = 1;\n        } else {\n            alert(\"Unsupported vector type\");\n        }\n    };\n\n    m.log10 = function(v, lo_thresh) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        return Math.log(Math.max(v, lo_thresh)) / Math.log(10);\n    };\n\n    /**\n     * For each vector element in <src>, determine the max of <src> element and <lo_thresh>, returns the log(base10) of that value in <dst>\n     * @param\t{array}\t\tsrc\t\tInput vector.\n     * @param \t{number} \tlo_thresh\tUser-set minimum log threshold (if not defined, set default=1.0e-20). Prevent computing log of 0 or negative values.\n     * @param \t{array}\t\tdst\t\tOuput vector.  If undefined, <src> elements will be overwritten.\n     */\n    // ~= M$VLOG10- not really necessary\n    m.vlog10 = function(src, lo_thresh, dst) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        if (dst === undefined) {\n            dst = src;\n        }\n        for (var i = 0; i < src.length; i++) {\n            if (dst.length <= i) {\n                break;\n            }\n            dst[i] = Math.log(Math.max(src[i], lo_thresh)) / Math.log(10);\n        }\n    };\n\n    /**\n     * Same as vlog10 but multiply each output value by a scale factor <dbscale>.\n     * @param \t{array}\t\tsrc\t\tInput vector.\n     * @param \t{number}\tlo_thresh\tUser-set minimum log threshold.\n     *                                              If undefined, defaults to 1.0e-20. Prevent computing log of 0 or negative values.\n     * @param \t{number}\tdbscale\t\tOutput scale factor. If undefined, defaults to 1.\n     * @param \t{array}\t\tdst\t\tOutput vector. If undefined, <src> elements will be overwritten.\n     * @private\n     */\n    m.vlogscale = function(src, lo_thresh, dbscale, dst) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        if (dbscale === undefined) {\n            dbscale = 1;\n        }\n        if (dst === undefined) {\n            dst = src;\n        }\n        for (var i = 0; i < src.length; i++) {\n            if (dst.length <= i) {\n                break;\n            }\n            dst[i] = Math.log(Math.abs(Math.max(src[i], lo_thresh))) / Math.log(10);\n            dst[i] = dst[i] * dbscale;\n        }\n    };\n\n    /**\n     * Same as vlogscale but computes magnitude squared.\n     *\n     * @param \t{array}\t\tsrc\t\tInput vector.\n     * @param \t{number}\tlo_thresh\tUser-set minimum log threshold.\n     *                                              If undefined, defaults to 1.0e-20. Prevent computing log of 0 or negative values.\n     * @param \t{number}\tdbscale\t\tOutput scale factor. If undefined, defaults to 1.\n     * @param \t{array}\t\tdst\t\tOutput vector. If undefined, <src> elements will be overwritten.\n     * @private\n     */\n    m.cvmag2logscale = function(src, lo_thresh, dbscale, dst) {\n        if (lo_thresh === undefined) {\n            lo_thresh = 1.0e-20;\n        }\n        if (dbscale === undefined) {\n            dbscale = 1;\n        }\n        if (dst === undefined) {\n            dst = src;\n        }\n        var j = 0;\n        for (var i = 0; i < dst.length; i++) {\n            j = 2 * i + 1;\n            if (j >= src.length) {\n                break;\n            }\n            dst[i] = (src[j - 1] * src[j - 1]) + (src[j] * src[j]);\n            dst[i] = Math.log(Math.abs(Math.max(dst[i], lo_thresh))) / Math.log(10);\n            dst[i] = dst[i] * dbscale;\n        }\n    };\n\n    /**\n     * Multiply <count> elements of <src> by <mul>, store results in <dst>\n     * @param\t{array} \tsrc\t\tInput vector.\n     * @param\t{number}\tmul\t\tVector multiplier.\n     * @param\t{array}\t\tdst\t\tOutput vector. If not defined, <src> elements will be overwritten.\n     * @param\t{number}\tcount\t\tNumber of elements to apply multiplier, starting with first <src> element.\n     */\n    // ~= M$VSMUL\n    m.vsmul = function(src, mul, dst, count) {\n        if (dst === undefined) {\n            dst = src;\n        }\n        if (count === undefined) {\n            count = dst.length;\n        }\n        count = Math.min(dst.length, count);\n        count = Math.min(src.length, count);\n\n        for (var i = 0; i < count; i++) {\n            if (dst.length <= i) {\n                break;\n            }\n            dst[i] = src[i] * mul;\n        }\n    };\n\n    /**\n     * Finds max and min values in vector <vec> and returns values.\n     * @param \t{array}\t\tvec\t\tInput vector.\n     * @param\t{number}\tsize\t\tNumber of elements to search to find max.min values.\n     * @return \t{array}\t\tmxmin\t\tIndex and value of min and max elements in <vec>.\n     */\n    // ~= M$VMXMN\n    m.vmxmn = function(vec, size) {\n        // Originally this code used an object to hold the values\n        // but Chrome 34.0.1847.131 seemed to have a bug where\n        // these values would somehow get messed up...oddly\n        // putting printouts or breakpoints prevented the\n        // problem from showing up.\n        var smax = vec[0];\n        var smin = vec[0];\n        var imax = 0;\n        var imin = 0;\n        size = Math.min(size, vec.length);\n        for (var i = 0; i < size; i++) {\n            if (vec[i] > smax) {\n                smax = vec[i];\n                imax = i;\n            }\n            if (vec[i] < smin) {\n                smin = vec[i];\n                imin = i;\n            }\n        }\n        return {\n            smax: smax,\n            smin: smin,\n            imax: imax,\n            imin: imin\n        };\n    };\n\n    /**\n     * Move <count> elements from <src> to <dest>.  Stride is the distance between each array element in either or both the input and output vectors.\n     * @param {array}\tsrc\t\tInput vector.\n     * @param {number}\tsstride\t\tInput stride.\n     * @param {array}\tdest\t\tOutput vector.\n     * @param {number}\tdstride\t\tOutput stride.\n     * @param {number}\tcount\t\tNumber of input vector elements to move, starting with 0th element of <vec>. Cannot exceed vector lengths,\n     *\t\t\t\t\ttaking into account the strides.\n     */\n    m.vmov = function(src, sstride, dest, dstride, count) {\n        if (count === undefined) {\n            count = src.length;\n        }\n        count = Math.min(src.length, count);\n        //count = Math.min(src.length, count, (count)*(dest.length)*(dstride)); //mmm-TODO\n\n        for (var i = 0; i < count; i++) {\n            var s = i * sstride;\n            var d = i * dstride;\n            if (s >= src.length) {\n                break;\n            }\n            if (d >= dest.length) {\n                break;\n            }\n            dest[d] = src[s];\n        }\n    };\n\n    /**\n     * Initialize <count> consecutive elements of input vector <vec> with value <inpval>.\n     * @param\t{array}\t\tvec\t\tInput vector\n     * @param\t{number}\tinpval\t\tValue\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <vec>.  If undefined, entire <vec> is written.\n     */\n    // ~= M$VFILL\n    // TODO - more optimal version?\n    m.vfill = function(vec, inpval, count) {\n        if (count === undefined) {\n            count = vec.length;\n        }\n        count = Math.min(vec.length, count);\n        for (var i = 0; i < count; i++) {\n            vec[i] = inpval;\n        }\n    };\n\n    /**\n     * Compute the absolute value of <count> elements in <vec> and write to output vector <dest>\n     * @param \t{array}\t\tvec\t\tInput vector.\n     * @param \t{array}\t\tdest\t\tOuput vector. If <dest> is undefined, overwrite input vector <vec>.\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <vec>. Cannot exceed vector lengths.\n     */\n    m.vabs = function(vec, dest, count) {\n        if (count === undefined) {\n            count = vec.length;\n        }\n        if (dest === undefined) {\n            dest = vec;\n        }\n        //count = Math.min(dest.length, count, vec.length); //mmm-TODO\n        for (var i = 0; i < count; i++) {\n            dest[i] = Math.abs(vec[i]);\n        }\n    };\n\n\n    /**\n     * Computes the magnitude of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVMAG\n    m.cvmag = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO\n\n        for (var i = 0; i < count; i++) {\n            var j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            dest[i] = Math.sqrt((cxvec[j - 1] * cxvec[j - 1]) + (cxvec[j] * cxvec[j]));\n        }\n    };\n\n    /**\n     * Computes the magnitude squared of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVMAG2\n    m.cvmag2 = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO\n\n        var j = 0;\n        for (var i = 0; i < count; i++) {\n            j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            dest[i] = (cxvec[j - 1] * cxvec[j - 1]) + (cxvec[j] * cxvec[j]);\n        }\n    };\n\n    /**\n     * Computes phase in radians of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVPHA\n    m.cvpha = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO\n\n        var j = 0;\n        var re = 0;\n        var im = 0;\n        for (var i = 0; i < count; i++) {\n            j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            re = cxvec[j - 1];\n            im = cxvec[j];\n            if ((re === 0.0) && (im === 0.0)) {\n                re = 1.0;\n            }\n            dest[i] = Math.atan2(im, re);\n        }\n    };\n\n    /**\n     * Computes the phase in degrees of <count> complex vector <cxvec> elements. Store results in output vector <dest>.\n     * @param\t{array}\t\tcxvec\t\tInput vector\n     * @param \t{array}\t\tdest\t\tOutput vector\n     * @param \t{number}\tcount\t\tNumber of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.\n     */\n    // ~= M$CVPHAD\n    m.cvphad = function(cxvec, dest, count) {\n        if (count === undefined) {\n            count = dest.length;\n        }\n        count = Math.min(dest.length, count);\n\n        var j = 0;\n        var re = 0;\n        var im = 0;\n        for (var i = 0; i < count; i++) {\n            j = 2 * i + 1;\n            if (j >= cxvec.length) {\n                break;\n            }\n            re = cxvec[j - 1];\n            im = cxvec[j];\n            if ((re === 0.0) && (im === 0.0)) {\n                re = 1.0;\n            }\n            dest[i] = Math.atan2(im, re) * (180.0 / Math.PI);\n        }\n    };\n\n    /**\n     * @param n\n     * @private\n     */\n    // ~= INT(), DINT\n    m.trunc = function(n) {\n        return n - n % 1;\n    };\n\n    /**\n     * @param a1\n     * @param a2\n     * @private\n     */\n    // Transfer of sign function from Fortran\n    m.sign = function(a1, a2) {\n        if (a2 >= 0) {\n            return Math.abs(a1);\n        } else {\n            return -Math.abs(a1);\n        }\n    };\n\n    /**\n     * @method pad2\n     * @param number\n     * @private\n     */\n\n    function pad2(number) {\n        return (number < 10 ? '0' : '') + number;\n    }\n\n    /**\n     * Convert J1950 time or seconds-since-Epoch (midnight Dec-31-1949) to time-of-day. Fractional seconds accurate to milliseconds.\n     * @param \t{number}\tsec\t\tNumber of seconds.\n     * @return\t{string}\ttod\t\tTime of day\n     */\n\n    /* Output string can be in different forms as follows:\n     * -31536000 <  sec < 0                   -DDD::HH:MM:SS\n     *         0 <= sec < 86400                     HH:MM:SS\n     *         86400 <= sec < 31536000         DDD::HH:MM:SS\n     *         31536000 <=sec            YYYY:MM:DD:HH:MM:SS.<FFFFFF>\n     *                                    where FFFFFF is in microseconds\n     *\n     */\n\n    m.sec2tod = function(sec, trim_trailing_zeros) {\n        var tod = \"\";\n        var j1950 = Date.UTC(1950, 0, 1); //From 1950 to 1970\n        var j1950Date = new Date(j1950); //debug var\n        var j1949 = Date.UTC(1949, 11, 31);\n        var j1949Date = new Date(j1949); //debug var\n        var d = new Date();\n        var midnightToday = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0, 0);\n        var diffDaySecs = 86400; //    86400 secs = 24*60*60\n        var diffYearSecs = 31536000; // 31536000 secs = 365*24*60*60\n        var negDiffYearSecs = -1 * diffYearSecs; //-31536000 secs\n\n        if (sec >= 0) {\n            if (sec < diffDaySecs) {\n                // hh:mm:ss\n                var millisecs = midnightToday.getTime() + (sec * 1000);\n                var d = new Date(millisecs);\n                tod = pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n            } else if (sec === 86400) {\n                tod = \"24:00:00\";\n            } else if (sec < diffYearSecs) {\n                // ddd:hh:mm:ss\n                var days = sec / diffDaySecs;\n                days = [days > 0 ? Math.floor(days) : Math.ceil(days)];\n                var d = new Date((sec * 1000) + midnightToday.getTime());\n                tod = days.toString() + \"::\" + pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n            } else {\n                // convert to j1950\n                var secMilli = Math.floor(sec * 1000) + j1950;\n                d = new Date(secMilli);\n                tod = d.getUTCFullYear() + \":\" + pad2(d.getUTCMonth() + 1) + \":\" + pad2(d.getUTCDate()) + \"::\" +\n                    pad2(d.getUTCHours()) + \":\" + pad2(d.getUTCMinutes()) + \":\" + pad2(d.getUTCSeconds());\n            }\n        } else {\n            if (sec > negDiffYearSecs) {\n                // -ddd:hh:mm:ss\n                var days = sec / diffDaySecs;\n                days = (days <= 0) ? Math.ceil(days) : Math.floor(days);\n                var d = new Date(Math.abs(sec * 1000) + midnightToday.getTime());\n                if (days === 0) {\n                    days = \"-0\";\n                } else {\n                    days = days.toString();\n                }\n                tod = days + \"::\" + pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n            } else {\n                // convert to j1950\n                var secMilli = Math.floor(sec * 1000) + j1950;\n                d = new Date(secMilli);\n                tod = d.getUTCFullYear() + \":\" + pad2(d.getUTCMonth() + 1) + \":\" + pad2(d.getUTCDate()) + \"::\" +\n                    pad2(d.getUTCHours()) + \":\" + pad2(d.getUTCMinutes()) + \":\" + pad2(d.getUTCSeconds());\n            }\n        }\n\n        // violate legacy behavior, include full precision always\n        // even if we are on a full second boundary, otherwise\n        // on rising/falling rasters it can look like the display\n        // is flickering\n        var fractional = (sec % 1);\n        if (fractional === 0.0) {\n            tod += \".000000\";\n        } else {\n            tod += \".\" + Math.abs(sec % 1).toPrecision(6).slice(2, 8);\n        }\n\n        if (trim_trailing_zeros) {\n            var dloc = tod.indexOf(\".\");\n            var zloc = -1;\n            // If there is a 'decimal point'\n            if (dloc !== -1) {\n                zloc = tod.substr(dloc, tod.length).indexOf(\"0\");\n            }\n            if (zloc !== -1) {\n                tod = tod.substr(0, dloc + zloc);\n            }\n        }\n        return tod;\n\n    };\n\n    /**\n     * The offset to convert midnight Jan 1st 1970 to\n     * midnight Jan 1st 1950.\n     *\n     * @private\n     */\n    var j1950offset = (20.0 * 365.0 + 5.0) * (24 * 3600);\n\n    /**\n     * 0.0 - 86400 == m.sec2tod\n     * >86400 then modulo 86400\n     *   if modulo <= 0 return m.sec2tod(modulo)+86400\n     *   if module <\n     */\n    m.sec2tspec = function(sec, mode, trim_trailing_zeros) {\n        mode = mode || \"\";\n        if (sec >= 0 && sec <= 86400) {\n            return m.sec2tod(sec, trim_trailing_zeros);\n        } else {\n            sec = sec % 86400;\n            if (mode !== \"delta\" && sec <= 0) {\n                return m.sec2tod(sec + 86400, trim_trailing_zeros);\n            } else if (mode === \"delta\" && sec <= 0) {\n                return \"-\" + m.sec2tod(-1 * sec, trim_trailing_zeros);\n            } else {\n                return m.sec2tod(sec, trim_trailing_zeros);\n            }\n        }\n    };\n\n    /**\n     * @param \t{number}\tsec\t\tNumber of seconds.\n     * @return\t{string}\ttod\t\tTime of day\n     */\n\n    m.sec2tod_j1970 = function(sec) {\n        var tod = \"\";\n        var d;\n        if ((sec >= 0) && (sec < 86400)) {\n            // hh:mm:ss\n            d = new Date(sec * 1000);\n            tod = pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n\n        } else if ((sec < 0) && (sec > -31536000)) {\n            // -ddd:hh:mm:ss\n            var days = -1 * (sec / (24 * 60 * 60));\n            d = new Date(sec * 1000);\n            tod = days.toString() + \"::\" + pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n        } else {\n            // convert to j1950\n            d = new Date((sec - j1950offset) * 1000);\n            tod = d.getFullYear() + \":\" + pad2(d.getMonth()) + \":\" + pad2(d.getDate()) + \"::\" +\n                pad2(d.getHours()) + \":\" + pad2(d.getMinutes()) + \":\" + pad2(d.getSeconds());\n        }\n        if ((sec % 1) !== 0) {\n            tod += \".\" + (sec % 1).toPrecision(6).slice(2, 8);\n        }\n        return tod;\n    };\n\n    m.j1970toj1950 = function(t) {\n        if (t.getTime !== undefined) {\n            return ((t.getTime() / 1000) + j1950offset);\n        } else {\n            return (t + j1950offset);\n        }\n    };\n\n    m.j1950toj1970 = function(t) {\n        return (t - j1950offset);\n    };\n\n    /**\n     * @private\n     */\n    // Throttle calls to \"callback\" routine and ensure that it\n    // is not invoked any more often than \"delay\" milliseconds.\n    //\n    m.throttle = function(delay, callback) {\n        var previousCall = new Date().getTime();\n        return function() {\n            var time = new Date().getTime();\n\n            //\n            // if \"delay\" milliseconds have expired since\n            // the previous call then propagate this call to\n            // \"callback\"\n            //\n            if ((time - previousCall) >= delay) {\n                previousCall = time;\n                callback.apply(null, arguments);\n            }\n        };\n    };\n\n    // Node: Export function\n    module.exports = m;\n\n}());\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Plot } from 'sigplot';\n\nexport default class SigPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getChildContext() {\n    return {\n      plot: this.plot,\n    };\n  }\n\n  componentDidMount() {\n    const { options } = this.props;\n    this.plot = new Plot(this.element, options);\n\n    // Have to trigger context tree, setting state does that.\n    // eslint-disable-next-line react/no-did-mount-set-state\n    // eslint-disable-next-line react/no-unused-state\n    this.setState({ plot: this.plot });\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      display,\n      styles,\n      children: propChildren,\n    } = this.props;\n    const { plot } = this;\n    const children = plot\n      ? React.Children.map(propChildren, (child) => {\n        if (child) {\n          return React.cloneElement(child, { plot });\n        }\n        return null;\n      }) : null;\n\n    return (\n      <div\n        style={{\n          height,\n          width,\n          display,\n          ...styles\n        }}\n        ref={element => this.element = element}\n      >\n        { children }\n      </div>\n    );\n  }\n}\n\nSigPlot.childContextTypes = {\n  plot: PropTypes.instanceOf(Plot)\n};\n\nSigPlot.propTypes = {\n  children: PropTypes.node,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  display: PropTypes.string,\n  styles: PropTypes.object,\n  options: PropTypes.object,\n};\n\nSigPlot.defaultProps = {\n  height: 300,\n  width: 300,\n  display: 'inline-block',\n  options: {\n    all: true,\n    expand: true,\n    autol: 100,\n    autohide_panbars: true\n  },\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Plot } from 'sigplot';\n\n/**\n * Abstract base class for all Layers\n */\nexport default class Layer extends Component {\n  componentWillUnmount() {\n    this.plot.remove_layer(this.layer);\n  }\n\n  get plot() {\n    const { plot } = this.context;\n    return plot;\n  }\n\n  render() {\n    return false;\n  }\n}\n\nLayer.contextTypes = {\n  plot: PropTypes.instanceOf(Plot)\n};\n\nLayer.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.number), // eslint-disable-line react/no-unused-prop-types\n  options: PropTypes.object, // eslint-disable-line react/no-unused-prop-types\n  layerOptions: PropTypes.object // eslint-disable-line react/no-unused-prop-types\n};\n","import React from 'react';\nimport Layer from './layer';\n\nexport default class ArrayLayer extends Layer {\n  /**\n   * Handles ArrayLayer being mounted onto the DOM\n   *\n   * All we need to do when the component 'mounts',\n   * is call `plot.overlay_array` with the relevant\n   * data and options. This will return our layer object.\n   *\n   * A large portion of the time, especially for dynamic\n   * systems, this will look like\n   * `this.plot.overlay_array([], undefined)` upon mount.\n   */\n  componentDidMount() {\n    const { data, options, layerOptions } = this.props;\n    this.layer = this.plot.overlay_array(data, options, layerOptions);\n  }\n\n  /**\n   * Handles new properties being passed into <ArrayLayer/>\n   *\n   * This will be replaced by\n   *\n   *     static getDerivedStateFromProps(nextProps, prevState)\n   *\n   * in React 17.\n   *\n   * This sits in the lifecycle right before `shouldComponentUpdate`,\n   * `componentWillUpdate`, and most importantly `render`, so this is\n   * where we will call the plot's `reload` and `headermod` methods.\n   *\n   * @param nextProps    the newly received properties\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this.plot.reload(this.layer, nextProps.data, nextProps.options);\n    } else if (nextProps.options !== this.props.options) {\n      this.plot.headermod(this.layer, nextProps.options);\n    }\n  }\n}\n","import React from 'react';\nimport Layer from './layer';\n\nexport default class PipeLayer extends Layer {\n  componentDidMount() {\n    this.layer = this.plot.overlay_pipe(this.props.options);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data && nextProps.data !== this.props.data) {\n      this.plot.push(this.layer, nextProps.data);\n    }\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Layer from './layer';\n\nexport default class HrefLayer extends Layer {\n  componentDidMount() {\n    const { href, onload, options } = this.props;\n    this.plot.deoverlay();\n    this.layer = this.plot.overlay_href(href, onload, options);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      href: oldHref,\n      options: oldOptions,\n    } = this.props;\n\n    const {\n      href: newHref,\n      onload: newOnload,\n      options: newOptions,\n    } = nextProps;\n\n    // we only care if `href` or `options` changes;\n    if (newHref !== oldHref) {\n      this.plot.deoverlay();\n      this.plot.overlay_href(newHref, newOnload, newOptions);\n    } else if (newOptions !== oldOptions) {\n      this.plot.change_settings(newOptions);\n    }\n  }\n}\n\nHrefLayer.propTypes = {\n  href: PropTypes.string,\n  onload: PropTypes.func,\n  options: PropTypes.object,\n};\n\nHrefLayer.defaultProps = {\n  href: '',\n  onload: null,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Layer from './layer';\n\nexport default class WebsocketLayer extends Layer {\n  componentDidMount() {\n    const { wsurl, overrides, options } = this.props;\n    this.plot.deoverlay();\n    this.layer = this.plot.overlay_websocket(wsurl, overrides, options);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      wsurl: oldWsurl,\n      options: oldOptions,\n    } = this.props;\n\n    const {\n      wsurl: newWsurl,\n      overrides: newOverrides,\n      options: newOptions,\n    } = nextProps;\n\n    // we only care if `wsurl` or `options` changes;\n    if (newWsurl !== oldWsurl) {\n      this.plot.deoverlay();\n      this.plot.overlay_websocket(newWsurl, newOverrides, newOptions);\n    } else if (newOptions !== oldOptions) {\n      this.plot.change_settings(newOptions);\n    }\n  }\n}\n\nWebsocketLayer.propTypes = {\n  wsurl: PropTypes.string,\n  overrides: PropTypes.func,\n  options: PropTypes.object,\n};\n\nWebsocketLayer.defaultProps = {\n  wsurl: '',\n};\n","export { default as SigPlot } from './sigplot';\nexport { default as ArrayLayer } from './arraylayer';\nexport { default as PipeLayer } from './pipelayer';\nexport { default as HrefLayer } from './hreflayer';\nexport { default as WebsocketLayer } from './websocketlayer';\n","/**\n * @license\n * File: common.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n\n/* global module */\n/* global require */\n\n(function() {\n\nmodule.exports = {};\n\nif (window.ArrayBuffer) {\n    if (!ArrayBuffer.prototype.slice) {\n        //Monkey Patching for iOS and early Firefox\n        ArrayBuffer.prototype.slice = function(start, end) {\n            var that = new Uint8Array(this);\n            if (end === undefined) {\n                end = that.length;\n            }\n            var result = new ArrayBuffer(end - start);\n            var resultArray = new Uint8Array(result);\n            for (var i = 0; i < resultArray.length; i++) {\n                resultArray[i] = that[i + start];\n            }\n            return result;\n        };\n    }\n}\n\n// Shim for requestAnimationFrame compatibility\nwindow.requestAnimFrame = (function(callback) {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n        function(callback) {\n            return window.setTimeout(callback, 1000 / 60);\n    };\n})();\n\nwindow.cancelAnimFrame = (function(callback) {\n    return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCanelAnimationFrame ||\n        function(timeoutID) {\n            window.clearTimeout(timeoutID);\n    };\n})();\n\n// Handle various ways to draw dashed lines\nmodule.exports.dashOn = function(ctx, on, off) {\n    if (ctx.setLineDash) {\n        ctx.setLineDash([on, off]);\n        return true;\n    } else if (ctx.mozDash !== undefined) { // Gecko 7.0+\n        ctx.mozDash = [on, off];\n        return true;\n    } else if (ctx.webkitLineDash && ctx.webkitLineDash.length === 0) {\n        ctx.webkitLineDash = [on, off];\n        return true;\n    }\n    return false;\n};\n\nmodule.exports.dashOff = function(ctx) {\n    if (ctx.setLineDash) {\n        ctx.setLineDash([]);\n    } else if (ctx.mozDash) { // Gecko 7.0+\n        ctx.mozDash = null;\n    } else if (ctx.webkitLineDash) {\n        ctx.webkitLineDash = [];\n    }\n};\n\n// Firefox behaves differntly for keypress events\nmodule.exports.getKeyCode = function(e) {\n    e = window.event || e;\n    e = e.charCode || e.keyCode;\n    return e;\n};\n\nmodule.exports.setKeypressHandler = function(handler) {\n    if (window.addEventListener) { window.addEventListener('keypress', handler, false); }\n    else if (window.attachEvent) {\n        window.attachEvent('onkeypress', handler);\n    }\n};\n\n// endsWith() is part of ECMAScript 6, include the Mozilla\n// Polyfill from https://developer.mozilla.org\nif (!String.prototype.endsWith) {\n    String.prototype.endsWith = function(search, this_len) {\n        if (this_len === undefined || this_len > this.length) {\n            this_len = this.length;\n        }\n        return this.substring(this_len - search.length, this_len) === search;\n    };\n}\n\nif (!Float64Array.prototype.slice) {\n    Object.defineProperty(Float64Array.prototype, 'slice', {\n        value: Array.prototype.slice\n    });\n}\n\n// Array.isArray\n// FF 4+\n// IE 9+\n// SF 5+\n// http://kangax.github.io/es5-compat-table/#Array.isArray\nif (!Array.isArray) {\n    Array.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n}\n\nif (!window.Float64Array) {\n    //Monkey Patching for iOS\n    // This is essentially ReadOnly because\n    // if someone does x[i] = 5\n    // the value will be set in the array\n    // but not in the underlying buffer\n    window.Float64Array = (function() {\n        return window.Float64Array ||\n            function(buffer, byteOffset, length) {\n                if (!(buffer instanceof ArrayBuffer)) {\n                    throw \"Invalid type\";\n                }\n                var dv = new DataView(buffer);\n                var b = [];\n                var maxlength = (buffer.byteLength - byteOffset) / 8;\n                if (length === undefined) {\n                    b.length = maxlength;\n                } else {\n                    b.length = Math.min(length, maxlength);\n                }\n\n                for (var i = 0; i < b.length; i++) {\n                    b[i] = dv.getFloat64(i * 8 + byteOffset, true);\n                }\n                b.subarray = function(begin, end) {\n                    return b.slice(begin, end);\n                };\n                return b;\n        };\n    })();\n}\n\n// Shims\n(function() {\n    /* console shim*/\n    var f = function() {};\n    if (!window.console) {\n        window.console = {\n            log: f,\n            info: f,\n            warn: f,\n            debug: f,\n            error: f\n        };\n    }\n\n    // Firefox 4 has a glaring subarray bug\n    // http://ryanberdeen.com/2011/04/16/firefox-subarray-bug.html\n    if (new Int8Array([0, 1, 0]).subarray(1).subarray(1)[0]) {\n        var subarray = function(begin, end) {\n            if (arguments.length === 0) {\n                begin = 0;\n                end = this.length;\n            } else {\n                if (begin < 0) {\n                    // relative to end\n                    begin += this.length;\n                }\n                // clamp to 0, length\n                begin = Math.max(0, Math.min(this.length, begin));\n                if (arguments.length === 1) {\n                    // slice to end\n                    end = this.length;\n                } else {\n                    if (end < 0) {\n                        // relative to end\n                        end += this.length;\n                    }\n                    // clamp to begin, length\n                    end = Math.max(begin, Math.min(this.length, end));\n                }\n            }\n\n            var byteOffset = this.byteOffset + begin * this.BYTES_PER_ELEMENT;\n            return new this.constructor(this.buffer, byteOffset, end - begin);\n        };\n\n        var typedArrays = [Int8Array, Uint8Array, Int16Array, Uint16Array,\n            Int32Array, Uint32Array, Float32Array, Float64Array\n        ];\n        typedArrays.forEach(function(cls) {\n            cls.prototype.subarray = subarray;\n        });\n    }\n\n}());\n\n// https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel?redirectlocale=en-US&redirectslug=DOM%2FMozilla_event_reference%2Fwheel#Listening_to_this_event_across_browser\n// creates a global \"addWheelListener\" method\n// example: addWheelListener( elem, function( e ) { console.log( e.deltaY ); e.preventDefault(); } );\n(function(window, document) {\n\n    var prefix = \"\",\n        _addEventListener, onwheel, support;\n\n    // detect event model\n    if (window.addEventListener) {\n        _addEventListener = \"addEventListener\";\n    } else {\n        _addEventListener = \"attachEvent\";\n        prefix = \"on\";\n    }\n\n    // detect available wheel event\n    support = \"onwheel\" in document.createElement(\"div\") ? \"wheel\" : // Modern browsers support \"wheel\"\n    document.onmousewheel !== undefined ? \"mousewheel\" : // Webkit and IE support at least \"mousewheel\"\n    \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\n\n    window.addWheelListener = function(elem, callback, useCapture) {\n        _addWheelListener(elem, support, callback, useCapture);\n\n        // handle MozMousePixelScroll in older Firefox\n        if (support === \"DOMMouseScroll\") {\n            _addWheelListener(elem, \"MozMousePixelScroll\", callback, useCapture);\n        }\n    };\n\n    /* jshint -W030 */\n    function _addWheelListener(elem, eventName, callback, useCapture) {\n        elem[_addEventListener](prefix + eventName, support === \"wheel\" ? callback : function(originalEvent) {\n            !originalEvent && (originalEvent = window.event);\n\n            // create a normalized event object\n            var event = {\n                // keep a ref to the original event object\n                originalEvent: originalEvent,\n                target: originalEvent.target || originalEvent.srcElement,\n                type: \"wheel\",\n                deltaMode: originalEvent.type === \"MozMousePixelScroll\" ? 0 : 1,\n                deltaX: 0,\n                delatZ: 0,\n                preventDefault: function() {\n                    originalEvent.preventDefault ?\n                        originalEvent.preventDefault() :\n                        originalEvent.returnValue = false;\n                }\n            };\n\n            // calculate deltaY (and deltaX) according to the event\n            if (support === \"mousewheel\") {\n                event.deltaY = -1 / 40 * originalEvent.wheelDelta;\n                // Webkit also support wheelDeltaX\n                originalEvent.wheelDeltaX && (event.deltaX = -1 / 40 * originalEvent.wheelDeltaX);\n            } else {\n                event.deltaY = originalEvent.detail;\n            }\n\n            // it's time to fire the callback\n            return callback(event);\n\n        }, useCapture || false);\n    }\n    /* jshint +W030 */\n\n})(window, document);\n\n//Updates destenation object with source values\nmodule.exports.update = function update(dst, src) {\n    for (var prop in src) {\n        var val = src[prop];\n        if (typeof val === \"object\") { // recursive\n            update(dst[prop], val);\n        } else {\n            dst[prop] = val;\n        }\n    }\n    return dst; // return dst to allow method chaining\n};\n\n}());\n","/**\n * @license\n * File: mx.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jslint nomen: true, browser: true, devel: true*/\n\n//Uses Immediately-invoked Function Expressions (IIFE)s for namespaces\n//See http://addyosmani.com/blog/essential-js-namespacing/ for details.\n\n/**\n * This namespace includes generic graphical routines and functions\n * the manipulate a canvas.\n *\n * @namespace\n */\n\n/* global module */\n/* global require */\n/* global requestAnimFrame */\n/* global cancelAnimFrame */\n\n(function() {\n\n    var tinycolor = require(\"tinycolor2\");\n    var ColorMap = require(\"./ColorMap\");\n    var common = require(\"./common\");\n    var CanvasInput = require(\"./CanvasInput\");\n    var m = require(\"./m\");\n\n    function mx() {}\n\n\n    mx.XW_INIT = -3;\n    mx.XW_DRAW = 1;\n    mx.XW_EVENT = 2;\n    mx.XW_UPDATE = 3;\n    mx.XW_COMMAND = 5;\n    mx.SB_EXPAND = 1;\n    mx.SB_SHRINK = 2;\n    mx.SB_FULL = 3;\n    mx.SB_STEPINC = 4;\n    mx.SB_STEPDEC = 5;\n    mx.SB_PAGEINC = 6;\n    mx.SB_PAGEDEC = 7;\n    mx.SB_DRAG = 8;\n    mx.SB_WHEELUP = 9;\n    mx.SB_WHEELDOWN = 10;\n\n    // Grayscale colors:\n    // \"15%,15%,10%\" - very dark gray\n    // \"25%,25%,20%\" - dark gray\n    // \"35%,35%,30%\" - medium gray\n    // \"40%,40%,35%\" - light medium gray\n    // \"60%,60%,55%\" - light gray\n    // \"70%,70%,65%\" - very light gray\n    // \"80%,80%,75%\" - very very light gray\n\n    mx.L_ArrowLeft = 1001;\n    mx.L_ArrowRight = 1002;\n    mx.L_ArrowUp = 1003;\n    mx.L_ArrowDown = 1004;\n    mx.L_dashed = 801;\n    mx.GBorder = 3; // TODO Is this a good original value to use...?\n    mx.L_RModeOff = 900;\n    mx.L_RModeOn = 901;\n    mx.L_PixelSymbol = 1;\n    mx.L_CircleSymbol = 2;\n    mx.L_SquareSymbol = 3;\n    mx.L_PlusSymbol = 4;\n    mx.L_XSymbol = 5;\n    mx.L_TriangleSymbol = 6;\n    mx.L_ITriangleSymbol = 7;\n    mx.L_HLineSymbol = 8;\n    mx.L_VLineSymbol = 9;\n\n    /**\n     * Set to True for a retro look that would make hipsters proud\n     */\n    mx.LEGACY_RENDER = false;\n\n    /**\n     * The zoom stack structure object\n     * @private\n     */\n    mx.STKSTRUCT = function() {\n        this.xmin = 0.0; // real world val at x1(origin=1,4) or x2(origin=2,4)\n        this.xmax = 0.0; // real world val at x2(origin=1,4) or x1(origin=2,4)\n        this.ymin = 0.0; // real world val at y2(origin=1,2) or y1(origin=3,4)\n        this.ymax = 0.0; // real world val at y1(origin=1,2) or y2(origin=3,4)\n        this.xscl = 0.0; // ratio of X real world units to pixel units\n        this.yscl = 0.0; // ratio of Y real world units to pixel units\n        this.x1 = 0; // left edge relative to window (pixels)\n        this.y1 = 0; // top edge relative to window (pixels)\n        this.x2 = 0; // right edge relative to window (pixels)\n        this.y2 = 0; // bottom edge relative to window (pixels)\n    };\n\n    /**\n     * The scrollbar structure object used to hold state about scrolling\n     * @private\n     */\n    mx.SCROLLBAR = function() {\n        this.flag = null; // int_4 // flag field for MX$SCROLLBAR routine\n        this.action = null; // int_4 // returned action performed (XW_EVENT)\n        this.smin = null;\n        this.srange = null; // real_8 // real_8 // min and range values of scroll\n        // bar\n        this.tmin = null;\n        this.trange = null; // real_8 // real_8 // min and range values of trough\n        this.step = null; // real_8 // ratios of smin to move for step\n        this.page = null; // real_8 // ratios of smin to move for page\n        this.scale = null; // real_8 // ratio to scale by for expand/shrink\n        this.dragoutline = null; // bool_4 // FALSE = smooth scroll, TRUE = drag &\n        // drop\n        this.initial_pause = null; // real_4\n        this.repeat_pause = null; // real_4\n\n        this.x = null;\n        this.y = null;\n        this.w = null;\n        this.h = null; // int_2 // These fields are private and are to be\n        this.s1 = null;\n        this.sw = null;\n        this.swmin = null;\n        this.soff = null; // int_2 // set through other interfaces\n        this.a1 = null;\n        this.a2 = null;\n        this.arrow = null; // int_2\n        this.mxevent = null; // bool_1\n        this.origin = null; // int_1\n        this.repeat_count = null; // int_4\n    };\n\n    /**\n     * @method WARPBOX\n     * @private\n     */\n    function WARPBOX() {\n        this.xo = 0;\n        this.yo = 0;\n        this.xl = 0;\n        this.yl = 0;\n        this.xmin = 0;\n        this.xmax = 0;\n        this.ymin = 0;\n        this.ymax = 0;\n        this.func = undefined;\n        this.mode = undefined;\n    }\n\n    /**\n     * Defines 2 canvas layers, canvas and wid_canvas\n     * @method MX\n     * @param element\n     * @private\n     */\n    function MX(element) { // this is where the canvases are setup/defined\n        this.root = element;\n\n        // Create a div to hold all the various canvas layers\n        this.parent = document.createElement('div');\n        this.parent.style.position = \"relative\";\n        //this.parent.style.height = \"100%\"; //element.clientHeight;\n        //this.parent.style.width = \"100%\"; //element.clientHeight;\n        //this.parent.clientWidth = element.clientWidth;\n        this.parent.width = element.clientWidth;\n        this.parent.height = element.clientHeight;\n        element.appendChild(this.parent);\n\n        // Create the canvas that will hold the plot\n        this.canvas = document.createElement('canvas');\n        this.canvas.style.position = \"absolute\";\n        this.canvas.style.top = \"0px\";\n        this.canvas.style.left = \"0px\";\n        this.canvas.width = element.clientWidth;\n        this.canvas.height = element.clientHeight;\n\n        this.parent.appendChild(this.canvas);\n        this.active_canvas = this.canvas;\n\n        // This canvas holds all widgets and reacts to mouse events\n        this.wid_canvas = document.createElement('canvas');\n        this.wid_canvas.style.position = \"absolute\";\n        this.wid_canvas.style.top = \"0px\";\n        this.wid_canvas.style.left = \"0px\";\n        this.wid_canvas.style.zIndex = 1;\n        this.wid_canvas.width = element.clientWidth;\n        this.wid_canvas.height = element.clientHeight;\n\n        this.parent.appendChild(this.wid_canvas);\n\n        //if ((this.canvas.height <= 0) || (this.canvas.width <= 0)) {\n        //\tthrow \"Plot could not be instantiated correctly; did you specify a size for your placeholder?\";\n        //}\n\n        this.font = undefined; // the full calculated font string\n        this.font_family = \"Courier New, monospace\"; // default font family\n        this.font_width = 8;\n        this.font_scaled = false;\n        this.text_w = 0; // text width\n        this.text_h = 0; // text height\n        this.level = 0; // current zoom level\n        this.width = this.parent.width; // width of window\n        this.height = this.parent.height; // height of window\n        this.xpos = 0; // x-pixel loc of mouse during event\n        this.ypos = 0; // y-pixel loc of mouse during event\n        this.xmrk = 0.0; // absc coord of mark\n        this.ymrk = 0.0;\n        this.origin = 1;\n        this.stk = [new mx.STKSTRUCT()]; // zoom stack\n\n        mx.setbgfg(this, \"black\", \"white\");\n\n        // Custom stuff for the Javascript implementation\n        this.event_cb = undefined;\n        this.warpbox = undefined;\n\n        // draw_mode flags;\n        this.rmode = false;\n        this.linewidth = 1;\n        this.style = undefined;\n        this.xi = false;\n\n        // Button Eventing variables\n        this.button_release = 0;\n        this.button_press = 0;\n        this.state_mask = 0;\n\n        // Specifies display field\n        this.l = 0;\n        this.r = this.width;\n        this.t = 0;\n        this.b = this.height;\n\n        // Scrollbar state\n        this.scrollbar_x = new mx.SCROLLBAR();\n        this.scrollbar_y = new mx.SCROLLBAR();\n\n        // Prompt mode state variable\n        this.prompt = undefined;\n\n        // Colormap\n        this.pixel = undefined;\n\n        // Render Canvas\n        this._renderCanvas = document.createElement(\"canvas\");\n    }\n\n    /* This is used as a helper function for defining highlight ranges/\n     */\n\n    function in_fill_range(ele, range_begin, range_end) {\n        var left = false;\n        var right = false;\n\n        if (ele >= range_begin) {\n            left = true;\n        }\n\n\n        if (ele <= range_end) {\n            right = true;\n        }\n\n        if (left === true && right === true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Create Canvas and it's Mx structure and functions\n     * @param {element}\telement \tReference to a DOM window element\n     */\n    /* Step #5*/\n    mx.open = function(element) {\n        var Mx = new MX(element); /* Step #6*/\n\n        Mx.wid_canvas.oncontextmenu = function(event) {\n            event.preventDefault();\n            return false;\n        };\n\n        this._ctx = Mx.active_canvas.getContext(\"2d\");\n\n        Mx.onmousemove = (function(Mx) {\n            return function(e) {\n                var rect = e.target.getBoundingClientRect();\n                // Screen x/y of mouse\n                Mx.x = e.x || e.clientX;\n                Mx.y = e.y || e.clientY;\n                // Plot relative x/y of mouse\n                Mx.xpos = (e.offsetX === undefined) ? (e.pageX - rect.left - window.scrollX) : e.offsetX;\n                Mx.ypos = (e.offsetX === undefined) ? (e.pageY - rect.top - window.scrollY) : e.offsetY;\n\n                //\t\t\t\tMx.xpos = (e.offsetX === undefined) ? e.layerX : e.offsetX;\n                //\t\t\t\tMx.ypos = (e.offsetY === undefined) ? e.layerY : e.offsetY;\n\n                if (Mx.warpbox) {\n                    if ((e.ctrlKey || e.metaKey) && (Mx.warpbox.alt_style !== undefined)) {\n                        Mx.warpbox.style = Mx.warpbox.alt_style;\n                    } else {\n                        Mx.warpbox.style = Mx.warpbox.def_style;\n                    }\n                    mx.redraw_warpbox(Mx);\n                }\n\n                mx.widget_callback(Mx, e);\n            };\n        })(Mx);\n\n        Mx.onmouseup = (function(Mx) {\n            return function(event) {\n                if (Mx.warpbox) {\n                    mx.onWidgetLayer(Mx, function() {\n                        mx.erase_window(Mx);\n                    });\n\n                    var old_warpbox = Mx.warpbox;\n                    Mx.warpbox = undefined;\n\n                    if (event.which === 1 || event.which === 3) {\n                        if (old_warpbox.func) {\n                            var xo = old_warpbox.xo;\n                            var yo = old_warpbox.yo;\n                            var xl = old_warpbox.xl;\n                            var yl = old_warpbox.yl;\n\n                            if (old_warpbox.mode === \"vertical\") {\n                                xo = Mx.l;\n                                xl = Mx.r;\n                            } else if (old_warpbox.mode === \"horizontal\") {\n                                yo = Mx.t;\n                                yl = Mx.b;\n                            } // else \"box\"\n                            old_warpbox.func(event, xo, yo, xl, yl,\n                                old_warpbox.style.return_value,\n                                old_warpbox.mode);\n                        }\n                    }\n\n                }\n                mx.widget_callback(Mx, event);\n            };\n        })(Mx);\n\n        Mx.onmousedown = (function(Mx) {\n            return function(event) {\n                event.preventDefault();\n                mx.widget_callback(Mx, event);\n                return false;\n            };\n        })(Mx);\n\n        Mx.onkeydown = (function(Mx) {\n            return function(event) {\n                if (Mx.warpbox) {\n                    var keyCode = common.getKeyCode(event);\n                    if (((keyCode === 17) || // Ctrl\n                            (keyCode === 224) || // Mac Command Firefox\n                            (keyCode === 91) || // Safari/Chrome Left-command\n                            (keyCode === 93)) && // Safari/Chrome Right-command\n                        (Mx.warpbox.style !== Mx.warpbox.alt_style)) {\n                        Mx.warpbox.style = Mx.warpbox.alt_style;\n                        mx.redraw_warpbox(Mx);\n                    }\n                }\n\n                mx.widget_callback(Mx, event);\n            };\n        })(Mx);\n\n        Mx.onkeyup = (function(Mx) {\n            return function(event) {\n                if (Mx.warpbox) {\n                    var keyCode = common.getKeyCode(event);\n                    if (((keyCode === 17) || // Ctrl\n                            (keyCode === 224) || // Mac Command Firefox\n                            (keyCode === 91) || // Safari/Chrome Left-command\n                            (keyCode === 93)) && // Safari/Chrome Right-command\n                        (Mx.warpbox.style !== Mx.warpbox.def_style)) {\n                        Mx.warpbox.style = Mx.warpbox.def_style;\n                        mx.redraw_warpbox(Mx);\n                    }\n                }\n            };\n        })(Mx);\n\n        Mx.ontouchend = (function(Mx) {\n            return function(event) {\n                Mx.onmouseup({\n                    which: 1\n                });\n            };\n        })(Mx);\n\n        Mx.ontouchmove = (function(Mx) {\n            return function(event) {\n                // Compute the total offset - consider caching offset and only calculating on resize\n                var element = Mx.canvas;\n                var offsetX = 0;\n                var offsetY = 0;\n                if (element.offsetParent !== undefined) {\n                    do {\n                        offsetX += element.offsetLeft;\n                        offsetY += element.offsetTop;\n                    } while ((element = element.offsetParent));\n                }\n\n                Mx.xpos = event.targetTouches[0].pageX - offsetX;\n                Mx.ypos = event.targetTouches[0].pageY - offsetY;\n                mx.redraw_warpbox(Mx);\n            };\n        })(Mx);\n\n        mx.enableListeners(Mx);\n\n        return Mx;\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.enableListeners = function(Mx) {\n        mx.addEventListener(Mx, \"mousemove\", Mx.onmousemove, false);\n        window.addEventListener(\"mouseup\", Mx.onmouseup, false);\n        mx.addEventListener(Mx, \"mousedown\", Mx.onmousedown, false);\n        window.addEventListener(\"keydown\", Mx.onkeydown, false);\n        window.addEventListener(\"keyup\", Mx.onkeyup, false);\n        //mx.addEventListener(Mx, \"touchend\", Mx.ontouchend);\n        //mx.addEventListener(Mx, 'touchmove', Mx.ontouchmove, false);\n\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.disableListeners = function(Mx) {\n        mx.removeEventListener(Mx, \"mousemove\", Mx.onmousemove, false);\n        window.removeEventListener(\"mouseup\", Mx.onmouseup, false);\n        mx.removeEventListener(Mx, \"mousedown\", Mx.onmousedown, false);\n        window.removeEventListener(\"keydown\", Mx.onkeydown, false);\n        window.removeEventListener(\"keyup\", Mx.onkeyup, false);\n        //mx.addEventListener(Mx, \"touchend\", Mx.ontouchend);\n        //mx.addEventListener(Mx, 'touchmove', Mx.ontouchmove, false);\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @param callback\n     * @param useCapture\n     * @private\n     */\n    mx.addEventListener = function(Mx, event, callback, useCapture) {\n        return Mx.wid_canvas.addEventListener(event, callback, useCapture);\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @param callback\n     * @param useCapture\n     * @private\n     */\n    mx.removeEventListener = function(Mx, event, callback, useCapture) {\n        return Mx.wid_canvas.removeEventListener(event, callback, useCapture);\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @private\n     */\n    mx.dispatchEvent = function(Mx, event) {\n        return Mx.wid_canvas.dispatchEvent(event);\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.onWidgetLayer = function(Mx, func) {\n        mx.onCanvas(Mx, Mx.wid_canvas, func);\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.onCanvas = function(Mx, canvas, func) {\n        var current_active = Mx.active_canvas;\n        Mx.active_canvas = canvas;\n        try {\n            if (func) {\n                return func();\n            }\n        } finally {\n            Mx.active_canvas = current_active;\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.withWidgetLayer = function(Mx, func) {\n        var f = function() {\n            mx.onWidgetLayer(Mx, func);\n        };\n        return f;\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @private\n     */\n    mx.render = function(Mx, func) {\n        if (!func) {\n            return;\n        }\n\n        var active_canvas = Mx.active_canvas;\n\n        if (!active_canvas._animationFrameHandle) {\n            active_canvas._animationFrameHandle = requestAnimFrame(function() {\n                active_canvas._animationFrameHandle = undefined;\n                func();\n            });\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param value\n     * @private\n     */\n    mx.fullscreen = function(Mx, value) {\n        if (value === undefined) {\n            value = !Mx.fullscreen;\n        }\n        if (value) {\n            Mx.fullscreen = {\n                position: Mx.root.style.position,\n                height: Mx.root.style.height,\n                width: Mx.root.style.width,\n                left: Mx.root.style.left,\n                top: Mx.root.style.top,\n                zIndex: Mx.root.style.zIndex\n            };\n            Mx.root.style.position = \"fixed\";\n            Mx.root.style.height = \"100%\";\n            Mx.root.style.width = \"100%\";\n            Mx.root.style.left = \"0px\";\n            Mx.root.style.top = \"0px\";\n            Mx.root.style.zIndex = 16777271; // http://www.puidokas.com/max-z-index/\n        } else {\n            Mx.root.style.position = Mx.fullscreen.position;\n            Mx.root.style.height = Mx.fullscreen.height;\n            Mx.root.style.width = Mx.fullscreen.width;\n            Mx.root.style.left = Mx.fullscreen.left;\n            Mx.root.style.top = Mx.fullscreen.top;\n            Mx.root.style.zIndex = Mx.fullscreen.zIndex;\n            Mx.fullscreen = undefined;\n        }\n        mx.checkresize(Mx);\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.checkresize = function(Mx) {\n        var canvas = Mx.canvas;\n        if ((canvas.height !== Mx.root.clientHeight) || (canvas.width !== Mx.root.clientWidth)) {\n\n            Mx.height = Mx.root.clientHeight;\n            Mx.width = Mx.root.clientWidth;\n\n            Mx.canvas.height = Mx.height;\n            Mx.canvas.width = Mx.width;\n            Mx.wid_canvas.height = Mx.height;\n            Mx.wid_canvas.width = Mx.width;\n\n            return true;\n        }\n        return false;\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.invertbgfg = function(Mx) {\n        mx.setbgfg(Mx, Mx.fg, Mx.bg, !Mx.xi);\n    };\n\n    /**\n     * @param color1\n     * @param color2\n     * @param color3\n     * @private\n     */\n    mx.mixcolor = function(color1, color2, perc1to2) {\n        var c1 = tinycolor(color1).toRgb();\n        var c2 = tinycolor(color2).toRgb();\n        var mix = 1.0 - perc1to2;\n        c2.r = c1.r * mix + c2.r * perc1to2;\n        c2.g = c1.g * mix + c2.g * perc1to2;\n        c2.b = c1.b * mix + c2.b * perc1to2;\n        return tinycolor(c2).toHexString(true);\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param fillStyle\n     * @private\n     */\n    mx.linear_gradient = function(Mx, x, y, w, h, fillStyle) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        var step_size = 1.0 / fillStyle.length;\n        var lingrad = ctx.createLinearGradient(x, y, w, h);\n        for (var i = 0; i < fillStyle.length - 1; i++) {\n            lingrad.addColorStop(step_size * (i), fillStyle[i]);\n        }\n        lingrad.addColorStop(1, fillStyle[fillStyle.length - 1]);\n        return lingrad;\n    };\n\n    /**\n     * Set's the background and foreground\n     * xwfg : usually used for text on a widget\n     * xwbg : background for a widget\n     * @param Mx\n     * @param bg\n     * @param fg\n     * @param xi\n     * @private\n     */\n    mx.setbgfg = function(Mx, bg, fg, xi) {\n        Mx.bg = tinycolor(bg).toHexString();\n        Mx.fg = tinycolor(fg).toHexString();\n        Mx.xi = tinycolor(xi).toHexString();\n\n        if ((tinycolor.equals(Mx.bg, \"black\")) && (tinycolor.equals(Mx.fg, \"white\"))) { ///mmm\n            Mx.xwfg = Mx.fg; // X-Widget Foreground color\n            Mx.xwbg = \"rgb(35%,35%,30%)\"; // X-Widget Background color\n            Mx.xwts = \"rgb(60%,60%,55%)\"; // X-Widget top shadow color\n            Mx.xwbs = \"rgb(25%,25%,20%)\"; // X-Widget bottom shadow color\n            Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n            Mx.xwlo = \"rgb(15%,15%,10%)\"; // X-Widget top shadow color\n            Mx.hi = Mx.xwts; //  Highlight color\n        } else if ((tinycolor.equals(Mx.bg, \"white\")) && (tinycolor.equals(Mx.fg, \"black\"))) {\n            Mx.xwfg = Mx.fg; // X-Widget Foreground color\n            Mx.xwbg = \"rgb(60%,60%,55%)\"; // X-Widget Background color\n            Mx.xwts = \"rgb(80%,80%,75%)\"; // X-Widget top shadow color\n            Mx.xwbs = \"rgb(40%,40%,35%)\"; // X-Widget bottom shadow color\n            Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n            Mx.xwlo = \"rgb(70%,70%,65%)\";\n            Mx.hi = Mx.xwbs; //  Highlight color\n        } else {\n            var clr = tinycolor(Mx.bg).toRgb();\n            var hsp = Math.sqrt( // HSP equation from http://alienryderflex.com/hsp.html\n                0.299 * (clr.r * clr.r) +\n                0.587 * (clr.g * clr.g) +\n                0.114 * (clr.b * clr.b)\n            );\n            if (hsp > 127.5) { // light\n                Mx.xwfg = \"black\";\n                Mx.xwbg = \"rgb(60%,60%,55%)\"; // X-Widget Background color\n                Mx.xwts = \"rgb(80%,80%,75%)\"; // X-Widget top shadow color\n                Mx.xwbs = \"rgb(40%,40%,35%)\"; // X-Widget bottom shadow color\n                Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n                Mx.xwlo = \"rgb(70%,70%,65%)\";\n                Mx.hi = Mx.xwts;\n            } else { // dark\n                Mx.xwfg = \"white\";\n                Mx.xwbg = \"rgb(35%,35%,30%)\"; // X-Widget Background color\n                Mx.xwts = \"rgb(60%,60%,55%)\"; // X-Widget top shadow color\n                Mx.xwbs = \"rgb(25%,25%,20%)\"; // X-Widget bottom shadow color\n                Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow\n                Mx.xwlo = \"rgb(15%,15%,10%)\"; // X-Widget top shadow color\n                Mx.hi = Mx.xwbs;\n            }\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param theme\n     * @private\n     */\n    mx.settheme = function(Mx, theme) {\n        Mx.bg = theme.bg;\n        Mx.fg = theme.fg;\n        Mx.xi = theme.xi;\n        Mx.xwfg = theme.xwfg;\n        Mx.xwbg = theme.xwbg;\n        Mx.xwts = theme.xwts;\n        Mx.xwbs = theme.xwbs;\n        Mx.xwlo = theme.xwlo;\n        Mx.hi = theme.hi;\n    };\n\n    /**\n     * Close graphics windows.\n     * @param Mx\n     */\n    mx.close = function(Mx) {\n        var canvas = Mx.wid_canvas;\n        canvas.removeEventListener(\"mousemove\", Mx.onmousemove, false);\n        //canvas.removeEventListener(\"touchmove\", Mx.ontouchmove);\n        canvas.removeEventListener(\"mouseup\", Mx.onmouseup, false);\n        //canvas.addEventListener(\"touchend\", Mx.onmouseup);\n\n        if (Mx.parent && Mx.parent.parentNode) {\n            Mx.parent.parentNode.removeChild(Mx.parent);\n        }\n    };\n\n    /**\n     * Draws and implements a scrollbar\n     * @param Mx\n     * @param sb\n     * @param xs\n     * @param xe\n     * @param ys\n     * @param ye\n     * @param out\n     * @param qs\n     * @param qe\n     * @param mouseEvent\n     * @param scrollbarState\n     */\n    //\n    // ~= MX$SCROLLBAR\n    //\n    mx.scrollbar = function(Mx, sb, xs, xe, ys, ye, out, qs, qe, mouseEvent, scrollbarState) {\n        // Param types:\n        // mx.SCROLLBAR* sb,\n        // int xs, int xe, int ys, int ye,\n        // real* ps, real* pe, real qs, real qe\n\n        var mode; // an int\n        var action; // an int\n        var origin; // an int\n        var stat = 0; // an int\n\n        var step; // a real_8\n        var page; // a real_8\n        var scale; // a real_8\n        var sblocal = new mx.SCROLLBAR(); // a SCROLLBAR\n\n        mode = (sb.flag !== undefined ? sb.flag : sb); // REFACTOR - if user sends in a number instead of a scrollbar\n        action = Math.abs(mode);\n\n        if (ye - ys > xe - xs) {\n            if (Mx.origin < 3) {\n                origin = 2; /* inverted Y scrollbar */\n            } else {\n                origin = 4; /* normal Y scrollbar */\n            }\n        } else {\n            if (Mx.origin & 2) {\n                origin = 3; /* inverted X scrollbar */\n            } else {\n                origin = 1; /* normal X scrollbar */\n            }\n        }\n\n        if (action < 10) {\n            sb = sblocal; /* use local SB structure */\n        }\n        if (action < 10 || sb.action === 0) { /* re-init the SB structure */\n            mx.scroll(Mx, sb, mx.XW_INIT, undefined, scrollbarState);\n            sb.flag = mode;\n            /* Turn off repeated event handling in mx_scroll */\n            sb.initial_pause = -1.0;\n            mx.scroll_loc(sb, xs, ys, xe - xs + 1, ye - ys + 1, origin, scrollbarState);\n        }\n        sb.srange = out.pe - out.ps;\n\n        switch (action) {\n            case 0:\n                step = page = scale = 1.0;\n                break;\n            case 1:\n            case 11:\n                step = page = 0.9 * sb.srange;\n                scale = 2.0;\n                break;\n            case 2:\n            case 12:\n                step = 0.1 * sb.srange;\n                page = 9 * step;\n                scale = 2.0;\n                break;\n            case 3:\n            case 13:\n                step = 1.0;\n                page = sb.srange - 1.0;\n                scale = 1.0;\n                break;\n            default:\n                return 0;\n        }\n        mx.scroll_vals(sb, out.ps, sb.srange, qs, qe - qs, step, page, scale, scrollbarState);\n\n        if (mode === 0) {\n            mx.scroll(Mx, sb, mx.XW_DRAW, undefined, undefined); // No need for a mouse event\n        } else {\n            if (mx.scroll(Mx, sb, mx.XW_EVENT, mouseEvent, scrollbarState)) {\n                if (out.ps !== sb.smin) {\n                    out.ps = sb.smin;\n                    stat += 1;\n                }\n                if (out.pe !== sb.smin + sb.srange) {\n                    out.pe = sb.smin + sb.srange;\n                    stat += 2;\n                }\n            }\n        }\n        return stat;\n    };\n\n    /**\n     * Instantiate scrollbar on graphics window\n     * @param Mx\n     * @param sv\n     * @param op\n     * @param mouseEvent\n     * @param scrollbarState\n     */\n    //\n    // ~= mx_scroll\n    //\n    mx.scroll = function(Mx, sv, op, mouseEvent, scrollbarState) {\n        var btn; // an int\n        var smin; // a real_8\n        var srange; // a real_8\n        var s; // an int_4\n\n        if (sv === undefined) {\n            return false; /* an mx.SCROLLBAR */\n        }\n\n        switch (op) {\n            case mx.XW_INIT:\n                mx.scroll_loc(sv, 0, 0, Mx.width, 20, 1, scrollbarState);\n                mx.scroll_vals(sv, 0.0, 10.0, 0.0, 100.0, 1.0, 10.0, 1.0, scrollbarState);\n                sv.flag = 0;\n                sv.action = 0;\n                sv.initial_pause = 0.25;\n                sv.repeat_pause = 0.05;\n                sv.mxevent = true;\n                sv.repeat_count = 0;\n                break;\n            case mx.XW_EVENT:\n                /*  Determine which button, if any, was pressed/released\n                 */\n                btn = 0;\n                if (sv.mxevent) { // TODO make sure mxevent is set properly when an event goes off - how is this supposed to be set?\n                    btn = (Mx.button_release) ? -Mx.button_release : Mx.button_press;\n                } else if (mouseEvent.type === \"mousedown\" || mouseEvent.type === \"mouseup\") {\n                    // TODO Does this case ever happen?\n                    switch (mouseEvent.which) {\n                        case 1:\n                            btn = 1;\n                            break;\n                        case 2:\n                            btn = 2;\n                            break;\n                        case 3:\n                            btn = 3;\n                            break;\n                            /* Add these cases for the mouse wheel */\n                        case 4:\n                            btn = 4;\n                            break;\n                        case 5:\n                            btn = 5;\n                            break;\n                    }\n                    if (mouseEvent.type === \"mouseup\") {\n                        btn = -btn;\n                    }\n                } else if (mouseEvent.type === \"mousewheel\" || mouseEvent.type === \"DOM-MouseScroll\") {\n                    // TODO Does this case ever happen?\n                    if (mouseEvent.wheelDelta && mouseEvent.wheelDelta > 0) {\n                        btn = 4; // TODO is 4 right for negative scroll (aka a scroll forwards away from the user)\n                        // TODO Do we need to worry about a release here?\n                    } else if (mouseEvent.wheelDelta && mouseEvent.wheelDelta < 0) {\n                        btn = 5; // TODO is 5 right for negative scroll (aka a scroll backward towards the user)\n                        // TODO Do we need to worry about a release here?\n                    }\n                }\n\n                if (sv.action === 0) {\n                    /*  First-time action -- only interested in button presses\n                     *  1 or 2 within our bounds\n                     */\n                    /* If scroll wheel, pretend we're on vertical scroll bar */\n                    if (btn === 4 || btn === 5) {\n                        Mx.xpos = sv.x;\n                    }\n\n\n                    /* Button !=1,2,4,5 OR NOT on scroll bar */\n                    if ((btn !== 1 && btn !== 2 && btn !== 4 && btn !== 5) ||\n                        Mx.xpos < sv.x || Mx.ypos < sv.y ||\n                        Mx.xpos > sv.x + sv.w || Mx.ypos > sv.y + sv.h) {\n                        return false;\n                    }\n                } else if (btn < 0) {\n                    /* Any button release within a repeated action will make us exit */\n                    sv.action = sv.repeat_count = 0; // TODO Update scrollbarState's action?\n                    return true;\n                }\n\n                /*  Compute s, the offset in pixels from the 'origin' of\n                 *  the scrollbar's on-screen region.\n                 */\n                if (sv.origin & 1) {\n                    s = Mx.xpos - sv.x;\n                    if (sv.origin & 2) {\n                        s = sv.w - s;\n                    }\n                } else {\n                    s = Mx.ypos - sv.y;\n                    if (sv.origin <= 2) {\n                        s = sv.h - s;\n                    }\n                }\n\n                /*  Determine action */\n                if (sv.action === 0) {\n                    /* First-time action */\n\n                    sv.repeat_count = 0; // TODO Is repeat count necessary any more?\n\n                    var scrollReal2PixOut = mx.scroll_real2pix(sv);\n                    // UPDATE SCROLLBAR STATE as well\n                    sv.s1 = scrollbarState.s1 = scrollReal2PixOut.s1;\n                    sv.sw = scrollbarState.sw = scrollReal2PixOut.sw;\n                    sv.soff = scrollbarState.soff = s - sv.s1;\n                    if (sv.trange === 0.0) {\n                        // UPDATE SCROLLBAR STATE as well\n                        sv.smin = scrollbarState.smin = sv.tmin;\n                        sv.srange = scrollbarState.srange = 0.0;\n                    } else switch (btn) {\n                        case 1:\n                            if (s > sv.a1 && s < sv.a2) { /* on scroll trough */\n                                sv.action = (sv.soff > 0) ? mx.SB_PAGEINC : mx.SB_PAGEDEC;\n                            } else { /* on arrows */\n                                sv.action = (sv.soff > 0) ? mx.SB_STEPINC : mx.SB_STEPDEC;\n                            }\n                            break;\n                        case 4:\n                            sv.action = mx.SB_WHEELUP;\n                            break;\n                        case 5:\n                            sv.action = mx.SB_WHEELDOWN;\n                            break;\n                    }\n                } else {\n                    /* We're repeating sv.action */\n                    switch (sv.action) {\n                        case mx.SB_WHEELUP:\n                        case mx.SB_WHEELDOWN:\n                        case mx.SB_EXPAND:\n                            /* we don't want to repeat these */\n                        case mx.SB_SHRINK:\n                        case mx.SB_FULL:\n                            sv.action = sv.repeat_count = 0;\n                    }\n                }\n                /* FALL THROUGH!!! */\n                /* jshint -W086 */\n            case mx.XW_COMMAND:\n                /* jshint +W086 */\n\n                smin = sv.smin;\n                srange = sv.srange;\n\n                switch (sv.action) {\n                    case mx.SB_STEPINC:\n                        smin += sv.step;\n                        break;\n                    case mx.SB_STEPDEC:\n                        smin -= sv.step;\n                        break;\n                    case mx.SB_PAGEINC:\n                        smin += sv.page;\n                        break;\n                    case mx.SB_PAGEDEC:\n                        smin -= sv.page;\n                        break;\n                    case mx.SB_FULL:\n                        smin = sv.tmin;\n                        srange = sv.trange;\n                        break;\n                    case mx.SB_EXPAND:\n                        srange = srange * sv.scale;\n                        if (smin <= 0 && smin + sv.srange >= 0) {\n                            smin *= sv.scale;\n                        } else {\n                            smin -= (srange - sv.srange) / 2.0;\n                        }\n                        break;\n                    case mx.SB_SHRINK:\n                        srange = srange / sv.scale;\n                        if (smin < 0 && smin + sv.srange >= 0) {\n                            smin += srange / sv.scale; /* Plot crosses axis */\n                        } else if (smin === 0 && smin + sv.srange >= 0) {\n                            smin = srange / sv.scale; /* Plot touches axis */\n                        } else {\n                            smin += (sv.srange - srange) / 2.0; /* Plot is completely contained on positive side of axis */\n                        }\n                        break;\n                        /* The mouse wheel needs to scroll 1 page at a time, if you want an\n\t\t           application to scroll differently, change sv.page with\n\t\t           mx_scroll_vals in the application code */\n                    case mx.SB_WHEELUP:\n                        smin -= sv.page;\n                        break;\n                    case mx.SB_WHEELDOWN:\n                        smin += sv.page;\n                        break;\n                }\n\n                if (sv.trange > 0) {\n                    smin = Math.max(sv.tmin, Math.min(smin, sv.tmin + sv.trange - srange));\n                    srange = Math.min(srange, sv.trange);\n                } else {\n                    smin = Math.min(sv.tmin, Math.max(smin, sv.tmin + sv.trange - srange));\n                    srange = Math.max(srange, sv.trange);\n                }\n\n                if (sv.smin === smin && sv.srange === srange) {\n                    if (sv.action !== mx.SB_DRAG) {\n                        sv.action = sv.repeat_count = 0;\n                    }\n                } else {\n                    // UPDATE SCROLLBAR STATE as well\n                    sv.smin = scrollbarState.smin = smin;\n                    sv.srange = scrollbarState.srange = srange;\n                    sv.repeat_count++;\n                }\n\n                if (op === mx.XW_COMMAND) {\n                    mx.scroll(Mx, sv, mx.XW_UPDATE, undefined);\n                    sv.action = 0;\n                }\n\n                break;\n            case mx.XW_DRAW:\n            case mx.XW_UPDATE:\n                mx.redrawScrollbar(sv, Mx, op);\n\n        } /* switch */\n        return true;\n    };\n\n    /**\n     * Specify location and orientation of a scrollbar\n     * @param sv\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param origin\n     * @param scrollbarState\n     */\n    //\n    // ~= mx_scroll_loc\n    //\n    mx.scroll_loc = function(sv, x, y, w, h, origin, scrollbarState) {\n        // UPDATE local scrollbar and SCROLLBAR STATE\n        if (sv === undefined) {\n            return; /* mx.SCROLLBAR */\n        }\n        sv.x = scrollbarState.x = x; // int\n        sv.y = scrollbarState.y = y; // int\n        sv.w = scrollbarState.w = w; // int\n        sv.h = scrollbarState.h = h; // int\n        sv.origin = scrollbarState.origin = Math.max(1, Math.min(4, origin)); // int\n\n        if (sv.origin & 1) {\n            sv.a2 = scrollbarState.a2 = sv.w;\n            sv.arrow = scrollbarState.arrow = Math.min(m.trunc((sv.w - m.trunc(2 * mx.GBorder)) / 3), sv.h + mx.GBorder);\n        } else {\n            sv.a2 = scrollbarState.a2 = sv.h;\n            sv.arrow = scrollbarState.arrow = Math.min(m.trunc((sv.h - m.trunc(2 * mx.GBorder)) / 3), sv.w + mx.GBorder);\n        }\n        sv.a1 = scrollbarState.a1 = sv.arrow + mx.GBorder;\n        sv.a2 -= sv.arrow + mx.GBorder;\n        scrollbarState.a2 -= sv.arrow + mx.GBorder;\n        sv.swmin = scrollbarState.swmin = Math.min(10, sv.a2 - sv.a1);\n        sv.s1 = scrollbarState.s1 = 0;\n        sv.sw = scrollbarState.sw = 0;\n        sv.action = scrollbarState.action = 0;\n    };\n\n    /**\n     * Set coordinates in scrollbar structure\n     * @param sv\n     * @param smin\n     * @param srange\n     * @param tmin\n     * @param trange\n     * @param step\n     * @param page\n     * @param scale\n     * @param scrollbarState\n     */\n    //\n    // ~= mx_scroll_vals\n    //\n    mx.scroll_vals = function(sv, smin, srange, tmin, trange, step, page, scale, scrollbarState) {\n        // UPDATE SCROLLBAR STATE as well\n        if (sv === undefined) {\n            return; /* an mx.SCROLLBAR */\n        }\n        sv.smin = scrollbarState.smin = smin;\n        sv.srange = scrollbarState.srange = srange;\n        sv.tmin = scrollbarState.tmin = tmin;\n        sv.trange = scrollbarState.trange = trange;\n        sv.step = scrollbarState.step = step;\n        sv.page = scrollbarState.page = page;\n        sv.scale = scrollbarState.scale = Math.max(scale, 1.0);\n    };\n\n    /**\n     * Draw single symbol centered at pixel (x,y)\n     * @param Mx\n     * @param ic\n     * @param x\n     * @param y\n     * @param symbol\n     * @param rr\n     */\n    //\n    // ~= MX$DRAW_SYMBOL\n    //\n    mx.draw_symbol = function(Mx, ic, x, y, symbol, rr, n) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        var r = 0; // int\n        var d = 0; // int\n        var d2 = 0; // int\n        var rmode = false; // bool\n        var fill = false; // bool\n        var tri = []; // XPoint array of size 4\n        for (var cnt = 0; cnt < 4; cnt++) { // initializing 4 points in the array\n            tri[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n        var c = ''; // char\n\n        fill = rr < 0;\n        r = Math.abs(rr);\n        d = r * 2;\n\n        // Set the foreground color\n        ctx.fillStyle = ic;\n        ctx.strokeStyle = ic;\n\n        if (typeof symbol === \"function\") {\n            symbol(ctx, n, x, y);\n        } else {\n            switch (symbol) {\n                case mx.L_CircleSymbol:\n                    ctx.beginPath();\n                    if (fill) {\n                        ctx.arc(x, y, r, 0, 360); // draw arc\n                        ctx.fill(); // fill in the area of the arc\n                    } else {\n                        ctx.arc(x, y, r, 0, 360);\n                        ctx.stroke(); // just draw the arc's outline\n                    }\n                    break;\n                case mx.L_SquareSymbol:\n                    if (fill) {\n                        fill_rectangle(ctx, x - r, y - r, d, d);\n                    } else {\n                        draw_rectangle(ctx, x - r, y - r, d, d);\n                    }\n                    break;\n                case mx.L_PixelSymbol:\n                    d = 1; // d = 2*GMaxLines; // TODO Do we care about a maximum number of lines?\n                    // No native way to draw just a pixel - so use a circle instead\n                    ctx.beginPath();\n                    ctx.arc(x, y, 1, 0, 2 * Math.PI, true);\n                    ctx.fill();\n                    break;\n                case mx.L_ITriangleSymbol:\n                    r = -r; // TODO Refactor without switch fall-through?\n                    /* jshint -W086 */\n                case mx.L_TriangleSymbol:\n                    /* jshint +W086 */\n                    d = m.trunc(r * 1.5);\n                    d2 = m.trunc(r * 0.80);\n\n                    // Coordinates of just the triangle itself\n                    tri[1].x = -d2;\n                    tri[1].y = d;\n                    tri[2].x = d2 * 2;\n                    tri[2].y = 0;\n                    tri[3].x = -d2;\n                    tri[3].y = -d;\n\n                    var tempTri = []; // XPoint array of size 4\n                    for (var cnt = 0; cnt < 4; cnt++) { // initializing 4 points in the array\n                        tempTri[cnt] = {\n                            x: 0,\n                            y: 0\n                        };\n                    }\n\n                    if (fill) {\n                        tempTri[0].x = x;\n                        tempTri[0].y = y - r;\n\n                        // Replacement for CoordModePrevious offset (updating coordinates to be relative to origin, instead of previous pt)\n                        tempTri[1].x = tempTri[0].x + tri[1].x;\n                        tempTri[1].y = tempTri[0].y + tri[1].y;\n                        tempTri[2].x = tempTri[1].x + tri[2].x;\n                        tempTri[2].y = tempTri[1].y + tri[2].y;\n                        tempTri[3].x = tempTri[2].x + tri[3].x;\n                        tempTri[3].y = tempTri[2].y + tri[3].y;\n\n                        fill_poly(ctx, tempTri);\n                    } else {\n                        tempTri[0].x = x;\n                        tempTri[0].y = y - r;\n\n                        // Replacement for CoordModePrevious offset (updating coordinates to be relative to origin, instead of previous pt)\n                        tempTri[1].x = tempTri[0].x + tri[1].x;\n                        tempTri[1].y = tempTri[0].y + tri[1].y;\n                        tempTri[2].x = tempTri[1].x + tri[2].x;\n                        tempTri[2].y = tempTri[1].y + tri[2].y;\n                        tempTri[3].x = tempTri[2].x + tri[3].x;\n                        tempTri[3].y = tempTri[2].y + tri[3].y;\n\n                        draw_poly(ctx, tempTri);\n                    }\n                    break;\n                case mx.L_PlusSymbol:\n                    draw_line(ctx, x, y + r, x, y - r);\n                    draw_line(ctx, x + r, y, x - r, y);\n                    break;\n                case mx.L_HLineSymbol:\n                    draw_line(ctx, x + r, y, x - r, y);\n                    break;\n                case mx.L_VLineSymbol:\n                    draw_line(ctx, x, y + r, x, y - r);\n                    break;\n                case mx.L_XSymbol:\n                    draw_line(ctx, x - r, y - r, x + r, y + r);\n                    draw_line(ctx, x + r, y - r, x - r, y + r);\n                    break;\n                default:\n                    c = symbol;\n                    r = m.trunc(Mx.text_w / 2); //tbd\n                    if (fill && !rmode) {\n                        ctx.fillText(c.substring(0, 2), x - r, y + r); // TODO Does this cover it? Do we need to also fill in a rectangle behind\n                    }\n                    break;\n            } // end switch (symbol)\n        }\n    };\n\n    /**\n     * Plot symbols at centers defined by an array of pixels\n     * @param Mx\n     * @param ic\n     * @param pixx\n     * @param pixy\n     * @param npix\n     * @param symbol\n     * @param rr\n     * @private\n     */\n    //\n    // ~= MX$DRAW_SYMBOLS\n    //\n    mx.draw_symbols = function(Mx, ic, pixx, pixy, npix, symbol, rr, istart) {\n        for (var i = 0; i < npix; i++) {\n            mx.draw_symbol(Mx, ic, pixx[i], pixy[i], symbol, rr, i + istart);\n        }\n    };\n\n    /* http://geomalgorithms.com/a01-_area.html\n     *   > 0 left\n     *   = 0 on\n     *   < 0 right\n     */\n    /**\n     * Test if a point is Left|On|Right of an infinite 2D line.\n     * @method isLeft\n     * @param p_x Point's x-coordinate\n     * @param p_y Point's y-coordinate\n     * @param e_x1 Lines's x1-coordinate\n     * @param e_y1 Lines's y1-coordinate\n     * @param e_x2 Lines's x2-coordinate\n     * @param e_y2 Lines's y2-coordinate\n     * @private\n     */\n    function isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) {\n        return ((e_x1 - p_x) * (e_y2 - p_y) - (e_x2 - p_x) * (e_y1 - p_y));\n    }\n\n    /**\n     * @method update_winding_number\n     * @param wn\n     * @param p_x\n     * @param p_y\n     * @param e_x1\n     * @param e_y1\n     * @param e_x2\n     * @param e_y2\n     * @private\n     */\n    function update_winding_number(wn, p_x, p_y, e_x1, e_y1, e_x2, e_y2) {\n        if (e_y1 <= p_y) { // start y <= P.y\n            if (e_y2 > p_y) { // an upward crossing\n                if (isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) > 0) {\n                    wn += 1;\n                }\n            }\n        } else { // start y > P.y (no test needed)\n            if (e_y2 <= p_y) { // a downward crossing\n                if (isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) < 0) {\n                    wn -= 1;\n                }\n            }\n        }\n        return wn;\n    }\n\n    /**\n     * Converts array of (x,y) coordinates to pixel coordinates, plots lines or dots\n     * @param Mx\n     * @param color\n     * @param xpoint\n     * @param ypoint\n     * @param npts\n     * @param skip\n     * @param line\n     * @param symb\n     * @param rad\n     * @param options\n     */\n    //\n    // ~= MX$TRACE\n    //\n    mx.trace = function(Mx, color, xpoint, ypoint, npts, istart, skip, line, symb, rad, options) {\n        if ((xpoint === undefined) || (ypoint === undefined)) {\n            throw \"mx.trace requires xpoint and ypoint\";\n        }\n\n        if (skip === undefined) {\n            skip = 1;\n        }\n\n        if (line === undefined) {\n            line = 1;\n        }\n\n        if (symb === undefined) {\n            symb = 0;\n        }\n\n        if (rad === undefined) {\n            rad = 0;\n        }\n\n        if (options === undefined) {\n            options = {};\n        }\n\n        if (npts <= 0) {\n            m.log.warn(\"No points to draw\");\n            return;\n        }\n\n        if ((line === 0) && (symb === 0)) {\n            m.log.warn(\"No line or symbol to draw\");\n            return;\n        }\n\n        var style;\n        if (options.dashed) {\n            style = {\n                mode: \"dashed\",\n                on: 4,\n                off: 4\n            };\n        }\n\n        var stk4 = mx.origin(Mx.origin, 4, Mx.stk[Mx.level]);\n        if ((stk4.xscl === 0.0) || (stk4.yscl === 0.0)) {\n            // the min and max are the same\n            return;\n        }\n\n        var left = stk4.x1;\n        var top = stk4.y1;\n\n        var xxmin = stk4.xmin;\n        var xscl = 1.0 / stk4.xscl;\n\n        var yymin = stk4.ymin;\n        var yscl = 1.0 / stk4.yscl;\n\n        if (!options.noclip) {\n            mx.clip(Mx, left, top, stk4.x2 - left + 1, stk4.y2 - top + 1);\n        }\n\n        var dx = Math.abs(stk4.xmax - stk4.xmin);\n        var dy = Math.abs(stk4.ymax - stk4.ymin);\n        var xmin = Math.min(stk4.xmin, stk4.xmax);\n        var ymin = Math.min(stk4.ymin, stk4.ymax);\n        var xmax = xmin + dx;\n        var ymax = ymin + dy;\n        //dx = dx * 0.5;\n        //if ((line == -1) || (line == 1)) {\n        //\tdy = dy * 10.0;\n        //} else {\n        //\tdy = dy * 0.5;\n        //}\n        //xmin = xmin - dx;\n        //ymin = ymin - dy;\n        //xmax = xmax + dx;\n        //ymax = ymax + dy;\n        // These buffers need to be able to hold 2 times the number of points.\n        // if all points are on screen, then we will will need 'n' points\n        // if all points are off the screen, then we will need (2*n)-2\n        var bufsize = 4 * Math.ceil(2 * xpoint.length);\n        var pixx = new Int32Array(new ArrayBuffer(bufsize));\n        var pixy = new Int32Array(new ArrayBuffer(bufsize));\n\n        var ib = 0;\n        if ((line === 0) && (symb !== 0)) {\n            for (var n = (skip - 1); n < npts; n += skip) {\n                var x = xpoint[n];\n                var y = ypoint[n];\n                var lvisible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));\n                if (lvisible) {\n                    pixx[0] = Math.round((x - xxmin) * xscl) + left;\n                    pixy[0] = Math.round((y - yymin) * yscl) + top;\n                    mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);\n                }\n            }\n        }\n        if (options.vertsym === true) {\n            for (var n = (skip - 1); n < npts; n += skip) {\n                var x = xpoint[n];\n                var y = ypoint[n];\n                if ((x >= xmin) && (x <= xmax)) {\n                    var i = Math.round((x - xxmin) * xscl) + left;\n                    mx.draw_line(Mx, color, i, 0, i, Mx.height);\n                    if ((y >= ymin) && (y <= ymax)) {\n                        pixx[0] = i;\n                        pixy[0] = Math.round((y - yymin) * yscl) + top;\n                        mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);\n                    }\n                }\n            }\n        }\n        if (options.horzsym === true) {\n            for (var n = (skip - 1); n < npts; n += skip) {\n                var x = xpoint[n];\n                var y = ypoint[n];\n                if ((y >= ymin) && (y <= ymax)) {\n                    var i = Math.round((y - yymin) * yscl) + top;\n                    mx.draw_line(Mx, color, 0, i, Mx.width, i);\n                    if ((x >= xmin) && (x <= xmax)) {\n                        pixx[0] = Math.round((x - xxmin) * xscl) + left;\n                        pixy[0] = i;\n                        mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);\n                    }\n                }\n            }\n        } else if (line !== 0) {\n            var colors;\n            if ((options) && (options.highlight)) {\n                colors = [];\n                for (var sn = 0; sn < options.highlight.length; sn++) {\n                    if (options.highlight[sn].xstart >= xmax) {\n                        continue;\n                    }\n                    if (options.highlight[sn].xend <= xmin) {\n                        continue;\n                    }\n\n                    var xs = Math.max(options.highlight[sn].xstart, xmin);\n                    var xe = Math.min(options.highlight[sn].xend, xmax);\n\n                    if (xs < xe) {\n                        var rxs = Math.round((xs - xxmin) * xscl) + left;\n                        var rxe = Math.round((xe - xxmin) * xscl) + left;\n\n                        for (var cn = colors.length - 1; cn >= 0; cn--) {\n                            // This highlight overlaps the entire range of a previous\n                            // highlight...we can thus remove the color\n                            if ((rxs <= colors[cn].start) && (rxe >= colors[cn].end)) {\n                                colors.splice(cn, 1);\n                                continue;\n                            }\n                            // This highlight splits a previous highlight...we need\n                            // to create a new color range\n                            else if ((rxs >= colors[cn].start) && (rxe <= colors[cn].end)) {\n                                colors.push({\n                                    start: rxe,\n                                    end: colors[cn].end,\n                                    color: colors[cn].color\n                                });\n                                colors[cn].end = rxs;\n\n                            }\n                            // This highlight overlaps partially\n                            else if ((rxs <= colors[cn].start) && (rxe >= colors[cn].start)) {\n                                colors[cn].start = rxe;\n                            } else if ((rxs <= colors[cn].end) && (rxe >= colors[cn].end)) {\n                                colors[cn].end = rxs;\n                            }\n\n                            // See if this colors is still valid\n                            if (colors[cn].end <= colors[cn].start) {\n                                colors.splice(cn, 1);\n                            }\n                        }\n\n                        colors.push({\n                            start: rxs,\n                            end: rxe,\n                            color: options.highlight[sn].color\n                        });\n                    }\n                }\n\n                // The first color is the start of the plot\n                // in the base-line color\n                colors.push({\n                    start: left,\n                    color: color\n                });\n\n                colors.sort(function(a, b) {\n                    return a.start - b.start;\n                });\n\n            } else {\n                colors = color;\n            }\n\n            var wn = 0; // the winding number counter http://geomalgorithms.com/a03-_inclusion.html\n            var mid_x = (Mx.stk[Mx.level].xmax + Mx.stk[Mx.level].xmin) / 2.0;\n            var mid_y = (Mx.stk[Mx.level].ymax + Mx.stk[Mx.level].ymin) / 2.0;\n\n            var x = xpoint[0];\n            var y = ypoint[0];\n\n            wn = update_winding_number(wn, mid_x, mid_y, Mx.stk[Mx.level].xmin, Mx.stk[Mx.level].ymin, x, y);\n\n            var lvisible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));\n            // The first point is visible\n            if (lvisible) {\n                pixx[ib] = Math.round((x - xxmin) * xscl) + left;\n                pixy[ib] = Math.round((y - yymin) * yscl) + top;\n                ib += 1;\n                if (symb !== 0) {\n                    mx.draw_symbols(Mx, color, pixx, pixy, 1, symb, rad, istart);\n                }\n            } else {\n                ib = 0;\n            }\n\n            var ie = 0;\n            var visible = false;\n            for (var n = skip; n <= (skip * (npts - 1)); n += skip) {\n\n                var lx = x;\n                var ly = y;\n                x = xpoint[n];\n                y = ypoint[n];\n\n                wn = update_winding_number(wn, mid_x, mid_y, lx, ly, x, y);\n\n                visible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));\n                if ((lvisible) && (visible)) {\n                    // both the left point and right point are visible, so we can draw the trace\n                    pixx[ib] = Math.round((x - xxmin) * xscl) + left;\n                    pixy[ib] = Math.round((y - yymin) * yscl) + top;\n                    ib += 1;\n                } else {\n                    // clipping necessary, either the left or right point are not visible\n                    lvisible = visible;\n                    // calculate the difference between the last point and this point\n                    dx = lx - x;\n                    dy = ly - y;\n                    if ((dx !== 0.0) || (dy !== 0.0)) {\n                        var o = {\n                            tL: 1.0,\n                            tE: 0.0\n                        };\n                        // Between the last point and the current point,\n                        // determine the ratio of the x and y porionts\n                        // that intersects the border.  If clipt returns\n                        // false then no portion of the line between the two\n                        // points is visible\n                        if (clipt(dx, xmin - x, o)) {\n                            if (clipt(-dx, x - xmax, o)) {\n                                if (clipt(dy, ymin - y, o)) {\n                                    if (clipt(-dy, y - ymax, o)) {\n                                        // If this point is starting the on-screen portion, start the line\n                                        if (o.tL < 1) {\n                                            pixx[ib] = Math.round((x - xxmin + o.tL * dx) * xscl) + left;\n                                            pixy[ib] = Math.round((y - yymin + o.tL * dy) * yscl) + top;\n                                            ib += 1;\n                                        }\n\n                                        // If this point is ending the on-screen portion draw the line\n                                        if (o.tE > 0) {\n                                            pixx[ib] = Math.round((x - xxmin + o.tE * dx) * xscl) + left;\n                                            pixy[ib] = Math.round((y - yymin + o.tE * dy) * yscl) + top;\n                                            ib += 1;\n                                            mx.draw_lines(Mx, colors, pixx.subarray(ie, ib), pixy.subarray(ie, ib), (ib - ie), line, style);\n\n                                            if (symb !== 0 && (ib - ie) > 2) {\n                                                mx.draw_symbols(Mx,\n                                                    color,\n                                                    pixx.subarray(ie + 1, ib - 1),\n                                                    pixy.subarray(ie + 1, ib - 1), (ib - ie - 2),\n                                                    symb,\n                                                    rad,\n                                                    istart + n - (ib - ie - 2));\n                                            }\n                                            ie = ib;\n                                        } else {\n                                            // otherwise add it to the line to be drawn\n                                            pixx[ib] = Math.round((x - xxmin) * xscl) + left;\n                                            pixy[ib] = Math.round((y - yymin) * yscl) + top;\n                                            ib += 1;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            wn = update_winding_number(wn, mid_x, mid_y, x, y, Mx.stk[Mx.level].xmax, Mx.stk[Mx.level].ymin);\n            wn = update_winding_number(wn, mid_x, mid_y, Mx.stk[Mx.level].xmax, Mx.stk[Mx.level].ymin, Mx.stk[Mx.level].xmin, Mx.stk[Mx.level].ymin);\n            if ((ib - ie) > 0) {\n                mx.draw_lines(Mx, colors, pixx.subarray(ie, ib), pixy.subarray(ie, ib), (ib - ie), line, style);\n                if (visible) {\n                    ie = ie + 1;\n                }\n                if (symb !== 0 && (ib - ie) > 1) {\n                    // TODO ib - 1 is used below because\n                    // otherwise the last point has undefined\n                    // for it's x/y coordinates...but this may\n                    // be a bug because it may neglect drawing\n                    // the last data point\n                    mx.draw_symbols(Mx,\n                        color,\n                        pixx.subarray(ie - 1, ib),\n                        pixy.subarray(ie - 1, ib),\n                        ib - ie - 1,\n                        symb,\n                        rad,\n                        n - ib + istart);\n                }\n            }\n\n            if (options.fillStyle && !Mx.fillMin && !Mx.fillMax) {\n                if ((ib > 1) || (wn !== 0)) {\n                    // if we have at least one point\n                    // or the entire plot area is in the fill zone\n                    mx.fill_trace(Mx, options.fillStyle, pixx, pixy, ib);\n                }\n            }\n\n            if (options.highlight) {\n                for (var i = 0; i < options.highlight.length; i++) {\n                    var highlight = options.highlight[i];\n                    if (!highlight.fill) {\n                        continue;\n                    }\n\n                    var x_start = highlight.xstart;\n                    var x_end = highlight.xend;\n\n                    console.log(\"x start \", x_start);\n                    console.log(\"x end \", x_end);\n\n                    if (x_start >= Mx.stk[Mx.level].xmax) {\n                        continue;\n                    }\n                    if (x_end <= Mx.stk[Mx.level].xmin) {\n                        continue;\n                    }\n\n                    if ((ib > 1) || (wn !== 0)) {\n\n                        var xstart_pixel_value = mx.real_to_pixel(Mx, x_start, 0);\n                        var xend_pixel_value = mx.real_to_pixel(Mx, x_end, 0);\n\n                        var pi_start = xstart_pixel_value.x;\n                        var pi_end = xend_pixel_value.x;\n                        //console.log('start: ', pi_start, 'end: ', pi_end);\n                        var pixx_new = [];\n                        var pixy_new = [];\n                        for (var q = 0; q < ib; q++) {\n                            var this_point = pixx[q];\n                            var this_point_y = pixy[q];\n                            //console.log(this_point);\n                            if (in_fill_range(this_point, pi_start, pi_end) === true) {\n                                //console.log('in range: ', this_point);\n                                pixx_new.push(this_point);\n                                pixy_new.push(this_point_y);\n\n                            }\n                        }\n\n                        if ((pixx_new.length > 0) || (wn !== 0)) {\n                            pi_start = Math.max(pi_start, pixx_new[0]);\n                            pi_end = Math.min(pi_end, pixx_new[pixx_new.length - 1]);\n                            mx.fill_trace(Mx, highlight.fill, pixx_new, pixy_new, pixx_new.length, pi_start, pi_end);\n                        }\n                    }\n\n                }\n            }\n\n\n        }\n\n        if (!options.noclip) {\n            mx.clip(Mx, 0, 0, 0, 0);\n        }\n    };\n\n    /**\n     * Set dashed or solid lines mode.\n     * @param Mx\n     * @param linewidth\n     * @param style\n     */\n    //\n    // ~= MX$DRAW_MODE\n    //\n    mx.draw_mode = function(Mx, linewidth, style) {\n        Mx.linewidth = (linewidth === undefined) ? 1 : linewidth;\n        Mx.style = style;\n    };\n\n    /**\n     * @param Mx\n     * @param color\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     * @param linewidth\n     * @param style\n     */\n    //\n    // ~= MX$DRAW_LINES\n    //\n    mx.draw_line = function(Mx, color, x1, y1, x2, y2, linewidth, style) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (linewidth === undefined) {\n            linewidth = Mx.linewidth;\n        }\n        if (style === undefined) {\n            style = Mx.style;\n        }\n        // Look up the color in Mx.pixels\n        if (typeof color === \"number\") {\n            if (!Mx.pixel) {\n                m.log.warn(\"COLORMAP not initialized, defaulting to foreground\");\n                color = Mx.fg;\n            } else {\n                if (isNaN(color)) {\n                    color = 0;\n                }\n                var cidx = Math.max(0, Math.min(Mx.pixel.map.length, color));\n                color = Mx.pixel.getColor(color);\n                color = to_rgb(\n                    color.red,\n                    color.green,\n                    color.blue);\n            }\n        }\n        draw_line(ctx, x1, y1, x2, y2, style, color, linewidth);\n    };\n\n    /**\n     * @param Mx\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     */\n    //\n    // ~= MX$RUBBERLINE\n    //\n    mx.rubberline = function(Mx, x1, y1, x2, y2) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        draw_line(ctx, x1, y1, x2, y2, {\n            mode: \"xor\"\n        }, \"white\", 1);\n    };\n\n    /**\n     * @param Mx\n     * @param fillStyle\n     * @param pixx\n     * @param pixy\n     * @param npts\n     * @private\n     */\n    mx.fill_trace = function(Mx, fillStyle, pixx, pixy, npts, l, r) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (Array.isArray(fillStyle)) {\n            ctx.fillStyle = mx.linear_gradient(Mx, 0, 0, 0, Mx.b - Mx.t, fillStyle);\n        } else {\n            ctx.fillStyle = fillStyle;\n        }\n\n        if (npts < 1) {\n            ctx.fillRect(Mx.l, Mx.t, (Mx.r - Mx.l), (Mx.b - Mx.t));\n            return;\n        }\n\n        if (l === undefined) {\n            l = Mx.l;\n        }\n        if (r === undefined) {\n            r = Mx.r;\n        }\n\n        if (fillStyle) {\n            var x = pixx[0];\n            var y = pixy[0];\n\n            ctx.beginPath();\n            if (y === Mx.t) {\n                ctx.lineTo(l, Mx.t);\n            } else {\n                ctx.lineTo(l, Mx.b);\n            }\n\n\n            ctx.lineTo(x, y);\n\n\n\n            for (var i = 1; i < npts; i++) {\n                x = pixx[i];\n                y = pixy[i];\n                ctx.lineTo(x, y);\n            }\n\n            if (y === Mx.t) {\n                ctx.lineTo(r, Mx.t);\n            }\n            ctx.lineTo(r, Mx.b);\n            if (pixy[0] === Mx.t) {\n                ctx.lineTo(l, Mx.b);\n            }\n\n            ctx.closePath();\n            ctx.fill(\"evenodd\");\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param colors\n     * @param pixx\n     * @param pixy\n     * @param npts\n     * @param linewidth\n     * @param style\n     */\n    //\n    // ~= MX$DRAW_LINES\n    //\n    mx.draw_lines = function(Mx, colors, pixx, pixy, npts, linewidth, style) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (npts < 1) {\n            return;\n        }\n\n        var x = pixx[0];\n        var y = pixy[0];\n\n        if (linewidth === undefined) {\n            linewidth = Mx.linewidth;\n        }\n        if (style === undefined) {\n            style = Mx.style;\n        }\n\n        if ((style) && (style.mode === \"dashed\")) {\n            var dash_supported = common.dashOn(ctx, style.on, style.off);\n            if (!dash_supported) {\n                m.log.warn(\"WARNING: Dashed lines aren't supported on your browser\");\n            }\n        }\n\n        ctx.lineWidth = linewidth;\n        var current_color = 0;\n\n        if (typeof colors === \"string\") {\n            colors = [{\n                start: 0,\n                color: colors\n            }];\n        } else if (!(colors instanceof Array)) {\n            if (colors.start === undefined) {\n                colors.start = 0;\n            }\n            colors = [colors];\n        }\n\n        var n;\n        for (n = (colors.length - 1); n >= 0; n--) {\n            if ((colors[n].end != null) && (colors[n].end < x)) {\n                colors.splice(n, 1);\n            }\n        }\n\n        // Find the first valid color (expects colors to be sorted)\n        for (n = 0; n < colors.length; n++) {\n            if (colors[n].start < x) {\n                current_color = n;\n            }\n        }\n\n        ctx.strokeStyle = colors[current_color].color;\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n\n        for (var i = 0; i < npts; i++) {\n            if ((x === pixx[i]) && (y === pixy[i])) {\n                continue;\n            }\n            x = pixx[i];\n            y = pixy[i];\n\n            var newcolor = false;\n            if ((current_color > 0) && (colors[current_color].end != null) && (colors[current_color].end < x)) {\n                newcolor = true;\n                while ((colors[current_color].end != null) && (colors[current_color].end < x)) {\n                    colors.splice(current_color, 1);\n                    current_color -= 1;\n                    if (current_color === 0) {\n                        break;\n                    }\n                }\n            }\n\n            if (((current_color + 1) < colors.length) && (colors[current_color + 1].start <= x)) {\n                newcolor = true;\n                while (((current_color + 1) < colors.length) && (colors[current_color + 1].start <= x)) {\n                    current_color++;\n                }\n            }\n\n            ctx.lineTo(x, y);\n            if (newcolor) {\n                ctx.stroke();\n                ctx.strokeStyle = colors[current_color].color;\n                ctx.beginPath();\n                ctx.lineTo(x, y);\n            }\n        }\n        ctx.stroke();\n        common.dashOff(ctx);\n        ctx.beginPath();\n    };\n\n    /**\n     * @param Mx\n     * @param left\n     * @param top\n     * @param width\n     * @param height\n     */\n    //\n    // ~= MX$CLIP\n    //\n    mx.clip = function(Mx, left, top, width, height) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if ((left === 0) && (top === 0) && (width === 0) && (height === 0)) {\n            ctx.restore();\n            return;\n        }\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(left, top, width, height);\n        ctx.clip();\n    };\n\n    /**\n     * @param Mx\n     */\n    //\n    // ~= MX$CLEAR_WINDOW\n    //\n    mx.clear_window = function(Mx) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        ctx.fillStyle = Mx.bg;\n        ctx.fillRect(0, 0, Mx.width, Mx.height);\n    };\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.erase_window = function(Mx) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        ctx.clearRect(0, 0, Mx.width, Mx.height);\n    };\n\n    /**\n     * @param Mx\n     * @param func\n     * @param mode\n     * @param def_style\n     * @param alt_style\n     */\n    //\n    // ~= MX$RUBBERBOX\n    // Unlike MX$RUBBERBOX, this is a non-blocking call.  As such the 'func' is a callback for then the rubberbox is finished.\n    //\n    // When CTRL is pressed, alt_style is used\n    //\n    mx.rubberbox = function(Mx, func, mode, def_style, alt_style) {\n        mx.warpbox(Mx, Mx.xpos, Mx.ypos, Mx.xpos, Mx.ypos, 0, Mx.width, 0, Mx.height, func, mode, def_style, alt_style);\n    };\n\n    /**\n     * @param Mx\n     * @param xo\n     * @param yo\n     * @param xl\n     * @param yl\n     * @param xmin\n     * @param xmax\n     * @param ymin\n     * @param ymax\n     * @param func\n     * @param mode\n     * @param def_style\n     * @param alt_style\n     */\n    //\n    // ~= MX$WARPBOX\n    // Unlike MX$WARPBOX, this is a non-blocking call.   As such the 'func' is a callback for then the rubberbox is finished.\n    //\n    mx.warpbox = function(Mx, xo, yo, xl, yl, xmin, xmax, ymin, ymax, func, mode, def_style, alt_style) {\n        if (!def_style) {\n            def_style = {};\n        }\n\n        Mx.warpbox = new WARPBOX();\n        Mx.warpbox.xo = xo;\n        Mx.warpbox.yo = yo;\n        Mx.warpbox.xl = xl;\n        Mx.warpbox.yl = yl;\n        Mx.warpbox.xmin = xmin;\n        Mx.warpbox.xmax = xmax;\n        Mx.warpbox.ymin = ymin;\n        Mx.warpbox.ymax = ymax;\n        Mx.warpbox.func = func;\n        Mx.warpbox.mode = mode;\n\n        Mx.warpbox.style = def_style;\n        Mx.warpbox.def_style = def_style;\n        Mx.warpbox.alt_style = alt_style;\n    };\n\n    /**\n     * @param inorigin\n     * @param outorigin\n     * @param instk\n     */\n    //\n    // ~= M$ORIGIN\n    //\n    mx.origin = function(inorigin, outorigin, instk) {\n        inorigin = Math.max(1, inorigin);\n        outorigin = Math.max(1, outorigin);\n\n        var outstk = new mx.STKSTRUCT();\n\n        outstk.xmin = instk.xmin;\n        outstk.xmax = instk.xmax;\n        outstk.ymin = instk.ymin;\n        outstk.ymax = instk.ymax;\n        outstk.xscl = instk.xscl;\n        outstk.yscl = instk.yscl;\n        outstk.x1 = instk.x1;\n        outstk.y1 = instk.y1;\n        outstk.x2 = instk.x2;\n        outstk.y2 = instk.y2;\n\n        if (inorigin !== outorigin) {\n            var diff = Math.abs(outorigin - inorigin); // used to simplify boolean logic\n            var sum = outorigin + inorigin;\n            if (diff === 2 || sum !== 5) { // (1<->3) (2<->4) (1<->2) (3<->4)\n                outstk.xmin = instk.xmax;\n                outstk.xmax = instk.xmin;\n                outstk.xscl = -instk.xscl;\n            }\n            if (diff === 2 || sum === 5) { // (1<->3) (2<->4) (1<->4) (2<->3)\n                outstk.ymin = instk.ymax;\n                outstk.ymax = instk.ymin;\n                outstk.yscl = -instk.yscl;\n            }\n        }\n        return outstk;\n    };\n\n    /**\n     * @param end1\n     * @param end2\n     */\n    //\n    // ~= MX$MULT\n    //\n    mx.mult = function(end1, end2) {\n        var absmax = Math.max(Math.abs(end1), Math.abs(end2));\n        if (absmax === 0) {\n            return 1.0;\n        }\n        var kengr = 0.1447648 * Math.log(absmax);\n        kengr = kengr | kengr; // Math.floor always rounds down, so -3.3 becomes -4 use this bitwise hack instead\n        if (absmax < 1.0) {\n            kengr = kengr - 1;\n        }\n        if (kengr < 0) {\n            return 1.0 / Math.pow(10, (-3 * kengr));\n        } else {\n            return Math.pow(10, (3 * kengr));\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param event\n     * @private\n     */\n    //\n    // event may be undefined or null\n    mx.widget_callback = function(Mx, event) {\n        if (Mx.prompt) {\n            if (event.which === 3) {\n                Mx.prompt.input.onsubmit();\n            }\n        }\n\n        if (Mx.widget) {\n            Mx.widget.callback(event);\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param promptText\n     * @param isValid\n     * @param onSuccess\n     * @param refresh\n     * @param inputValue\n     * @param xpos\n     * @param ypos\n     * @param errorTimeout\n     */\n    //\n    // ~= MX$DPROMPT - only higher-level\n    mx.prompt = function(Mx, promptText, isValid, onSuccess, refresh, inputValue, xpos, ypos, errorTimeout) {\n        if (inputValue !== undefined) {\n            var inputValid = isValid(inputValue);\n\n            if (!inputValid.valid) {\n                throw \"Prompt default input value not valid due to '\" + inputValid.reason + \"'\";\n            }\n        }\n\n        // TODO Validation - make sure promptText is not too long and isn't multi-line...\n        mx.onWidgetLayer(Mx, function() {\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            var maxNumChars = 30;\n\n            // Construct the input box\n            var pxIndex = ctx.font.indexOf('px');\n            var fontIndex = pxIndex + 3;\n            var fontSize = ctx.font.substr(0, pxIndex);\n            var fontFamily = ctx.font.substr(fontIndex, ctx.font.length).toString();\n\n            /* TODO Note: There is a scrolling bug - you can scroll to the right, but not the left of the value\n\t\t\tAnd... when truncating the width of an input field - it shows the value as though truncated\n\t\t\tfrom the right (say if its cut off by 1 and that one happened to be a negative sign, the value\n\t\t\twould look like a positive) .\n\t\t\t */\n            var canvasInput = new CanvasInput({\n                height: Mx.text_h,\n                fontFamily: fontFamily,\n                /* jshint -W053 */\n                fontSize: new Number(fontSize),\n                /* jshint +W053 */\n                backgroundColor: Mx.bg,\n                fontColor: Mx.fg,\n                borderWidth: 0,\n                borderRadius: 0,\n                padding: 0,\n                boxShadow: \"none\",\n                innerShadow: \"none\",\n                width: Mx.text_w * maxNumChars,\n                value: (inputValue !== undefined ? inputValue.toString() : \"\"),\n                disableBlur: true,\n                renderOnReturn: false,\n                tabToClear: true\n            });\n\n            var subHandlerCreator = function(messageX, messageY) {\n                return function() {\n                    var newValue = this.value();\n\n                    var inputValid = isValid(newValue);\n\n                    if (!inputValid.valid) {\n                        mx.message(Mx, \"Value: '\" + newValue + \"' isn't valid due to '\" + inputValid.reason + \"' - RETRY\", undefined, messageX, messageY);\n\n                        // Clear error message\n                        setTimeout(function() {\n                            mx.onWidgetLayer(Mx, function() {\n                                mx.erase_window(Mx);\n                            });\n                            Mx.widget = null;\n                            //refresh();\n                        }, errorTimeout != null ? errorTimeout : 4000);\n                    } else {\n                        Mx.prompt = undefined; // clear state variable\n\n                        // Kill CanvasInput\n                        this.cleanup();\n                        mx.onWidgetLayer(Mx, function() {\n                            mx.erase_window(Mx);\n                        });\n\n                        onSuccess(newValue);\n                    }\n                };\n            };\n\n            // Create redraw method\n            var redrawPromptCreator = function(Mx, input, promptText) {\n                return function(xpos, ypos) {\n                    mx.onWidgetLayer(Mx, function() {\n                        var GBorder = 3;\n\n                        // Calculate the position variables\n\n                        var xssPrompt = (promptText.length + 2) * Mx.text_w;\n                        var xss = xssPrompt + (maxNumChars + 1) * Mx.text_w;\n                        var yss = 2 * Mx.text_h;\n\n                        var xs = xss + 2 * GBorder;\n                        var ys = yss + 2 * GBorder;\n                        if (!xpos) {\n                            xpos = Mx.xpos;\n                        }\n                        if (!ypos) {\n                            ypos = Mx.ypos;\n                        }\n                        var xc = Math.max(0, Math.min(xpos, Mx.width - xs));\n                        var yc = Math.max(0, Math.min(ypos, Mx.height - ys));\n                        var xcc = xc + GBorder;\n                        var ycc = yc + GBorder;\n\n                        var yPos = ycc + Mx.text_h * 1.5;\n                        var inputXPos = xcc + Mx.text_w;\n\n                        // Draw the box and label text\n                        mx.widgetbox(Mx, xc, yc, xs, ys, xcc, ycc, 0, \"\");\n                        mx.text(Mx, inputXPos, yPos, promptText);\n\n                        var inputYPos = yPos - Mx.text_h * 1.15;\n\n                        // Redraw the input at the new location\n                        input.x(xcc + Mx.text_w + xssPrompt - Mx.text_w);\n                        input.y(inputYPos);\n\n                        input.onsubmit(subHandlerCreator(xc, inputYPos - 75)); // TODO Refactor positioning based on char length of reason code...\n                        if (!input.canvas()) {\n                            input.canvas(Mx.active_canvas);\n                        } else {\n                            input.render();\n                        }\n                    });\n                };\n            };\n\n            var redrawPrompt = redrawPromptCreator(Mx, canvasInput, promptText);\n\n            //refresh();\n            redrawPrompt(xpos, ypos);\n            canvasInput.focus();\n\n            // Set state variable\n            Mx.prompt = {\n                redraw: redrawPrompt,\n                input: canvasInput\n            };\n        });\n    };\n\n    /**\n     * Floating-point number validator. Verifies that value is a valid floating point\n     * number. Validation is loose by default - meaning empty strings are considered valid.\n     * @param value The value to validate.\n     * @param strict If strict is set to true - does not consider empty strings as valid floating point numbers.\n     * @private\n     */\n    mx.floatValidator = function(value, strict) {\n        if (!(((strict === undefined || strict === false) && value === \"\")) &&\n            isNaN(parseFloat(value)) || !isFinite(value)) {\n            return {\n                valid: false,\n                reason: \"Failed float validation: not a valid floating point number\"\n            };\n        }\n\n        return {\n            valid: true,\n            reason: \"\"\n        };\n    };\n\n    /**\n     * Integer number validator. Verifies that value is a valid integer.\n     * Validation is loose by default - meaning empty strings are considered valid.\n     * @param value The value to validate.\n     * @param strict If strict is set to true - does not consider empty strings as valid integers.\n     * @private\n     */\n    mx.intValidator = function(value, strict) {\n        if (((strict === undefined || strict === false) && value === \"\") ||\n            ((parseFloat(value) === parseInt(value, 10)) && !isNaN(value))) {\n            return {\n                valid: true,\n                reason: \"\"\n            };\n        } else {\n            return {\n                valid: false,\n                reason: \"Failed integer validation: not a valid integer\"\n            };\n        }\n    };\n\n    mx.hexValidator = function(value, strict) {\n        var regColorcode = /^(#)?([0-9a-fA-F]{3})([0-9a-fA-F]{3})?$/;\n        if (((strict === undefined || strict === false) && value === \"\") ||\n            (regColorcode.test(value) !== false)) {\n            return {\n                valid: true,\n                reason: \"\"\n            };\n        } else {\n            return {\n                valid: false,\n                reason: \"Failed hexcode validation: not a valid hexcode\"\n            };\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param msg\n     * @param time - unused?\n     * @param xpos\n     * @param ypos\n     */\n    //\n    // ~= MX$MESSAGE\n    //\n    mx.message = function(Mx, msg, time, xpos, ypos, type) {\n        mx.onWidgetLayer(Mx, function() {\n\n            mx.render_message_box(Mx, msg, xpos, ypos);\n\n            Mx.widget = {\n                type: type || \"ONESHOT\",\n                callback: function(event) {\n                    if ((event.type === \"mousedown\") || (event.type === \"keydown\")) {\n                        Mx.widget = null;\n                        mx.onWidgetLayer(Mx, function() {\n                            mx.erase_window(Mx);\n                        });\n                    }\n                }\n            };\n        });\n    };\n\n    mx.render_message_box = function(Mx, msg, xpos, ypos, textColor) {\n        var GBorder = 3;\n\n        // Unlike MX$MESSAGE, this implementaion if the message\n        // already contains newlines, the text will placed in the\n        // box as-is.\n        var beg = msg.split(/\\r\\n|\\r|\\n/g);\n        var linel = 0;\n        var center;\n        if (beg.length === 1) {\n            beg = [];\n            var MESSWIDTH = 40;\n\n            linel = Math.min((((Mx.width - 2 * GBorder) / Mx.text_w) - 2), msg.length);\n            if (linel <= 0) {\n                return;\n            }\n            while ((linel > MESSWIDTH) && (2.5 * Mx.text_h * msg.length < Mx.height * linel)) {\n                linel -= 5;\n            }\n\n            var cur = 0;\n            var bg = 0;\n            var i = 0;\n            var j = 0;\n            var end = 0;\n            var brk = 0;\n            var beg = [];\n\n            center = true;\n            while (bg < msg.length) {\n                end = bg + linel - 1;\n                brk = end = Math.min(end, msg.length - 1);\n                var endinreturn = false;\n                for (cur = bg; cur <= end && !endinreturn; cur++) {\n                    switch (msg[cur]) {\n                        case ',':\n                        case ';':\n                        case ' ':\n                        case ':':\n                            brk = cur;\n                            break;\n                        case '-':\n                        case '/':\n                            if (brk !== cur - 1) {\n                                brk = cur;\n                            }\n                            break;\n                        case '@':\n                        case '\\n':\n                        case '\\r':\n                            center = false;\n                            endinreturn = true;\n                            brk = cur;\n                            break;\n                    }\n                }\n                if (cur === msg.length) {\n                    brk = end;\n                }\n                if (endinreturn) {\n                    beg.push(msg.substring(bg, brk));\n                } else {\n                    // trim leading space\n                    var s = msg.substring(bg, brk + 1).replace(/^\\s+/, \"\");\n                    beg.push(s);\n                }\n                bg = brk + 1;\n                j = Math.max(j, beg[i].length);\n            }\n        } else {\n            for (var i = 0; i < beg.length; i++) {\n                linel = Math.min((((Mx.width - 2 * GBorder) / Mx.text_w) - 2), Math.max(linel, beg[i].length));\n            }\n        }\n\n        var lines = beg.length;\n        if (lines > 6) {\n            center = false;\n        }\n        var cur = 0;\n        var winlines = Math.max(1, Mx.height / Mx.text_h);\n        var lastline = Math.min(lines, cur + winlines - 1);\n\n        var xss = (linel + 2) * Mx.text_w;\n        var yss = (lastline - cur + 1) * Mx.text_h;\n\n        var xs = xss + 2 * GBorder;\n        var ys = yss + 2 * GBorder;\n        if (!xpos) {\n            xpos = Mx.xpos;\n        }\n        if (!ypos) {\n            ypos = Mx.ypos;\n        }\n        var xc = Math.max(Mx.l, Math.min(xpos, Mx.r - xs));\n        var yc = Math.max(Mx.t, Math.min(ypos, Mx.b - ys));\n        var xcc = xc + GBorder;\n        var ycc = yc + GBorder;\n\n        mx.widgetbox(Mx, xc, yc, xs, ys, xcc, ycc, 0, \"\");\n\n        var j = ycc + Mx.text_h / 3;\n        var i = xcc + Mx.text_w;\n        while (cur < lastline) {\n            j += Mx.text_h;\n            if (center) {\n                i = xc + xs / 2 - ((beg[cur].length * Mx.text_w) / 2);\n            }\n            mx.text(Mx, i, j, beg[cur], textColor);\n            cur++;\n        }\n    };\n\n    /**\n     * Based on http://js-bits.blogspot.co.uk/2010/07/canvas-rounded-corner-rectangles.html\n     *\n     * @param Mx\n     * @param color\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} w\n     * @param {Number} h\n     * @param fill_opacity\n     * @param fill_color\n     * @param {Number} radius The corner radius. Defaults to 5;\n     */\n    mx.draw_round_box = function(Mx, color, x, y, w, h, fill_opacity, fill_color, radius) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!radius) {\n            radius = 5;\n        }\n\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + w - radius, y);\n        ctx.quadraticCurveTo(x + w, y, x + w, y + radius);\n        ctx.lineTo(x + w, y + h - radius);\n        ctx.quadraticCurveTo(x + w, y + h, x + w - radius, y + h);\n        ctx.lineTo(x + radius, y + h);\n        ctx.quadraticCurveTo(x, y + h, x, y + h - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = color;\n        ctx.stroke();\n\n        if ((fill_opacity !== undefined) && (fill_opacity > 0)) {\n            var oldAlpha = ctx.globalAlpha;\n            ctx.globalAlpha = fill_opacity;\n            if (fill_color) {\n                ctx.fillStyle = fill_color;\n            } else {\n                ctx.fillStyle = color;\n            }\n            ctx.fill();\n            ctx.globalAlpha = oldAlpha;\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param color\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param fill_opacity\n     * @param fill_color\n     */\n    //\n    // ~= MX$DRAW_BOX\n    //\n    mx.draw_box = function(Mx, color, x, y, w, h, fill_opacity, fill_color) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (color !== \"xor\") {\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = color;\n            ctx.strokeRect(x, y, w, h);\n        } else {\n            if (typeof Uint8ClampedArray === 'undefined') {\n                // we don't have typed arrays, so canvas getImageData operations\n                // will be very slow, so use Mx.fg instead\n                ctx.lineWidth = 1;\n                ctx.strokeStyle = Mx.fg;\n                ctx.strokeRect(x, y, w, h);\n            } else {\n                // TODO switch to using TypedArrays\n                x = Math.floor(x);\n                y = Math.floor(y);\n                w = Math.floor(w);\n                h = Math.floor(h);\n\n                // For now assume xor always uses the base canvas\n                // even if it draws on another canvas\n                var dctx = Mx.canvas.getContext(\"2d\");\n\n                var imgd = dctx.getImageData(x, y, w, 1);\n                var pix = imgd.data;\n                for (var c = 0; c < imgd.data.length; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x, y);\n\n                imgd = dctx.getImageData(x, y + h, w, 1);\n                pix = imgd.data;\n                for (var c = 0; c < imgd.data.length; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x, y + h);\n\n                var imgd = dctx.getImageData(x, y, 1, h);\n                var pix = imgd.data;\n                for (var c = 0; c < h; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x, y);\n\n                imgd = dctx.getImageData(x + w, y, 1, h);\n                pix = imgd.data;\n                for (var c = 0; c < h; c++) {\n                    pix[c * 4] = 255 - pix[c * 4]; // red\n                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green\n                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue\n                    pix[c * 4 + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x + w, y);\n            }\n        }\n\n        if ((fill_opacity !== undefined) && (fill_opacity > 0)) {\n            var oldAlpha = ctx.globalAlpha;\n            ctx.globalAlpha = fill_opacity;\n            if (fill_color) {\n                ctx.fillStyle = fill_color;\n            } else {\n                ctx.fillStyle = color;\n            }\n            ctx.fillRect(x + 1, y + 1, w - 1, h - 1);\n            ctx.globalAlpha = oldAlpha;\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param width\n     */\n    // ~= MX$SETFONT\n    mx.set_font = function(Mx, width) {\n        var ctx = Mx.canvas.getContext(\"2d\");\n        var ctx_wid = Mx.wid_canvas.getContext(\"2d\");\n\n        if ((Mx.font) && (Mx.font.width === width)) {\n            // use the cached font\n            ctx.font = Mx.font.font;\n            ctx_wid.font = Mx.font.font;\n        } else {\n            // figure out the font\n            var text_h = 1;\n            do {\n                text_h = text_h + 1;\n                ctx.font = text_h + \"px \" + Mx.font_family;\n                ctx_wid.font = text_h + \"px \" + Mx.font_family;\n                var font_size = ctx.measureText('M'); // the capital M is typically the same height and width\n                Mx.text_w = font_size.width;\n                Mx.text_h = text_h;\n            } while (Mx.text_w < width);\n            Mx.font = {\n                font: text_h + \"px \" + Mx.font_family,\n                width: width\n            };\n        }\n    };\n\n\n    /**\n     * @param Mx\n     * @param xstart\n     * @param ystart\n     * @param xend\n     * @param yend\n     * @param style\n     */\n    // ~= MX$FTEXTLINE\n    mx.textline = function(Mx, xstart, ystart, xend, yend, style) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (!style) {\n            style = {};\n        }\n        if (!style.color) {\n            style.color = Mx.fg;\n        }\n        if (!style.width) {\n            style.width = 1;\n        }\n        draw_line(ctx, xstart, ystart, xend, yend, style, style.color, style.width);\n    };\n\n    /**\n     * @param dmin\n     * @param dmax\n     * @param ndiv\n     */\n    // ~= MX$TICS\n    mx.tics = function(dmin, dmax, ndiv, timecode) {\n        var dtic = 1;\n        var dtic1 = dmin;\n\n        // handle degenerate case\n        if (dmax === dmin) {\n            return {\n                dtic: 1,\n                dtic1: dmin\n            };\n        }\n\n        // split up range into about ndiv 'nice' chunks\n        // zero is included only if   dmin < zero < dmax\n        var dran = Math.abs(dmax - dmin);\n        var df = dran / ndiv;\n        var sig = log10(Math.max(df, 1.0e-36));\n        var nsig;\n        if (sig < 0.0) {\n            nsig = Math.ceil(sig);\n            nsig = nsig - 1;\n        } else {\n            nsig = Math.floor(sig);\n        }\n\n        var ddf = df * Math.pow(10.0, (-nsig));\n        sig = Math.pow(10.0, nsig);\n        var dft = ddf * sig;\n        // If timecode has been requested and it looks like\n        // timecode\n        if (timecode && (dft >= 5.0 && dft <= 59.5 * 3600 * 24)) {\n            var dscl;\n            if (dft < 17.5) {\n                dscl = 5.0; // align to 5 sec tics\n            } else if (dft < 37.5) {\n                dscl = 15.0; // align to 15 sec tics\n            } else if (dft < 4.5 * 60) {\n                dscl = 60.0; // 1 minute tics\n            } else if (dft < 17.5 * 60) {\n                dscl = 5.0 * 60; // and so on\n            } else if (dft < 37.5 * 60) {\n                dscl = 15.0 * 60;\n            } else if (dft < 2.0 * 3600) {\n                dscl = 1.0 * 3600;\n            } else if (dft < 4.5 * 3600) {\n                dscl = 3.0 * 3600;\n            } else if (dft < 9.0 * 3600) {\n                dscl = 6.0 * 3600;\n            } else if (dft < 1.5 * 3600 * 24) {\n                dscl = 12.0 * 3600;\n            } else if (dft < 6.0 * 3600 * 24) {\n                dscl = 1.0 * 3600 * 24; // 1 day\n            } else {\n                dscl = 1.0 * 3600 * 24 * 7; // 1 week\n            }\n            dtic = Math.round(dft / dscl) * dscl;\n        } else {\n            if (ddf < 1.75) {\n                dtic = sig;\n            } else if (ddf < 2.25) {\n                dtic = 2.0 * sig;\n            } else if (ddf < 3.5) {\n                dtic = 2.50 * sig;\n            } else if (ddf < 7.0) {\n                dtic = 5.0 * sig;\n            } else {\n                dtic = 10.0 * sig;\n            }\n        }\n\n        // redefine dmin and dmax to line up on 'nice' boundaries\n        if (dtic === 0.0) {\n            dtic = 1.0;\n        }\n        var nseg;\n        if (dmax >= dmin) {\n            if (dmin >= 0.0) {\n                nseg = dmin / dtic + 0.995;\n            } else {\n                nseg = dmin / dtic - 0.005;\n            }\n            nseg = Math.floor(nseg); // floor\n            dtic1 = nseg * dtic;\n        } else {\n            if (dmin >= 0.0) {\n                nseg = dmin / dtic + 0.005;\n            } else {\n                nseg = dmin / dtic - 0.995;\n            }\n            nseg = Math.floor(nseg); // floor\n            dtic1 = nseg * dtic;\n            dtic = -1 * dtic;\n        }\n        if (dtic1 + dtic === dtic1) {\n            dtic = dmax - dmin;\n        }\n\n        return {\n            dtic: dtic,\n            dtic1: dtic1\n        };\n    };\n\n    /**\n     * @param Mx\n     * @param xdiv\n     * @param ydiv\n     * @param xlab\n     * @param ylab\n     * @param flags\n     */\n    // ~= MX$FDRAWAXIS\n    mx.drawaxis = function(Gx, Mx, xdiv, ydiv, xlab, ylab, flags) {\n        var stk1 = mx.origin(Mx.origin, 1, Mx.stk[Mx.level]);\n        var iscl = 0;\n        var isct = 0;\n        var iscr = 0;\n        var iscb = 0;\n        var width = 0;\n        var height = 0;\n\n        xlab = (xlab === undefined) ? 30 : xlab;\n        ylab = (ylab === undefined) ? 30 : ylab;\n\n\n        if (flags.exactbox) {\n            iscl = Math.floor(stk1.x1);\n            isct = Math.floor(stk1.y1);\n            iscr = Math.floor(stk1.x2);\n            iscb = Math.floor(stk1.y2);\n            width = iscr - iscl;\n            height = iscb - isct;\n        } else {\n            iscl = Math.max(Math.floor(stk1.x1) - 2, 0);\n            isct = Math.max(Math.floor(stk1.y1) - 2, 0);\n            iscr = Math.min(Math.floor(stk1.x2) + 2, Mx.width);\n            iscb = Math.min(Math.floor(stk1.y2) + 2, Mx.height);\n            width = iscr - iscl - 4;\n            height = iscb - isct - 4;\n        }\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        if (flags.fillStyle) {\n            if (Array.isArray(flags.fillStyle)) {\n                ctx.fillStyle = mx.linear_gradient(Mx, 0, 0, 0, iscb - isct, flags.fillStyle);\n            } else {\n                ctx.fillStyle = flags.fillStyle;\n            }\n        } else {\n            ctx.fillStyle = Mx.bg;\n        }\n        ctx.fillRect(iscl, isct, iscr - iscl, iscb - isct);\n\n        if (!flags.noaxisbox) {\n            mx.textline(Mx, iscl, isct, iscr, isct);\n            mx.textline(Mx, iscr, isct, iscr, iscb);\n            mx.textline(Mx, iscr, iscb, iscl, iscb);\n            mx.textline(Mx, iscl, iscb, iscl, isct);\n        }\n\n        var xTIC = {\n            dtic: 0,\n            dtic1: 0\n        };\n        var yTIC = {\n            dtic: 0,\n            dtic1: 0\n        };\n\n        if (xdiv < 0) {\n            xTIC.dtic1 = stk1.xmin;\n            xTIC.dtic = (stk1.xmin - stk1.xmax) / xdiv;\n        } else {\n            xTIC = mx.tics(stk1.xmin, stk1.xmax, xdiv, flags.xtimecode);\n        }\n\n\n        var _xmult = 1.0;\n        if (flags.xmult) { // if xmult was provided\n            _xmult = flags.xmult;\n        } else if (!flags.xtimecode) {\n            _xmult = mx.mult(stk1.xmin, stk1.xmax);\n        }\n        if (ydiv < 0) {\n            yTIC.dtic1 = stk1.ymin;\n            yTIC.dtic = (stk1.ymin - stk1.ymax) / ydiv;\n        } else {\n            yTIC = mx.tics(stk1.ymin, stk1.ymax, ydiv, flags.ytimecode);\n        }\n        var _ymult = 1.0;\n        if (flags.ymult) { // if ymult was provided\n            _ymult = flags.ymult;\n        } else if (!flags.ytimecode) {\n            _ymult = mx.mult(stk1.ymin, stk1.ymax);\n        }\n\n        var xticlabels = !flags.noxtlab;\n        var yticlabels = !flags.noytlab;\n\n        // add labels\n        var ix = Math.max(0, iscl - 4 * Mx.text_w);\n        var iy = 0;\n        if (flags.ontop) {\n            iy = Math.min(Mx.height, Math.floor(iscb + 1.5 * Mx.text_h));\n        } else {\n            iy = Math.max(Mx.text_h, Math.floor(isct - 0.5 * Mx.text_h));\n        }\n\n        var xlabel;\n        var ylabel;\n\n        if (iy > 0) {\n            var ly = 0;\n            if (!flags.noyplab) {\n                if (flags.ylabel instanceof Function) {\n                    ylabel = flags.ylabel(ylab, _ymult);\n                } else if (flags.ylabel !== undefined) {\n                    ylabel = flags.ylabel;\n                } else {\n                    ylabel = m.label(ylab, _ymult);\n                }\n            }\n            if (!flags.noxplab) {\n                if (flags.xlabel instanceof Function) {\n                    xlabel = flags.xlabel(xlab, _xmult);\n                } else if (flags.xlabel !== undefined) {\n                    xlabel = flags.xlabel;\n                } else {\n                    xlabel = m.label(xlab, _xmult);\n                }\n            }\n        }\n\n        if (xlabel && ylabel) {\n            mx.text(Mx, ix, iy, ylabel + \" vs \" + xlabel);\n        } else if (xlabel) {\n            mx.text(Mx, ix, iy, xlabel);\n        } else if (ylabel) {\n            mx.text(Mx, ix, iy, ylabel);\n        }\n\n        var itext = 5.5 * Mx.text_w;\n        var jtext = 0;\n        if (flags.ontop) {\n            if (flags.inside) {\n                jtext = isct + 1.0 * Mx.text_h;\n            } else {\n                jtext = isct - 0.2 * Mx.text_h;\n            }\n        } else {\n            if (flags.inside) {\n                jtext = iscb - 0.5 * Mx.text_h;\n            } else {\n                jtext = iscb + 1.0 * Mx.text_h + 2;\n            }\n        }\n        var fact;\n        if (stk1.xmin !== stk1.xmax) {\n            fact = width / (stk1.xmax - stk1.xmin);\n        } else {\n            fact = width / 1.0;\n        }\n\n        var fmul;\n        if (_xmult !== 0) {\n            fmul = 1.0 / _xmult;\n        } else {\n            fmul = 1.0;\n        }\n\n        // Figure out how many characters can fit between tics\n        var xlbl_maxlen = Math.min(12, Math.round(fact * xTIC.dtic) / Mx.text_w);\n\n        // The sp flag decides if all tics should be labeled, or just the first tic.\n        // in LEGACY rendering when sp=0 you should get one tic at the start\n        // that then displays like XPOS += tic-delta\n        //\n        // The original logic basically says, if the tic-delta (i.e. dtic) is very small\n        // relative to the first tic, only render the first tic.  Specifically:\n        //    sp = (Math.abs(xTIC.dtic) / Math.max(Math.abs(xTIC.dtic1), Math.abs(xTIC.dtic)) > 1.0e-6);\n        //\n        // However, it's probably more important to decide this based off the significant digits of the\n        // tic labels.  In other words, if the tics cannot be labeled uniquely then you need to make sp=0.\n        var sp = 1;\n        var x;\n        var xlbl = \"\";\n        if (xticlabels) {\n            if (flags.xtimecode) {\n                xlbl = m.sec2tod(xTIC.dtic1);\n                // If the label is no longer than half of the total width display multiple labels\n                sp = (xlbl.length * Mx.text_w < (iscr - iscl) / 2);\n            } else {\n                // Ensure that all of the tic labels will render uniquely\n                var last_xlbl;\n                for (x = xTIC.dtic1; x <= stk1.xmax; x = x + xTIC.dtic) {\n                    xlbl = mx.format_f(x * fmul, xlbl_maxlen, xlbl_maxlen / 2);\n                    if (xlbl === last_xlbl) {\n                        sp = 0;\n                        break;\n                    }\n                    last_xlbl = xlbl;\n                }\n            }\n        }\n        if (xTIC.dtic === 0) {\n            xTIC.dtic = stk1.xmax - xTIC.dtic1 + 1.0;\n        }\n\n        var i;\n        ix = 0;\n        xlbl = \"\";\n        for (x = xTIC.dtic1; x <= stk1.xmax; x = x + xTIC.dtic) {\n            i = iscl + Math.round(fact * (x - stk1.xmin)) + 2;\n            if (i < iscl) {\n                continue;\n            }\n            if (flags.grid && flags.grid !== \"y\") {\n                if (!flags.gridStyle) {\n                    if (mx.LEGACY_RENDER) {\n                        flags.gridStyle = {\n                            mode: \"dashed\",\n                            on: 1,\n                            off: 3\n                        };\n                    } else {\n                        flags.gridStyle = {\n                            \"color\": Mx.xwms,\n                            mode: \"dashed\",\n                            on: 1,\n                            off: 3\n                        };\n                    }\n                }\n                mx.textline(Mx, i, iscb, i, isct, flags.gridStyle);\n            } else {\n                mx.textline(Mx, i, iscb - 2, i, iscb + 2);\n                mx.textline(Mx, i, isct - 2, i, isct + 2);\n            }\n            if (xticlabels) {\n                if (sp) {\n                    xlbl = null;\n                    if (flags.xtimecode) {\n                        // If we have enough space to draw the next tic label\n                        if (i > ix) {\n                            xlbl = m.sec2tod(x, true);\n                            ix = i + (Mx.text_w * (xlbl.length + 1));\n                        }\n                    } else {\n                        xlbl = mx.format_f(x * fmul, xlbl_maxlen, xlbl_maxlen / 2);\n                        xlbl = trimlabel(xlbl, true);\n                    }\n                    if (xlbl) {\n                        var itexti = Math.round(xlbl.length / 2) * Mx.text_w;\n                        if (flags.inside) {\n                            i = Math.max(iscl + itexti, i);\n                            i = Math.min(iscr - itexti, i);\n                        }\n                        if (i - itexti >= 0) {\n                            mx.text(Mx, i - itexti, jtext, xlbl);\n                        }\n                    }\n                } else if (x === xTIC.dtic1) {\n                    if (flags.xtimecode) {\n                        xlbl = m.sec2tod(x, true);\n                        if (flags.inside) {\n                            i = Math.floor(Math.max(iscl + itext, i));\n                        }\n                        mx.text(Mx, i - itext, jtext, xlbl + \" +\\u0394 \" + m.sec2tod(xTIC.dtic));\n                    } else {\n                        xlbl = (xTIC.dtic1 * fmul).toString();\n                        if (flags.inside) {\n                            i = Math.floor(Math.max(iscl + itext, i));\n                        }\n                        mx.text(Mx, i - itext, jtext, xlbl + \" +\\u0394 \" + (xTIC.dtic * fmul));\n                    }\n                }\n            }\n        }\n\n        // Add y-tick marks\n        if (flags.yonright) { // TODO - yonright probably doesn't work\n            if (flags.inside) {\n                itext = Math.min(iscr - 6 * Mx.text_w, Mx.width - 5 * Mx.text_w);\n            } else {\n                itext = Math.min(iscr + Mx.text_w, Mx.width - 5 * Mx.text_w);\n            }\n        } else {\n            if (flags.inside) {\n                itext = Math.max(0, iscl + Mx.text_w);\n            } else {\n                itext = Math.max(0, Math.floor(iscl - (Mx.l - 0.5) * Mx.text_w));\n            }\n        }\n        jtext = 0.4 * Mx.text_h;\n        if (stk1.ymin !== stk1.ymax) {\n            fact = -height / (stk1.ymax - stk1.ymin);\n        } else {\n            fact = -height / 1.0;\n        }\n        if (_ymult !== 0) {\n            fmul = 1.0 / _ymult;\n        } else {\n            fmul = 1;\n        }\n        var ytic, ytic1, endtic;\n        if (yTIC.dtic === 0) {\n            ytic = stk1.ymax - ytic1 + 1.0;\n        }\n        if (stk1.ymax >= stk1.ymin) {\n            endtic = function(val) {\n                return (val <= stk1.ymax);\n            };\n        } else {\n            endtic = function(val) {\n                return (val >= stk1.ymax);\n            };\n        }\n        var ylbl;\n        for (var y = yTIC.dtic1; endtic(y); y = y + yTIC.dtic) {\n            i = iscb + Math.round(fact * (y - stk1.ymin)) - 2;\n            if (i > iscb) {\n                continue;\n            }\n            if (flags.grid && flags.grid !== \"x\") {\n                if (!flags.gridStyle) {\n                    flags.gridStyle = {\n                        mode: \"dashed\",\n                        on: 1,\n                        off: 3\n                    };\n                }\n                mx.textline(Mx, iscl, i, iscr, i, flags.gridStyle);\n            } else {\n                mx.textline(Mx, iscl - 2, i, iscl + 2, i);\n                mx.textline(Mx, iscr - 2, i, iscr + 2, i);\n            }\n            if (yticlabels) {\n                // TODO\n                if (flags.inside &&\n                    ((i < isct + Mx.text_h) || (i > iscb - Mx.text_h * 2))) {\n                    // out of range for inside labels\n                } else if (flags.ytimecode) {\n                    ylbl = m.sec2tod(y); // don't trim zeros because we use them later\n                    // y-axis timecodes\n                    // use three lines\n                    // YYYY:MM:DD\n                    // HH:MM\n                    // SS.factional\n                    var k = i + jtext - Mx.text_h;\n                    var sep = ylbl.indexOf(\"::\");\n                    if (sep !== -1) {\n                        if (k > isct && k < iscb) {\n                            // it the label has space, draw it\n                            mx.text(Mx, itext, k, ylbl.substring(0, sep));\n                        }\n                        sep += 1; // adjust for the next stage\n                    }\n                    // The draw the primary portion\n                    mx.text(Mx, itext, Math.min(iscb, i + jtext), ylbl.substring(sep + 1, sep + 6));\n                    // Finally the sections portion if it fits on the screen\n                    // and is necessary\n                    k = i + jtext + Mx.text_h;\n                    if ((k > isct && k < iscb)) {\n                        if (ylbl.substring(sep + 7, sep + 9) !== \"00\") {\n                            // add the .00 which is safe to do unconditionally because\n                            // we truncate on the following line and we know that\n                            // sec2tod either returns no decimal places or 6 decimal places\n                            ylbl = ylbl + \".00\";\n                            mx.text(Mx, itext, k, ylbl.substring(sep + 7, sep + 12));\n                        }\n                    }\n                } else {\n                    ylbl = mx.format_f(y * fmul, 12, 6);\n                    ylbl = trimlabel(ylbl, flags.inside);\n                    mx.text(Mx, itext, Math.min(iscb, i + jtext), ylbl);\n                }\n            }\n        }\n    };\n\n    /**\n     * @param x\n     * @param y\n     * @param rect_x\n     * @param rect_y\n     * @param rect_width\n     * @param rect_height\n     * @private\n     */\n    mx.inrect = function(x, y, rect_x, rect_y, rect_width, rect_height) {\n        return (x >= rect_x && x <= rect_x + rect_width &&\n            y >= rect_y && y <= rect_y + rect_height);\n    };\n    /**\n     * @private\n     */\n    var MENU_CONSTANTS = {\n        GBorder: 3,\n        sidelab: 0,\n        toplab: 1,\n        n_show: 0\n    };\n\n    /**\n     * @method _menu_redraw\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    function _menu_redraw(Mx, menu) {\n        if (menu.animationFrameHandle) {\n            return;\n        }\n        // Use the current mouse position and the size of the plot to determine available space\n        //var mouse_pos = Mx.ypos; TODO: Use mouse position\n        var plot_height = Mx.canvas.height;\n        var buffer_sz = 35; // estimate of how much of the canvas is spacing around plot\n        var avail_space = plot_height - 2 * buffer_sz;\n\n        // Calculate how many menu items can fit inside that space\n        var menu_item_height = Mx.text_h * 1.5;\n        var n_items = Math.floor(avail_space / menu_item_height);\n        if (n_items >= menu.items.length) {\n            MENU_CONSTANTS.n_show = menu.items.length;\n        } else {\n            MENU_CONSTANTS.n_show = n_items;\n        }\n\n\n        menu.animationFrameHandle = requestAnimFrame(mx.withWidgetLayer(Mx, function() {\n            mx.erase_window(Mx);\n\n            menu.animationFrameHandle = undefined;\n            var yb = Mx.text_h * 1.5;\n            menu.x = Math.max(menu.x, 0);\n            menu.y = Math.max(menu.y, 0);\n            menu.x = Math.min(menu.x, Mx.width - menu.w);\n            menu.y = Math.min(menu.y, Mx.height - menu.h);\n\n            var xcc = menu.x + MENU_CONSTANTS.GBorder + Math.max(0, MENU_CONSTANTS.sidelab);\n            var ycc = menu.y + MENU_CONSTANTS.GBorder + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);\n\n            var xss = menu.w - 2 * MENU_CONSTANTS.GBorder - Math.abs(MENU_CONSTANTS.sidelab);\n            var yss = menu.h - 2 * MENU_CONSTANTS.GBorder - MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);\n\n            mx.widgetbox(Mx, menu.x, menu.y, menu.w, menu.h, xcc, ycc, xss, yss, menu.title);\n\n            //ctx.fillStyle = xwlo;\n            //ctx.fillRect(xcc, ycc, xss, yss);\n\n            var ctx = Mx.wid_canvas.getContext(\"2d\");\n            ctx.lineWidth = 1;\n\n            ctx.strokeStyle = Mx.xwbs; // xwbs\n            ctx.beginPath();\n            ctx.moveTo(xcc, ycc - 4 + 0.5);\n            ctx.lineTo(xcc + xss - 1, ycc - 4 + 0.5);\n            ctx.stroke();\n\n            ctx.strokeStyle = Mx.xwts; // xwts\n            ctx.beginPath();\n            ctx.moveTo(xcc, ycc - 3 + 0.5);\n            ctx.lineTo(xcc + xss - 1, ycc - 3 + 0.5);\n            ctx.stroke();\n\n            var i_begin = menu.queue[0];\n            var i_end = menu.queue[MENU_CONSTANTS.n_show - 1];\n            if (i_end === 0) {\n                // now we are starting over\n                for (var q = 0; q < MENU_CONSTANTS.n_show; q++) {\n                    menu.queue[q] = q;\n                }\n                i_begin = menu.queue[0];\n                i_end = menu.queue[MENU_CONSTANTS.n_show - 1];\n            }\n            var menu_counter = 0;\n            for (var i = i_begin; i <= i_end; i++) {\n                var item = menu.items[i];\n                var y = ycc + yb * menu_counter;\n                menu_counter = menu_counter + 1;\n\n                if (item.style === \"separator\") {\n                    ctx.fillStyle = Mx.xwbs;\n                    ctx.fillRect(xcc, y, xss, yb);\n\n                    ctx.beginPath();\n                    ctx.moveTo(xcc, y + 0.5);\n                    ctx.lineTo(xcc + xss, y + 0.5);\n                    ctx.stroke();\n\n                    ctx.textBaseline = \"middle\";\n                    ctx.textAlign = \"left\";\n                    ctx.fillStyle = Mx.xwfg;\n                    ctx.fillText(\" \" + item.text + \" \", xcc + Mx.text_w * 2, y + yb / 2);\n                } else {\n                    if (mx.LEGACY_RENDER) {\n                        ctx.fillStyle = Mx.xwlo;\n                        ctx.fillRect(xcc, y, xss, yb);\n                        ctx.beginPath();\n                        ctx.moveTo(xcc, y + 0.5);\n                        ctx.lineTo(xcc + xss, y + 0.5);\n                        ctx.stroke();\n                        if (item.selected) {\n                            mx.shadowbox(Mx, xcc - 1, y, xss + 2, yb, 1, 2, \"\", 0.75);\n                        }\n                    } else {\n                        ctx.save();\n                        ctx.globalAlpha = 0.75;\n                        if (item.selected) {\n                            ctx.fillStyle = Mx.xwts;\n                        } else {\n                            ctx.fillStyle = Mx.xwlo;\n                        }\n                        ctx.fillRect(xcc, y, xss, yb);\n                        ctx.restore();\n                        ctx.strokeStyle = Mx.bg;\n                        ctx.beginPath();\n                        ctx.moveTo(xcc, y + 0.5);\n                        ctx.lineTo(xcc + xss, y + 0.5);\n                        ctx.stroke();\n                    }\n\n                    ctx.textBaseline = \"middle\";\n                    ctx.textAlign = \"left\";\n                    ctx.fillStyle = Mx.xwfg;\n                    if (item.style === \"checkbox\") {\n                        ctx.fillText(\" \" + item.text + \" \", xcc + Mx.text_w * 2, y + yb / 2);\n                        ctx.strokeStyle = Mx.xwfg;\n                        ctx.strokeRect(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2), Mx.text_w, Mx.text_w);\n                        if (item.checked) {\n                            ctx.beginPath();\n                            ctx.moveTo(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2));\n                            ctx.lineTo(xcc + 1 + Mx.text_w + Mx.text_w, y + ((yb - Mx.text_w) / 2) + Mx.text_w);\n                            ctx.stroke();\n                            ctx.beginPath();\n                            ctx.moveTo(xcc + 1 + Mx.text_w + Mx.text_w, y + ((yb - Mx.text_w) / 2));\n                            ctx.lineTo(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2) + Mx.text_w);\n                            ctx.stroke();\n                        }\n                    } else {\n                        ctx.fillText(\" \" + item.text + \" \", xcc, y + yb / 2);\n\n                        // draw the triangle\n                        if (item.checked) {\n                            ctx.beginPath();\n                            ctx.moveTo(xcc + 1, y + Mx.text_h / 4);\n                            ctx.lineTo(xcc + 1 + Mx.text_w - 2, y + Mx.text_h / 4 + Mx.text_h / 2);\n                            ctx.lineTo(xcc + 1, y + Mx.text_h / 4 + Mx.text_h);\n                            ctx.lineTo(xcc + 1, y + Mx.text_h / 4);\n                            ctx.fill();\n                        }\n                    }\n                }\n            }\n\n\n        }));\n    }\n\n    /**\n     * @method _menu_takeaction\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    function _menu_takeaction(Mx, menu) {\n        mx.onWidgetLayer(Mx, function() {\n            mx.erase_window(Mx);\n        });\n        Mx.menu = undefined;\n        Mx.widget = null;\n\n        for (var i = 0; i < menu.items.length; i++) {\n            var item = menu.items[i];\n            if (item.selected) {\n                if (item.handler) {\n                    item.handler();\n                } else if (item.menu) {\n                    var newmenu = item.menu;\n                    if (typeof item.menu === 'function') {\n                        newmenu = item.menu();\n                    }\n                    newmenu.finalize = menu.finalize;\n                    mx.menu(Mx, newmenu);\n                }\n                break;\n            }\n        }\n        if ((!Mx.menu) && (menu.finalize)) {\n            menu.finalize();\n        }\n    }\n\n    /**\n     * @method _menu_dismiss\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    function _menu_dismiss(Mx, menu) {\n        mx.onWidgetLayer(Mx, function() {\n            mx.erase_window(Mx);\n        });\n        Mx.menu = undefined;\n        Mx.widget = null;\n\n        if ((!Mx.menu) && (menu.finalize)) {\n            menu.finalize();\n        }\n    }\n\n    /**\n     * @method _menu_callback\n     * @param Mx\n     * @param menu\n     * @param event\n     * @private\n     */\n    function _menu_callback(Mx, menu, event) {\n        // Keep track of whats visible currently\n        var i_begin = menu.queue[0];\n        var i_end = menu.queue[MENU_CONSTANTS.n_show - 1];\n        if (event === undefined) {\n            // no event, just refresh the menu\n            _menu_redraw(Mx, menu);\n        } else if (event.type === \"mousemove\") {\n            // Update position\n            if (menu.drag_x !== undefined && menu.drag_y !== undefined && Math.abs(Mx.xpos - menu.drag_x) > 2 && Math.abs(Mx.ypos - menu.drag_y) > 2) {\n                menu.x += Mx.xpos - menu.drag_x;\n                menu.y += Mx.ypos - menu.drag_y;\n                menu.drag_x = Mx.xpos;\n                menu.drag_y = Mx.ypos;\n            }\n\n            // All of these variables suck and are common in other places...refactoring is necessary\n            var xcc = menu.x + MENU_CONSTANTS.GBorder + Math.max(0, MENU_CONSTANTS.sidelab);\n            var xss = menu.w - 2 * MENU_CONSTANTS.GBorder - Math.abs(MENU_CONSTANTS.sidelab);\n            var yb = Mx.text_h * 1.5;\n            var ycc = menu.y + MENU_CONSTANTS.GBorder + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);\n\n            for (var i = i_begin; i <= i_end; i++) {\n                var y = ycc + yb * i;\n                var item = menu.items[i];\n                item.selected = false;\n                if (mx.inrect(Mx.xpos, Mx.ypos, xcc, y, xss, yb)) {\n                    item.selected = true;\n                }\n            }\n            _menu_redraw(Mx, menu);\n        } else if (event.type === \"mouseup\") {\n            // No longer dragging menu\n            if (event.which === 1) {\n                if ((menu.drag_x !== undefined) && (menu.drag_y !== undefined)) {\n                    menu.drag_x = undefined;\n                    menu.drag_y = undefined;\n                } else {\n                    _menu_takeaction(Mx, menu);\n                }\n            } else if (event.which === 3) {\n                _menu_dismiss(Mx, menu);\n            }\n        } else if (event.type === \"mousedown\") {\n            event.preventDefault();\n            if (event.which === 1) {\n                if (Mx.xpos > menu.x && Mx.xpos < (menu.x + menu.w) && Mx.ypos > menu.y && Mx.ypos < (menu.y + Mx.text_h * 1.5)) {\n                    menu.drag_x = Mx.xpos;\n                    menu.drag_y = Mx.ypos;\n                }\n            } else if (event.which === 2) {\n                _menu_takeaction(Mx, menu);\n            }\n        } else if (event.type === \"keydown\") {\n            // Remember that keydown triggers periodically while a key is held\n            if (Mx.menu) {\n                var menu = Mx.menu;\n                event.preventDefault();\n                var keyCode = common.getKeyCode(event);\n                if (keyCode === 13) { // enter\n                    _menu_takeaction(Mx, menu);\n                } else if (keyCode === 38) { // up arrow\n                    for (var i = i_begin; i < i_end; i++) {\n                        var item = menu.items[i];\n                        if (item.selected) {\n                            item.selected = false;\n                            if (menu.items[i - 1] !== undefined) {\n                                menu.items[i - 1].selected = true;\n                            }\n                            break;\n                        } else if (i === i_begin && i_begin !== 0) {\n                            // we are at the end of the list and nothing was selected so pick the last element\n                            //item.selected = true;\n                            menu.queue.pop();\n                            menu.queue.unshift(i_begin - 1);\n                            _menu_redraw(Mx, menu);\n                            menu.items[i_end - 1].selected = true;\n\n                        } else if (i_begin === 0 && menu.items[i_begin].selected === true) {\n                            _menu_redraw(Mx, menu);\n                            menu.items[0].selected = true;\n                        }\n                    }\n                    _menu_redraw(Mx, menu);\n                } else if (keyCode === 40) { // down arrow\n                    for (var i = i_begin; i < i_end; i++) {\n                        var item = menu.items[i];\n                        if (item.selected) {\n                            item.selected = false;\n                            if (menu.items[i + 1] !== undefined) {\n                                menu.items[i + 1].selected = true;\n                            }\n                            break;\n                        } else if (i === (i_end - 1)) {\n                            // nothing was selected so select the top\n                            var next_item = i_end + 1;\n\n                            if (i_end + 1 === menu.items.length) {\n                                next_item = 0;\n                            }\n\n                            menu.queue.shift();\n                            menu.queue.push(next_item);\n                            menu.items[i_end].selected = false;\n                            menu.items[next_item].selected = true;\n                            _menu_redraw(Mx, menu);\n                        }\n                    }\n                    _menu_redraw(Mx, menu);\n                } else if ((keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 90)) {\n                    var inp = String.fromCharCode(keyCode).toUpperCase();\n\n                    if (menu.keypresses === undefined) {\n                        menu.keypresses = inp;\n                    } else {\n                        menu.keypresses = menu.keypresses + inp;\n                    }\n\n                    var matches = 0;\n                    for (var i = 0; i < menu.items.length; i++) {\n                        var item = menu.items[i];\n                        item.selected = false;\n                        if (!item.text) {\n                            continue;\n                        }\n\n                        if (item.text.toUpperCase().indexOf(menu.keypresses) === 0) {\n                            if (matches === 0) {\n                                item.selected = true;\n                            }\n                            matches++;\n                        }\n                    }\n\n                    if (matches === 0) {\n                        menu.keypresses = undefined;\n                        _menu_redraw(Mx, menu);\n                    } else if (matches === 1) {\n                        _menu_takeaction(Mx, menu);\n                    } else {\n                        _menu_redraw(Mx, menu);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param Mx\n     * @param menu\n     * @private\n     */\n    mx.menu = function(Mx, menu) {\n        var yb = Mx.text_h * 1.5;\n        //MENU_CONSTANTS.n_show = menu.items.length;\n\n        var plot_height = Mx.canvas.height;\n        var buffer_sz = 35; // estimate of how much of the canvas is spacing around plot\n        var avail_space = plot_height - 2 * buffer_sz;\n        // Calculate how many menu items can fit inside that space\n        var menu_item_height = Mx.text_h * 1.5;\n        var n_items = Math.floor(avail_space / menu_item_height);\n        if (n_items >= menu.items.length) {\n            MENU_CONSTANTS.n_show = menu.items.length;\n        } else {\n            MENU_CONSTANTS.n_show = n_items;\n        }\n\n        if (menu) {\n            if (!Mx.widget) {\n                menu.x = Mx.xpos;\n                menu.y = Mx.ypos;\n                menu.val = 0;\n\n                menu.h = MENU_CONSTANTS.GBorder * 2 + yb * MENU_CONSTANTS.n_show + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder) - 1;\n                menu.y = menu.y - ((MENU_CONSTANTS.toplab + (Math.max(1, menu.val)) - 0.5) * yb + (1 + MENU_CONSTANTS.toplab) * MENU_CONSTANTS.GBorder) + 1;\n\n                var xb = menu.title.length;\n                var yadj = 0;\n                for (var i = 0; i < menu.items.length; i++) {\n                    var item = menu.items[i];\n                    xb = Math.max(xb, item.text.length);\n                    if (item.style === \"checkbox\") {\n                        xb += 2;\n                    }\n                    if (item.style === \"separator\") {\n                        xb += 2;\n                    }\n                    if (item.checked && item.style !== \"checkbox\") {\n                        yadj = yb * i;\n                    }\n                }\n\n                menu.queue = [];\n\n                for (var q = 0; q < MENU_CONSTANTS.n_show; q++) {\n                    menu.queue.push(q);\n\n                }\n\n                menu.y = menu.y - yadj;\n                xb += 2;\n                xb = xb * Mx.text_w;\n\n                menu.w = MENU_CONSTANTS.GBorder * 2 + Math.abs(MENU_CONSTANTS.sidelab) + xb - 1;\n                menu.x = menu.x - menu.w / 2;\n\n                Mx.menu = menu;\n\n                Mx.widget = {\n                    type: \"MENU\",\n                    callback: function(event) {\n                        _menu_callback(Mx, menu, event);\n                    }\n                };\n            }\n            _menu_redraw(Mx, menu);\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param inx\n     * @param iny\n     * @param inw\n     * @param inh\n     * @param name\n     * @private\n     */\n    mx.widgetbox = function(Mx, x, y, w, h, inx, iny, inw, inh, name) {\n        var GBorder = 3;\n        mx.shadowbox(Mx, x, y, w, h, 1, 2, \"\", 0.75);\n        if (name) {\n            var length = name.length;\n            length = Math.min(length, w / Mx.text_w);\n            length = Math.max(length, 1);\n            var xt = x + (w - length * Mx.text_w) / 2;\n            y += GBorder;\n            var yt = y + (iny - y + 0.7 * Mx.text_h) / 2;\n\n            mx.text(Mx, xt, yt, name, Mx.xwfg);\n        }\n        if (inw > 0 && inh > 0) {\n            var ctx = Mx.active_canvas.getContext(\"2d\");\n            if (mx.LEGACY_RENDER) {\n                ctx.fillStyle = Mx.bg;\n                ctx.fillRect(inx, iny, inw, inh);\n            } else {\n                ctx.save();\n                ctx.globalAlpha = 0.1;\n                ctx.fillStyle = Mx.bg;\n                ctx.fillRect(inx, iny, inw, inh);\n                ctx.restore();\n            }\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param lbl\n     * @param color\n     * @private\n     */\n    //\n    // ~= MX$TEXT\n    //\n    mx.text = function(Mx, x, y, lbl, color) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        x = Math.max(0, x);\n        y = Math.max(0, y);\n        if ((x < 0) || (y < 0)) {\n            throw \"On No!\";\n        }\n        ctx.textBaseline = \"bottom\";\n        ctx.textAlign = \"left\";\n        ctx.font = Mx.font.font;\n        if (color === undefined) {\n            ctx.fillStyle = Mx.fg;\n        } else {\n            ctx.fillStyle = color;\n        }\n\n        ctx.fillText(lbl, x, y);\n    };\n\n    /**\n     * @method clipt\n     * @param denom\n     * @param num\n     * @param o\n     * @private\n     */\n    // ~= glibf1.for CLIPT\n    function clipt(denom, num, o) {\n        var accept = true;\n        var t;\n\n        t = num / denom;\n        if (denom > 0) {\n            if (t > o.tL) {\n                accept = false;\n            } else if (t > o.tE) {\n                o.tE = t;\n            }\n        } else if (denom < 0) {\n            if (t < o.tE) {\n                accept = false;\n            } else if (t < o.tL) {\n                o.tL = t;\n            }\n        } else {\n            if (num > 0) {\n                accept = false;\n            }\n        }\n\n        return accept;\n    }\n\n    /**\n     * Method which draws a line in a graphics context.\n     * In the graphics context provided, draws a line.\n     * Mimics XLib's XDrawLines method in at least the basic functionality.\n     * @method draw_line\n     * @param ctx\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     * @param style\n     * @param color\n     * @param width\n     * @private\n     */\n    function draw_line(ctx, x1, y1, x2, y2, style, color, width) {\n        // For odd width lines (i.e. 1,3,5...) if you draw right\n        // on the pixel boundry the canvas will actually draw a slightly\n        // grey line 2 px wide.  You have to add .5 to get what you want.\n\n        // Handle boundary cases - instead of throwing an exception, just bound\n        // the value to 0\n        if (x1 < 0) {\n            x1 = 0;\n        }\n        if (y1 < 0) {\n            y1 = 0;\n        }\n        if (x2 < 0) {\n            x2 = 0;\n        }\n        if (y2 < 0) {\n            y2 = 0;\n        }\n\n        if (width) {\n            ctx.lineWidth = width;\n        }\n        if (color) {\n            ctx.strokeStyle = color;\n        }\n\n        if (ctx.lineWidth % 2 === 1) {\n            if (x1 === x2) {\n                x1 = Math.floor(x1) + 0.5;\n                x2 = x1;\n            }\n            if (y1 === y2) {\n                y1 = Math.floor(y1) + 0.5;\n                y2 = y1;\n            }\n        }\n\n        if (!style || !style.mode) {\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.stroke();\n            ctx.beginPath();\n        } else if (style.mode === \"dashed\") {\n            var dash_supported = common.dashOn(ctx, style.on, style.off);\n            if (dash_supported) {\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n                common.dashOff(ctx);\n                ctx.beginPath();\n            } else {\n                // Fallback that only supports vertical/horizontal\n                ctx.beginPath();\n                if (y1 === y2) {\n                    var x = Math.min(x1, x2);\n                    x2 = Math.max(x1, x2);\n                    while (x < x2) {\n                        ctx.moveTo(x, y1);\n                        ctx.lineTo(x + style.on, y1);\n                        ctx.stroke();\n                        x += (style.on + style.off);\n                    }\n                } else if (x1 === x2) {\n                    // vertical line\n                    var y = Math.min(y1, y2);\n                    y2 = Math.max(y1, y2);\n                    while (y < y2) {\n                        ctx.moveTo(x1, y);\n                        ctx.lineTo(x1, y + style.on);\n                        ctx.stroke();\n                        y += (style.on + style.off);\n                    }\n                } else {\n                    throw \"Only horizontal or vertical dashed lines are supported\";\n                }\n                ctx.beginPath();\n            }\n        } else if (style.mode === \"xor\") {\n            if (typeof Uint8ClampedArray === 'undefined') {\n                // we don't have typed arrays, so canvas getImageData operations\n                // will be very slow, so use color instead\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n                ctx.beginPath();\n            } else {\n                // currently xor-style is only supported for horizontal or vertical lines\n                var w = 0;\n                var h = 0;\n                if (y1 === y2) {\n                    w = Math.abs(x2 - x1);\n                    h = width;\n                    x1 = Math.min(x1, x2);\n                } else if (x1 === x2) {\n                    w = width;\n                    h = Math.abs(y2 - y1);\n                    y1 = Math.min(y1, y2);\n                } else {\n                    throw \"Only horizontal and vertical lines can be drawn with XOR\";\n                }\n\n                if ((w === 0) || (h === 0)) {\n                    return;\n                }\n\n                x1 = Math.floor(x1);\n                y1 = Math.floor(y1);\n                var imgd = ctx.getImageData(x1, y1, w, h);\n                var pix = imgd.data;\n                // Loop over each pixel and invert the color.\n                for (var i = 0, n = pix.length; i < n; i += 4) {\n                    pix[i] = 255 - pix[i]; // red\n                    pix[i + 1] = 255 - pix[i + 1]; // green\n                    pix[i + 2] = 255 - pix[i + 2]; // blue\n                    pix[i + 3] = 255; // opacity\n                }\n                ctx.putImageData(imgd, x1, y1);\n                ctx.clearRect(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * Method which draws a polygon in a graphics context.\n     * In the graphics context provided, draws a polygon.\n     * Mimics XLib's XDrawLines method in at least the basic functionality.\n     * @method draw_poly\n     * @param ctx - The graphics context to draw in\n     * @param pix - Defined as [\\{\"x\": xval, y: \"y\": yval\\}, \\{\"x\": xval, \"y\":yval\\}...].\n     *              xval and yval represent their respective coordinate values in the tuples\n     *\t\t\t\tnumber of points in the structure can be retrieved via pix.length.\n     * @param color - The color of the rectangle\n     * @param width - The line width to set.\n     * @private\n     */\n    function draw_poly(ctx, pix, color, width) { // TODO Should this be a public method?\n        start_poly(ctx, pix, width);\n\n        if (color) {\n            ctx.strokeStyle = color;\n        }\n\n        ctx.stroke(); // draw the shape outlined in the path\n        ctx.closePath();\n    }\n\n    /**\n     * Method which draws a filled polygon in a graphics context.\n     * In the graphics context provided draws a polygon, then fills it.\n     * Mimics XLib's XFillPolygon method in at least the basic functionality.\n     * Some differences between this and Xlib's method are:\n     *  -no way to specify convex/non-convex\n     *  -no way to specify CoordModeOrigin\n     *  -no need to specify the number of points to draw (plots all points in pix)\n     * @method fill_poly\n     * @param ctx - The graphics context to draw in\n     * @param pix - Defined as [\\{\"x\": xval, y: \"y\": yval\\}, \\{\"x\": xval, \"y\":yval\\}...].\n     *              xval and yval represent their respective coordinate values in the tuples\n     *\t\t\t\tnumber of points in the structure can be retrieved via pix.length.\n     * @param lineColor - The line color of the polygon\n     * @param fillColor - The fill color of the polygon\n     * @param lineWidth - The line width to set\n     * @private\n     */\n    function fill_poly(ctx, pix, lineColor, fillColor, width) { // TODO Should this be a public method?\n        start_poly(ctx, pix, width);\n\n        if (lineColor) {\n            ctx.strokeStyle = lineColor;\n        }\n        if (fillColor) {\n            ctx.fillStyle = fillColor;\n        }\n\n        ctx.fill(); // fill in the shape only, no outline drawn\n        ctx.closePath();\n    }\n\n    /**\n     * Helper method which starts drawing a polygon in a graphics context.\n     * In the graphics context provided, begins a path at the first point in pix,\n     * then draws lines from each point in pix to the next. It also sets the width\n     * of the line.\n     * @method start_poly\n     * @param ctx - The graphics context to draw in\n     * @param pix - Defined as [\\{\"x\": xval, y: \"y\": yval\\}, \\{\"x\": xval, \"y\":yval\\}...].\n     *              xval and yval represent their respective coordinate values in the tuples\n     *\t\t\t\tnumber of points in the structure can be retrieved via pix.length.\n     * @param width - The line width to set.\n     * @private\n     */\n    function start_poly(ctx, pix, width) {\n        if (pix.length < 1) {\n            return;\n        }\n\n        var x = pix[0].x;\n        var y = pix[0].y;\n\n        if (width) {\n            ctx.lineWidth = width;\n        } else {\n            ctx.lineWidth = 1; // Default\n        }\n\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n\n        for (var i = 0; i < pix.length; i++) {\n            x = pix[i].x;\n            y = pix[i].y;\n            ctx.lineTo(x, y);\n        }\n    }\n\n    /**\n     * Method which draws a rectangle (hollowed) in a graphics context.\n     * In the graphics context provided, draws a hollow rectangle.\n     * Mimics XLib's XDrawRectangle method in at least the basic functionality.\n     * @method draw_rectangle\n     * @param ctx - The graphics context to draw in\n     * @param x - The x coordinate\n     * @param y - The y coordinate\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param color - The color of the rectangle\n     * @param lineWidth - The line width to set.\n     * @private\n     */\n    function draw_rectangle(ctx, x, y, width, height, color, lineWidth) { // TODO Should this be a public method?\n        if (lineWidth) {\n            ctx.lineWidth = lineWidth;\n        }\n        if (color) {\n            ctx.strokeStyle = color;\n        }\n\n        ctx.strokeRect(x, y, width, height);\n    }\n\n    /**\n     * Method which draws a rectangle (filled) in a graphics context.\n     * In the graphics context provided, draws a filled rectangle.\n     * Mimics XLib's XFillRectangle method in at least the basic functionality.\n     * @method fill_rectangle\n     * @param ctx - The graphics context to draw in\n     * @param x - The x coordinate\n     * @param y - The y coordinate\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param fillColor - The fill color of the rectangle\n     * @param strokeColor - The line color of the rectangle\n     * @param lineWidth - The line width to set.\n     * @private\n     */\n    function fill_rectangle(ctx, x, y, width, height, fillColor, strokeColor, lineWidth) { // TODO Should this be a public method?\n        if (lineWidth) {\n            ctx.lineWidth = lineWidth;\n        }\n        if (strokeColor) {\n            ctx.strokeStyle = strokeColor;\n        }\n        if (fillColor) {\n            ctx.fillStyle = fillColor;\n        }\n\n        ctx.fillRect(x, y, width, height);\n    }\n\n    /**\n     * @method pc2px\n     * @param perc\n     * @private\n     */\n    function pc2px(perc) {\n        return Math.floor(Math.round(255 * (perc / 100)));\n    }\n\n    /**\n     * @method to_rgb\n     * @param red\n     * @param green\n     * @param blue\n     * @private\n     */\n    function to_rgb(red, green, blue) {\n        return \"rgb(\" + Math.round(red) + \", \" + Math.round(green) + \", \" + Math.round(blue) + \")\";\n    }\n\n    /**\n     *\n     * Instead of dealing with color tables and stuff, all we really need\n     * is the ability to on-the-fly generate a color from the map\n     * @param Mx\n     * @param map\n     * @param z\n     * @private\n     */\n    mx.getcolor = function(Mx, map, z) {\n        var iz = 0;\n        for (; iz < 6 && map[iz + 1].pos === 0; iz++) {}\n\n        while (z > map[iz].pos && iz < 6) {\n            iz++;\n        }\n        if ((iz === 0) || (z >= map[iz].pos)) {\n            // above, below, or directly on boundry\n            return to_rgb(\n                pc2px(map[iz].red),\n                pc2px(map[iz].green),\n                pc2px(map[iz].blue));\n        } else {\n            // interpolation my dear watson\n            var pf = (z - map[iz - 1].pos) / (map[iz].pos - map[iz - 1].pos);\n            var zf = pc2px(pf * 100);\n            var zf1 = 255 - zf;\n            return to_rgb(\n                (zf * (map[iz].red / 100) + zf1 * (map[iz - 1].red / 100)), (zf * (map[iz].green / 100) + zf1 * (map[iz - 1].green / 100)), (zf * (map[iz].blue / 100) + zf1 * (map[iz - 1].blue / 100)));\n        }\n    };\n\n    /**\n     * @method trimlabel\n     * @param lbl\n     * @param inside\n     * @private\n     */\n    // ~= glibf1.for TRIMLABEL\n    function trimlabel(lbl, inside) {\n        var k;\n        var j;\n        if (lbl.substring(5, 8) === \".000000\") { // this line seems to always evaluate to false\n            k = 4;\n        } else {\n            k = lbl.length - 1;\n            while (lbl[k] === \"0\") {\n                k = k - 1;\n            }\n        }\n        j = 0;\n        while ((lbl[j] === \" \") && ((k - j + 1 > 5) || inside)) {\n            j = j + 1;\n        }\n        var res = lbl.substring(j, k + 1);\n        if (res.indexOf(\".\") === -1) {\n            res += \".\";\n        }\n        return res;\n    }\n\n    /**\n     * @param Mx\n     * @private\n     */\n    mx.redraw_warpbox = function(Mx) {\n        if (Mx.warpbox) {\n            if (Mx._animationFrameHandle) {\n                cancelAnimFrame(Mx._animationFrameHandle);\n            }\n            Mx._animationFrameHandle = requestAnimFrame(function() {\n                display_warpbox(Mx);\n            });\n        }\n    };\n\n    /**\n     * @method display_warpbox\n     * @param Mx\n     * @private\n     */\n    function display_warpbox(Mx) {\n        Mx._animationFrameHandle = undefined;\n        var warpbox = Mx.warpbox;\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!warpbox) {\n            return;\n        }\n\n        if (((Mx.xpos >= warpbox.xmin) && (Mx.xpos <= warpbox.xmax)) &&\n            ((Mx.ypos >= warpbox.ymin) && (Mx.ypos <= warpbox.ymax))) {\n\n            // Update the position\n            warpbox.xl = Mx.xpos;\n            warpbox.yl = Mx.ypos;\n\n            // Draw the current box\n            var x = Math.min(warpbox.xo, warpbox.xl);\n            var y = Math.min(warpbox.yo, warpbox.yl);\n            var w = Math.abs(warpbox.xl - warpbox.xo);\n            var h = Math.abs(warpbox.yl - warpbox.yo);\n\n            if ((w === 0) || (h === 0)) {\n                // Nothing to draw\n                return;\n            }\n\n            if (warpbox.mode === \"vertical\") {\n                x = Mx.l;\n                w = Mx.r - Mx.l;\n            } else if (warpbox.mode === \"horizontal\") {\n                y = Mx.t;\n                h = Mx.b - Mx.t;\n            } // else box\n\n            mx.onWidgetLayer(Mx, function() {\n                mx.erase_window(Mx);\n                mx.draw_box(Mx, \"xor\", x, y, w, h, warpbox.style.opacity, warpbox.style.fill_color);\n            });\n        }\n\n    }\n\n    /**\n     * @method log10\n     * @param val\n     * @private\n     */\n    function log10(val) {\n        return Math.log(val) / Math.log(10);\n    }\n\n\n    /**\n     * Attempts to format a number in the same manner\n     * as the FORTRAN format code 1p1g16.9\n     * 1p1g16.9\n     * 16 character fields\n     * 9 for decimals\n     * 3 for exponent (E)\n     * 1 for sign\n     * 1 for starting 0\n     * 1 for decimal point\n     * 1 for blank space\n     *\n     * The E format code is used for scientific (exponential) notation.\n     * The value is rounded to d decimal positions and right-justified\n     * into an external field that is w characters wide. The value of w\n     * must be large enough to include a minus sign when necessary, at least\n     * one digit to the left of the decimal point, the decimal point,\n     * d digits to the right of the decimal point, a plus or minus sign for\n     * the exponent, the character \"e\" or \"E\", and at least two characters for the exponent.\n     *\n     * The G format code uses the F output style when reasonable and\n     * E for other values, but displays exactly d significant digits\n     * rather than d digits following the decimal point.\n     *\n     * @param num\n     * @param w\n     * @param d\n     * @param leading_nonzer\n     * @private\n     */\n    mx.format_g = function(num, w, d, leading_nonzero) {\n        var w = Math.min(w, d + 7);\n        var f = Math.abs(num).toString();\n\n        var decloc = f.indexOf(\".\");\n        // If there is no decimal point, add one at the end.\n        if (decloc === -1) {\n            f = f + \".\";\n            decloc = f.length;\n        }\n\n        var exp = 0;\n        var eloc = f.indexOf(\"e\");\n        // If there is already an 'e' in the string parse it out\n        if (eloc !== -1) {\n            exp = parseInt(f.slice(eloc + 1, f.length), 10);\n            f = f.slice(0, eloc);\n        }\n\n        // Add zero's to the end if necessary\n        var dz = Math.min(d - (f.length - decloc) + 1, d);\n        for (var i = 0; i < dz; i++) {\n            f = f + \"0\";\n        }\n\n        if (num !== 0) {\n            if (Math.abs(num) < 1.0) {\n                if (f.slice(0, 2) === \"0.\") {\n                    // Shift to the left until the first number is non-zero\n                    for (var i = 2; i < f.length; i++) {\n                        if (f[i] === \"0\") {\n                            exp -= 1;\n                        } else {\n                            f = \"0.\" + f.slice(i, i + d);\n                            break;\n                        }\n                    }\n                } else {\n                    f = f.slice(0, d + 2);\n                }\n            } else if (decloc > d) {\n                var exp = Math.max(0, decloc - 1);\n                f = f[0] + \".\" + f.slice(1, d + 1);\n            } else {\n                f = f.slice(0, d + 2);\n            }\n        }\n\n        if (exp === 0) {\n            f = f + \"    \";\n        } else {\n            var e = mx.pad(Math.abs(exp).toString(), 2, \"0\");\n            if (exp < 0) {\n                f = f + \"E-\" + e;\n            } else {\n                f = f + \"E+\" + e;\n            }\n        }\n\n        if (num < 0) {\n            f = \"-\" + f;\n        } else {\n            f = \" \" + f;\n        }\n        return f;\n    };\n\n    /**\n     *\n     * Behave like fortran format code\n     * fs.d\n     * @param num the number to format\n     * @param s the width of digits\n     * @param d number of digits after the decimal\n     * @private\n     */\n    mx.format_f = function(num, s, d) {\n        d = Math.max(Math.min(d, 20), 0);\n        var f = num.toFixed(d).toString();\n        f = mx.pad(f, (s + d), \" \");\n        return f;\n    };\n\n    /**\n     * @param s\n     * @param size\n     * @param c\n     * @private\n     */\n    mx.pad = function(s, size, c) {\n        while (s.length < size) {\n            s = c + s;\n        }\n        return s;\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param shape\n     * @param func\n     * @param label\n     * @private\n     */\n    // ~= MX$SHADOWBOX\n    mx.legacy_shadowbox = function(Mx, x, y, w, h, shape, func, label) {\n        var length = label.length; // Original method declaration includes a length - but it only represents the length of the label\n\n        var xt = 0; // Originally an int\n        var yt = 0; // Originally an int\n        var bw = 0; // Originally an int\n\n        var pix = []; // Originally declared as a size 11 XPoint array\n        for (var cnt = 0; cnt < 11; cnt++) { // initializing 11 points in the array\n            pix[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n        var fill = !(func === 1 || func === -1); // Originally a bool\n\n        // Removed the G.BW section - since we don't need to support black & white displays\n\n        var j = (shape === mx.L_ArrowLeft || shape === mx.L_ArrowUp) ? 1 : 2;\n\n        if (func !== 0 && mx.GBorder > 0) {\n            bw = m.trunc(Math.min(w, h) / 3);\n            bw = Math.max(1, Math.min(bw, mx.GBorder));\n        }\n\n        if (bw > 0) {\n            /* outer shape */\n            pix[0].x = pix[1].x = x;\n            pix[8].x = pix[9].x = x + w;\n            pix[1].y = pix[8].y = y;\n            pix[0].y = pix[9].y = y + h;\n\n            switch (shape) {\n                case mx.L_ArrowLeft:\n                    pix[0].y = pix[1].y = y + m.trunc(h / 2);\n                    x += 2;\n                    --w;\n                    break;\n                case mx.L_ArrowRight:\n                    pix[8].y = pix[9].y = y + m.trunc(h / 2);\n                    --x;\n                    --w;\n                    break;\n                case mx.L_ArrowUp:\n                    pix[1].x = pix[8].x = x + m.trunc(w / 2);\n                    y += 2;\n                    --h;\n                    break;\n                case mx.L_ArrowDown:\n                    pix[0].x = pix[9].x = x + m.trunc(w / 2);\n                    --y;\n                    --h;\n                    break;\n            }\n            pix[2] = pix[8];\n            pix[10] = pix[0];\n\n            x += bw;\n            y += bw;\n            w -= 2 * bw;\n            h -= 2 * bw;\n        }\n\n        /* inner shape */\n        pix[4].x = pix[5].x = x;\n        pix[3].x = pix[6].x = x + w;\n        pix[3].y = pix[4].y = y;\n        pix[5].y = pix[6].y = y + h;\n        switch (shape) {\n            case mx.L_ArrowLeft:\n                pix[4].y = pix[5].y = y + m.trunc(h / 2);\n                break;\n            case mx.L_ArrowRight:\n                pix[3].y = pix[6].y = y + m.trunc(h / 2);\n                break;\n            case mx.L_ArrowUp:\n                pix[3].x = pix[4].x = x + m.trunc(w / 2);\n                break;\n            case mx.L_ArrowDown:\n                pix[5].x = pix[6].x = x + m.trunc(w / 2);\n                break;\n        }\n        pix[7] = pix[3];\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (bw > 0) {\n            ctx.fillStyle = (func > 0) ? Mx.xwts : Mx.xwbs; // Set foreground color\n            fill_poly(ctx, pix.slice(0, 7));\n            //\tif (shape !== 1) { draw_poly(ctx, pix.slice(0,7)); } // TODO what shape is this neccessary with - causes an issue with arrows\n\n            ctx.fillStyle = (func < 0) ? Mx.xwts : Mx.xwbs; // Set foreground color\n            fill_poly(ctx, pix.slice(5, 11));\n            //if (shape !== 1) { draw_poly(ctx, pix.slice(5, 11)); } // TODO what shape is this neccessary with - causes an issue with arrows\n        }\n\n        if (fill) {\n            ctx.fillStyle = Mx.xwbg; // Set foreground color\n            fill_poly(ctx, pix.slice(3, 8));\n            //if (shape !== 1) { draw_poly(ctx, pix.slice(3, 8)); } // TODO what shape is this neccessary with - causes an issue with arrows\n        }\n\n        ctx.fillStyle = Mx.xwfg; // Set foreground color\n        ctx.textBaseline = \"alphabetic\"; // Reset vertical text alignment\n\n        if (fill && length > 0) {\n            length = Math.min(length, m.trunc(w / Mx.text_w));\n            length = Math.max(length, 1);\n            xt = x + m.trunc((w - length * Mx.text_w) / 2);\n            yt = y + m.trunc((h + 0.7 * Mx.text_h) / 2);\n            ctx.fillText(label, xt, yt); // Draw a string\n        }\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @param shape\n     * @param func\n     * @param label\n     * @private\n     */\n    // ~= MX$SHADOWBOX\n    mx.sigplot_shadowbox = function(Mx, x, y, w, h, shape, func, label, alpha) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        var length = label.length; // Original method declaration includes a length - but it only represents the length of the label\n\n        var color = (func < 0) ? Mx.xwts : Mx.xwbs;\n\n        alpha = alpha || 1.0;\n\n        var pix = []; // Originally declared as a size 11 XPoint array\n        for (var cnt = 0; cnt < 11; cnt++) { // initializing 11 points in the array\n            pix[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n\n        switch (shape) {\n            case mx.L_ArrowLeft:\n            case mx.L_ArrowRight:\n            case mx.L_ArrowUp:\n            case mx.L_ArrowDown:\n                var pix = mx.chevron(shape, x, y, w, h);\n                ctx.fillStyle = (func > 0) ? Mx.xwts : Mx.xwbs;\n                fill_poly(ctx, pix.slice(0, 6));\n                break;\n            default:\n                mx.draw_round_box(Mx, color, x, y, w, h, alpha, Mx.xwbg, 5, Mx.xwbs);\n                break;\n        }\n\n        ctx.fillStyle = Mx.xwfg; // Set foreground color\n        ctx.textBaseline = \"alphabetic\"; // Reset vertical text alignment\n\n        var fill = !(func === 1 || func === -1); // Originally a bool\n        if (fill && length > 0) {\n            length = Math.min(length, m.trunc(w / Mx.text_w));\n            length = Math.max(length, 1);\n            var xt = x + m.trunc((w - length * Mx.text_w) / 2);\n            var yt = y + m.trunc((h + 0.7 * Mx.text_h) / 2);\n            ctx.fillText(label, xt, yt); // Draw a string\n        }\n    };\n\n    if (mx.LEGACY_RENDER) { // TODO new-style conditional\n        mx.shadowbox = mx.legacy_shadowbox;\n    } else {\n        mx.shadowbox = mx.sigplot_shadowbox;\n    }\n\n    mx.chevron = function(shape, x, y, w, h, e) {\n        // Figure out the largest square dimension\n        var q = Math.min(w, h);\n\n        // if the edge width isn't provided use a decent one\n        if (!e) {\n            e = q * 0.25;\n        }\n\n\n\n        // Initialize the pixel array\n        var pix = [];\n        for (var cnt = 0; cnt < 6; cnt++) { // initializing 11 points in the array\n            pix[cnt] = {\n                x: 0,\n                y: 0\n            };\n        }\n\n\n        var x_offset = m.trunc(((w - q) / 2) + (q / 4) - (e / (2 * 1.414)));\n        var y_offset = m.trunc(((h - q) / 2) + (q / 4) - (e / (2 * 1.414)));\n        switch (shape) {\n            case mx.L_ArrowLeft:\n                // Chevron points from the tip around the edge clockwise\n                pix[0].x = x + x_offset;\n                pix[0].y = y + m.trunc(q / 2);\n                pix[1].x = x + x_offset + m.trunc(q / 2);\n                pix[1].y = y;\n                pix[2].x = x + x_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[2].y = y + m.trunc(e / 1.414);\n                pix[3].x = x + x_offset + m.trunc((2 * e) / 1.414);\n                pix[3].y = y + m.trunc(q / 2);\n                pix[4].x = x + x_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[4].y = y + h - m.trunc(e / 1.414);\n                pix[5].x = x + x_offset + m.trunc(q / 2);\n                pix[5].y = y + q;\n                break;\n            case mx.L_ArrowRight:\n                // Chevron points from the tip around the edge clockwise\n                pix[0].x = x + w - x_offset;\n                pix[0].y = y + m.trunc(q / 2);\n                pix[1].x = x + w - x_offset - m.trunc(q / 2);\n                pix[1].y = y;\n                pix[2].x = x + w - x_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[2].y = y + m.trunc(e / 1.414);\n                pix[3].x = x + w - x_offset - m.trunc((2 * e) / 1.414);\n                pix[3].y = y + m.trunc(q / 2);\n                pix[4].x = x + w - x_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[4].y = y + h - m.trunc(e / 1.414);\n                pix[5].x = x + w - x_offset - m.trunc(q / 2);\n                pix[5].y = y + q;\n                break;\n            case mx.L_ArrowUp:\n                // Chevron points from the tip around the edge counter-clockwise\n                pix[0].x = x + m.trunc(q / 2);\n                pix[0].y = y + y_offset;\n                pix[1].x = x;\n                pix[1].y = y + y_offset + m.trunc(q / 2);\n                pix[2].x = x + m.trunc(e / 1.414);\n                pix[2].y = y + y_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[3].x = x + m.trunc(q / 2);\n                pix[3].y = y + y_offset + m.trunc((2 * e) / 1.414);\n                pix[4].x = x + w - m.trunc(e / 1.414);\n                pix[4].y = y + y_offset + m.trunc((q / 2) + (e / 1.414));\n                pix[5].x = x + q;\n                pix[5].y = y + y_offset + m.trunc(q / 2);\n                break;\n            case mx.L_ArrowDown:\n                // Chevron points from the tip around the edge counter-clockwise\n                pix[0].x = x + m.trunc(q / 2);\n                pix[0].y = y + h - y_offset;\n                pix[1].x = x;\n                pix[1].y = y + h - y_offset - m.trunc(q / 2);\n                pix[2].x = x + m.trunc(e / 1.414);\n                pix[2].y = y + h - y_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[3].x = x + m.trunc(q / 2);\n                pix[3].y = y + h - y_offset - m.trunc((2 * e) / 1.414);\n                pix[4].x = x + w - m.trunc(e / 1.414);\n                pix[4].y = y + h - y_offset - m.trunc((q / 2) + (e / 1.414));\n                pix[5].x = x + q;\n                pix[5].y = y + h - y_offset - m.trunc(q / 2);\n                break;\n        }\n\n        return pix;\n    };\n\n    /**\n     * @param Mx\n     * @param mouseEvent\n     * @private\n     */\n    // ~= mx_ifevent\n    mx.ifevent = function(Mx, mouseEvent) {\n        Mx.button_press = 0;\n        Mx.button_release = 0;\n        Mx.state_mask = 0;\n\n        var rect = mouseEvent.target.getBoundingClientRect();\n        var eventXPos = (mouseEvent.offsetX === undefined) ? (mouseEvent.pageX - rect.left - window.scrollX) : mouseEvent.offsetX;\n        var eventYPos = (mouseEvent.offsetX === undefined) ? (mouseEvent.pageY - rect.top - window.scrollY) : mouseEvent.offsetY;\n\n        //\t\tvar eventXPos = (mouseEvent.offsetX === undefined) ? mouseEvent.layerX : mouseEvent.offsetX;\n        //\t\tvar eventYPos = (mouseEvent.offsetY === undefined) ? mouseEvent.layerY : mouseEvent.offsetY;\n\n        switch (mouseEvent.type) {\n            case \"mousedown\":\n                Mx.xpos = m.bound(eventXPos, 0, Mx.width);\n                Mx.ypos = m.bound(eventYPos, 0, Mx.height);\n                switch (mouseEvent.which) {\n                    case 1:\n                        Mx.button_press = 1;\n                        break;\n                    case 2:\n                        Mx.button_press = 2;\n                        break;\n                    case 3:\n                        Mx.button_press = 3;\n                        break;\n                    case 4:\n                        Mx.button_press = 4;\n                        break;\n                    case 5:\n                        Mx.button_press = 5;\n                }\n                //Mx.state_mask = TODO\n                break;\n            case \"mouseup\":\n                Mx.xpos = m.bound(eventXPos, 0, Mx.width);\n                Mx.ypos = m.bound(eventYPos, 0, Mx.height);\n                switch (mouseEvent.which) {\n                    case 1:\n                        Mx.button_release = 1;\n                        break;\n                    case 2:\n                        Mx.button_release = 2;\n                        break;\n                    case 3:\n                        Mx.button_release = 3;\n                        break;\n                    case 4:\n                        Mx.button_release = 4;\n                        break;\n                    case 5:\n                        Mx.button_release = 5;\n                }\n                //Mx.state_mask = TODO\n                break;\n        }\n    };\n\n    /**\n     * @param sv\n     * @private\n     */\n    //\n    // ~= scroll_real2pix\n    //\n    // TODO Refactor real2pix to return an object instead of sending in reference vars?\n    mx.scroll_real2pix = function(sv) {\n        // Param types:\n        // sv - mx.SCROLLBAR\n\n        if (sv.range === 0.0) {\n            return {\n                s1: sv.a1,\n                sw: sv.a2 - sv.a1\n            };\n            //\t\t\tout.s1 = sv.a1;\n            //\t\t\tout.sw = sv.a2 - sv.a1;\n        } else {\n            var dv; // real_8\n            var ts1; // int_2\n            var ts2; // int_2\n\n            dv = (sv.a2 - sv.a1) / sv.trange;\n\n            ts1 = sv.a1 + Math.floor(0.5 + (sv.smin - sv.tmin) * dv);\n            ts2 = ts1 + Math.floor(0.5 + sv.srange * dv);\n\n            if (ts1 > sv.a2 - sv.swmin) {\n                ts1 = sv.a2 - sv.swmin;\n            } else {\n                ts1 = Math.max(ts1, sv.a1);\n            }\n\n            if (ts2 < sv.a1 + sv.swmin) {\n                ts2 = sv.a1 + sv.swmin;\n            } else {\n                ts2 = Math.min(ts2, sv.a2);\n            }\n\n            return {\n                s1: ts1,\n                sw: Math.max(ts2 - ts1, sv.swmin)\n            };\n            //\t\t\tout.s1 = ts1;\n            //\t\t\tout.sw = Math.max(ts2 - ts1, sv.swmin);\n        }\n    };\n\n    /**\n     * Method to re-draw a scrollbar after update. Logic taken from mx.scroll's UPDATE section.\n     * @param sv The scrollbar to work with.\n     * @param Mx The Mx context to work with.\n     * @param op Optional op-code for XW_DRAW\n     * @private\n     */\n    mx.redrawScrollbar = function(sv, Mx, op) {\n        var x;\n        var y;\n        var xcc;\n        var ycc;\n        var xss;\n        var yss;\n        var p1;\n        var op1; // int\n        var s1;\n        var sw; // int_2\n\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        var scrollReal2PixOut = mx.scroll_real2pix(sv);\n        s1 = scrollReal2PixOut.s1;\n        sw = scrollReal2PixOut.sw;\n\n        p1 = s1;\n        op1 = sv.s1;\n\n        xcc = sv.x;\n        ycc = sv.y;\n        xss = sv.w;\n        yss = sv.h;\n\n        // horizontal scroll bar\n        if (sv.origin & 1) {\n            y = ycc + yss / 2;\n            if (sv.origin & 2) {\n                op1 = xss - op1 - sv.sw;\n                p1 = xss - p1 - sw;\n            }\n            if (op === mx.XW_DRAW) {\n                var arrow = sv.arrow; // int\n\n                mx.shadowbox(Mx, xcc, ycc, arrow, yss - 1, mx.L_ArrowLeft, 2, \"\", 0);\n                mx.shadowbox(Mx, xcc + xss - arrow, ycc, arrow - 1, yss, mx.L_ArrowRight, 2, \"\", 0);\n            }\n\n\n            if (mx.LEGACY_RENDER) {\n                mx.draw_line(Mx, Mx.fg, xcc + sv.a1, y, xcc + sv.a2, y);\n                mx.shadowbox(Mx, xcc + p1, ycc, sw + 1, yss, 1, 2, \"\", 0);\n            } else {\n                // Veritical gradiant\n                var lingrad = ctx.createLinearGradient(xcc + sv.a1, 0, xcc + sv.a2, 0);\n                lingrad.addColorStop(0, Mx.xwbs);\n                lingrad.addColorStop(0.5, Mx.xwts);\n                lingrad.addColorStop(1, Mx.xwbs);\n                mx.draw_line(Mx, lingrad, xcc + sv.a1, y, xcc + sv.a2, y, 1);\n\n                var lingrad = ctx.createLinearGradient(0, ycc, 0, ycc + yss);\n                lingrad.addColorStop(0.1, Mx.xwts);\n                lingrad.addColorStop(0.75, Mx.xwbs);\n                mx.draw_round_box(Mx, Mx.xwbg, xcc + p1, ycc, sw + 1, yss, 1, lingrad, 8, Mx.xwbs);\n            }\n\n            // else vertical scroll bar\n        } else {\n            x = xcc + m.trunc(xss / 2);\n            if (sv.origin <= 2) {\n                op1 = yss - op1 - sv.sw;\n                p1 = yss - p1 - sw;\n            }\n            if (op === mx.XW_DRAW) {\n                var arrow = sv.arrow; // int\n                mx.shadowbox(Mx, xcc, ycc, xss - 1, arrow, mx.L_ArrowUp, 2, \"\", 0);\n                mx.shadowbox(Mx, xcc, ycc + yss - arrow, xss - 1, arrow, mx.L_ArrowDown, 2, \"\", 0);\n            }\n\n            if (mx.LEGACY_RENDER) {\n                mx.draw_line(Mx, Mx.fg, x, ycc + sv.a1, x, ycc + sv.a2);\n                mx.shadowbox(Mx, xcc, ycc + p1, xss, sw + 1, 1, 2, \"\", 0);\n            } else {\n                // Horizontal gradiant\n                var lingrad = ctx.createLinearGradient(0, ycc + sv.a1, 0, ycc + sv.a2);\n                lingrad.addColorStop(0, Mx.xwbs);\n                lingrad.addColorStop(0.5, Mx.xwts);\n                lingrad.addColorStop(1, Mx.xwbs);\n                mx.draw_line(Mx, lingrad, x, ycc + sv.a1, x, ycc + sv.a2, 1);\n\n                var lingrad = ctx.createLinearGradient(xcc, 0, xcc + xss, 0);\n                lingrad.addColorStop(0.1, Mx.xwts);\n                lingrad.addColorStop(0.75, Mx.xwbs);\n                mx.draw_round_box(Mx, Mx.xwbg, xcc - 1, ycc + p1, xss, sw + 1, 1, lingrad, 8, Mx.xwbs);\n            }\n\n        }\n\n        sv.s1 = s1;\n        sv.sw = sw;\n    };\n\n    /**\n     * @param {Object} Mx - the Mx object\n     * @param {number} x - the real-world x coordinate\n     * @param {number} y - the real-world y coordinate\n     * @param {boolean} [clip=false] set to clip the returned value to the plot area\n     * @returns {Object} pixel - the x,y coordinates in pixel coordinate space\n     * @returns {number} pixel.clipped - true if the point would have or has been clipped\n     * @private\n     */\n    mx.real_to_pixel = function(Mx, x, y, clip) {\n        var stk4 = mx.origin(Mx.origin, 4, Mx.stk[Mx.level]);\n        if ((stk4.xscl === 0.0) || (stk4.yscl === 0.0)) {\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n\n        var left = stk4.x1;\n        var top = stk4.y1;\n\n        var xxmin = stk4.xmin;\n        var xscl = 1.0 / stk4.xscl;\n\n        var yymin = stk4.ymin;\n        var yscl = 1.0 / stk4.yscl;\n\n        var clipped_x = false;\n        var clipped_y = false;\n\n        if (x !== null) {\n            clipped_x = ((x > stk4.xmax) || (x < stk4.xmin));\n            if (clip) {\n                x = Math.min(x, stk4.xmax);\n                x = Math.max(x, stk4.xmin);\n            }\n            x = Math.round((x - xxmin) * xscl) + left;\n        }\n        if (y !== null) {\n            clipped_y = ((y > stk4.ymin) || (y < stk4.ymax));\n            if (clip) {\n                y = Math.min(y, stk4.ymin);\n                y = Math.max(y, stk4.ymax);\n            }\n            y = Math.round((y - yymin) * yscl) + top;\n        }\n\n        x = Math.round(x);\n        y = Math.round(y);\n\n        return {\n            x: x,\n            y: y,\n            clipped_x: clipped_x,\n            clipped_y: clipped_y,\n            clipped: (clipped_x || clipped_y)\n        };\n    };\n\n    /**\n     * @param Mx\n     * @param xpos\n     * @param ypos\n     * @private\n     */\n    mx.pixel_to_real = function(Mx, xpos, ypos) {\n        var iretx = Math.min(Mx.r, Math.max(Mx.l, xpos));\n        var irety = Math.min(Mx.b, Math.max(Mx.t, ypos));\n        var retx;\n        var rety;\n\n        var k = Mx.level;\n        if ((Mx.origin !== 2) && (Mx.origin !== 3)) {\n            retx = Mx.stk[k].xmin + (iretx - Mx.stk[k].x1) * Mx.stk[k].xscl;\n        } else {\n            retx = Mx.stk[k].xmin + (Mx.stk[k].x2 - iretx) * Mx.stk[k].xscl;\n        }\n        if (Mx.origin > 2) {\n            rety = Mx.stk[k].ymin + (irety - Mx.stk[k].y1) * Mx.stk[k].yscl;\n        } else {\n            rety = Mx.stk[k].ymin + (Mx.stk[k].y2 - irety) * Mx.stk[k].yscl;\n        }\n\n        return {\n            x: retx,\n            y: rety\n        };\n    };\n\n    /**\n     * @param Mx\n     * @param map\n     * @param ncolors\n     * @private\n     */\n    mx.colormap = function(Mx, map, ncolors) {\n        Mx.pixel = new ColorMap(map, {\n            ncolors: ncolors\n        });\n        return;\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @private\n     */\n    mx.colorbar = function(Mx, x, y, w, h) {\n        if (!Mx.pixel) {\n            m.log.warn(\"COLORMAP not initialized, cannot draw colorbar\");\n            return;\n        }\n        Mx.pixel.setRange(0, Mx.pixel.map.length);\n        for (var j = 1; j < h; j++) {\n            var cidx = Math.floor(Mx.pixel.map.length * (j - 1) / h);\n            mx.draw_line(Mx, cidx, x, y + h - j, x + w, y + h - j);\n        }\n        mx.draw_box(Mx, Mx.fg, x + 0.5, y, w, h);\n    };\n\n    /**\n     * @param Mx\n     * @param x\n     * @param y\n     * @param w\n     * @param h\n     * @private\n     */\n    mx.legend_colorbar = function(Mx, x, y, w, h) {\n        for (var j = 1; j < w; j++) {\n            var cidx = Math.floor(Mx.pixel.length * (j - 1) / w);\n            mx.draw_line(Mx, cidx, x + w - j, y, x + w - j, y + h);\n        }\n        mx.draw_box(Mx, Mx.fg, x + 0.5, y, w, h);\n    };\n\n    /**\n     * Render image buffer to canvas.\n     *\n     * If we don't have access to Uint8ClampedArray (i.e. Firefox 3.6)\n     * use a slower approach that only supports rasters up to the size\n     * limit of the canvas\n     * @private\n     *\n     * @param ctx\n     *   {context} a canvas 2d context\n     * @param buf\n     *   {ArrayBuffer} a buffer of 32-bit image data\n     * @param opacity\n     *   the opacity to render the image with\n     * @param smoothing\n     *   if image smoothing should be enabled\n     * @param sx\n     *   source x position\n     * @param sy\n     *   source y position\n     * @param sw\n     *   source width\n     * @param sh\n     *   source height\n     * @param x\n     *   optional x canvas dest\n     * @param y\n     *   optional y canvas dest\n     * @param w\n     *   optional width\n     * @param h\n     *   optional height\n     */\n    function renderImageNoTypedArrays(Mx, ctx, buf, opacity, smoothing, x, y, w, h, sx, sy, sw, sh) {\n        if (sx === undefined) {\n            sx = 0;\n        }\n        if (sy === undefined) {\n            sy = 0;\n        }\n        if (sw === undefined) {\n            sw = buf.width - sx;\n        }\n        if (sh === undefined) {\n            sh = buf.height - sy;\n        }\n\n        // If the source buffer is small enough to be directly rendered, do that\n        Mx._renderCanvas.width = buf.width;\n        Mx._renderCanvas.height = buf.height;\n\n        var imgctx = Mx._renderCanvas.getContext(\"2d\");\n        var imgd = imgctx.createImageData(Mx._renderCanvas.width, Mx._renderCanvas.height);\n        var buf8 = new Uint8Array(buf);\n        for (var yy = 0; yy < buf.height; ++yy) {\n            for (var xx = 0; xx < buf.width; ++xx) {\n                var index = ((yy * buf.width) + xx) * 4;\n                imgd.data[index] = buf8[index]; // red\n                imgd.data[index + 1] = buf8[index + 1]; // green\n                imgd.data[index + 2] = buf8[index + 2]; // blue\n                imgd.data[index + 3] = 255; // alpha\n            }\n        }\n        imgctx.putImageData(imgd, 0, 0);\n\n        // Render the image to the destination\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        if (!smoothing) {\n            ctx.imageSmoothingEnabled = false;\n            ctx.mozImageSmoothingEnabled = false;\n            ctx.webkitImageSmoothingEnabled = false;\n        }\n        ctx.drawImage(Mx._renderCanvas, sx, sy, sw, sh, x, y, w, h);\n        ctx.restore();\n    }\n\n    /**\n     * @private\n     *\n     * @param ctx\n     *   {context} a canvas 2d context\n     * @param buf\n     *   {ArrayBuffer} a buffer of 32-bit image data\n     * @param opacity\n     *   the opacity to render the image with\n     * @param smoothing\n     *   if image smoothing should be enabled\n     * @param sx\n     *   source x position\n     * @param sy\n     *   source y position\n     * @param sw\n     *   source width\n     * @param sh\n     *   source height\n     * @param x\n     *   optional x canvas dest\n     * @param y\n     *   optional y canvas dest\n     * @param w\n     *   optional width\n     * @param h\n     *   optional height\n     */\n    function renderImageTypedArrays(Mx, ctx, buf, opacity, smoothing, x, y, w, h, sx, sy, sw, sh) {\n        if (sx === undefined) {\n            sx = 0;\n        }\n        if (sy === undefined) {\n            sy = 0;\n        }\n        if (sw === undefined) {\n            sw = buf.width - sx;\n        }\n        if (sh === undefined) {\n            sh = buf.height - sy;\n        }\n\n        if ((buf.width < 32768) && (buf.height < 32768)) {\n            // If the source buffer is small enough to be directly rendered, do that\n            Mx._renderCanvas.width = buf.width;\n            Mx._renderCanvas.height = buf.height;\n\n            var imgctx = Mx._renderCanvas.getContext(\"2d\");\n            var imgd = imgctx.createImageData(Mx._renderCanvas.width, Mx._renderCanvas.height);\n\n            // TODO - This may not be portable to all browsers, if not\n            // we need to choose between this approach and the traditional\n            // for-loop based approach\n            var buf8 = new Uint8ClampedArray(buf);\n            imgd.data.set(buf8);\n            imgctx.putImageData(imgd, 0, 0);\n        } else {\n            if ((sw < 32768) && (sh < 32768)) {\n                // The clipped image is small enough to directly render\n                Mx._renderCanvas.width = sw;\n                Mx._renderCanvas.height = sh;\n                scaleImage(Mx._renderCanvas, buf, sx, sy, sw, sh);\n            } else {\n                // Downscale to twice the destination size\n                Mx._renderCanvas.width = Math.min(w * 2, buf.width);\n                Mx._renderCanvas.height = Math.min(h * 2, buf.height);\n                scaleImage(Mx._renderCanvas, buf, sx, sy, sw, sh);\n                sw = Mx._renderCanvas.width;\n                sh = Mx._renderCanvas.height;\n            }\n            sx = 0;\n            sy = 0;\n        }\n\n        // Render the image to the destination\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        if (!smoothing) {\n            ctx.imageSmoothingEnabled = false;\n            ctx.mozImageSmoothingEnabled = false;\n            ctx.webkitImageSmoothingEnabled = false;\n        }\n        ctx.drawImage(Mx._renderCanvas, sx, sy, sw, sh, x, y, w, h);\n        ctx.restore();\n    }\n\n    /**\n     * Scale the image data (represented by buf) into the destination canvas\n     * using nearest neighbor.  In genearl, you should just use the scaling\n     * provided by drawImage...but if the buf is greater than 32767 pixels in\n     * either dimension that won't work and you have to use this.\n     *\n     * @param img\n     *   A canvas object\n     * @param buf\n     *   An ArrayBuf with .width and .height elements\n     *\n     * @private\n     */\n    function scaleImage(img, buf, sx, sy, sw, sh) {\n        // Source buffer, expected to have .width and .height elements\n        var src = new Uint32Array(buf);\n\n        if (!sw) {\n            sw = buf.width;\n        }\n        if (!sh) {\n            sh = buf.height;\n        }\n        if (!sx) {\n            sx = 0;\n        }\n        if (!sy) {\n            sy = 0;\n        }\n\n        // Cache to avoid get width calls in tight loop\n        var w = img.width;\n        var h = img.height;\n\n        // Destination element\n        var imgctx = img.getContext(\"2d\");\n        var imgd = imgctx.createImageData(w, h);\n        var ibuf = new ArrayBuffer(imgd.data.length);\n        var buf8 = new Uint8ClampedArray(ibuf);\n        var dest = new Uint32Array(ibuf);\n\n        // Scaling factor\n        var width_scaling = sw / w;\n        var height_scaling = sh / h;\n\n        // Perform the scaling\n        var xx = 0;\n        var yy = 0;\n        var jj = 0;\n        for (var i = 0; i < dest.length; i++) {\n            xx = Math.round(Math.floor(i % w) * width_scaling) + sx;\n            yy = Math.round(Math.floor(i / w) * height_scaling) + sy;\n            jj = Math.floor((yy * buf.width) + xx);\n            dest[i] = src[jj];\n        }\n\n        // Set the data\n        imgd.data.set(buf8);\n        imgctx.putImageData(imgd, 0, 0);\n    }\n\n    var renderImage = (typeof Uint8ClampedArray === 'undefined') ? renderImageNoTypedArrays : renderImageTypedArrays;\n\n    /**\n     * @param Mx\n     * @param img\n     * @param shift\n     * @private\n     */\n    mx.shift_image_rows = function(Mx, buf, shift) {\n        var imgd = new Uint32Array(buf);\n        if (shift > 0) { // shift down\n            shift = shift * buf.width;\n            imgd.set(imgd.subarray(0, imgd.length - shift), shift);\n        } else if (shift < 0) { // shift up\n            shift = Math.abs(shift) * buf.width;\n            imgd.set(imgd.subarray(shift));\n        }\n\n        return buf;\n    };\n\n    /**\n     * @param Mx\n     * @param img\n     * @param data\n     * @param row\n     * @param zmin\n     * @param zmax\n     * @private\n     */\n    mx.update_image_row = function(Mx, buf, data, row, zmin, zmax, xcompression) {\n        var imgd = new Uint32Array(buf, row * buf.width * 4, buf.width);\n\n        Mx.pixel.setRange(zmin, zmax);\n\n        var xc = Math.max(1, data.length / buf.width);\n        for (var i = 0; i < buf.width; i++) {\n            var didx = Math.floor(i * xc);\n            var value = data[didx];\n            if (xc > 1) {\n                if (xcompression === 1) { // average\n                    for (var j = 1; j < xc; j++) {\n                        value += data[didx + j];\n                    }\n                    value = (value / xc);\n                } else if (xcompression === 2) { // min\n                    for (var j = 1; j < xc; j++) {\n                        value = Math.min(value, data[didx + j]);\n                    }\n                } else if (xcompression === 3) { // max\n                    for (var j = 1; j < xc; j++) {\n                        value = Math.max(value, data[didx + j]);\n                    }\n                } else if (xcompression === 4) { // first\n                    value = data[i];\n                } else if (xcompression === 5) { // max abs\n                    for (var j = 1; j < xc; j++) {\n                        value = Math.max(Math.abs(value), Math.abs(data[didx + j]));\n                    }\n                }\n            }\n            var color = Mx.pixel.getColor(value);\n            if (color) {\n                imgd[i] = color.color;\n\n            }\n        }\n\n        return imgd;\n    };\n\n    /**\n     * @param Mx\n     * @param data\n     * @param w\n     * @param h\n     * @param Mx\n     * @param zmin\n     * @param zmax\n     * @private\n     */\n    mx.create_image = function(Mx, data, subsize, w, h, zmin, zmax, xcompression) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!Mx.pixel) {\n            console.log(\"COLORMAP not initialized, defaulting to foreground\");\n            Mx.pixel = new ColorMap(m.Mc.colormap[1].colors);\n        }\n\n\n        Mx.pixel.setRange(zmin, zmax);\n        w = Math.ceil(w);\n        h = Math.ceil(h);\n        var buf = new ArrayBuffer(w * h * 4);\n        buf.width = w;\n        buf.height = h;\n\n        var nxc = Math.max(1, subsize / w);\n\n        var imgd = new Uint32Array(buf);\n        if (data) {\n            for (var i = 0; i < imgd.length; i++) {\n                var ix;\n                var iy;\n                if ((Mx.origin === 1) || (Mx.origin === 4)) {\n                    ix = Math.floor(i % w);\n                } else {\n                    ix = w - Math.floor(i % w) - 1;\n                }\n                if ((Mx.origin === 3) || (Mx.origin === 4)) {\n                    iy = Math.floor(i / w);\n                } else {\n                    iy = h - Math.floor(i / w) - 1;\n                }\n                if (iy === 1) {\n                    var test = 1;\n                }\n                var didx = (iy * subsize) + Math.floor(ix * nxc);\n                var value = data[didx];\n                if (nxc > 1) {\n                    if (xcompression === 1) { // average\n                        for (var j = 1; j < nxc; j++) {\n                            value += data[didx + j];\n                        }\n                        value = value / nxc;\n                    } else if (xcompression === 2) { // min\n                        for (var j = 1; j < nxc; j++) {\n                            value = Math.min(value, data[didx + j]);\n                        }\n                    } else if (xcompression === 3) { // max\n                        for (var j = 1; j < nxc; j++) {\n                            value = Math.max(value, data[didx + j]);\n                        }\n                    } else if (xcompression === 4) { // first\n                        value = data[didx];\n                    } else if (xcompression === 5) { // max abs\n                        for (var j = 1; j < nxc; j++) {\n                            value = Math.max(Math.abs(value), Math.abs(data[didx + j]));\n                        }\n                    }\n                }\n\n\n                var color = Mx.pixel.getColor(value);\n                if (color) {\n                    imgd[i] = color.color;\n                }\n            }\n        }\n\n        // Return the image in case the caller wishes to cache it\n        return buf;\n    };\n\n    /**\n     * @param Mx\n     * @param data\n     * @param nx\n     * @param ny\n     * @param nex\n     * @param ney\n     * @param xd\n     * @param yd\n     * @param level\n     * @param opacity\n     * @param smoothing\n     * @private\n     */\n    mx.put_image = function(Mx, data, nx, ny, nex, ney, xd, yd, level, opacity, smoothing) {\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n\n        if (!Mx.pixel) {\n            m.log.warn(\"COLORMAP not initialized, defaulting to foreground\");\n            Mx.pixel = new ColorMap(m.Mc.colormap[1].colors);\n        }\n\n        var w;\n        var h;\n\n        if (nex > 0) {\n            w = nx * nex;\n        } else {\n            w = -nex;\n        }\n        w = Math.floor(w);\n        h = Math.floor(ny * ney);\n\n        var buf = new ArrayBuffer(w * h * 4);\n        buf.width = w;\n        buf.height = h;\n\n        var imgd = new Uint32Array(buf);\n        for (var i = 0; i < imgd.length; i++) {\n            var color = Mx.pixel.getColor(data[i]);\n            if (color) {\n                imgd[i] = color.color;\n            }\n        }\n\n        //render the buffered canvas onto the original canvas element\n        renderImage(Mx, ctx, buf, opacity, smoothing, xd, yd, w, h);\n\n        // Return the image in case the caller wishes to cache it\n        return buf;\n    };\n\n    /**\n     * @param Mx\n     * @param buf\n     * @param xmin\n     * @param ymin\n     * @param xmax\n     * @param ymax\n     * @param opacity\n     * @param smoothing\n     * @private\n     */\n    mx.draw_image = function(Mx, buf, xmin, ymin, xmax, ymax, opacity, smoothing) {\n        var view_xmin = Math.max(xmin, Mx.stk[Mx.level].xmin);\n        var view_xmax = Math.min(xmax, Mx.stk[Mx.level].xmax);\n        var view_ymin = Math.max(ymin, Mx.stk[Mx.level].ymin);\n        var view_ymax = Math.min(ymax, Mx.stk[Mx.level].ymax);\n\n\n        if ((buf.width <= 1) || Math.abs(xmax - xmin) === 0) {\n            return;\n        }\n        if ((buf.height <= 1) || Math.abs(ymax - ymin) === 0) {\n            return;\n        }\n        var rx = buf.width / (xmax - xmin);\n        var ry = buf.height / (ymax - ymin);\n\n        // Ensure we are on buffer pixel boundaries, later we use clipping\n        // to constrain to the proper area\n        view_xmin = Math.floor(view_xmin * rx) / rx;\n        view_xmax = Math.ceil(view_xmax * rx) / rx;\n        view_ymin = Math.floor(view_ymin * ry) / ry;\n        view_ymax = Math.ceil(view_ymax * ry) / ry;\n\n        var ul, lr;\n        var sy, sx, sw, sh;\n        if (Mx.origin === 1) {\n            // regular x, regular y\n            sy = Math.max(0, Math.floor((ymax - view_ymax) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.floor((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmin, view_ymax);\n            lr = mx.real_to_pixel(Mx, view_xmax, view_ymin);\n        } else if (Mx.origin === 2) {\n            // inverted x, regular y\n            sy = Math.max(0, Math.floor((ymax - view_ymax) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.ceil((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmax, view_ymax);\n            lr = mx.real_to_pixel(Mx, view_xmin, view_ymin);\n        } else if (Mx.origin === 3) {\n            // inverted x, inverted y\n            sy = Math.max(0, Math.ceil((view_ymin - ymin) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.ceil((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmax, view_ymin);\n            lr = mx.real_to_pixel(Mx, view_xmin, view_ymax);\n        } else if (Mx.origin === 4) {\n            // regular x, inverted y\n            sy = Math.max(0, Math.ceil((view_ymin - ymin) * ry));\n            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));\n            sx = Math.max(0, Math.floor((view_xmin - xmin) * rx));\n            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));\n\n            ul = mx.real_to_pixel(Mx, view_xmin, view_ymin);\n            lr = mx.real_to_pixel(Mx, view_xmax, view_ymax);\n        }\n\n        var iw = lr.x - ul.x;\n        var ih = lr.y - ul.y;\n\n        // Always include at least one pixel from the source\n        sw = Math.max(1, sw);\n        sh = Math.max(1, sh);\n\n        // See if smart smoothing is requested\n        if (typeof smoothing === \"number\") {\n            // calculate the ratio of displayed pixels over\n            // displayed data-points\n            var ratio = (Mx.r - Mx.l) / sw;\n            // if the ratio is greater than the smoothing value\n            // turn on smoothing\n            smoothing = (ratio <= smoothing);\n        }\n\n        //render the buffered canvas onto the original canvas element\n        var ctx = Mx.active_canvas.getContext(\"2d\");\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(Mx.l, Mx.t, Mx.r - Mx.l, Mx.b - Mx.t);\n        ctx.clip();\n        renderImage(Mx, ctx, buf, opacity, smoothing, ul.x, ul.y, iw, ih, sx, sy, sw, sh);\n        ctx.restore();\n    };\n\n    // Node: Export function\n    module.exports = mx;\n\n}());\n\n///////////////////////////////////////////////////////////////////////////////\n","/**\n * @license\n * File: bluefile.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n/**\n * Bluefiles are a binary format directly supported by SigPlot.  A Bluefile consists of a 512-byte header\n * followed by binary data.\n * For more information on BLUEFILES, please visit http://nextmidas.techma.com/nm/htdocs/usersguide/BlueFiles.html\n *\n * Offset   Name        Size    Type        Description\n * -----------------------------------------------------------------------------\n * 0        version     4   char[4]     Header version\n * 4        head_rep    4   char[4]     Header representation\n * 8        data_rep    4   char[4]     Data representation\n *12        detached    4   int_4       Detached header\n *16        protected   4   int_4       Protected from overwrite\n *20        pipe        4   int_4       Pipe mode (N/A)\n *24        ext_start   4   int_4       Extended header start, in 512-byte blocks\n *28        ext_size    4   int_4       Extended header size in bytes\n *32        data_start  8   real_8      Data start in bytes\n *40        data_size   8   real_8      Data size in bytes\n *48        type        4   int_4       File type code\n *52        format      2   char[2]     Data format code\n *54        flagmask    2   int_2       16-bit flagmask (1=flagbit)\n *56        timecode    8   real_8      Time code field\n *64        inlet       2   int_2       Inlet owner\n *66        outlets     2   int_2       Number of outlets\n *68        outmask     4   int_4       Outlet async mask\n *72        pipeloc     4   int_4       Pipe location\n *76        pipesize    4   int_4       Pipe size in bytes\n *80        in_byte     8   real_8      Next input byte\n *88        out_byte    8   real_8      Next out byte (cumulative)\n *96        outbytes    64  real_8[8]   Next out byte (each outlet)\n *160       keylength   4   int_4       Length of keyword string\n *164       keywords    92  char[92]    User defined keyword string\n *256       Adjunct     256     char[256]   Type-specific adjunct union (See below for 1000 and 2000 type bluefiles)\n *\n *\n * Type-1000 Adjunct\n * 0        xstart      8   real_8      Abscissa value for first sample\n *8         xdelta      8   real_8      Abscissa interval between samples\n *16        xunits      4   int_4       Units for abscissa values\n *\n * Type-2000 Adjunct\n *0         xstart      8   real_8      Frame (column) starting value\n *8         xdelta      8   real_8      Increment between samples in frame\n *16        xunits      4   int_4       Frame (column) units\n *20        subsize     4   int_4       Number of data points per frame (row)\n *24        ystart      8   real_8      Abscissa (row) start\n *32        ydelta      8   real_8      Increment between frames\n *36        yunits      4   int_4       Abscissa (row) unit code\n *\n * @namespace bluefile\n */\n\n/* global module */\n/* global require */\n\n(function() {\n    'use strict';\n\n    var common = require(\"./common\");\n\n    function bluefile() {}\n\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);\n    // https://gist.github.com/TooTallNate/4750953\n    /**\n     * @memberof bluefile\n     * @private\n     */\n    function endianness() {\n        var b = new ArrayBuffer(4);\n        var a = new Uint32Array(b);\n        var c = new Uint8Array(b);\n        a[0] = 0xdeadbeef;\n        if (c[0] === 0xef) {\n            return 'LE';\n        }\n        if (c[0] === 0xde) {\n            return 'BE';\n        }\n        throw new Error('unknown endianness');\n    }\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var ARRAY_BUFFER_ENDIANNESS = endianness();\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _SPA = {\n        'S': 1,\n        'C': 2,\n        'V': 3,\n        'Q': 4,\n        'M': 9,\n        'X': 10,\n        'T': 16,\n        'U': 1,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9\n    };\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _BPS = {\n        'P': 0.125,\n        'A': 1,\n        'O': 1,\n        'B': 1,\n        'I': 2,\n        'L': 4,\n        'X': 8,\n        'F': 4,\n        'D': 8\n    };\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _XM_TO_TYPEDARRAY = {\n        'P': null,\n        'A': null,\n        'O': Uint8Array,\n        'B': Int8Array,\n        'I': Int16Array,\n        'L': Int32Array,\n        'X': null,\n        'F': Float32Array,\n        'D': Float64Array\n    };\n    /**\n     * @memberof bluefile\n     * @param   {array}     buf         Data bffer\n     * @param number\n     * @param bool\n     * @private\n     */\n    function getInt64(dataView, index, littleEndian) {\n        var highIndex, lowIndex;\n        var MAX_INT = Math.pow(2, 53);\n        if (littleEndian) {\n            highIndex = 4;\n            lowIndex = 0;\n        } else {\n            highIndex = 0;\n            lowIndex = 4;\n        }\n        var high = dataView.getInt32(index + highIndex, littleEndian);\n        var low = dataView.getInt32(index + lowIndex, littleEndian);\n        var rv = low + pow2(32) * high;\n        if (rv >= MAX_INT) {\n            window.console.info(\"Int is bigger than JS can represent.\");\n            return Infinity;\n        }\n        return rv;\n    }\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _XM_TO_DATAVIEW = {\n        'P': null,\n        'A': null,\n        'O': \"getUint8\",\n        'B': \"getInt8\",\n        'I': \"getInt16\",\n        'L': \"getInt32\",\n        'X': getInt64,\n        'F': \"getFloat32\",\n        'D': \"getFloat64\"\n    };\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _applySupportsTypedArray = true;\n    try {\n        var uintbuf = new Uint8Array(new ArrayBuffer(4));\n        uintbuf[0] = 66;\n        uintbuf[1] = 76;\n        uintbuf[2] = 85;\n        uintbuf[3] = 69;\n        var test = String.fromCharCode.apply(null, uintbuf);\n        if (test !== \"BLUE\") {\n            _applySupportsTypedArray = false;\n        }\n    } catch (error) {\n        _applySupportsTypedArray = false;\n    }\n    /**\n     * Convert an ArrayBuffer to a string\n     *\n     * @private\n     * @memberof bluefile\n     * @param   {array}     buf         Data bffer\n     */\n    function ab2str(buf) {\n        var uintbuf = new Uint8Array(buf);\n        // Firefox 3.6 nor iOS devices can use ArrayBuffers with .apply\n        if (_applySupportsTypedArray) {\n            return String.fromCharCode.apply(null, uintbuf);\n        } else {\n            var str = \"\";\n            for (var i = 0; i < uintbuf.length; i++) {\n                str += String.fromCharCode(uintbuf[i]);\n            }\n            return str;\n        }\n    }\n    /**\n     * Convert a string to an ArrayBuffer\n     *\n     * @private\n     * @memberof bluefile\n     * @param   {string}\n     */\n    function str2ab(str) {\n        var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        var bufView = new Uint16Array(buf);\n        for (var i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    }\n    /**\n     * Calculate 2^n\n     *\n     * If 31 > n >= 0 then a left-shift is used, otherwise Math.pow is used.\n     *\n     * @private\n     * @memberof bluefile\n     * @param   {number}\n     */\n    function pow2(n) {\n        return (n >= 0 && n < 31) ? (1 << n) : (pow2[n] || (pow2[n] = Math.pow(2, n)));\n    }\n    /**\n     * Constructor for a BlueHeader that extracts paramters from the 512-byte\n     * Bluefile binary header.  If the data segment of the bluefile is also\n     * included in the provided buffer it will be accessible as well\n     * via the dview property.\n     *\n     * @memberof bluefile\n     * @param {array} buf\n     *   - An existing ArrayBuffer of Bluefile data.\n     * @param {Object} options\n     *     - options that affect how the bluefile is read\n     * @param {string} [\"dict\"] options.ext_header_type\n     *     - if the BlueFile contains extended header keywords,\n     *       extract them either as a dictionary (\"dict\", \"json\", \n     *       {}, \"XMTable\", \"JSON\", \"DICT\") or as a list of \n     *       key value pairs.  The extended header keywords\n     *       will be accessible on the hdr.ext_header property\n     *       after the file has been read.\n     *\n     * See http://nextmidas.techma.com/nm/nxm/sys/docs/MidasBlueFileFormat.pdf for\n     * more details on header properties.\n     *\n     * @property {ArrayBuffer} buf\n     * @property {String} version - the header version extracted from the file, always 'BLUE'\n     * @property {String} headrep - endianness of header 'IEEE' or 'EEEI'\n     * @property {String} datarep - endianness of data 'IEEE' or 'EEEI'\n     * @property {Number} ext_start - byte offset for extended header binary data\n     * @property {Number} ext_size - byte size for extended header data\n     * @property {Number} type - the BLUEFILE type (1000 = 1-D data, 2000 = 2-D data)\n     * @property {Number} class - the BLUEFILE class (i.e. type/1000)\n     * @property {String} format - the BLUEFILE format, the format is a two character diagraph, such as SF.\n     * @property {Number} timecode - absolute time reference for the file (in seconds since Jan 1st 1950)\n     * @property {Number} xstart - relative offset for the first sample on the x-axis\n     * @property {Number} xdelta - delta between points on the x-axis \n     * @property {Number} xunits - the unitcode for the x-axis (see m.UNITS)\n     * @property {Number} ystart - relative offset for the first sample on the y-axis\n     * @property {Number} ydelta - delta between points on the y-axis \n     * @property {Number} yunits - the unitcode for the y-axis (see m.UNITS)\n     * @property {Number} subsize - the number of columns for a 2-D data file\n     * @property {Number} data_start - byte offset for data\n     * @property {Number} data_size - byte size for data\n     * @property {Object} ext_header - extracted extended header keywords\n     * @property {Number} spa - scalars per atom\n     * @property {Number} bps - bytes per scalar\n     * @property {Number} bpa - bytes per atom\n     * @property {Number} ape - atoms per element\n     * @property {Number} bpe - bytes per element\n     * @property {Number} size - number of elements in dview\n     * @property {DataView} dview - a Data\n     */\n    bluefile.BlueHeader = function(buf, options) {\n        this.options = {\n            ext_header_type: \"dict\"\n        };\n        common.update(this.options, options);\n        this.buf = buf;\n        if (this.buf != null) {\n            var dvhdr = new DataView(this.buf);\n            this.version = ab2str(this.buf.slice(0, 4));\n            this.headrep = ab2str(this.buf.slice(4, 8));\n            this.datarep = ab2str(this.buf.slice(8, 12));\n            var littleEndianHdr = (this.headrep === \"EEEI\");\n            var littleEndianData = (this.datarep === \"EEEI\");\n            this.ext_start = dvhdr.getInt32(24, littleEndianHdr);\n            this.ext_size = dvhdr.getInt32(28, littleEndianHdr);\n            this.type = dvhdr.getUint32(48, littleEndianHdr);\n            this[\"class\"] = this.type / 1000;\n            this.format = ab2str(this.buf.slice(52, 54));\n            this.timecode = dvhdr.getFloat64(56, littleEndianHdr);\n            // the adjunct starts at offset 0x100\n            if (this[\"class\"] === 1) {\n                this.xstart = dvhdr.getFloat64(0x100, littleEndianHdr);\n                this.xdelta = dvhdr.getFloat64(0x100 + 8, littleEndianHdr);\n                this.xunits = dvhdr.getInt32(0x100 + 16, littleEndianHdr);\n                this.yunits = dvhdr.getInt32(0x100 + 40, littleEndianHdr);\n                this.subsize = 1;\n            } else if (this[\"class\"] === 2) {\n                this.xstart = dvhdr.getFloat64(0x100, littleEndianHdr);\n                this.xdelta = dvhdr.getFloat64(0x100 + 8, littleEndianHdr);\n                this.xunits = dvhdr.getInt32(0x100 + 16, littleEndianHdr);\n                this.subsize = dvhdr.getInt32(0x100 + 20, littleEndianHdr);\n                this.ystart = dvhdr.getFloat64(0x100 + 24, littleEndianHdr);\n                this.ydelta = dvhdr.getFloat64(0x100 + 32, littleEndianHdr);\n                this.yunits = dvhdr.getInt32(0x100 + 40, littleEndianHdr);\n            }\n            this.data_start = dvhdr.getFloat64(32, littleEndianHdr);\n            this.data_size = dvhdr.getFloat64(40, littleEndianHdr);\n            var ds = this.data_start;\n            var de = this.data_start + this.data_size;\n            if (this.ext_size) {\n                this.ext_header = this.unpack_keywords(this.buf, this.ext_size, this.ext_start * 512, littleEndianHdr);\n            }\n            this.setData(this.buf, ds, de, littleEndianData);\n        }\n    };\n\n    bluefile.BlueHeader.prototype = {\n        /**\n         * Internal method that sets the dview up based off the\n         * provided buffer and fields extracted from the header.\n         *\n         * @memberof bluefile\n         * @private\n         * @param   buf\n         * @param   offset\n         * @param   data_end\n         * @param   littleEndian\n         */\n        setData: function(buf, offset, data_end, littleEndian) {\n            if (this[\"class\"] === 1) {\n                this.spa = _SPA[this.format[0]];\n                this.bps = _BPS[this.format[1]];\n                this.bpa = this.spa * this.bps;\n                this.ape = 1;\n                this.bpe = this.ape * this.bpa;\n            } else if (this[\"class\"] === 2) {\n                this.spa = _SPA[this.format[0]];\n                this.bps = _BPS[this.format[1]];\n                this.bpa = this.spa * this.bps;\n                this.ape = this.subsize;\n                this.bpe = this.ape * this.bpa;\n            }\n            if (littleEndian === undefined) {\n                littleEndian = (ARRAY_BUFFER_ENDIANNESS === \"LE\");\n            }\n            // TODO handle mismatch between host and data endianness using arrayBufferEndianness\n            if (ARRAY_BUFFER_ENDIANNESS === \"LE\" && !littleEndian) {\n                throw (\"Not supported \" + ARRAY_BUFFER_ENDIANNESS + \" \" + littleEndian);\n            } else if (ARRAY_BUFFER_ENDIANNESS === \"BE\" && this.littleEndianData) {\n                throw (\"Not supported \" + ARRAY_BUFFER_ENDIANNESS + \" \" + littleEndian);\n            }\n            if (buf) {\n                if ((offset) && (data_end)) {\n                    this.dview = this.createArray(buf, offset, (data_end - offset) / this.bps);\n                } else {\n                    this.dview = this.createArray(buf);\n                }\n                this.size = this.dview.length / (this.spa * this.ape);\n            } else {\n                this.dview = this.createArray(null, null, this.size);\n            }\n        },\n        /**\n         * Internal method that unpacks the extended header keywords into\n         * either a object (i.e. dictionary) or a list of key-value pairs\n         * depending on this.options.ext_header_type.\n         *\n         * @author Sean Sullivan https://github.com/desean1625\n         * @private\n         * @memberof bluefile\n         * @param   buf\n         * @param   lbuf\n         * @param   offset\n         * @param   littleEndian\n         */\n        unpack_keywords: function(buf, lbuf, offset, littleEndian) {\n            var lkey, lextra, ltag, format, tag, data, ldata, itag, idata;\n            var keywords = [];\n            var dic_index = {};\n            var dict_keywords = {};\n            var ii = 0;\n            window.buf = buf;\n            buf = buf.slice(offset, buf.byteLength);\n            var dvhdr = new DataView(buf);\n            buf = ab2str(buf);\n            while (ii < lbuf) {\n                idata = ii + 8;\n                lkey = dvhdr.getUint32(ii, littleEndian);\n                lextra = dvhdr.getInt16(ii + 4, littleEndian);\n                ltag = dvhdr.getInt8(ii + 6, littleEndian);\n                format = buf.slice(ii + 7, ii + 8);\n                ldata = lkey - lextra;\n                itag = idata + ldata;\n                tag = buf.slice(itag, itag + ltag);\n                if (format === \"A\") {\n                    data = buf.slice(idata, idata + ldata);\n                } else {\n                    if (_XM_TO_DATAVIEW[format]) {\n                        if (typeof _XM_TO_DATAVIEW[format] === \"string\") {\n                            data = dvhdr[_XM_TO_DATAVIEW[format]](idata, littleEndian);\n                        } else {\n                            data = _XM_TO_DATAVIEW[format](dvhdr, idata, littleEndian);\n                        }\n                    } else {\n                        //Should never get here now.\n                        window.console.info(\"Unsupported keyword format \" + format + \" for tag \" + tag);\n                    }\n                }\n                if (typeof dic_index[tag] === \"undefined\") {\n                    dic_index[tag] = 1;\n                } else {\n                    dic_index[tag]++;\n                    tag = \"\" + tag + dic_index[tag]; //Force to string just incase the tag is interpreted as a number\n                }\n                dict_keywords[tag] = data;\n                keywords.push({\n                    tag: tag,\n                    value: data\n                });\n                ii += lkey;\n            }\n            var dictTypes = ['dict', 'json', {}, 'XMTable', 'JSON', 'DICT'];\n            for (var k in dictTypes) {\n                if (dictTypes[k] === this.options.ext_header_type) {\n                    return dict_keywords;\n                }\n            }\n            return keywords;\n        },\n        /**\n         * Internal method to create typed array for the data based on the\n         * format extracted from the header.\n         *\n         * @private\n         * @memberof bluefile\n         * @param   buf\n         * @param   offset\n         * @param   length\n         * @returns -\n         */\n        createArray: function(buf, offset, length) {\n            var TypedArray = _XM_TO_TYPEDARRAY[this.format[1]];\n            if (TypedArray === undefined) {\n                throw (\"unknown format \" + this.format[1]);\n            }\n            // backwards compatibility with some implementations of typed array\n            // requires this\n            if (offset === undefined) {\n                offset = 0;\n            }\n            if (length === undefined) {\n                length = buf.length || (buf.byteLength / _BPS[this.format[1]]);\n            }\n            if (buf) {\n                // Flatten 2-D array into 1-D\n                if (Array.isArray(buf) && Array.isArray(buf[0])) {\n                    buf = [].concat.apply([], buf);\n                }\n                return new TypedArray(buf, offset, length);\n            } else {\n                return new TypedArray(length);\n            }\n        }\n    };\n\n    /**\n     * Internal method to create a new anchor element and uses location\n     * properties (inherent) to get the desired URL data. Some String\n     * operations are used (to normalize results across browsers).\n     *\n     * @private\n     * @memberof bluefile\n     * @param   url\n     * @returns -\n     *\n     * Based off http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\n     */\n    function parseURL(url) {\n        var a = document.createElement('a');\n        a.href = url;\n        return {\n            source: url,\n            protocol: a.protocol.replace(':', ''),\n            host: a.hostname,\n            port: a.port,\n            query: a.search,\n            params: (function() {\n                var ret = {},\n                    seg = a.search.replace(/^\\?/, '').split('&'),\n                    len = seg.length,\n                    i = 0,\n                    s;\n                for (; i < len; i++) {\n                    if (!seg[i]) {\n                        continue;\n                    }\n                    s = seg[i].split('=');\n                    ret[s[0]] = s[1];\n                }\n                return ret;\n            })(),\n            file: (a.pathname.match(/\\/([^\\/?#]+)$/i) || [null, ''])[1],\n            hash: a.hash.replace('#', ''),\n            path: a.pathname.replace(/^([^\\/])/, '/$1'),\n            relative: (a.href.match(/tps?:\\/\\/[^\\/]+(.+)/) || [null, ''])[1],\n            segments: a.pathname.replace(/^\\//, '').split('/')\n        };\n    }\n    /**\n     * Internal method to convert text from an HTTP response\n     * into an ArrayBuffer.\n     *\n     * @private\n     * @memberof bluefile\n     * @param   text\n     * @param   oncomplete\n     * @param   blocksize\n     */\n    function text2buffer(text, oncomplete, blocksize) {\n        blocksize = blocksize || 1024;\n        var i = 0;\n        var arrayBuffer = new ArrayBuffer(text.length);\n        var bufView = new Uint8Array(arrayBuffer);\n        var worker = function() {\n            var end = i + blocksize;\n            for (; i < end; i++) {\n                bufView[i] = (text.charCodeAt(i) & 0xff);\n            }\n            if (i >= text.length) {\n                oncomplete(arrayBuffer);\n            } else {\n                setTimeout(worker, 0);\n            }\n        };\n        setTimeout(worker, 0);\n    }\n    /**\n     * Bluefile Reader constructor.\n     *\n     * @memberof bluefile\n     * @param {Object} options\n     *     - options that affect how the bluefile is read\n     * @param {string} [\"dict\"] options.ext_header_type\n     *     - if the BlueFile contains extended header keywords,\n     *       extract them either as a dictionary (\"dict\", \"json\", \n     *       {}, \"XMTable\", \"JSON\", \"DICT\") or as a list of \n     *       key value pairs.  The extended header keywords\n     *       will be accessible on the hdr.ext_header property\n     *       after the file has been read.\n     */\n    bluefile.BlueFileReader = function(options) {\n        this.options = options;\n    };\n\n    bluefile.BlueFileReader.prototype = {\n        /**\n         * @callback readCallback\n         * @param {BlueHeader}\n         *     - the extracted header, or null on failure\n         */\n\n        /**\n         * Read only the header from a local Bluefile.\n         *\n         * @memberof bluefile\n         * @param {File} theFile\n         *     - a File object for the bluefile\n         * @param {readCallback} onload\n         *     - callback when the header has been read\n         */\n        readheader: function readheader(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            var blob = theFile.webkitSlice(0, 512); // Chrome specific\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var rawhdr = reader.result;\n                    var hdr = new bluefile.BlueHeader(rawhdr, that.options);\n                    hdr.file = theFile;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(blob);\n        },\n        /**\n         * Read a local Bluefile on disk.\n         *\n         * @memberof bluefile\n         * @param {File} theFile\n         *     - a File object for the bluefile\n         * @param {readCallback} onload\n         *     - callback when the header has been read\n         */\n        read: function read(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var raw = reader.result;\n                    var hdr = new bluefile.BlueHeader(raw, that.options);\n                    hdr.file = theFile;\n                    hdr.file_name = theFile.name;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(theFile);\n        },\n        /**\n         * Read a Bluefile from a URL\n         *\n         * @memberof bluefile\n         * @param {string} href\n         *     - the URL for the bluefile\n         * @param {readCallback} onload\n         *     - callback when the header has been read\n         */\n        read_http: function read_http(href, onload) {\n            var that = this;\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"GET\", href, true);\n            oReq.responseType = \"arraybuffer\";\n            oReq.overrideMimeType('text\\/plain; charset=x-user-defined');\n            oReq.onload = function(oEvent) {\n                if (oReq.readyState === 4) {\n                    if ((oReq.status === 200) || (oReq.status === 0)) { // status = 0 is necessary for file URL\n                        var arrayBuffer = null; // Note: not oReq.responseText\n                        if (oReq.response) {\n                            arrayBuffer = oReq.response;\n                            var hdr = new bluefile.BlueHeader(arrayBuffer, that.options);\n                            parseURL(href);\n                            var fileUrl = parseURL(href);\n                            hdr.file_name = fileUrl.file;\n                            onload(hdr);\n                        } else if (oReq.responseText) {\n                            text2buffer(oReq.responseText, function(arrayBuffer) {\n                                var hdr = new bluefile.BlueHeader(arrayBuffer, that.options);\n                                parseURL(href);\n                                var fileUrl = parseURL(href);\n                                hdr.file_name = fileUrl.file;\n                                onload(hdr);\n                            });\n                        }\n                        return;\n                    }\n                }\n                onload(null);\n            };\n            oReq.onerror = function(oEvent) {\n                onload(null);\n            };\n            oReq.send(null);\n        }\n    };\n\n    // Node: Export function\n    module.exports = bluefile;\n\n}());\n","// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/** @license React v16.6.1\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var k=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.concurrent_mode\"):60111,y=n?Symbol.for(\"react.forward_ref\"):60112,z=n?Symbol.for(\"react.suspense\"):60113,A=n?Symbol.for(\"react.memo\"):\n60115,B=n?Symbol.for(\"react.lazy\"):60116,C=\"function\"===typeof Symbol&&Symbol.iterator;function aa(a,b,e,c,d,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var l=[e,c,d,g,h,f],m=0;a=Error(b.replace(/%s/g,function(){return l[m++]}));a.name=\"Invariant Violation\"}a.framesToPop=1;throw a;}}\nfunction D(a){for(var b=arguments.length-1,e=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=0;c<b;c++)e+=\"&args[]=\"+encodeURIComponent(arguments[c+1]);aa(!1,\"Minified React error #\"+a+\"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \",e)}var E={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},F={};\nfunction G(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E}G.prototype.isReactComponent={};G.prototype.setState=function(a,b){\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a?D(\"85\"):void 0;this.updater.enqueueSetState(this,a,b,\"setState\")};G.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function H(){}H.prototype=G.prototype;function I(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E}var J=I.prototype=new H;\nJ.constructor=I;k(J,G.prototype);J.isPureReactComponent=!0;var K={current:null,currentDispatcher:null},L=Object.prototype.hasOwnProperty,M={key:!0,ref:!0,__self:!0,__source:!0};\nfunction N(a,b,e){var c=void 0,d={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)L.call(b,c)&&!M.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var l=Array(f),m=0;m<f;m++)l[m]=arguments[m+2];d.children=l}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return{$$typeof:p,type:a,key:g,ref:h,props:d,_owner:K.current}}\nfunction ba(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,e,c){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return{result:a,keyPrefix:b,func:e,context:c,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,e,c){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return e(c,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var h=0;h<a.length;h++){d=a[h];var f=b+U(d,h);g+=T(d,f,e,c)}else if(null===a||\"object\"!==typeof a?f=null:(f=C&&a[C]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),h=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,h++),g+=T(d,f,e,c);else\"object\"===d&&(e=\"\"+a,D(\"31\",\"[object Object]\"===e?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":e,\"\"));return g}function V(a,b,e){return null==a?0:T(a,\"\",b,e)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function ca(a,b){a.func.call(a.context,b,a.count++)}\nfunction da(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?W(a,c,e,function(a){return a}):null!=a&&(O(a)&&(a=ba(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+e)),c.push(a))}function W(a,b,e,c,d){var g=\"\";null!=e&&(g=(\"\"+e).replace(P,\"$&/\")+\"/\");b=R(b,g,c,d);V(a,da,b);S(b)}\nvar X={Children:{map:function(a,b,e){if(null==a)return a;var c=[];W(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=R(null,null,b,e);V(a,ca,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];W(a,b,null,function(a){return a});return b},only:function(a){O(a)?void 0:D(\"143\");return a}},createRef:function(){return{current:null}},Component:G,PureComponent:I,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,\n_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a},forwardRef:function(a){return{$$typeof:y,render:a}},lazy:function(a){return{$$typeof:B,_ctor:a,_status:-1,_result:null}},memo:function(a,b){return{$$typeof:A,type:a,compare:void 0===b?null:b}},Fragment:r,StrictMode:t,Suspense:z,createElement:N,cloneElement:function(a,b,e){null===a||void 0===a?D(\"267\",a):void 0;var c=void 0,d=k({},a.props),g=a.key,h=a.ref,f=a._owner;\nif(null!=b){void 0!==b.ref&&(h=b.ref,f=K.current);void 0!==b.key&&(g=\"\"+b.key);var l=void 0;a.type&&a.type.defaultProps&&(l=a.type.defaultProps);for(c in b)L.call(b,c)&&!M.hasOwnProperty(c)&&(d[c]=void 0===b[c]&&void 0!==l?l[c]:b[c])}c=arguments.length-2;if(1===c)d.children=e;else if(1<c){l=Array(c);for(var m=0;m<c;m++)l[m]=arguments[m+2];d.children=l}return{$$typeof:p,type:a.type,key:g,ref:h,props:d,_owner:f}},createFactory:function(a){var b=N.bind(null,a);b.type=a;return b},isValidElement:O,version:\"16.6.3\",\n__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:K,assign:k}};X.unstable_ConcurrentMode=x;X.unstable_Profiler=u;var Y={default:X},Z=Y&&X||Y;module.exports=Z.default||Z;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","//fgnass.github.com/spin.js#v1.2.5\n/**\n * Copyright (c) 2011 Felix Gnass [fgnass at neteye dot de]\n * Licensed under the MIT license\n */\n\nvar prefixes = ['webkit', 'Moz', 'ms', 'O']; /* Vendor prefixes */\nvar animations = {}; /* Animation rules keyed by their name */\nvar useCssAnimations;\n\n/**\n * Utility function to create elements. If no tag name is given,\n * a DIV is created. Optionally properties can be passed.\n */\nfunction createEl(tag, prop) {\n  var el = document.createElement(tag || 'div');\n  var n;\n\n  for(n in prop) {\n    el[n] = prop[n];\n  }\n  return el;\n}\n\n/**\n * Appends children and returns the parent.\n */\nfunction ins(parent /* child1, child2, ...*/) {\n  for (var i=1, n=arguments.length; i<n; i++) {\n    parent.appendChild(arguments[i]);\n  }\n  return parent;\n}\n\n/**\n * Insert a new stylesheet to hold the @keyframe or VML rules.\n */\nvar sheet = function() {\n  var el = createEl('style');\n  ins(document.getElementsByTagName('head')[0], el);\n  return el.sheet || el.styleSheet;\n}();\n\n/**\n * Creates an opacity keyframe animation rule and returns its name.\n * Since most mobile Webkits have timing issues with animation-delay,\n * we create separate rules for each line/segment.\n */\nfunction addAnimation(alpha, trail, i, lines) {\n  var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-');\n  var start = 0.01 + i/lines*100;\n  var z = Math.max(1-(1-alpha)/trail*(100-start) , alpha);\n  var prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase();\n  var pre = prefix && '-'+prefix+'-' || '';\n\n  if (!animations[name]) {\n    sheet.insertRule(\n      '@' + pre + 'keyframes ' + name + '{' +\n      '0%{opacity:'+z+'}' +\n      start + '%{opacity:'+ alpha + '}' +\n      (start+0.01) + '%{opacity:1}' +\n      (start+trail)%100 + '%{opacity:'+ alpha + '}' +\n      '100%{opacity:'+ z + '}' +\n      '}', 0);\n    animations[name] = 1;\n  }\n  return name;\n}\n\n/**\n * Tries various vendor prefixes and returns the first supported property.\n **/\nfunction vendor(el, prop) {\n  var s = el.style;\n  var pp;\n  var i;\n\n  if(s[prop] !== undefined) return prop;\n  prop = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for(i=0; i<prefixes.length; i++) {\n    pp = prefixes[i]+prop;\n    if(s[pp] !== undefined) return pp;\n  }\n}\n\n/**\n * Sets multiple style properties at once.\n */\nfunction css(el, prop) {\n  for (var n in prop) {\n    el.style[vendor(el, n)||n] = prop[n];\n  }\n  return el;\n}\n\n/**\n * Fills in default values.\n */\nfunction merge(obj) {\n  for (var i=1; i < arguments.length; i++) {\n    var def = arguments[i];\n    for (var n in def) {\n      if (obj[n] === undefined) obj[n] = def[n];\n    }\n  }\n  return obj;\n}\n\n/**\n * Returns the absolute page-offset of the given element.\n */\nfunction pos(el) {\n  var o = {x:el.offsetLeft, y:el.offsetTop};\n  while((el = el.offsetParent)) {\n    o.x+=el.offsetLeft;\n    o.y+=el.offsetTop;\n  }\n  return o;\n}\n\nvar defaults = {\n  lines: 12,            // The number of lines to draw\n  length: 7,            // The length of each line\n  width: 5,             // The line thickness\n  radius: 10,           // The radius of the inner circle\n  rotate: 0,            // rotation offset\n  color: '#000',        // #rgb or #rrggbb\n  speed: 1,             // Rounds per second\n  trail: 100,           // Afterglow percentage\n  opacity: 1/4,         // Opacity of the lines\n  fps: 20,              // Frames per second when using setTimeout()\n  zIndex: 2e9,          // Use a high z-index by default\n  className: 'spinner', // CSS class to assign to the element\n  top: 'auto',          // center vertically\n  left: 'auto'          // center horizontally\n};\n\n/** The constructor */\nvar Spinner = function Spinner(o) {\n  if (!this.spin) return new Spinner(o);\n  this.opts = merge(o || {}, Spinner.defaults, defaults);\n};\n\nSpinner.defaults = {};\nmerge(Spinner.prototype, {\n  spin: function(target) {\n    this.stop();\n    var self = this;\n    var o = self.opts;\n    var el = self.el = css(createEl(0, {className: o.className}), {position: 'relative', zIndex: o.zIndex});\n    var mid = o.radius+o.length+o.width;\n    var ep; // element position\n    var tp; // target position\n\n    if (target) {\n      target.insertBefore(el, target.firstChild||null);\n      tp = pos(target);\n      ep = pos(el);\n      css(el, {\n        left: (o.left == 'auto' ? tp.x-ep.x + (target.offsetWidth >> 1) : o.left+mid) + 'px',\n        top: (o.top == 'auto' ? tp.y-ep.y + (target.offsetHeight >> 1) : o.top+mid)  + 'px'\n      });\n    }\n\n    el.setAttribute('aria-role', 'progressbar');\n    self.lines(el, self.opts);\n\n    if (!useCssAnimations) {\n      // No CSS animation support, use setTimeout() instead\n      var i = 0;\n      var fps = o.fps;\n      var f = fps/o.speed;\n      var ostep = (1-o.opacity)/(f*o.trail / 100);\n      var astep = f/o.lines;\n\n      !function anim() {\n        i++;\n        for (var s=o.lines; s; s--) {\n          var alpha = Math.max(1-(i+s*astep)%f * ostep, o.opacity);\n          self.opacity(el, o.lines-s, alpha, o);\n        }\n        self.timeout = self.el && setTimeout(anim, ~~(1000/fps));\n      }();\n    }\n    return self;\n  },\n  stop: function() {\n    var el = this.el;\n    if (el) {\n      clearTimeout(this.timeout);\n      if (el.parentNode) el.parentNode.removeChild(el);\n      this.el = undefined;\n    }\n    return this;\n  },\n  lines: function(el, o) {\n    var i = 0;\n    var seg;\n\n    function fill(color, shadow) {\n      return css(createEl(), {\n        position: 'absolute',\n        width: (o.length+o.width) + 'px',\n        height: o.width + 'px',\n        background: color,\n        boxShadow: shadow,\n        transformOrigin: 'left',\n        transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',\n        borderRadius: (o.width>>1) + 'px'\n      });\n    }\n    for (; i < o.lines; i++) {\n      seg = css(createEl(), {\n        position: 'absolute',\n        top: 1+~(o.width/2) + 'px',\n        transform: o.hwaccel ? 'translate3d(0,0,0)' : '',\n        opacity: o.opacity,\n        animation: useCssAnimations && addAnimation(o.opacity, o.trail, i, o.lines) + ' ' + 1/o.speed + 's linear infinite'\n      });\n      if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}));\n      ins(el, ins(seg, fill(o.color, '0 0 1px rgba(0,0,0,.1)')));\n    }\n    return el;\n  },\n  opacity: function(el, i, val) {\n    if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////\n// VML rendering for IE\n/////////////////////////////////////////////////////////////////////////\n\n/**\n * Check and init VML support\n */\n!function() {\n\n  function vml(tag, attr) {\n    return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr);\n  }\n\n  var s = css(createEl('group'), {behavior: 'url(#default#VML)'});\n\n  if (!vendor(s, 'transform') && s.adj) {\n\n    // VML support detected. Insert CSS rule ...\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)');\n\n    Spinner.prototype.lines = function(el, o) {\n      var r = o.length+o.width;\n      var s = 2*r;\n\n      function grp() {\n        return css(vml('group', {coordsize: s +' '+s, coordorigin: -r +' '+-r}), {width: s, height: s});\n      }\n\n      var margin = -(o.width+o.length)*2+'px';\n      var g = css(grp(), {position: 'absolute', top: margin, left: margin});\n\n      var i;\n\n      function seg(i, dx, filter) {\n        ins(g,\n          ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),\n            ins(css(vml('roundrect', {arcsize: 1}), {\n                width: r,\n                height: o.width,\n                left: o.radius,\n                top: -o.width>>1,\n                filter: filter\n              }),\n              vml('fill', {color: o.color, opacity: o.opacity}),\n              vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change\n            )\n          )\n        );\n      }\n\n      if (o.shadow) {\n        for (i = 1; i <= o.lines; i++) {\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)');\n        }\n      }\n      for (i = 1; i <= o.lines; i++) seg(i);\n      return ins(el, g);\n    };\n    Spinner.prototype.opacity = function(el, i, val, o) {\n      var c = el.firstChild;\n      o = o.shadow && o.lines || 0;\n      if (c && i+o < c.childNodes.length) {\n        c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild;\n        if (c) c.opacity = val;\n      }\n    };\n  }\n  else {\n    useCssAnimations = vendor(s, 'animation');\n  }\n}();\n\nmodule.exports = Spinner;\n","/**\n * @license\n * File: matfile.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * MAT-files are a binary format directly supported by SigPlot.  A MAT-file consists of a 132-byte header\n * followed by binary data.\n * For more information on MAT-files, please visit https://www.mathworks.com/help/pdf_doc/matlab/matfile_format.pdf\n *\n * Offset   Name        Size    Type        Description\n * -----------------------------------------------------------------------------\n * 0        header     115   char[115]     Header\n * 116      subsys       7   char[7]\n * 124      version      2   int_2\n * 126      endianness   2   char[2]\n * 128      data_offset  4   int_4\n * 132      byte_offset  4   int_4\n *\n * @namespace matfile\n */\n(function(global) {\n    'use strict';\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);\n\n    // Descriptive text field\n    var headerTextBegin = 1;\n    var headerTextEnd = 116;\n\n    // Subsystem data offset field\n    var subsysOffsetBegin = 117;\n    var subsysOffsetEnd = 124;\n\n    // Version field\n    var versionOffsetBegin = 125;\n    var versionOffsetEnd = 126;\n\n    // Two character endian indicator. If the value reads \"MI\" then native computer\n    // has written the file in Big Endian, so no byte translation must occur.\n    // If value reads \"IM\" then native computer has written the file in Little Endian\n    // so byte-wise translation must be used on all data elements larger than 1 byte.\n    var endianCharsBegin = 127;\n    var endianCharsEnd = 128;\n\n    // Outermost data type and number of bytes. For data plottable in SigPlot this will\n    // most likely be a 1D array. The associated MATLAB type will most likely be \"miMATRIX\".\n\n    // WARNING: type \"miCOMPRESSED\" is the default for MATLAB files above version 6. These\n    // compressed files are currently UNREADABLE by this program as the file must be\n    // decompressed before reading.\n    var firstDataTypeOffsetBegin = 129;\n    var firstDataTypeOffsetEnd = 132;\n\n    var numBytesOffsetBegin = 133;\n    var numBytesOffsetEnd = 136;\n\n    // https://gist.github.com/TooTallNate/4750953\n    /**\n     * Returns the endianness of the browser\n     *\n     * @memberof matfile\n     * @private\n     */\n    function endianness() {\n        var b = new ArrayBuffer(4);\n        var a = new Uint32Array(b);\n        var c = new Uint8Array(b);\n        a[0] = 0xdeadbeef;\n        if (c[0] === 0xef) {\n            return 'LE';\n        }\n        if (c[0] === 0xde) {\n            return 'BE';\n        }\n        throw new Error('unknown endianness');\n    }\n\n    function getDataField(fileData, firstByte, lastByte) {\n        return fileData.slice(firstByte - 1, lastByte);\n    }\n\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var ARRAY_BUFFER_ENDIANNESS = endianness();\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var versionNames = {\n        256: \"MAT-file\"\n    };\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var dataTypeNames = {\n        1: {\n            name: \"miINT8\",\n            size: 1\n        },\n        2: {\n            name: \"miUINT8\",\n            size: 1\n        },\n        3: {\n            name: \"miINT16\",\n            size: 2\n        },\n        4: {\n            name: \"miUINT16\",\n            size: 2\n        },\n        5: {\n            name: \"miINT32\",\n            size: 4\n        },\n        6: {\n            name: \"miUINT32\",\n            size: 4\n        },\n        7: {\n            name: \"miSINGLE\",\n            size: 4\n        },\n        // 8 is reserved\n        9: {\n            name: \"miDOUBLE\",\n            size: 8\n        },\n        // 10 and 11 are reserved\n        12: {\n            name: \"miINT64\",\n            size: 8\n        },\n        13: {\n            name: \"miUINT64\",\n            size: 8\n        },\n        14: {\n            name: \"miMATRIX\",\n            size: null\n        },\n        15: {\n            name: \"miCOMPRESSED\",\n            size: null\n        },\n        16: {\n            name: \"miUTF8\",\n            size: null\n        },\n        17: {\n            name: \"miUTF16\",\n            size: null\n        },\n        18: {\n            name: \"miUTF32\",\n            size: null\n        }\n    };\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var arrayClassNames = {\n        1: \"mxCELL_CLASS\",\n        2: \"mxSTRUCT_CLASS\",\n        3: \"mxOBJECT_CLASS\",\n        4: \"mxCHAR_CLASS\",\n        5: \"mxSPARSE_CLASS\",\n        6: \"mxDOUBLE_CLASS\",\n        7: \"mxSINGLE_CLASS\",\n        8: \"mxINT8_CLASS\",\n        9: \"mxUINT8_CLASS\",\n        10: \"mxINT16_CLASS\",\n        11: \"mxUINT16_CLASS\",\n        12: \"mxINT32_CLASS\",\n        13: \"mxUINT32_CLASS\",\n        14: \"mxINT64_CLASS\",\n        15: \"mxUINT64_CLASS\"\n    };\n\n    /**\n     * @memberOf matfilee\n     * @private\n     */\n    var _SPA = {\n        'S': 1,\n        'C': 2,\n        'V': 3,\n        'Q': 4,\n        'M': 9,\n        'X': 10,\n        'T': 16,\n        'U': 1,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9\n    };\n\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _BPS = {\n        'P': 0.125,\n        'A': 1,\n        'O': 1,\n        'B': 1,\n        'I': 2,\n        'L': 4,\n        'X': 8,\n        'F': 4,\n        'D': 8\n    };\n\n    /**\n     * @memberOf bluefile\n     * @private\n     */\n    var _XM_TO_TYPEDARRAY = {\n        'P': null,\n        'A': null,\n        'O': Uint8Array,\n        'B': Int8Array,\n        'I': Int16Array,\n        'L': Int32Array,\n        'X': null,\n        'F': Float32Array,\n        'D': Float64Array\n    };\n\n    /**\n     * @memberof matfile\n     * @param   {array}     buf         Data bffer\n     * @param number\n     * @param bool\n     * @private\n     */\n    function getInt64(dataView, index, littleEndian) {\n        var highIndex, lowIndex;\n        var MAX_INT = Math.pow(2, 53);\n        if (littleEndian) {\n            highIndex = 4;\n            lowIndex = 0;\n        } else {\n            highIndex = 0;\n            lowIndex = 4;\n        }\n        var high = dataView.getInt32(index + highIndex, littleEndian);\n        var low = dataView.getInt32(index + lowIndex, littleEndian);\n        var rv = low + pow2(32) * high;\n        if (rv >= MAX_INT) {\n            window.console.info(\"Int is bigger than JS can represent.\");\n            return Infinity;\n        }\n        return rv;\n    }\n\n    /**\n     * @memberOf matfile\n     * @private\n     */\n    var _applySupportsTypedArray = true;\n    try {\n        var uintbuf = new Uint8Array(new ArrayBuffer(4));\n        uintbuf[0] = 66;\n        uintbuf[1] = 76;\n        uintbuf[2] = 85;\n        uintbuf[3] = 69;\n        var test = String.fromCharCode.apply(null, uintbuf);\n        if (test !== \"BLUE\") {\n            _applySupportsTypedArray = false;\n        }\n    } catch (error) {\n        _applySupportsTypedArray = false;\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {array}     buf         Data bffer\n     * @private\n     */\n    function ab2str(buf) {\n        var uintbuf = new Uint8Array(buf);\n        // Firefox 3.6 nor iOS devices can use ArrayBuffers with .apply\n        if (_applySupportsTypedArray) {\n            return String.fromCharCode.apply(null, uintbuf);\n        } else {\n            var str = \"\";\n            for (var i = 0; i < uintbuf.length; i++) {\n                str += String.fromCharCode(uintbuf[i]);\n            }\n            return str;\n        }\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {string}\n     * @private\n     */\n    function str2ab(str) {\n        var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        var bufView = new Uint16Array(buf);\n        for (var i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {number}\n     * @private\n     */\n    function pow2(n) {\n        return (n >= 0 && n < 31) ? (1 << n) : (pow2[n] || (pow2[n] = Math.pow(2, n)));\n    }\n\n    /**\n     * @memberof matfile\n     * @param   {array}\n     * @param   {number}\n     * @param   {number}\n     * @param   {string}\n     * @param   {endian}\n     * @private\n     */\n    function getArray(arrayBuff, startByte, byteLength, type) {\n        // Get a JS array from MATLAB array\n        // TODO: big endian implemenation\n\n        var outArr = [];\n        var dv = new DataView(arrayBuff, startByte, byteLength);\n\n        var array;\n        if (type === \"miINT8\") {\n            array = new Int8Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miUINT8\") {\n            array = new Uint8Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miINT16\") {\n            array = new Int16Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miUINT16\") {\n            array = new Uint16Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miINT32\") {\n            array = new Int32Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miUINT32\") {\n            array = new Uint32Array(arrayBuff, startByte, byteLength);\n        } else if (type === \"miDOUBLE\") {\n            array = new Float64Array(arrayBuff, startByte, byteLength);\n        } else {\n            window.console.warn(\"Array data type not supported yet.\");\n            return;\n        }\n\n        array.forEach(function(element) {\n            outArr.push(element);\n        });\n\n        return outArr;\n    }\n\n    function getDataWithType(dv, typeName, offset, littleEndian) {\n        var output;\n        switch (typeName) {\n            case \"miINT8\":\n                output = dv.getInt8(offset, littleEndian);\n                break;\n            case \"miUINT8\":\n                output = dv.getInt8(offset, littleEndian);\n                break;\n            case \"miINT16\":\n                output = dv.getInt16(offset, littleEndian);\n                break;\n            case \"miUINT16\":\n                output = dv.getUint16(offset, littleEndian);\n                break;\n            case \"miINT32\":\n                output = dv.getInt32(offset, littleEndian);\n                break;\n            case \"miUINT32\":\n                output = dv.getUint32(offset, littleEndian);\n                break;\n            case \"miSINGLE\":\n                output = dv.getFloat32(offset, littleEndian);\n                break;\n            case \"miDOUBLE\":\n                output = dv.getFloat64(offset, littleEndian);\n                break;\n            case \"miINT64\":\n                output = getInt64(dv, offset, littleEndian);\n                break;\n            default:\n                window.console.warn(typeName + \" not supported at thsi time\");\n                break;\n                /* TODO:           \n                case \"miUINT64\":\n                    break;\n                case \"miMATRIX\":\n                    break;\n                case \"miCOMPRESSED\":\n                    break;\n                case \"miUTF8\":\n                    break;\n                case \"miUTF16\":\n                    break;\n                case \"miUTF32\":\n                    break;*/\n        }\n        return output;\n    }\n\n    /**\n     * Create matfile header and attach data buffer\n     * @memberof matfile\n     * @param   {array}     buf         Data bffer\n     */\n    function MatHeader(buf, options) {\n        this.file = null;\n        this.file_name = null;\n        this.buf = buf;\n        if (this.buf != null) {\n            var dvhdr = new DataView(this.buf);\n            this.headerStr = ab2str(this.buf.slice(headerTextBegin - 1, headerTextEnd));\n\n            // get endianness\n            this.datarep = ab2str(this.buf.slice(endianCharsBegin - 1, endianCharsEnd));\n            var littleEndianHdr = (this.datarep === \"IM\");\n            var littleEndianData = (this.datarep === \"IM\");\n\n            this.headerList = this.headerStr.split(\",\").map(function(str) {\n                return str.trim();\n            });\n            this.matfile = this.headerList[0];\n            this.platform = this.headerList[1];\n            this.createdOn = this.headerList[2];\n            this.subsystemOffset = ab2str(this.buf.slice(subsysOffsetBegin - 1, subsysOffsetEnd));\n            this.version = dvhdr.getUint16(versionOffsetBegin - 1, littleEndianHdr);\n            this.versionName = versionNames[this.version];\n\n            this.dataType = dvhdr.getUint32(firstDataTypeOffsetBegin - 1, littleEndianHdr);\n            this.dataTypeName = dataTypeNames[this.dataType].name;\n            this.arraySize = dvhdr.getUint32(numBytesOffsetBegin - 1, littleEndianHdr);\n\n            var beginArray = numBytesOffsetEnd + 1;\n\n            // Start reading the file linearly from beginning and inc index as you go...\n            var currIndex = numBytesOffsetEnd + 1;\n            var typeNum = dvhdr.getUint32(currIndex - 1, littleEndianHdr);\n            var typeName = dataTypeNames[typeNum].name;\n            var typeSize = dataTypeNames[typeNum].size;\n            currIndex += 4;\n\n            // bytes per ``typeName``\n            var flagLength = getDataWithType(dvhdr, typeName, currIndex - 1, littleEndianData);\n            currIndex += typeSize;\n\n            // Array flags\n            // If bit is set:\n            // - complex: the data element includes an imaginary part\n            // - global: \"MATLAB loads the data element as a global variable in the base workspace\"\n            // - logical: indicates the array is used for logical indexing.\n            var arrayFlag = getDataWithType(dvhdr, typeName, currIndex - 1, littleEndianData);\n            currIndex += typeSize;\n\n            // TODO: use flags for future implementation\n            var complexFlag = arrayFlag & 0x80;\n            var globalFlag = arrayFlag & 0x40;\n            var logicalFlag = arrayFlag & 0x20;\n\n            // Find array class\n            var arrayClassNum = arrayFlag & 0xF;\n            var arrayClassName = arrayClassNames[arrayClassNum];\n\n            // TODO: sparse array data format implementation: which uses next 4 bytes\n            // Skip to next type field (array dimensions)\n            currIndex += typeSize;\n\n            // Dimensions type:\n            var dimTypeNum = dvhdr.getUint32(currIndex - 1, littleEndianData);\n            currIndex += 4;\n\n            var dimTypeName = dataTypeNames[dimTypeNum].name;\n            var dimTypeSize = dataTypeNames[dimTypeNum].size;\n\n            // Dimensions size:\n            var arrayDimTotalSize = dvhdr.getUint32(currIndex - 1, littleEndianData);\n            currIndex += 4;\n\n            // Get number of rows\n            var rows = getDataWithType(dvhdr, dimTypeName, currIndex - 1, littleEndianData);\n            currIndex += dimTypeSize;\n\n            // TODO: support for >= 2D array types\n            if (rows > 1) {\n                window.console.warn(\"Only 1D arrays are currently supported.\");\n            }\n\n            // Get number of columns\n            var cols = getDataWithType(dvhdr, dimTypeName, currIndex - 1, littleEndianData);\n            currIndex += typeSize;\n\n            // array name type\n            var arrayNameTypeNum = dvhdr.getUint32(currIndex - 1, littleEndianData);\n            currIndex += 4;\n\n            var nameSize = 0;\n            var small = false;\n            if (arrayNameTypeNum > 15) {\n                arrayNameTypeNum &= 0x00FF;\n                small = true;\n                nameSize = dvhdr.getUint16(currIndex - 5, littleEndianData);\n            }\n\n            var arrayNameTypeName = dataTypeNames[arrayNameTypeNum].name;\n            var arrayNameTypeSize = dataTypeNames[arrayNameTypeNum].size;\n\n            if (!small) {\n                nameSize = getDataWithType(dvhdr, arrayNameTypeName, currIndex - 1, littleEndianData);\n                currIndex += 4;\n            }\n\n            var arrayName = ab2str(this.buf.slice(currIndex - 1, currIndex + nameSize - 1));\n\n            // Pad to end of 64 bit word if necessary\n            var rndUp;\n            if (small) {\n                // Pad from the middle to the end of a 64 bit word\n                rndUp = (4 - (nameSize % 4)) % 4;\n            } else {\n                // Pad from the start of a new word\n                rndUp = (8 - (nameSize % 8)) % 8;\n            }\n\n            var jumpTo = nameSize + rndUp;\n            currIndex += jumpTo;\n\n            // set the data field in the header\n            this.setData(this.buf, dvhdr, currIndex, littleEndianData);\n        }\n    }\n    MatHeader.prototype = {\n        /**\n         * @memberof bluefile\n         * @param   buf\n         * @param   dvhdr\n         * @param   data_end\n         * @param   littleEndian\n         *\n         */\n        setData: function(buf, dvhdr, currIndex, littleEndian) {\n            var arrayValSize;\n\n            // Array value(s) type:\n            var typeNum = dvhdr.getUint32(currIndex - 1, littleEndian);\n\n            // Check for MATLAB \"small element type\"\n            var small = false;\n            if (typeNum > 15) {\n                typeNum &= 0x00FF;\n                small = true;\n                arrayValSize = dvhdr.getUint16(currIndex + 1, 2, littleEndian);\n            } else {\n                currIndex += 4;\n            }\n\n            var typeName = dataTypeNames[typeNum].name;\n            var typeSize = dataTypeNames[typeNum].size;\n\n            if (!small) {\n                arrayValSize = dvhdr.getUint32(currIndex - 1, littleEndian);\n                small = false;\n            }\n\n            currIndex += 4;\n\n            // Get JS array from MATLAB array\n            this.dview = getArray(buf, currIndex - 1, arrayValSize / typeSize, typeName);\n        }\n    };\n\n    // Internal method from http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\n    /**\n     * This function creates a new anchor element and uses location\n     * properties (inherent) to get the desired URL data. Some String\n     * operations are used (to normalize results across browsers).\n     *\n     * @memberof bluefile\n     * @private\n     * @param   url\n     * @returns -\n     */\n    function parseURL(url) {\n        var a = document.createElement('a');\n        a.href = url;\n        return {\n            source: url,\n            protocol: a.protocol.replace(':', ''),\n            host: a.hostname,\n            port: a.port,\n            query: a.search,\n            params: (function() {\n                var ret = {},\n                    seg = a.search.replace(/^\\?/, '').split('&'),\n                    len = seg.length,\n                    i = 0,\n                    s;\n                for (; i < len; i++) {\n                    if (!seg[i]) {\n                        continue;\n                    }\n                    s = seg[i].split('=');\n                    ret[s[0]] = s[1];\n                }\n                return ret;\n            })(),\n            file: (a.pathname.match(/\\/([^\\/?#]+)$/i) || [null, ''])[1],\n            hash: a.hash.replace('#', ''),\n            path: a.pathname.replace(/^([^\\/])/, '/$1'),\n            relative: (a.href.match(/tps?:\\/\\/[^\\/]+(.+)/) || [null, ''])[1],\n            segments: a.pathname.replace(/^\\//, '').split('/')\n        };\n    }\n\n    /**\n     * @memberof bluefile\n     * @private\n     * @param   text\n     * @param   oncomplete\n     * @param   blocksize\n     */\n    function text2buffer(text, oncomplete, blocksize) {\n        blocksize = blocksize || 1024;\n        var i = 0;\n        var arrayBuffer = new ArrayBuffer(text.length);\n        var bufView = new Uint8Array(arrayBuffer);\n        var worker = function() {\n            var end = i + blocksize;\n            for (; i < end; i++) {\n                bufView[i] = (text.charCodeAt(i) & 0xff);\n            }\n            if (i >= text.length) {\n                oncomplete(arrayBuffer);\n            } else {\n                setTimeout(worker, 0);\n            }\n        };\n        setTimeout(worker, 0);\n    }\n\n    /**\n     * Matfile Reader\n     * @memberof    matfile\n     * @param   options\n     */\n    function MatFileReader(options) {\n        this.options = options;\n    }\n\n    MatFileReader.prototype = {\n        /**\n         * @memberof matfile\n         * @param   theFile\n         * @param   onload\n         *\n         */\n        readheader: function readheader(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            var blob = theFile.webkitSlice(0, 116); // Chrome specific\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var rawhdr = reader.result;\n                    var hdr = new MatHeader(rawhdr, that.options);\n                    hdr.file = theFile;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(blob);\n        },\n\n        /**\n         *\n         * @memberof matfile\n         * @param   theFile\n         * @param   onload\n         *\n         */\n        read: function read(theFile, onload) {\n            var that = this;\n            var reader = new FileReader();\n            // Closure to capture the file information.\n            reader.onloadend = (function(theFile) {\n                return function(e) {\n                    if (e.target.error) {\n                        onload(null);\n                        return;\n                    }\n                    var raw = reader.result;\n                    var hdr = new MatHeader(raw, that.options);\n                    hdr.file = theFile;\n                    hdr.file_name = theFile.name;\n                    onload(hdr);\n                };\n            })(theFile);\n            reader.readAsArrayBuffer(theFile);\n        },\n\n        /**\n         *\n         * @memberof matfile\n         * @param   href\n         * @param   onload\n         *\n         */\n        read_http: function read_http(href, onload) {\n            var that = this;\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"GET\", href, true);\n            oReq.responseType = \"arraybuffer\";\n            oReq.overrideMimeType('text\\/plain; charset=x-user-defined');\n            oReq.onload = function(oEvent) {\n                if (oReq.readyState === 4) {\n                    if ((oReq.status === 200) || (oReq.status === 0)) { // status = 0 is necessary for file URL\n                        var arrayBuffer = null; // Note: not oReq.responseText\n                        if (oReq.response) {\n                            arrayBuffer = oReq.response;\n                            var hdr = new MatHeader(arrayBuffer, that.options);\n                            parseURL(href);\n                            var fileUrl = parseURL(href);\n                            hdr.file_name = fileUrl.file;\n                            onload(hdr);\n                        } else if (oReq.responseText) {\n                            text2buffer(oReq.responseText, function(arrayBuffer) {\n                                var hdr = new MatHeader(arrayBuffer, that.options);\n                                parseURL(href);\n                                var fileUrl = parseURL(href);\n                                hdr.file_name = fileUrl.file;\n                                onload(hdr);\n                            });\n                        }\n                        return;\n                    }\n                }\n                onload(null);\n            };\n            oReq.onerror = function(oEvent) {\n                onload(null);\n            };\n            oReq.send(null);\n        }\n    };\n    global['MatHeader'] = global['MatHeader'] || MatHeader;\n    global['MatFileReader'] = global['MatFileReader'] || MatFileReader;\n}(this));\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n","/* global module */\n/* global require */\n (function() {\n     var tinycolor = require(\"tinycolor2\");\n     if (typeof Object.assign !== 'function') {\n         // Must be writable: true, enumerable: false, configurable: true\n         Object.defineProperty(Object, \"assign\", {\n             value: function assign(target, varArgs) { // .length of function is 2\n                 'use strict';\n                 if (target == null) { // TypeError if undefined or null\n                     throw new TypeError('Cannot convert undefined or null to object');\n                 }\n                 var to = Object(target);\n                 for (var index = 1; index < arguments.length; index++) {\n                     var nextSource = arguments[index];\n                     if (nextSource != null) { // Skip over if undefined or null\n                         for (var nextKey in nextSource) {\n                             // Avoid bugs when hasOwnProperty is shadowed\n                             if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                                 to[nextKey] = nextSource[nextKey];\n                             }\n                         }\n                     }\n                 }\n                 return to;\n             },\n             writable: true,\n             configurable: true\n         });\n     }\n     var ColorMap = window.ColorMap = function(colors, options) {\n         this.options = {\n             ncolors: 500,\n             alpha: 255\n         };\n         this.options = Object.assign(this.options, options);\n         this.map = [];\n         var _min = 0;\n         this._low = 0;\n         this._high = 1;\n         var ncolors = this.options.ncolors;\n         this._fscale = ncolors / (this._high - this._low);\n         var colorindex = 1;\n         var colorBlockIndex = 1;\n         colors = JSON.parse(JSON.stringify(colors)); //make a copy so we dont change the original colors\n         colors = this._parseColors(colors);\n         this.colors = colors;\n         var col1 = colors[0];\n         var col2 = colors[1];\n         var colorStop = colors[1].pos - colors[0].pos;\n         var colorsInBlock = ncolors * (colorStop / 100);\n         this.colorsInBlock = colorsInBlock;\n         var factorStep = 1 / colorsInBlock;\n         for (var n = 0; n < ncolors - 2; n++) {\n             if (colorBlockIndex > colorsInBlock) {\n                 col1 = colors[colorindex];\n                 col2 = colors[colorindex + 1];\n                 if (col2 === undefined) {\n                     break;\n                 }\n                 var colorStop = col2.pos - col1.pos;\n                 var colorsInBlock = ncolors * (colorStop / 100);\n                 this.colorsInBlock = colorsInBlock;\n                 var factorStep = 1 / colorsInBlock;\n                 var colorBlockIndex = 1;\n                 colorindex += 1;\n             }\n             this._addColor(this.interpolate(col1, col2, factorStep * colorBlockIndex));\n             colorBlockIndex += 1;\n         }\n         \n        this._addColor(colors[colors.length -1]);\n        this._addColor(colors[0], true);\n         \n     };\n     ColorMap.prototype = {\n         _addColor: function(color, front) {\n             color.hex = this._rgbToHex(color.red, color.green, color.blue);\n             color.color = (color.alpha << 24) | // alpha\n                 (color.blue << 16) | // blue\n                 (color.green << 8) | // green\n                 (color.red);\n             if (front) {\n                 this.map.unshift(color);\n             } else {\n                 this.map.push(color);\n             }\n         },\n         _parseColors: function(colors) {\n             for (var i = 0, c = colors.length; i < c; i++) {\n                 var color = colors[i];\n                 if (typeof color === \"string\") {\n                     colors[i] = this._hexToRgb(color);\n                     color = tinycolor(color);\n                     color = color.toRgb();\n                     colors[i] = {red:color.r,green:color.g,blue:color.b,alpha:this.options.alpha};\n\n                 } else if (color.hasOwnProperty(\"color\")) {\n                     var newColor = tinycolor(color.color);\n                     newColor = newColor.toRgb();\n                     newColor = {red:newColor.r,green:newColor.g,blue:newColor.b,alpha:this.options.alpha};\n                     if (color.hasOwnProperty(\"pos\")) {\n                         newColor.pos = color.pos;\n                     }\n                     colors[i] = newColor;\n                 } else {\n                     //assume if it has rgb values it is a percentage\n                     colors[i].red = Math.floor(Math.round(255 * (color.red / 100)));\n                     colors[i].green = Math.floor(Math.round(255 * (color.green / 100)));\n                     colors[i].blue = Math.floor(Math.round(255 * (color.blue / 100)));\n                 }\n                 if (!colors[i].hasOwnProperty(\"alpha\")) {\n                     colors[i].alpha = this.options.alpha;\n                 }\n             }\n             return this._checkColorStops(colors);\n         },\n         _checkColorStops: function(colors) {\n             var lastStop = 0;\n             var colorsWithNoStops = 0;\n             for (var i = 0, c = colors.length; i < c; i++) {\n                 var color = colors[i];\n                 if (!color.hasOwnProperty(\"pos\")) {\n                     colorsWithNoStops += 1;\n                 } else {\n                     if (colorsWithNoStops) {\n                         var stopSize = (color.pos - lastStop) / colorsWithNoStops;\n                         var currentPos = color.pos;\n                         for (var z = 1; z <= colorsWithNoStops; z++) {\n                             colors[i - z].pos = currentPos - stopSize;\n                             currentPos -= stopSize;\n                         }\n                     }\n                     colorsWithNoStops = 0;\n                 }\n             }\n             if (colorsWithNoStops) {\n                 var currentPos = 100;\n                 colors[colors.length - 1].pos = currentPos;\n                 if (lastStop === 0) {\n                     colors[0].pos = 0;\n                     colorsWithNoStops -= 1;\n                 }\n                 var stopSize = (currentPos - lastStop) / colorsWithNoStops;\n                 var i = colors.length - 1;\n                 for (var z = 1; z < colorsWithNoStops; z++) {\n                     colors[i - z].pos = currentPos - stopSize;\n                     currentPos -= stopSize;\n                 }\n             }\n             return colors;\n         },\n         _componentToHex: function(c) {\n             var hex = c.toString(16);\n             return hex.length === 1 ? \"0\" + hex : hex;\n         },\n         _rgbToHex: function(r, g, b) {\n             return \"#\" + this._componentToHex(r) + this._componentToHex(g) + this._componentToHex(b);\n         },\n         _hexToRgb: function(hex) {\n             var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n             return result ? {\n                 red: parseInt(result[1], 16),\n                 green: parseInt(result[2], 16),\n                 blue: parseInt(result[3], 16)\n             } : null;\n         },\n         getColor: function(number) {\n             var n = (number - this._low) * this._fscale;\n             var colorindex = ~~n; //make int fastest method\n             if (colorindex > this.map.length - 1) {\n                 colorindex = this.map.length - 1;\n             } else if (colorindex < 0) {\n                 colorindex = 0;\n             }\n             return this.map[colorindex];\n         },\n         setRange: function(low, high) {\n             // only recalculate if a value has changed\n             if ((this._low !== low) || (this._high !== high)) {\n                 this._low = low;\n                 this._high = high;\n                 this._fscale = this.map.length / Math.abs(this._high - this._low);\n             }\n         },\n         interpolate: function(col1, col2, factor) {\n             return {\n                 red: col1.red + factor * (col2.red - col1.red),\n                 green: col1.green + factor * (col2.green - col1.green),\n                 blue: col1.blue + factor * (col2.blue - col1.blue),\n                 alpha: col1.alpha + factor * (col2.alpha - col1.alpha)\n             };\n         }\n     };\n     module.exports = ColorMap;\n })();","/**\n * @license\n * File: CanvasInput.js\n *  CanvasInput v1.0.10\n *  http://goldfirestudios.com/blog/108/CanvasInput-HTML5-Canvas-Text-Input\n *\n *  (c) 2013, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  (c) 2013, Axios, Inc.\n *  Modifications made by Axios, Inc.\n *  axiosengineering.com\n *\n *  MIT License\n */\n\n/* global module */\n/* global require */\n\n(function() {\n    // create a buffer that stores all inputs so that tabbing\n    // between them is made possible.\n    var inputs = [];\n\n    // initialize the Canvas Input\n    var CanvasInput = window.CanvasInput = function(o) {\n        var self = this;\n\n        o = o ? o : {};\n\n        // setup the defaults\n        self._canvas = o.canvas || null;\n        self._ctx = self._canvas ? self._canvas.getContext('2d') : null;\n        self._x = o.x || 0;\n        self._y = o.y || 0;\n        self._extraX = o.extraX || 0;\n        self._extraY = o.extraY || 0;\n        self._fontSize = o.fontSize || 14;\n        self._fontFamily = o.fontFamily || 'Arial';\n        self._fontColor = o.fontColor || '#000';\n        self._placeHolderColor = o.placeHolderColor || '#bfbebd';\n        self._fontWeight = o.fontWeight || 'normal';\n        self._fontStyle = o.fontStyle || 'normal';\n        self._readonly = o.readonly || false;\n        self._maxlength = o.maxlength || null;\n        self._width = o.width || 150;\n        self._height = o.height || self._fontSize;\n        self._padding = o.padding >= 0 ? o.padding : 5;\n        self._borderWidth = o.borderWidth >= 0 ? o.borderWidth : 1;\n        self._borderColor = o.borderColor || '#959595';\n        self._borderRadius = o.borderRadius >= 0 ? o.borderRadius : 3;\n        self._backgroundImage = o.backgroundImage || '';\n        self._boxShadow = o.boxShadow || '1px 1px 0px rgba(255, 255, 255, 1)';\n        self._innerShadow = o.innerShadow || '0px 0px 4px rgba(0, 0, 0, 0.4)';\n        self._selectionColor = o.selectionColor || 'rgba(179, 212, 253, 0.8)';\n        self._placeHolder = o.placeHolder || '';\n        self._value = o.value || self._placeHolder;\n        self._onsubmit = o.onsubmit || function() {};\n        self._onkeydown = o.onkeydown || function() {};\n        self._onkeyup = o.onkeyup || function() {};\n        self._onfocus = o.onfocus || function() {};\n        self._onblur = o.onblur || function() {};\n        self._cursor = false;\n        self._cursorPos = 0;\n        self._hasFocus = false;\n        self._selection = [0, 0];\n        self._wasOver = false;\n        self._renderOnReturn = (o.renderOnReturn !== undefined ? o.renderOnReturn : true);\n        self._disableBlur = o.disableBlur || false;\n        self._tabToClear = o.tabToClear || false;\n\n        // parse box shadow\n        self.boxShadow(self._boxShadow, true);\n\n        // calculate the full width and height with padding, borders and shadows\n        self._calcWH();\n\n        // setup the off-DOM canvas\n        self._renderCanvas = document.createElement('canvas');\n        self._renderCanvas.setAttribute('width', self.outerW);\n        self._renderCanvas.setAttribute('height', self.outerH);\n        self._renderCtx = self._renderCanvas.getContext('2d');\n\n        // setup another off-DOM canvas for inner-shadows\n        self._shadowCanvas = document.createElement('canvas');\n        self._shadowCanvas.setAttribute('width', self._width + self._padding * 2);\n        self._shadowCanvas.setAttribute('height', self._height + self._padding * 2);\n        self._shadowCtx = self._shadowCanvas.getContext('2d');\n\n        // setup the background color\n        if (typeof o.backgroundGradient !== 'undefined') {\n            self._backgroundColor = self._renderCtx.createLinearGradient(\n                0,\n                0,\n                0,\n                self.outerH\n            );\n            self._backgroundColor.addColorStop(0, o.backgroundGradient[0]);\n            self._backgroundColor.addColorStop(1, o.backgroundGradient[1]);\n        } else {\n            self._backgroundColor = o.backgroundColor || '#fff';\n        }\n\n        // setup main canvas events\n        if (self._canvas) {\n            self.mousemoveCanvasListener = function(e) {\n                e = e || window.event;\n                self.mousemove(e, self);\n            };\n            self._canvas.addEventListener('mousemove', self.mousemoveCanvasListener, false);\n\n            self.mousedownCanvasListener = function(e) {\n                e = e || window.event;\n                self.mousedown(e, self);\n            };\n            self._canvas.addEventListener('mousedown', self.mousedownCanvasListener, false);\n\n            self.mouseupCanvasListener = function(e) {\n                e = e || window.event;\n                self.mouseup(e, self);\n            };\n            self._canvas.addEventListener('mouseup', self.mouseupCanvasListener, false);\n        }\n\n        // setup a global mouseup to blur the input outside of the canvas\n        self.mouseupWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus && !self._mouseDown) {\n                self.blur();\n            }\n        };\n        window.addEventListener('mouseup', self.mouseupWindowListener, true);\n\n        // setup the keydown listener\n        self.keydownWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus) {\n                self.keydown(e, self);\n            }\n        };\n        window.addEventListener('keydown', self.keydownWindowListener, false);\n\n        // setup the keyup listener\n        self.keyupWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus) {\n                self._onkeyup(e, self);\n            }\n        };\n        window.addEventListener('keyup', self.keyupWindowListener, false);\n\n        // setup the 'paste' listener\n        self.pasteWindowListener = function(e) {\n            e = e || window.event;\n            if (self._hasFocus) {\n                var text = e.clipboardData.getData('text/plain'),\n                    startText = self._value.substr(0, self._cursorPos),\n                    endText = self._value.substr(self._cursorPos);\n                self._value = startText + text + endText;\n                self._cursorPos += text.length;\n\n                self.render();\n            }\n        };\n        window.addEventListener('paste', self.pasteWindowListener, false);\n\n        // add this to the buffer\n        inputs.push(self);\n        self._inputsIndex = inputs.length - 1;\n\n        // draw the text box\n        self.render();\n    };\n\n    // setup the prototype\n    CanvasInput.prototype = {\n        /**\n         * Get/set the main canvas.\n         * @param  {Object} data Canvas reference.\n         * @return {Mixed}      CanvasInput or current canvas.\n         */\n        canvas: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._canvas = data;\n                self._ctx = self._canvas.getContext('2d');\n\n                return self.render();\n            } else {\n                return self._canvas;\n            }\n        },\n\n        /**\n         * Get/set the x-position.\n         * @param  {Number} data The pixel position along the x-coordinate.\n         * @return {Mixed}      CanvasInput or current x-value.\n         */\n        x: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._x = data;\n\n                return self.render();\n            } else {\n                return self._x;\n            }\n        },\n\n        /**\n         * Get/set the y-position.\n         * @param  {Number} data The pixel position along the y-coordinate.\n         * @return {Mixed}      CanvasInput or current y-value.\n         */\n        y: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._y = data;\n\n                return self.render();\n            } else {\n                return self._y;\n            }\n        },\n\n        /**\n         * Get/set the extra x-position (generally used when no canvas is specified).\n         * @param  {Number} data The pixel position along the x-coordinate.\n         * @return {Mixed}      CanvasInput or current x-value.\n         */\n        extraX: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._extraX = data;\n\n                return self.render();\n            } else {\n                return self._extraX;\n            }\n        },\n\n        /**\n         * Get/set the extra y-position (generally used when no canvas is specified).\n         * @param  {Number} data The pixel position along the y-coordinate.\n         * @return {Mixed}      CanvasInput or current y-value.\n         */\n        extraY: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._extraY = data;\n\n                return self.render();\n            } else {\n                return self._extraY;\n            }\n        },\n\n        /**\n         * Get/set the font size.\n         * @param  {Number} data Font size.\n         * @return {Mixed}      CanvasInput or current font size.\n         */\n        fontSize: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontSize = data;\n\n                return self.render();\n            } else {\n                return self._fontSize;\n            }\n        },\n\n        /**\n         * Get/set the font family.\n         * @param  {String} data Font family.\n         * @return {Mixed}      CanvasInput or current font family.\n         */\n        fontFamily: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontFamily = data;\n\n                return self.render();\n            } else {\n                return self._fontFamily;\n            }\n        },\n\n        /**\n         * Get/set the font color.\n         * @param  {String} data Font color.\n         * @return {Mixed}      CanvasInput or current font color.\n         */\n        fontColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontColor = data;\n\n                return self.render();\n            } else {\n                return self._fontColor;\n            }\n        },\n\n        /**\n         * Get/set the place holder font color.\n         * @param  {String} data Font color.\n         * @return {Mixed}      CanvasInput or current place holder font color.\n         */\n        placeHolderColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._placeHolderColor = data;\n\n                return self.render();\n            } else {\n                return self._placeHolderColor;\n            }\n        },\n\n        /**\n         * Get/set the font weight.\n         * @param  {String} data Font weight.\n         * @return {Mixed}      CanvasInput or current font weight.\n         */\n        fontWeight: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontWeight = data;\n\n                return self.render();\n            } else {\n                return self._fontWeight;\n            }\n        },\n\n        /**\n         * Get/set the font style.\n         * @param  {String} data Font style.\n         * @return {Mixed}      CanvasInput or current font style.\n         */\n        fontStyle: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._fontStyle = data;\n\n                return self.render();\n            } else {\n                return self._fontStyle;\n            }\n        },\n\n        /**\n         * Get/set the width of the text box.\n         * @param  {Number} data Width in pixels.\n         * @return {Mixed}      CanvasInput or current width.\n         */\n        width: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._width = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._width;\n            }\n        },\n\n        /**\n         * Get/set the height of the text box.\n         * @param  {Number} data Height in pixels.\n         * @return {Mixed}      CanvasInput or current height.\n         */\n        height: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._height = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._height;\n            }\n        },\n\n        /**\n         * Get/set the padding of the text box.\n         * @param  {Number} data Padding in pixels.\n         * @return {Mixed}      CanvasInput or current padding.\n         */\n        padding: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._padding = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._padding;\n            }\n        },\n\n        /**\n         * Get/set the border width.\n         * @param  {Number} data Border width.\n         * @return {Mixed}      CanvasInput or current border width.\n         */\n        borderWidth: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._borderWidth = data;\n                self._calcWH();\n                self._updateCanvasWH();\n\n                return self.render();\n            } else {\n                return self._borderWidth;\n            }\n        },\n\n        /**\n         * Get/set the border color.\n         * @param  {String} data Border color.\n         * @return {Mixed}      CanvasInput or current border color.\n         */\n        borderColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._borderColor = data;\n\n                return self.render();\n            } else {\n                return self._borderColor;\n            }\n        },\n\n        /**\n         * Get/set the border radius.\n         * @param  {Number} data Border radius.\n         * @return {Mixed}      CanvasInput or current border radius.\n         */\n        borderRadius: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._borderRadius = data;\n\n                return self.render();\n            } else {\n                return self._borderRadius;\n            }\n        },\n\n        /**\n         * Get/set the background color.\n         * @param  {Number} data Background color.\n         * @return {Mixed}      CanvasInput or current background color.\n         */\n        backgroundColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._backgroundColor = data;\n\n                return self.render();\n            } else {\n                return self._backgroundColor;\n            }\n        },\n\n        /**\n         * Get/set the background gradient.\n         * @param  {Number} data Background gradient.\n         * @return {Mixed}      CanvasInput or current background gradient.\n         */\n        backgroundGradient: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._backgroundColor = self._renderCtx.createLinearGradient(\n                    0,\n                    0,\n                    0,\n                    self.outerH\n                );\n                self._backgroundColor.addColorStop(0, data[0]);\n                self._backgroundColor.addColorStop(1, data[1]);\n\n                return self.render();\n            } else {\n                return self._backgroundColor;\n            }\n        },\n\n        /**\n         * Get/set the box shadow.\n         * @param  {String} data     Box shadow in CSS format (1px 1px 1px rgba(0, 0, 0.5)).\n         * @param  {Boolean} doReturn (optional) True to prevent a premature render.\n         * @return {Mixed}          CanvasInput or current box shadow.\n         */\n        boxShadow: function(data, doReturn) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                // parse box shadow\n                var boxShadow = data.split('px ');\n                self._boxShadow = {\n                    x: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[0], 10),\n                    y: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[1], 10),\n                    blur: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[2], 10),\n                    color: self._boxShadow === 'none' ? '' : boxShadow[3]\n                };\n\n                // take into account the shadow and its direction\n                if (self._boxShadow.x < 0) {\n                    self.shadowL = Math.abs(self._boxShadow.x) + self._boxShadow.blur;\n                    self.shadowR = self._boxShadow.blur + self._boxShadow.x;\n                } else {\n                    self.shadowL = Math.abs(self._boxShadow.blur - self._boxShadow.x);\n                    self.shadowR = self._boxShadow.blur + self._boxShadow.x;\n                }\n                if (self._boxShadow.y < 0) {\n                    self.shadowT = Math.abs(self._boxShadow.y) + self._boxShadow.blur;\n                    self.shadowB = self._boxShadow.blur + self._boxShadow.y;\n                } else {\n                    self.shadowT = Math.abs(self._boxShadow.blur - self._boxShadow.y);\n                    self.shadowB = self._boxShadow.blur + self._boxShadow.y;\n                }\n\n                self.shadowW = self.shadowL + self.shadowR;\n                self.shadowH = self.shadowT + self.shadowB;\n\n                self._calcWH();\n\n                if (!doReturn) {\n                    self._updateCanvasWH();\n\n                    return self.render();\n                }\n            } else {\n                return self._boxShadow;\n            }\n        },\n\n        /**\n         * Get/set the inner shadow.\n         * @param  {String} data In the format of a CSS box shadow (1px 1px 1px rgba(0, 0, 0.5)).\n         * @return {Mixed}          CanvasInput or current inner shadow.\n         */\n        innerShadow: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._innerShadow = data;\n\n                return self.render();\n            } else {\n                return self._innerShadow;\n            }\n        },\n\n        /**\n         * Get/set the text selection color.\n         * @param  {String} data Color.\n         * @return {Mixed}      CanvasInput or current selection color.\n         */\n        selectionColor: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._selectionColor = data;\n\n                return self.render();\n            } else {\n                return self._selectionColor;\n            }\n        },\n\n        /**\n         * Get/set the place holder text.\n         * @param  {String} data Place holder text.\n         * @return {Mixed}      CanvasInput or current place holder text.\n         */\n        placeHolder: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._placeHolder = data;\n\n                return self.render();\n            } else {\n                return self._placeHolder;\n            }\n        },\n\n        /**\n         * Get/set the current text box value.\n         * @param  {String} data Text value.\n         * @return {Mixed}      CanvasInput or current text value.\n         */\n        value: function(data) {\n            var self = this;\n\n            if (typeof data !== 'undefined') {\n                self._value = data;\n\n                return self.focus();\n            } else {\n                return self._value;\n            }\n        },\n\n        /**\n         * Set or fire the onsubmit event.\n         * @param  {Function} fn Custom callback.\n         */\n        onsubmit: function(fn) {\n            var self = this;\n\n            if (typeof fn !== 'undefined') {\n                self._onsubmit = fn;\n\n                return self;\n            } else {\n                self._onsubmit();\n            }\n        },\n\n        /**\n         * Set or fire the onkeydown event.\n         * @param  {Function} fn Custom callback.\n         */\n        onkeydown: function(fn) {\n            var self = this;\n\n            if (typeof fn !== 'undefined') {\n                self._onkeydown = fn;\n\n                return self;\n            } else {\n                self._onkeydown();\n            }\n        },\n\n        /**\n         * Set or fire the onkeyup event.\n         * @param  {Function} fn Custom callback.\n         */\n        onkeyup: function(fn) {\n            var self = this;\n\n            if (typeof fn !== 'undefined') {\n                self._onkeyup = fn;\n\n                return self;\n            } else {\n                self._onkeyup();\n            }\n        },\n\n        /**\n         * Place focus on the CanvasInput box, placing the cursor\n         * either at the end of the text or where the user clicked.\n         * @param  {Number} pos (optional) The position to place the cursor.\n         * @return {CanvasInput}\n         */\n        focus: function(pos) {\n            var self = this,\n                input;\n\n            // if this is readonly, don't allow it to get focus\n            if (self._readonly) {\n                return;\n            }\n\n            // only fire the focus event when going from unfocussed\n            if (!self._hasFocus) {\n                self._onfocus(self);\n            }\n\n            // remove selection\n            if (!self._selectionUpdated) {\n                self._selection = [0, 0];\n            } else {\n                delete self._selectionUpdated;\n            }\n\n            // update the cursor position\n            self._cursorPos = (typeof pos === 'number') ? pos : self._clipText().length;\n\n            // clear the place holder\n            if (self._placeHolder === self._value) {\n                self._value = '';\n            }\n\n            self._hasFocus = true;\n            self._cursor = true;\n\n            // setup cursor interval\n            if (self._cursorInterval) {\n                clearInterval(self._cursorInterval);\n            }\n            self._cursorInterval = setInterval(function() {\n                self._cursor = !self._cursor;\n                self.render();\n            }, 500);\n\n            // check if this is Chrome for Android (there is a bug with returning incorrect character key codes)\n            var nav = navigator.userAgent.toLowerCase(),\n                isChromeMobile = (nav.indexOf('chrome') >= 0 && nav.indexOf('mobile') >= 0 && nav.indexOf('android') >= 0);\n\n            // add support for mobile\n            var isMobile = (typeof window.orientation !== 'undefined');\n            if (isMobile && !isChromeMobile && document && document.createElement && (input = document.createElement('input'))) {\n                input.type = 'text';\n                input.style.opacity = 0;\n                input.style.position = 'absolute';\n                input.style.left = (self._x + self._extraX + (self._canvas ? self._canvas.offsetLeft : 0)) + 'px';\n                input.style.top = (self._y + self._extraY + (self._canvas ? self._canvas.offsetTop : 0)) + 'px';\n                input.style.width = self._width;\n                input.style.height = 0;\n                document.body.appendChild(input);\n                input.focus();\n                input.addEventListener('blur', function() {\n                    self.blur(self);\n                }, false);\n            } else if (isMobile) {\n                self.value(prompt(self._placeHolder) || '');\n            }\n\n            return self.render();\n        },\n\n        /**\n         * Removes focus from the CanvasInput box.\n         * @param  {Object} _this Reference to this.\n         * @return {CanvasInput}\n         */\n        blur: function(_this) {\n            var self = _this || this;\n\n            if (!self._disableBlur) {\n                self._onblur(self);\n\n                if (self._cursorInterval) {\n                    clearInterval(self._cursorInterval);\n                }\n                self._hasFocus = false;\n                self._cursor = false;\n                self._selection = [0, 0];\n\n                // fill the place holder\n                if (self._value === '') {\n                    self._value = self._placeHolder;\n                }\n            }\n\n            return self.render();\n        },\n\n        /**\n         * Maintains continual focus on the CanvasInput by disabling blur.\n         * @param {Object} _this Reference to this.\n         */\n        disableBlur: function(_this) {\n            var self = _this || this;\n            self._disableBlur = true;\n        },\n\n        /**\n         * Allows the CanvasInput to blur or focus by re-enabling blur.\n         * @param {Object} _this Reference to this.\n         */\n        enableBlur: function(_this) {\n            var self = _this || this;\n            self._disableBlur = false;\n        },\n\n        /**\n         * Fired with the keydown event to draw the typed characters.\n         * @param  {Event}       e    The keydown event.\n         * @param  {CanvasInput} self\n         * @return {CanvasInput}\n         */\n        keydown: function(e, self) {\n            var keyCode = e.which,\n                isShift = e.shiftKey,\n                key = null,\n                startText, endText;\n\n            // make sure the correct text field is being updated\n            if (!self._hasFocus) {\n                return;\n            }\n\n            // fire custom user event\n            self._onkeydown(e, self);\n\n            // add support for Ctrl/Cmd+A selection\n            if (keyCode === 65 && (e.ctrlKey || e.metaKey)) {\n                self._selection = [0, self._value.length];\n                e.preventDefault();\n                return self.render();\n            }\n\n            // block keys that shouldn't be processed\n            if (keyCode === 17 || e.metaKey || e.ctrlKey) {\n                return self;\n            }\n\n            // prevent the default action\n            e.preventDefault();\n\n            if (keyCode === 8) { // backspace\n                if (!self._clearSelection()) {\n                    if (self._cursorPos > 0) {\n                        startText = self._value.substr(0, self._cursorPos - 1);\n                        endText = self._value.substr(self._cursorPos, self._value.length);\n                        self._value = startText + endText;\n                        self._cursorPos--;\n                    }\n                }\n            } else if (keyCode === 37) { // left arrow key\n                if (self._cursorPos > 0) {\n                    self._cursorPos--;\n                    self._cursor = true;\n                    self._selection = [0, 0];\n                }\n            } else if (keyCode === 39) { // right arrow key\n                if (self._cursorPos < self._value.length) {\n                    self._cursorPos++;\n                    self._cursor = true;\n                    self._selection = [0, 0];\n                }\n            } else if (keyCode === 13) { // enter key\n                self._onsubmit(e, self);\n            } else if (keyCode === 9) { // tab key\n                if (self._tabToClear) {\n                    self._value = \"\";\n                    self._cursorPos = 0;\n                } else {\n                    var next = (inputs[self._inputsIndex + 1]) ? self._inputsIndex + 1 : 0;\n                    if (next !== self._inputsIndex) {\n                        self.blur();\n                        setTimeout(function() {\n                            inputs[next].focus();\n                        }, 10);\n                    }\n                }\n            } else if (key = self._mapCodeToKey(isShift, keyCode)) {\n                self._clearSelection();\n\n                // enforce the max length\n                if (self._maxlength && self._maxlength <= self._value.length) {\n                    return;\n                }\n\n                startText = (self._value) ? self._value.substr(0, self._cursorPos) : '';\n                endText = (self._value) ? self._value.substr(self._cursorPos) : '';\n                self._value = startText + key + endText;\n                self._cursorPos++;\n            }\n\n            if ((keyCode == 13 && self._renderOnReturn) || keyCode !== 13) {\n                return self.render();\n            } else {\n                return function() {};\n            }\n        },\n\n        /**\n         * Fired with the click event on the canvas, and puts focus on/off\n         * based on where the user clicks.\n         * @param  {Event}       e    The click event.\n         * @param  {CanvasInput} self\n         * @return {CanvasInput}\n         */\n        click: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y;\n\n            if (self._endSelection) {\n                delete self._endSelection;\n                delete self._selectionUpdated;\n                return;\n            }\n\n            if (self._canvas && self._overInput(x, y) || !self._canvas) {\n                if (self._mouseDown) {\n                    self._mouseDown = false;\n                    self.click(e, self);\n                    return self.focus(self._clickPos(x, y));\n                }\n            } else {\n                return self.blur();\n            }\n        },\n\n        /**\n         * Fired with the mousemove event to update the default cursor.\n         * @param  {Event}       e    The mousemove event.\n         * @param  {CanvasInput} self\n         * @return {CanvasInput}\n         */\n        mousemove: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y,\n                isOver = self._overInput(x, y);\n\n            if (isOver && self._canvas) {\n                self._canvas.style.cursor = 'text';\n                self._wasOver = true;\n            } else if (self._wasOver && self._canvas) {\n                self._canvas.style.cursor = 'default';\n                self._wasOver = false;\n            }\n\n            if (self._hasFocus && self._selectionStart >= 0) {\n                var curPos = self._clickPos(x, y),\n                    start = Math.min(self._selectionStart, curPos),\n                    end = Math.max(self._selectionStart, curPos);\n\n                if (!isOver) {\n                    self._selectionUpdated = true;\n                    self._endSelection = true;\n                    delete self._selectionStart;\n                    self.render();\n                    return;\n                }\n\n                if (self._selection[0] !== start || self._selection[1] !== end) {\n                    self._selection = [start, end];\n                    self.render();\n                }\n            }\n        },\n\n        /**\n         * Fired with the mousedown event to start a selection drag.\n         * @param  {Event} e    The mousedown event.\n         * @param  {CanvasInput} self\n         */\n        mousedown: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y,\n                isOver = self._overInput(x, y);\n\n            // setup the 'click' event\n            self._mouseDown = isOver;\n\n            // start the selection drag if inside the input\n            if (self._hasFocus && isOver) {\n                self._selectionStart = self._clickPos(x, y);\n            }\n        },\n\n        /**\n         * Fired with the mouseup event to end a selection drag.\n         * @param  {Event} e    The mouseup event.\n         * @param  {CanvasInput} self\n         */\n        mouseup: function(e, self) {\n            var mouse = self._mousePos(e),\n                x = mouse.x,\n                y = mouse.y;\n\n            // update selection if a drag has happened\n            var isSelection = self._clickPos(x, y) !== self._selectionStart;\n            if (self._hasFocus && self._selectionStart >= 0 && self._overInput(x, y) && isSelection) {\n                self._selectionUpdated = true;\n                delete self._selectionStart;\n                self.render();\n            } else {\n                delete self._selectionStart;\n            }\n\n            self.click(e, self);\n        },\n\n        /**\n         * Helper method to get the off-DOM canvas.\n         * @return {Object} Reference to the canvas.\n         */\n        renderCanvas: function() {\n            return this._renderCanvas;\n        },\n\n        /**\n         * Helper method to remove all event listeners, stop the blinking cursor and\n         * reset the cursor style.\n         */\n        cleanup: function() {\n            this._canvas.removeEventListener(\"mouseup\", this.mouseupCanvasListener, false);\n            this._canvas.removeEventListener(\"mousedown\", this.mousedownCanvasListener, false);\n            this._canvas.removeEventListener(\"mousemove\", this.mousemoveCanvasListener, false);\n            window.removeEventListener(\"keydown\", this.keydownWindowListener, false);\n            window.removeEventListener(\"keyup\", this.keyupWindowListener, false);\n            window.removeEventListener(\"mouseup\", this.mouseupWindowListener, true);\n            window.removeEventListener(\"paste\", this.pasteWindowListener, false);\n            clearInterval(this._cursorInterval);\n\n            this._canvas.style.cursor = 'default';\n            for (var i = (inputs.length- 1); i >= 0 ; i--) {\n                if (inputs[i] === this) {\n                    inputs.splice(i, 1);\n                }\n            }\n        },\n\n        /**\n         * Clears and redraws the CanvasInput on an off-DOM canvas,\n         * and if a main canvas is provided, draws it all onto that.\n         * @return {CanvasInput}\n         */\n        render: function() {\n            var self = this,\n                ctx = self._renderCtx,\n                w = self.outerW,\n                h = self.outerH,\n                br = self._borderRadius,\n                bw = self._borderWidth,\n                sw = self.shadowW,\n                sh = self.shadowH;\n\n            // clear the canvas\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n            // setup the box shadow\n            ctx.shadowOffsetX = self._boxShadow.x;\n            ctx.shadowOffsetY = self._boxShadow.y;\n            ctx.shadowBlur = self._boxShadow.blur;\n            ctx.shadowColor = self._boxShadow.color;\n\n            // draw the border\n            if (self._borderWidth > 0) {\n                ctx.fillStyle = self._borderColor;\n                self._roundedRect(ctx, self.shadowL, self.shadowT, w - sw, h - sh, br);\n                ctx.fill();\n\n                ctx.shadowOffsetX = 0;\n                ctx.shadowOffsetY = 0;\n                ctx.shadowBlur = 0;\n            }\n\n            // draw the text box background\n            self._drawTextBox(function() {\n                // make sure all shadows are reset\n                ctx.shadowOffsetX = 0;\n                ctx.shadowOffsetY = 0;\n                ctx.shadowBlur = 0;\n\n                // clip the text so that it fits within the box\n                var text = self._clipText();\n\n                // draw the selection\n                var paddingBorder = self._padding + self._borderWidth + self.shadowT;\n                if (self._selection[1] > 0) {\n                    var selectOffset = self._textWidth(text.substring(0, self._selection[0])),\n                        selectWidth = self._textWidth(text.substring(self._selection[0], self._selection[1]));\n\n                    ctx.fillStyle = self._selectionColor;\n                    ctx.fillRect(paddingBorder + selectOffset, paddingBorder, selectWidth, self._height);\n                }\n\n                // draw the cursor\n                ctx.fillStyle = (self._placeHolder === self._value && self._value !== '') ? self._placeHolderColor : self._fontColor;\n                if (self._cursor) {\n                    var cursorOffset = self._textWidth(text.substring(0, self._cursorPos));\n\n                    ctx.fillRect(paddingBorder + cursorOffset, paddingBorder, 1, self._height);\n                }\n\n                // draw the text\n                var textX = self._padding + self._borderWidth + self.shadowL,\n                    textY = Math.round(paddingBorder + self._height / 2);\n\n                ctx.font = self._fontStyle + ' ' + self._fontWeight + ' ' + self._fontSize + 'px ' + self._fontFamily;\n                ctx.textAlign = 'left';\n                ctx.textBaseline = 'middle';\n                ctx.fillText(text, textX, textY);\n\n                // parse inner shadow\n                var innerShadow = self._innerShadow.split('px '),\n                    isOffsetX = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[0], 10),\n                    isOffsetY = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[1], 10),\n                    isBlur = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[2], 10),\n                    isColor = self._innerShadow === 'none' ? '' : innerShadow[3];\n\n                // draw the inner-shadow (damn you canvas, this should be easier than this...)\n                if (isBlur > 0) {\n                    var shadowCtx = self._shadowCtx,\n                        scw = shadowCtx.canvas.width,\n                        sch = shadowCtx.canvas.height;\n\n                    shadowCtx.clearRect(0, 0, scw, sch);\n                    shadowCtx.shadowBlur = isBlur;\n                    shadowCtx.shadowColor = isColor;\n\n                    // top shadow\n                    shadowCtx.shadowOffsetX = 0;\n                    shadowCtx.shadowOffsetY = isOffsetY;\n                    shadowCtx.fillRect(-1 * w, -100, 3 * w, 100);\n\n                    // right shadow\n                    shadowCtx.shadowOffsetX = isOffsetX;\n                    shadowCtx.shadowOffsetY = 0;\n                    shadowCtx.fillRect(scw, -1 * h, 100, 3 * h);\n\n                    // bottom shadow\n                    shadowCtx.shadowOffsetX = 0;\n                    shadowCtx.shadowOffsetY = isOffsetY;\n                    shadowCtx.fillRect(-1 * w, sch, 3 * w, 100);\n\n                    // left shadow\n                    shadowCtx.shadowOffsetX = isOffsetX;\n                    shadowCtx.shadowOffsetY = 0;\n                    shadowCtx.fillRect(-100, -1 * h, 100, 3 * h);\n\n                    // create a clipping mask on the main canvas\n                    self._roundedRect(ctx, bw + self.shadowL, bw + self.shadowT, w - bw * 2 - sw, h - bw * 2 - sh, br);\n                    ctx.clip();\n\n                    // draw the inner-shadow from the off-DOM canvas\n                    ctx.drawImage(self._shadowCanvas, 0, 0, scw, sch, bw + self.shadowL, bw + self.shadowT, scw, sch);\n                }\n\n                // draw to the visible canvas\n                if (self._ctx) {\n                    self._ctx.clearRect(self._x, self._y, ctx.canvas.width, ctx.canvas.height);\n                    self._ctx.drawImage(self._renderCanvas, self._x, self._y);\n                }\n\n                return self;\n\n            });\n        },\n\n        /**\n         * Draw the text box area with either an image or background color.\n         * @param  {Function} fn Callback.\n         */\n        _drawTextBox: function(fn) {\n            var self = this,\n                ctx = self._renderCtx,\n                w = self.outerW,\n                h = self.outerH,\n                br = self._borderRadius,\n                bw = self._borderWidth,\n                sw = self.shadowW,\n                sh = self.shadowH;\n\n            // only draw the background shape if no image is being used\n            if (self._backgroundImage === '') {\n                ctx.fillStyle = self._backgroundColor;\n                self._roundedRect(ctx, bw + self.shadowL, bw + self.shadowT, w - bw * 2 - sw, h - bw * 2 - sh, br);\n                ctx.fill();\n\n                fn();\n            } else {\n                var img = new Image();\n                img.src = self._backgroundImage;\n                img.onload = function() {\n                    ctx.drawImage(img, 0, 0, img.width, img.height, bw + self.shadowL, bw + self.shadowT, w, h);\n\n                    fn();\n                };\n            }\n        },\n\n        /**\n         * Deletes selected text in selection range and repositions cursor.\n         * @return {Boolean} true if text removed.\n         */\n        _clearSelection: function() {\n            var self = this;\n\n            if (self._selection[1] > 0) {\n                // clear the selected contents\n                var start = self._selection[0],\n                    end = self._selection[1];\n\n                self._value = self._value.substr(0, start) + self._value.substr(end);\n                self._cursorPos = start;\n                self._cursorPos = (self._cursorPos < 0) ? 0 : self._cursorPos;\n                self._selection = [0, 0];\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Clip the text string to only return what fits in the visible text box.\n         * @param  {String} value The text to clip.\n         * @return {String} The clipped text.\n         */\n        _clipText: function(value) {\n            var self = this;\n            value = (typeof value === 'undefined') ? self._value : value;\n\n            var textWidth = self._textWidth(value),\n                fillPer = textWidth / (self._width - self._padding),\n                text = fillPer > 1 ? value.substr(-1 * Math.floor(value.length / fillPer)) : value;\n\n            return text + '';\n        },\n\n        /**\n         * Gets the pixel with of passed text.\n         * @param  {String} text The text to measure.\n         * @return {Number}      The measured width.\n         */\n        _textWidth: function(text) {\n            var self = this,\n                ctx = self._renderCtx;\n\n            ctx.font = self._fontStyle + ' ' + self._fontWeight + ' ' + self._fontSize + 'px ' + self._fontFamily;\n            ctx.textAlign = 'left';\n\n            return ctx.measureText(text).width;\n        },\n\n        /**\n         * Recalculate the outer with and height of the text box.\n         */\n        _calcWH: function() {\n            var self = this;\n\n            // calculate the full width and height with padding, borders and shadows\n            self.outerW = self._width + self._padding * 2 + self._borderWidth * 2 + self.shadowW;\n            self.outerH = self._height + self._padding * 2 + self._borderWidth * 2 + self.shadowH;\n        },\n\n        /**\n         * Update the width and height of the off-DOM canvas when attributes are changed.\n         */\n        _updateCanvasWH: function() {\n            var self = this,\n                oldW = self._renderCanvas.width,\n                oldH = self._renderCanvas.height;\n\n            // update off-DOM canvas\n            self._renderCanvas.setAttribute('width', self.outerW);\n            self._renderCanvas.setAttribute('height', self.outerH);\n            self._shadowCanvas.setAttribute('width', self._width + self._padding * 2);\n            self._shadowCanvas.setAttribute('height', self._height + self._padding * 2);\n\n            // clear the main canvas\n            if (self._ctx) {\n                self._ctx.clearRect(self._x, self._y, oldW, oldH);\n            }\n        },\n\n        /**\n         * Creates the path for a rectangle with rounded corners.\n         * Must call ctx.fill() after calling this to draw the rectangle.\n         * @param  {Object} ctx Canvas context.\n         * @param  {Number} x   x-coordinate to draw from.\n         * @param  {Number} y   y-coordinate to draw from.\n         * @param  {Number} w   Width of rectangle.\n         * @param  {Number} h   Height of rectangle.\n         * @param  {Number} r   Border radius.\n         */\n        _roundedRect: function(ctx, x, y, w, h, r) {\n            if (w < 2 * r) r = w / 2;\n            if (h < 2 * r) r = h / 2;\n\n            ctx.beginPath();\n\n            ctx.moveTo(x + r, y);\n            ctx.lineTo(x + w - r, y);\n            ctx.quadraticCurveTo(x + w, y, x + w, y + r);\n            ctx.lineTo(x + w, y + h - r);\n            ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n            ctx.lineTo(x + r, y + h);\n            ctx.quadraticCurveTo(x, y + h, x, y + h - r);\n            ctx.lineTo(x, y + r);\n            ctx.quadraticCurveTo(x, y, x + r, y);\n\n            ctx.closePath();\n        },\n\n        /**\n         * Checks if a coordinate point is over the input box.\n         * @param  {Number} x x-coordinate position.\n         * @param  {Number} y y-coordinate position.\n         * @return {Boolean}   True if it is over the input box.\n         */\n        _overInput: function(x, y) {\n            var self = this,\n                xLeft = x >= self._x + self._extraX,\n                xRight = x <= self._x + self._extraX + self._width + self._padding * 2,\n                yTop = y >= self._y + self._extraY,\n                yBottom = y <= self._y + self._extraY + self._height + self._padding * 2;\n\n            return xLeft && xRight && yTop && yBottom;\n        },\n\n        /**\n         * Use the mouse's x & y coordinates to determine\n         * the position clicked in the text.\n         * @param  {Number} x X-coordinate.\n         * @param  {Number} y Y-coordinate.\n         * @return {Number}   Cursor position.\n         */\n        _clickPos: function(x, y) {\n            var self = this,\n                value = self._value;\n\n            // don't count placeholder text in this\n            if (self._value === self._placeHolder) {\n                value = '';\n            }\n\n            // determine where the click was made along the string\n            var text = self._clipText(value),\n                totalW = 0,\n                pos = text.length;\n\n            if (x - (self._x + self._extraX) < self._textWidth(text)) {\n                // loop through each character to identify the position\n                for (var i = 0; i < text.length; i++) {\n                    totalW += self._textWidth(text[i]);\n                    if (totalW >= x - (self._x + self._extraX)) {\n                        pos = i;\n                        break;\n                    }\n                }\n            }\n\n            return pos;\n        },\n\n        /**\n         * Calculate the mouse position based on the event callback and the elements on the page.\n         * @param  {Event} e\n         * @return {Object}   x & y values\n         */\n        _mousePos: function(e) {\n            var elm = e.target,\n                style = document.defaultView.getComputedStyle(elm, undefined),\n                paddingLeft = parseInt(style['paddingLeft'], 10) || 0,\n                paddingTop = parseInt(style['paddingLeft'], 10) || 0,\n                borderLeft = parseInt(style['borderLeftWidth'], 10) || 0,\n                borderTop = parseInt(style['borderLeftWidth'], 10) || 0,\n                htmlTop = document.body.parentNode.offsetTop || 0,\n                htmlLeft = document.body.parentNode.offsetLeft || 0,\n                offsetX = 0,\n                offsetY = 0,\n                x, y;\n\n            // calculate the total offset\n            if (typeof elm.offsetParent !== 'unefined') {\n                do {\n                    offsetX += elm.offsetLeft;\n                    offsetY += elm.offsetTop;\n                } while ((elm = elm.offsetParent));\n            }\n\n            // take into account borders and padding\n            offsetX += paddingLeft + borderLeft + htmlLeft;\n            offsetY += paddingTop + borderTop + htmlTop;\n\n            return {\n                x: e.pageX - offsetX,\n                y: e.pageY - offsetY\n            };\n        },\n\n        /**\n         * Translate a keycode into the correct keyboard character.\n         * @param  {Boolean} isShift True if the shift key is being pressed.\n         * @param  {Number}  keyCode The character code.\n         * @return {String}          The translated character.\n         */\n        _mapCodeToKey: function(isShift, keyCode) {\n            var self = this,\n                blockedKeys = [8, 9, 13, 16, 17, 18, 20, 27, 91, 92],\n                key = '';\n\n            // block keys that we don't want to type\n            for (var i = 0; i < blockedKeys.length; i++) {\n                if (keyCode === blockedKeys[i]) {\n                    return;\n                }\n            }\n\n            // make sure we are getting the correct input\n            if (typeof isShift !== 'boolean' || typeof keyCode !== 'number') {\n                return;\n            }\n\n            var charMap = {\n                32: ' ',\n                48: ')',\n                49: '!',\n                50: '@',\n                51: '#',\n                52: '$',\n                53: '%',\n                54: '^',\n                55: '&',\n                56: '*',\n                57: '(',\n                59: ':',\n                107: '+',\n                173: '_', // firefox uses 173 instead of 189\n                189: '_',\n                186: ':',\n                187: '+',\n                188: '<',\n                190: '>',\n                191: '?',\n                192: '~',\n                219: '{',\n                220: '|',\n                221: '}',\n                222: '\"'\n            };\n\n            // convert the code to a character\n            if (isShift) {\n                key = (keyCode >= 65 && keyCode <= 90) ? String.fromCharCode(keyCode) : charMap[keyCode];\n            } else {\n                if (keyCode >= 65 && keyCode <= 90) {\n                    key = String.fromCharCode(keyCode).toLowerCase();\n                } else {\n                    if (keyCode === 96) {\n                        key = '0';\n                    } else if (keyCode === 97) {\n                        key = '1';\n                    } else if (keyCode === 98) {\n                        key = '2';\n                    } else if (keyCode === 99) {\n                        key = '3';\n                    } else if (keyCode === 100) {\n                        key = '4';\n                    } else if (keyCode === 101) {\n                        key = '5';\n                    } else if (keyCode === 102) {\n                        key = '6';\n                    } else if (keyCode === 103) {\n                        key = '7';\n                    } else if (keyCode === 104) {\n                        key = '8';\n                    } else if (keyCode === 105) {\n                        key = '9';\n                    } else if (keyCode === 188) {\n                        key = ',';\n                    } else if (keyCode === 190) {\n                        key = '.';\n                    } else if (keyCode === 191) {\n                        key = '/';\n                    } else if (keyCode === 192) {\n                        key = '`';\n                    } else if (keyCode === 220) {\n                        key = '\\\\';\n                    } else if (keyCode === 187) {\n                        key = '=';\n                    } else if ((keyCode === 189)  || (keyCode === 173)) {\n                        // firefox maps the minus key to 173, rather\n                        // then trying to use browser detection we\n                        // simply accept 173 as well...which means that\n                        // for Chrome using the mute button would\n                        // cause minus sign to appear\n                        key = '-';\n                    } else if (keyCode === 222) {\n                        key = '\\'';\n                    } else if (keyCode === 186) {\n                        key = ';';\n                    } else if (keyCode === 219) {\n                        key = '[';\n                    } else if (keyCode === 221) {\n                        key = ']';\n                    } else {\n                        key = String.fromCharCode(keyCode);\n                    }\n                }\n            }\n\n            return key;\n        }\n    };\n\n    module.exports = CanvasInput;\n})();\n","/**\n * @license\n * File: sigplot.layer1d.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* global module */\n/* global require */\n\n(function() {\n\n    var m = require(\"./m\");\n    var mx = require(\"./mx\");\n\n    /**\n     * @constructor\n     * @param plot\n     */\n\n    var Layer1D = function(plot) {\n        this.plot = plot;\n\n        this.xbuf = undefined; // raw (ArrayBuffer) of ABSC data\n        this.ybuf = undefined; // raw (ArrayBuffer) of ORD data\n\n        this.offset = 0.0;\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n        this.imin = 0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.name = \"\";\n        this.cx = false;\n        this.hcb = undefined; // index in Gx.HCB\n        // xbufn = xbuf.byteLength\n        // ybufn = ybuf.byteLength\n        this.size = 0;\n\n        this.display = true;\n        this.color = 0;\n        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting\n        this.thick = 1; // negative for dashed\n        this.symbol = 0;\n        this.radius = 3;\n\n        this.skip = 0; // number of elements between ord values\n        this.xsub = 0;\n        this.ysub = 0;\n        this.xdata = false; // true if X data is data from file\n        this.modified = false;\n        this.opacity = 1.0;\n        this.fillStyle = null;\n        this.preferred_origin = 1;\n\n        this.pointbufsize = 0;\n        this.xptr = null;\n        this.yptr = null;\n        this.xpoint = null; // PointArray backed by memory in xptr\n        this.ypoint = null; // PointArray backed by memory in yptr\n\n        this.options = {};\n    };\n\n    Layer1D.prototype = {\n\n        /**\n         * Initializes the layer to display the provided data.\n         *\n         * @param hcb\n         *            {BlueHeader} an opened BlueHeader file\n         * @param lyrn\n         *          the index of the added layer\n         *\n         * @memberOf Layer1D\n         * @private\n         */\n        init: function(hcb, options) {\n            var Gx = this.plot._Gx;\n\n            this.hcb = hcb;\n            this.hcb.buf_type = \"D\";\n\n            this.offset = 0;\n            this.size = 0;\n            this.xbufn = 0;\n            this.ybufn = 0;\n\n            if (!this.hcb.pipe) {\n                if (hcb[\"class\"] === 2) {\n                    m.force1000(hcb);\n                    this.size = hcb.subsize;\n                } else {\n                    this.size = hcb.size;\n                }\n            } else {\n                if (hcb[\"class\"] === 2) {\n                    m.force1000(hcb);\n                    this.size = hcb.subsize;\n                }\n            }\n\n            if (options.framesize) {\n                this.size = options.framesize;\n            }\n\n            // pipe data requires a valid size on overlay, but\n            // other data can work without a valid size because\n            // the reload() function will correctly update the size\n            if (this.hcb.pipe && !this.size) {\n                throw \"1D layer could not determine appropriate size for pipe, use framesize option\";\n            }\n\n            if (hcb[\"class\"] <= 2) {\n                this.xsub = -1;\n                this.ysub = 1;\n                this.cx = (hcb.format[0] === 'C');\n            } else {\n                // TODO\n            }\n\n            this.skip = 1;\n            if (this.cx) {\n                this.skip = 2;\n            }\n\n            this.xstart = hcb.xstart;\n            this.xdelta = hcb.xdelta;\n            var d = hcb.xstart + hcb.xdelta * (this.size - 1.0);\n            this.xmin = Math.min(hcb.xstart, d);\n            this.xmax = Math.max(hcb.xstart, d);\n\n            this.xlab = hcb.xunits;\n            this.ylab = hcb.yunits; // might be undefined\n\n            if (this.hcb.pipe) {\n                this.drawmode = \"scrolling\";\n                this.position = 0;\n                this.tle = options.tl;\n\n                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                this.ybuf = new ArrayBuffer(this.ybufn);\n\n                var self = this;\n                m.addPipeWriteListener(this.hcb, function() {\n                    self._onpipewrite();\n                });\n            }\n        },\n\n        _onpipewrite: function() {\n            var ybuf = new m.PointArray(this.ybuf);\n\n            var tle = this.tle; // in scalars\n            if (tle === undefined) {\n                // if the transfer length wasn't set then we read\n                // all the elements that are available\n                tle = Math.floor(m.pavail(this.hcb)) / this.hcb.spa;\n            }\n\n            // Calculate transfer length in scalars\n            var tl = tle * this.hcb.spa;\n            while (m.pavail(this.hcb) >= tl) {\n\n                if (this.drawmode === \"lefttoright\") {\n                    this.position = 0;\n                    ybuf.set(ybuf.subarray(0, this.size - tl), tl);\n                } else if (this.drawmode === \"righttoleft\") {\n                    this.position = this.size - tle;\n                    ybuf.set(ybuf.subarray(tl), 0);\n                } else if (this.drawmode === \"scrolling\") {\n                    // Nothing to do\n                } else {\n                    throw \"Invalid draw mode\";\n                }\n\n                // transfer length is adjusted to the remaining size \n                // before wrapping\n                var ngot = m.grabx(\n                    this.hcb, ybuf,\n                    Math.min(tle, this.size - this.position) * this.hcb.spa,\n                    this.position * this.hcb.spa\n                );\n                if (ngot === 0) {\n                    break;\n                }\n\n                // update the position\n                this.position = (this.position + tle) % this.size;\n\n                if (this.tle === undefined) {\n                    tle = Math.floor(m.pavail(this.hcb)) / this.hcb.spa;\n                }\n                tl = tle * this.hcb.spa;\n            }\n\n            if (this.plot._Gx.autol !== 0) {\n                this.plot.rescale();\n            }\n        },\n\n        get_data: function(xmin, xmax) {\n            var Gx = this.plot._Gx;\n            var HCB = this.hcb;\n\n            var skip = this.skip;\n\n            var size;\n            if (HCB[\"class\"] === 2) {\n                size = HCB.subsize;\n            } else {\n                size = HCB.size;\n            }\n\n            var imin = 0;\n            var imax = 0;\n            if (Gx.index) {\n                imin = Math.floor(xmin);\n                imax = Math.floor(xmax + 0.5);\n            } else if (HCB.xdelta >= 0.0) {\n                imin = Math.floor((xmin - HCB.xstart) / HCB.xdelta) - 1;\n                imax = Math.floor((xmax - HCB.xstart) / HCB.xdelta + 0.5);\n            } else {\n\n                imin = Math.floor((xmax - HCB.xstart) / HCB.xdelta) - 1;\n                imax = Math.floor((xmin - HCB.xstart) / HCB.xdelta + 0.5);\n            }\n            imin = Math.max(0.0, imin);\n            imax = Math.min(size, imax);\n\n            var npts = Math.max(0.0, Math.min(imax - imin + 1, Gx.bufmax));\n            if (HCB.xdelta < 0) {\n                imin = imax - npts + 1;\n            }\n\n            if ((imin >= this.imin) && (imin + npts <= this.imin + this.size) && (this.ybuf !== undefined)) {\n                // data already in buffers\n            } else if (this.modified) {\n                // modified data not yet saved off\n\n            } else if (HCB[\"class\"] <= 2) {\n                // load new data\n                var start = this.offset + imin;\n                var skip = this.skip;\n                this.ybufn = npts * Math.max(skip * m.PointArray.BYTES_PER_ELEMENT,\n                    m.PointArray.BYTES_PER_ELEMENT);\n                if ((this.ybuf === undefined) || (this.ybuf.byteLength < this.ybufn)) {\n                    this.ybuf = new ArrayBuffer(this.ybufn);\n                }\n                var ybuf = new m.PointArray(this.ybuf);\n                var ngot = m.grab(HCB, ybuf, start, npts);\n                this.imin = imin;\n                this.xstart = HCB.xstart + (imin) * this.xdelta;\n                this.size = ngot;\n            } else {\n                // type 3000, 4000, 5000\n                // TODO yeah right\n            }\n\n        },\n\n        change_settings: function(settings) {\n            if (settings.index !== undefined) {\n                if (settings.index) {\n                    this.xstart = 1.0;\n                    this.xdelta = 1.0;\n                    this.xmin = 1.0;\n                    this.xmax = this.size;\n                } else {\n                    this.xstart = this.hcb.xstart + (this.imin) * this.xdelta;\n                    this.xdelta = this.hcb.xdelta;\n                    var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);\n                    this.xmin = Math.min(this.hcb.xstart, d);\n                    this.xmax = Math.max(this.hcb.xstart, d);\n                }\n            }\n\n            if (settings.drawmode !== undefined) {\n                this.drawmode = settings.drawmode;\n                // Reset the buffer\n                this.position = 0;\n                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                this.ybuf = new ArrayBuffer(this.ybufn);\n            }\n\n            if (settings.framesize !== undefined) {\n                this.size = settings.framesize;\n                this.xstart = this.hcb.xstart + (this.imin) * this.xdelta;\n                this.xdelta = this.hcb.xdelta;\n                var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);\n                this.xmin = Math.min(this.hcb.xstart, d);\n                this.xmax = Math.max(this.hcb.xstart, d);\n                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                this.ybuf = new ArrayBuffer(this.ybufn);\n            }\n        },\n\n        reload: function(data, hdrmod) {\n            if (this.hcb.pipe) {\n                throw \"reload cannot be used with pipe, use push instead\";\n            }\n            var axis_change = (this.hcb.dview.length !== data.length) || hdrmod;\n            if (hdrmod) {\n                for (var k in hdrmod) {\n                    this.hcb[k] = hdrmod[k];\n                    if (k === \"xstart\" || k === \"xdelta\") {\n                        axis_change = true;\n                    }\n                }\n            }\n            this.hcb.setData(data);\n\n            // Setting these causes refresh() to refetch\n            this.imin = 0;\n            this.xstart = undefined;\n            this.size = 0;\n\n            var xmin = this.xmin;\n            var xmax = this.xmax;\n\n            if (axis_change) {\n                if (this.hcb[\"class\"] === 2) {\n                    m.force1000(this.hcb);\n                }\n                var d = this.hcb.xstart + this.hcb.xdelta * (this.hcb.size - 1.0);\n                this.xmin = Math.min(this.hcb.xstart, d);\n                this.xmax = Math.max(this.hcb.xstart, d);\n                this.xdelta = this.hcb.xdelta;\n                this.xstart = this.hcb.xstart;\n                xmin = undefined;\n                xmax = undefined;\n            }\n\n            return {\n                xmin: xmin,\n                xmax: xmax\n            };\n        },\n\n        push: function(data, hdrmod, sync) {\n            if (hdrmod) {\n                for (var k in hdrmod) {\n                    this.hcb[k] = hdrmod[k];\n                    if (k === \"type\") {\n                        this.hcb[\"class\"] = hdrmod[k] / 1000;\n                    }\n                }\n\n                if (hdrmod.subsize) {\n                    if (this.hcb[\"class\"] === 2) {\n                        m.force1000(this.hcb);\n                        this.size = this.hcb.subsize;\n                        // Reset the buffer\n                        this.position = null;\n                        this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);\n                        this.ybuf = new ArrayBuffer(this.ybufn);\n                    }\n                }\n\n                var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);\n                this.xmin = this.hcb.xmin || Math.min(this.hcb.xstart, d);\n                this.xmax = this.hcb.xmax || Math.max(this.hcb.xstart, d);\n                this.xdelta = this.hcb.xdelta;\n                this.xstart = this.hcb.xstart;\n            }\n\n            if (data.length > 0) {\n                m.filad(this.hcb, data, sync);\n            }\n\n            return hdrmod ? true : false;\n\n        },\n\n        prep: function(xmin, xmax) {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            var npts = Math.ceil(this.size);\n\n            var skip = this.skip;\n\n            if (npts === 0) {\n                return {\n                    num: 0,\n                    start: 0,\n                    end: 0\n                };\n            }\n\n            if (npts * m.PointArray.BYTES_PER_ELEMENT > this.pointbufsize) {\n                this.pointbufsize = npts * m.PointArray.BYTES_PER_ELEMENT;\n                this.xptr = new ArrayBuffer(this.pointbufsize);\n                this.yptr = new ArrayBuffer(this.pointbufsize);\n                this.xpoint = new m.PointArray(this.xptr);\n                this.ypoint = new m.PointArray(this.yptr);\n            }\n\n            var dbuf = new m.PointArray(this.ybuf);\n            var qmin = this.xmin;\n            var qmax = this.xmax;\n            var n1, n2;\n            var mxmn;\n            // xsub isn't really used yet, so it can largely be ignored\n            if ((Gx.cmode === 5) || (this.xsub > 0)) {\n                if (npts <= 0) {\n                    // This is a degenerate case when there are no points\n                    qmin = Gx.panxmin;\n                    qmax = Gx.panxmax;\n                } else if (Gx.cmode !== 5) {\n                    // Largely unused code since xsub isn't used\n                    this.xpoint = new m.PointArray(this.xbuf);\n                } else if (this.cx) {\n                    // This is the pre-dominate condition\n                    m.vmov(dbuf, skip, this.xpoint, 1, npts);\n                } else if (this.line !== 0) {\n                    // If we have been asked to plot Real vs. Imaginary\n                    // for real data and there is a line being drawn\n                    // we take the min x and max x and then plot it\n                    // later on against the first two ypoints...it's\n                    // not clear if this is correct or not, but since\n                    // it's a degenerate case it is tolerated\n                    mxmn = m.vmxmn(dbuf, npts);\n                    this.xpoint[0] = mxmn.smax;\n                    this.xpoint[1] = mxmn.smin;\n                    n1 = 0;\n                    n2 = 2;\n                    npts = 2;\n                } else {\n                    // Otherwise we just plot the y-values\n                    this.xpoint = dbuf;\n                }\n                if (npts > 0) {\n                    mxmn = m.vmxmn(this.xpoint, npts);\n                    qmax = mxmn.smax;\n                    qmin = mxmn.smin;\n                    n1 = 0;\n                    n2 = npts;\n                }\n            } else if (npts > 0) {\n                var xstart = this.xstart;\n                var xdelta = this.xdelta;\n                var d = npts;\n                if (Gx.index) {\n                    n1 = 0;\n                    n2 = npts - 1;\n                } else if (xdelta >= 0.0) {\n                    n1 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta))) - 1.0;\n                    n2 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) + 2.0)) - 1.0;\n                } else {\n                    n1 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) - 1.0)) - 1.0;\n                    n2 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta) + 2.0)) - 1.0;\n                }\n\n                npts = n2 - n1 + 1;\n                if (npts < 0) {\n                    m.log.debug(\"Nothing to plot\");\n                    npts = 0;\n                }\n                dbuf = new m.PointArray(this.ybuf).subarray(n1 * skip);\n                xstart = xstart + xdelta * (n1);\n                for (var i = 0; i < npts; i++) {\n                    if (Gx.index) {\n                        this.xpoint[i] = this.imin + i + 1;\n                    } else {\n                        this.xpoint[i] = xstart + i * xdelta;\n                    }\n                }\n            }\n\n            if (Gx.panxmin > Gx.panxmax) {\n                Gx.panxmin = qmin;\n                Gx.panxmax = qmax;\n            } else {\n                Gx.panxmin = Math.min(Gx.panxmin, qmin);\n                Gx.panxmax = Math.max(Gx.panxmax, qmax);\n            }\n\n            if (npts <= 0) {\n                m.log.debug(\"Nothing to plot\");\n                return {\n                    num: npts,\n                    start: n1,\n                    end: n2\n                };\n            }\n            if (this.cx) {\n                if (Gx.cmode === 1) {\n                    m.cvmag(dbuf, this.ypoint, npts);\n                } else if (Gx.cmode === 2) {\n                    if (Gx.plab === 25) {\n                        m.cvpha(dbuf, this.ypoint, npts);\n                        m.vsmul(this.ypoint, 1.0 / (2 * Math.PI), this.ypoint, npts);\n                    } else if (Gx.plab !== 24) {\n                        m.cvpha(dbuf, this.ypoint, npts);\n                    } else {\n                        m.cvphad(dbuf, this.ypoint, npts);\n                    }\n                } else if (Gx.cmode === 3) {\n                    m.vmov(dbuf, skip, this.ypoint, 1, npts);\n                } else if (Gx.cmode >= 6) {\n                    m.cvmag2(dbuf, this.ypoint, npts);\n                } else if (Gx.cmode >= 4) {\n                    m.vmov(dbuf.subarray(1), skip, this.ypoint, 1, npts);\n                }\n            } else {\n                if (Gx.cmode === 5) { // I vs. R\n                    m.vfill(this.ypoint, 0, npts);\n                } else if ((Gx.cmode === 1) || (Gx.cmode >= 6)) { // Mag, log\n                    for (var i = 0; i < npts; i++) {\n                        this.ypoint[i] = Math.abs(dbuf[i]);\n                    }\n                } else {\n                    for (var i = 0; i < npts; i++) {\n                        this.ypoint[i] = dbuf[i];\n                    }\n                }\n            }\n\n            if (Gx.cmode >= 6) {\n                m.vlog10(this.ypoint, Gx.dbmin, this.ypoint);\n                var dbscale = 10.0;\n                if (Gx.cmode === 7) {\n                    dbscale = 20.0;\n                }\n                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {\n                    dbscale = dbscale / 2.0;\n                }\n                m.vsmul(this.ypoint, dbscale, this.ypoint);\n            }\n            mxmn = m.vmxmn(this.ypoint, npts);\n\n            qmax = mxmn.smax;\n            qmin = mxmn.smin;\n\n            var yran = qmax - qmin;\n            if (yran < 0.0) {\n                qmax = qmin;\n                qmin = qmax + yran;\n                yran = -yran;\n            }\n            if (yran <= 1.0e-20) {\n                qmin = qmin - 1.0;\n                qmax = qmax + 1.0;\n            } else {\n                qmin = qmin - 0.02 * yran;\n                qmax = qmax + 0.02 * yran;\n            }\n\n            if (Mx.level === 0) {\n                if (Gx.panymin > Gx.panymax) {\n                    Gx.panymin = qmin;\n                    Gx.panymax = qmax;\n                } else {\n                    Gx.panymin = Math.min(Gx.panymin, qmin);\n                    Gx.panymax = Math.max(Gx.panymax, qmax);\n                }\n\n                if (Gx.autol > 1) {\n                    var fac = 1.0 / (Math.max(Gx.autol, 1));\n                    Gx.panymin = Gx.panymin * fac + Mx.stk[0].ymin * (1.0 - fac);\n                    Gx.panymax = Gx.panymax * fac + Mx.stk[0].ymax * (1.0 - fac);\n                }\n            }\n\n            return {\n                num: npts,\n                start: n1,\n                end: n2\n            };\n        },\n\n        draw: function() {\n            var Mx = this.plot._Mx;\n            var Gx = this.plot._Gx;\n\n            var ic = this.color;\n            var symbol = this.symbol;\n            var rad = this.radius;\n            var mask = 0;\n            var line = 0;\n            var traceoptions = {};\n\n            if (this.fillStyle) {\n                traceoptions.fillStyle = this.fillStyle;\n            } else if (Gx.fillStyle) {\n                traceoptions.fillStyle = Gx.fillStyle;\n            }\n            if (this.options) {\n                traceoptions.highlight = this.options.highlight;\n                traceoptions.noclip = this.options.noclip;\n            }\n\n            if (this.line === 0) {\n                line = 0;\n            } else {\n                line = 1;\n                if (this.thick > 0) {\n                    line = this.thick;\n                } else if (this.thick < 0) {\n                    line = Math.abs(this.thick);\n                    traceoptions.dashed = true;\n                }\n                if (this.line === 1) {\n                    traceoptions.vertsym = true;\n                }\n                if (this.line === 2) {\n                    traceoptions.horzsym = true;\n                }\n                if (this.line === 4) {\n                    traceoptions.horzsym = true;\n                    traceoptions.vertsym = true;\n                }\n            }\n\n            var segment = (Gx.segment) && (Gx.cmode !== 5) && (this.xsub > 0) && (mask === 0);\n            var xdelta = this.xdelta;\n\n            var xmin;\n            var xmax;\n            if (this.xdata) {\n                xmin = this.xmin;\n                xmax = this.xmax;\n            } else {\n                xmin = Math.max(this.xmin, Mx.stk[Mx.level].xmin);\n                xmax = Math.min(this.xmax, Mx.stk[Mx.level].xmax);\n                if (xmin >= xmax) { // no data but do scaling\n                    Gx.panxmin = Math.min(Gx.panxmin, this.xmin);\n                    Gx.panxmax = Math.max(Gx.panxmax, this.xmax);\n                }\n            }\n\n            if (!Gx.all) {\n                var xran = (Gx.bufmax - 1.0) * xdelta;\n                if (xran >= -0.0) {\n                    xmax = Math.min(xmax, xmin + xran);\n                } else {\n                    xmin = Math.max(xmin, xmax + xran);\n                }\n            }\n\n            if ((line === 0) && (symbol === 0)) {\n                // Nothing to draw\n                return;\n            }\n            while (xmin < xmax) {\n                //if (Gx.all) {\n                // TODO allow interrupt of all by mouse clicks\n                //}\n\n                if (!this.hcb.pipe) {\n                    // get_data fills in the layer xbuf/ybuf with data\n                    this.get_data(xmin, xmax);\n                }\n\n                // sigplot_prep fills in this.xptr and this.yptr (both m.PointArray)\n                // with the data to be plotted\n\n                var pts = this.prep(xmin, xmax);\n                if (pts.num > 0) {\n                    if (segment) {\n                        // TODO\n                    } else {\n                        mx.trace(Mx,\n                            ic,\n                            new m.PointArray(this.xptr),\n                            new m.PointArray(this.yptr),\n                            pts.num,\n                            pts.start,\n                            1,\n                            line,\n                            symbol,\n                            rad,\n                            traceoptions);\n                    }\n                }\n\n                if (Gx.all) {\n                    if (this.size === 0) {\n                        xmin = xmax;\n                    } else {\n                        if (Gx.index) {\n                            xmin = xmin + pts.num;\n                        } else {\n                            if (xdelta >= 0) {\n                                xmin = xmin + (this.size * xdelta);\n                            } else {\n                                xmax = xmax + (this.size * xdelta);\n                            }\n                        }\n                    }\n                } else {\n                    xmin = xmax;\n                }\n            }\n\n            if ((this.position) && (this.drawmode === \"scrolling\")) {\n                var pnt = mx.real_to_pixel(Mx, this.position * this.xdelta, 0);\n                if ((pnt.x > Mx.l) && (pnt.x < Mx.r)) {\n                    mx.draw_line(Mx, \"white\", pnt.x, Mx.t, pnt.x, Mx.b);\n                }\n            }\n        },\n\n        /**\n         * Add a highlight to a specific layer.\n         *\n         * @param {Number}\n         *            n the layer to add the highlight to\n         * @param highlight\n         *            the highlight to add\n         * @param {Number}\n         *            highlight.xstart x value to start the highlight\n         *            at\n         * @param {Number}\n         *            highlight.xend the maximum x value to end the highlight\n         *            at\n         * @param {String}\n         *            hightlight.color the color to use for the highlight\n         *\n         * @param {String}\n         *            hightlight.id the id for the highlight\n         */\n        add_highlight: function(highlight) {\n            if (!this.options.highlight) {\n                this.options.highlight = [];\n            }\n            // Check for nans\n\n            var xmin = highlight.xstart;\n            var xmax = highlight.xend;\n            var min_nan = isNaN(xmin);\n            var max_nan = isNaN(xmax);\n\n            if ((min_nan === true) || (xmin === null) || (xmin === undefined)) {\n\n                this.options.highlight = [];\n            }\n            if ((max_nan === true) || (xmax === null) || (xmax === undefined)) {\n\n                this.options.highlight = [];\n            }\n\n            if (highlight instanceof Array) {\n                this.options.highlight.push.apply(\n                    this.options.highlight, highlight);\n            } else {\n                this.options.highlight.push(highlight);\n            }\n            this.plot.refresh();\n        },\n\n        /**\n         * Remove a highlight from the layer.\n         *\n         * @param {String} {Object}\n         *             the id of the highlight to remove\n         *             or the highlight object itself\n         */\n        remove_highlight: function(highlight) {\n            if (this.options.highlight) {\n                var i = this.options.highlight.length;\n                while (i--) {\n                    if ((highlight === this.options.highlight[i]) || (highlight === this.options.highlight[i].id)) {\n                        this.options.highlight.splice(i, 1);\n                    }\n                }\n                this.plot.refresh();\n            }\n        },\n\n        get_highlights: function() {\n            if (this.options.highlight) {\n                return this.options.highlight.slice(0);\n            } else {\n                return [];\n            }\n        },\n\n        /**\n         * Clear all highlights from the layer.\n         */\n        clear_highlights: function() {\n            if (this.options.highlight) {\n                this.options.highlight = undefined;\n                this.plot.refresh();\n            }\n        }\n    };\n\n    /**\n     * Color positions for the various layers\n     *\n     * These magic numbers were conjured up by a wizard somewhere.\n     *\n     * @memberOf sigplot\n     * @private\n     */\n    var mixc = [0, 53, 27, 80, 13, 40, 67, 93, 7, 60, 33, 87, 20, 47, 73, 100];\n\n    /**\n     * Factory to overlay the given file onto the given plot.\n     *\n     * @private\n     */\n    Layer1D.overlay = function(plot, hcb, layerOptions) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        if (hcb[\"class\"] === 2) {\n            m.force1000(hcb);\n        }\n        hcb.buf_type = \"D\";\n\n        // If the input is type 2000, each row becomes\n        // it's own layer\n        var n1 = 0;\n        var n2 = 1;\n        if ((hcb[\"class\"] === 2) && (hcb.size > 0)) {\n            var num_rows = hcb.size / hcb.subsize;\n            n2 = Math.min(num_rows, 16 - Gx.lyr.length);\n        }\n\n        // Extract the layer_name before enter the loop\n        var layer_name_override = layerOptions[\"name\"];\n        delete layerOptions[\"name\"];\n\n        var layers = [];\n        for (var i = n1; i < n2; i++) {\n            // This is logic from within sigplot.for LOAD_FILES\n            var layer = new Layer1D(plot);\n            layer.init(hcb, layerOptions);\n\n            // Provide a default color for the layer\n            var n = (Gx.lyr.length) % mixc.length;\n            layer.color = mx.getcolor(Mx, m.Mc.colormap[3].colors, mixc[n]);\n\n            // Provide the layer name\n            if (hcb[\"class\"] === 2) {\n                if (layer_name_override !== undefined) {\n                    // If you get an array of names, pull the name\n                    // from this list...if we run out of names before\n                    // we run out of layers fall back\n                    if (Array.isArray(layer_name_override)) {\n                        layer.name = layer_name_override[i];\n                    } else {\n                        layer.name = layer_name_override;\n                        layer.name = layer.name + \".\" + mx.pad((i + 1).toString(), 3, \"0\");\n                    }\n                }\n                // If a name hasn't been assigned yet\n                if (!layer.name) {\n                    if (hcb.file_name) {\n                        layer.name = m.trim_name(hcb.file_name);\n                    } else {\n                        layer.name = \"layer_\" + Gx.lyr.length;\n                    }\n                    layer.name = layer.name + \".\" + mx.pad((i + 1).toString(), 3, \"0\");\n                }\n                layer.offset = i * hcb.subsize;\n            } else {\n                if (layer_name_override !== undefined) {\n                    layer.name = layer_name_override;\n                } else if (hcb.file_name) {\n                    layer.name = m.trim_name(hcb.file_name);\n                } else {\n                    layer.name = \"layer_\" + Gx.lyr.length;\n                }\n                layer.offset = 0;\n            }\n\n            for (var layerOption in layerOptions) {\n                if (layer[layerOption] !== undefined) {\n                    layer[layerOption] = layerOptions[layerOption];\n                }\n            }\n            if (plot.add_layer(layer)) {\n                layers.push(layer);\n            }\n        }\n\n        return layers;\n    };\n\n    module.exports = Layer1D;\n\n}());\n","/**\n * @license\n * File: sigplot.layer2d.js\n * Copyright (c) 2012-2017, LGS Innovations Inc., All rights reserved.\n *\n * This file is part of SigPlot.\n *\n * Licensed to the LGS Innovations (LGS) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  LGS licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License\n */\n\n/* global module */\n/* global require */\n\n(function() {\n\n    var m = require(\"./m\");\n    var mx = require(\"./mx\");\n\n    /**\n     * @constructor\n     * @param plot\n     */\n    var Layer2D = function(plot) {\n        this.plot = plot;\n\n        this.offset = 0.0;\n        this.xstart = 0.0;\n        this.xdelta = 0.0;\n        this.ystart = 0.0;\n        this.ydelta = 0.0;\n        this.imin = 0;\n        this.xmin = 0.0;\n        this.xmax = 0.0;\n        this.name = \"\";\n        this.cx = false;\n        this.hcb = undefined; // index in Gx.HCB\n\n        this.display = true;\n        this.color = 0;\n        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting\n        this.thick = 1; // negative for dashed\n        this.symbol = 0;\n        this.radius = 3;\n\n        this.skip = 0; // number of elements between ord values\n        this.xsub = 0;\n        this.ysub = 0;\n        this.xdata = false; // true if X data is data from file\n        this.modified = false;\n\n        this.preferred_origin = 4;\n        this.opacity = 1;\n        this.xcompression = plot._Gx.xcompression; // default is Gx.xcompression\n\n        // LPB is kinda odd right now, since we read the entire file into memory anyways...\n        // given that often we are loading from an HREF so there is no downside to this...\n        // however, we keep LPB around (for now) so that the scaling behaves identical to\n        // the original code\n        this.lpb = undefined;\n\n        this.yc = 1; // y-compression factor...not yet used\n\n        this.options = {};\n    };\n\n    Layer2D.prototype = {\n\n        /**\n         * Initializes the layer to display the provided data.\n         *\n         * @param hcb\n         *            {BlueHeader} an opened BlueHeader file\n         * @param lyrn\n         *          the index of the added layer\n         *\n         * @memberOf Layer2D\n         * @private\n         */\n        init: function(hcb) {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            this.hcb = hcb;\n            this.hcb.buf_type = \"D\";\n\n            if (this.hcb.pipe) {\n                var self = this;\n                this.position = 0;\n                this.frame = 0;\n\n\n                this.lps = this.hcb.lps || Math.ceil(Math.max(1, (Mx.b - Mx.t)));\n                m.addPipeWriteListener(this.hcb, function() {\n                    self._onpipewrite();\n                });\n            } else {\n                this.lps = this.hcb.lps || Math.ceil(hcb.size);\n            }\n\n            this.offset = 0;\n            this.xbufn = 0;\n            this.ybufn = 0;\n            this.drawmode = \"scrolling\"; // \"falling\", \"rising\"\n\n\n            if (hcb[\"class\"] <= 2) {\n                this.xsub = -1;\n                this.ysub = 1;\n                this.cx = (hcb.format[0] === 'C');\n            } else {\n                // TODO\n            }\n\n            this.skip = 1;\n            if (this.cx) {\n                this.skip = 2;\n            }\n\n            if (Gx.index) {\n                this.xstart = 1.0;\n                this.xdelta = 1.0;\n                this.xmin = 1.0;\n                this.xmax = hcb.subsize;\n                this.ystart = 1.0;\n                this.ydelta = 1.0;\n                this.ymin = 1.0;\n                this.ymax = this.size;\n            } else {\n                this.xstart = hcb.xstart;\n                this.xdelta = hcb.xdelta;\n                var d = hcb.xstart + (hcb.xdelta * hcb.subsize);\n                this.xmin = this.hcb.xmin || Math.min(hcb.xstart, d);\n                this.xmax = this.hcb.xmax || Math.max(hcb.xstart, d);\n                this.ystart = hcb.ystart;\n                this.ydelta = hcb.ydelta;\n                var d = hcb.ystart + (hcb.ydelta * this.lps);\n                this.ymin = this.hcb.ymin || Math.min(hcb.ystart, d);\n                this.ymax = this.hcb.ymax || Math.max(hcb.ystart, d);\n            }\n\n            // TODO make this work with force 1000 applied\n            this.xframe = this.hcb.subsize;\n            this.yframe = (this.lps * this.hcb.subsize) / this.xframe;\n\n            if (this.lpb === 0) {\n                this.lpb = this.yframe;\n            }\n            if (!this.lpb || (this.lpb <= 0)) {\n                this.lpb = 16;\n            }\n            this.lpb = Math.max(1, this.lpb / this.yc) * this.yc;\n\n            this.xlab = hcb.xunits;\n            this.ylab = hcb.yunits; // might be undefined\n\n        },\n\n        _onpipewrite: function() {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            while (m.pavail(this.hcb) >= (this.hcb.subsize * this.hcb.spa)) {\n\n                // if we aren't scrolling, than update the values\n                // so that the axis scrolls with the data.  The below\n                // code might seem counter intuitive, but given the\n                // the behavior of other rendering code it is configured\n                // to have ymin always be the history (i.e prior to ystart)\n                // and ystart is always the relative \"now\" which is equivalent\n                // to ymax\n                if (this.drawmode !== \"scrolling\") {\n                    this.hcb.ystart += this.hcb.ydelta;\n                    this.ystart = this.hcb.ystart;\n                    this.ymin = this.hcb.ystart - (this.hcb.ydelta * (this.lps));\n                    this.ymax = this.hcb.ystart;\n                }\n\n                if (this.drawmode === \"falling\") {\n                    this.position = 0;\n                    if (this.img) {\n                        mx.shift_image_rows(Mx, this.img, 1);\n                    }\n                } else if (this.drawmode === \"rising\") {\n                    this.position = this.lps - 1;\n                    if (this.img) {\n                        mx.shift_image_rows(Mx, this.img, -1);\n                    }\n                } else if (this.drawmode === \"scrolling\") {\n                    var ylength = Math.abs(this.ymax - this.ymin);\n                    this.ystart = 0;\n                    this.ymin = 0;\n                    this.ymax = ylength;\n                    if (this.position >= this.lps) { // if lps got resized make sure we don't go out of bounds\n                        this.position = 0;\n                    }\n                } else {\n                    throw \"Invalid draw mode\";\n                }\n\n                if (!this.buf) {\n                    // the layer isn't setup correctly yet\n                    return;\n                }\n\n                // grab one row worth of data\n                var ngot = m.grabx(this.hcb, this.buf, this.hcb.subsize * this.hcb.spa);\n                if (ngot === 0) { // shouldn't happen because of the pavail check\n                    m.log.error(\"Internal error\");\n                    return;\n                }\n\n                var zpoint = new m.PointArray(this.hcb.subsize);\n                if (this.cx) {\n                    if (Gx.cmode === 1) {\n                        m.cvmag(this.buf, zpoint, zpoint.length);\n                    } else if (Gx.cmode === 2) {\n                        if (Gx.plab === 25) {\n                            m.cvpha(this.buf, zpoint, zpoint.length);\n                            m.vsmul(zpoint, 1.0 / (2 * Math.PI), zpoint, zpoint.length);\n                        } else if (Gx.plab !== 24) {\n                            m.cvpha(this.buf, zpoint, zpoint.length);\n                        } else {\n                            m.cvphad(this.buf, zpoint, zpoint.length);\n                        }\n                    } else if (Gx.cmode === 3) {\n                        m.vmov(this.buf, this.skip, zpoint, 1, zpoint.length);\n                    } else if (Gx.cmode === 4) {\n                        m.vmov(this.buf.subarray(1), this.skip, zpoint, 1, zpoint.length);\n                    } else if (Gx.cmode === 5) { // IR\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 10.0, zpoint);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 20.0, zpoint);\n                    }\n                } else {\n                    if (Gx.cmode === 1) { // mag\n                        m.vabs(this.buf, zpoint);\n                    } else if (Gx.cmode === 2) { // phase\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 3) { // real\n                        m.vmov(this.buf, this.skip, zpoint, 1, zpoint.length);\n                    } else if (Gx.cmode === 4) { // imag\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 5) { // IR\n                        m.vfill(zpoint, 0, zpoint.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.vlogscale(this.buf, Gx.dbmin, 10.0, zpoint);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.vlogscale(this.buf, Gx.dbmin, 20.0, zpoint);\n                    }\n                }\n\n                var min = zpoint[0];\n                var max = zpoint[0];\n                for (var i = 0; i < zpoint.length; i++) {\n                    if (zpoint[i] < min) {\n                        min = zpoint[i];\n                    }\n                    if (zpoint[i] > max) {\n                        max = zpoint[i];\n                    }\n                }\n\n                var zmin, zmax;\n                if (Gx.autol === 1) {\n                    zmin = min;\n                    zmax = max;\n                } else if (Gx.autol > 1) {\n                    var fac = 1.0 / (Math.max(Gx.autol, 1));\n                    zmin = Gx.zmin * fac + min * (1.0 - fac);\n                    zmax = Gx.zmax * fac + max * (1.0 - fac);\n                } else if (Gx.autol < 0) {\n                    // -1 means autol wasn't set so default to\n                    // 5 like the original XRTRASTER; however,\n                    // don't actually override Gx.autol since\n                    // other layers may behave differently\n                    var fac = 1.0 / (Math.max(5, 1));\n                    zmin = Gx.zmin * fac + min * (1.0 - fac);\n                    zmax = Gx.zmax * fac + max * (1.0 - fac);\n                }\n\n                if (((Gx.autoz & 1) !== 0)) {\n                    Gx.zmin = zmin;\n                }\n                if (((Gx.autoz & 2) !== 0)) {\n                    Gx.zmax = zmax;\n                }\n                if (Gx.p_cuts) {\n                    if (this.drawmode === \"scrolling\") {\n                        //fill in the next row of data.\n                        var start_write = this.position * this.hcb.subsize;\n                        var stop_write = start_write + this.hcb.subsize;\n                        var b = 0;\n                        for (var i = start_write; i < stop_write; i++) {\n                            this.zbuf[i] = zpoint[b];\n                            b++;\n                        }\n\n                    }\n                    if (this.drawmode === \"falling\") {\n                        //shift and fill in the next row of data.\n                        var cut_off = (this.lps - 1) * this.hcb.subsize;\n                        var tmp = this.zbuf.slice(0, cut_off);\n                        this.zbuf = [];\n                        for (var i = 0; i < this.hcb.subsize; i++) {\n                            this.zbuf.push(zpoint[i]);\n                        }\n                        this.zbuf.push.apply(this.zbuf, tmp);\n                        tmp = [];\n                    }\n                    if (this.drawmode === \"rising\") {\n                        //shift and fill in the next row of data.\n                        var cut_off = this.lps * this.hcb.subsize;\n                        var tmp = this.zbuf.slice(this.hcb.subsize, cut_off);\n                        this.zbuf = [];\n                        this.zbuf.push.apply(this.zbuf, tmp);\n                        for (var i = 0; i < this.hcb.subsize; i++) {\n                            this.zbuf.push(zpoint[i]);\n                        }\n                        tmp = [];\n                    }\n                }\n\n                if (this.img) {\n                    mx.update_image_row(Mx, this.img, zpoint, this.position, Gx.zmin, Gx.zmax, this.xcompression);\n                }\n                this.frame += 1;\n                if (this.drawmode === \"scrolling\") {\n                    this.position = (this.position + 1) % this.lps;\n                }\n\n                if (Mx.level === 0) {\n                    Gx.panymin = this.ymin;\n                    Gx.panymax = this.ymax;\n                    Mx.stk[0].ymin = this.ymin;\n                    Mx.stk[0].ymax = this.ymax;\n                }\n            }\n        },\n\n        get_data: function() {\n            var HCB = this.hcb;\n\n            if (!this.buf) {\n                if (this.hcb.pipe) {\n                    // For pipes, we allocate buf and zbuf to only hold one line of\n                    // data\n                    this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.hcb.subsize);\n                } else {\n                    // Otherwise, we allocate for the entire image\n                    this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                }\n            }\n\n            if (!this.hcb.pipe) {\n                m.grab(HCB, this.buf, 0, HCB.subsize);\n            }\n        },\n\n        /**\n         * Provisional API\n         *\n         * @private\n         * @param x\n         * @param y\n         */\n        get_z: function(x, y) {\n            var ix = Math.floor(x / this.hcb.xdelta);\n            var iy = Math.floor(y / this.hcb.ydelta);\n            var zidx = (iy * this.hcb.subsize) + ix;\n            return this.zbuf[zidx];\n        },\n\n        change_settings: function(settings) {\n            var Gx = this.plot._Gx;\n\n            if (settings.cmode !== undefined) {\n                this.img = undefined;\n                if (((Gx.autoz & 1) !== 0)) {\n                    Gx.zmin = undefined;\n                }\n                if (((Gx.autoz & 2) !== 0)) {\n                    Gx.zmax = undefined;\n                }\n            }\n            if ((settings.zmin !== undefined) ||\n                (settings.zmax !== undefined) ||\n                (settings.autoz !== undefined)) {\n                this.img = undefined;\n            }\n            if (settings.cmap !== undefined) {\n                this.img = undefined;\n            }\n            if ((settings.drawmode !== undefined) || (settings.xmin !== undefined) ||\n                (settings.xmax !== undefined) || (settings.xdelta !== undefined) ||\n                (settings.xstart !== undefined)) {\n                if (settings.drawmode === undefined) {\n                    settings.drawmode = this.drawmode;\n                }\n                this.drawmode = settings.drawmode;\n                // Reset the buffer\n                this.position = 0;\n                this.frame = 0;\n                if (this.hcb.pipe) {\n                    this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.hcb.subsize);\n                } else {\n                    this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                    this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                }\n                this.img = undefined;\n\n                if (this.drawmode === \"falling\") {\n                    this.plot._Mx.origin = 1;\n                    this.preferred_origin = 1;\n                } else {\n                    this.plot._Mx.origin = 4;\n                    this.preferred_origin = 4;\n                }\n            }\n            if (settings.opacity !== undefined) {\n                this.opacity = settings.opacity;\n            }\n            if (settings.p_cuts !== undefined) {\n                var p_cuts = Gx.p_cuts;\n                if (settings.p_cuts === null) {\n                    p_cuts = !p_cuts;\n                } else {\n                    p_cuts = settings.p_cuts;\n                }\n\n                // If p_cuts are enabled from streams, we need to keep the entire zbuf in memory\n                if (this.hcb.pipe) {\n                    if (!p_cuts) {\n                        this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                    } else {\n                        this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.hcb.subsize);\n                    }\n                }\n            }\n\n            if (settings.xcmp !== undefined) {\n                if (settings.xcmp === \"smooth\") {\n                    this.xcompression = 0;\n                } else if (settings.xcmp === \"avg\") {\n                    this.xcompression = 1;\n                } else if (settings.xcmp === \"min\") {\n                    this.xcompression = 2;\n                } else if (settings.xcmp === \"max\") {\n                    this.xcompression = 3;\n                } else if (settings.xcmp === \"first\") {\n                    this.xcompression = 4;\n                } else if (settings.xcmp === \"maxabs\") {\n                    this.xcompression = 5;\n                } else {\n                    this.xcompression = settings.xcmp;\n                }\n            }\n        },\n\n        push: function(data, hdrmod, sync) {\n            var Gx = this.plot._Gx;\n            var rescale = false;\n            var timestamp = null;\n            if (hdrmod) {\n                // handle timestamps in a unique manner\n                if (hdrmod.timestamp) {\n                    timestamp = hdrmod.timestamp;\n                    delete hdrmod[\"timestamp\"];\n                }\n\n                // If the subsize changes, we need to invalidate the buffer\n                if ((hdrmod.subsize) && (hdrmod.subsize !== this.hcb.subsize)) {\n                    this.hcb.subsize = hdrmod.subsize;\n                    if (this.hcb.pipe && !Gx.p_cuts) {\n                        this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.hcb.subsize);\n\n                    } else {\n                        this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);\n                        this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);\n                    }\n                    rescale = true;\n                }\n\n                for (var k in hdrmod) {\n                    if (this.hcb[k] !== hdrmod[k]) {\n                        this.hcb[k] = hdrmod[k];\n                        if (k === \"type\") {\n                            this.hcb[\"class\"] = hdrmod[k] / 1000;\n                        }\n                        rescale = true;\n                    }\n                }\n\n                if (hdrmod.lps) {\n                    this.lps = hdrmod.lps;\n                }\n\n                if (rescale) {\n                    var d = this.hcb.xstart + (this.hcb.xdelta * this.hcb.subsize);\n                    this.xmin = Math.min(this.hcb.xstart, d);\n                    this.xmax = Math.max(this.hcb.xstart, d);\n                    this.xdelta = this.hcb.xdelta;\n                    this.xstart = this.hcb.xstart;\n\n                    this.ystart = this.hcb.ystart;\n                    this.ydelta = this.hcb.ydelta;\n                    var d = this.hcb.ystart + (this.hcb.ydelta * this.lps);\n                    this.ymin = Math.min(this.hcb.ystart, d);\n                    this.ymax = Math.max(this.hcb.ystart, d);\n                }\n\n            }\n\n            if ((this.hcb.yunits === 1) || (this.hcb.yunits === 4)) {\n                if ((!this.hcb[\"timecode\"]) && (timestamp)) {\n                    // if we don't have a timecode set, we can use\n                    // the timestamp and reset ystart\n                    this.hcb.timecode = m.j1970toj1950(timestamp);\n                    this.hcb.ystart = 0;\n                    rescale = true;\n                } else {\n                    // otherwise, we need to look at timecode, ystart,\n                    // and ydelta to see if the timestamp indicates\n                    // any data drops...and then zero-fill accordingly\n                    // TODO\n                }\n            }\n\n            if (data.length > 0) {\n                m.filad(this.hcb, data, sync);\n            }\n\n            return rescale;\n\n        },\n\n        prep: function(xmin, xmax) {\n            var Gx = this.plot._Gx;\n            var Mx = this.plot._Mx;\n\n            var npts = this.lps;\n\n            var skip = this.skip;\n\n            var qmin = this.xmin;\n            var qmax = this.xmax;\n            var n1, n2;\n\n            var xsize = this.hcb.subsize;\n            if (this.xcompression > 0) {\n                xsize = Math.ceil(Mx.r - Mx.l);\n            }\n\n            this.get_data(xmin, xmax);\n\n            if (!this.hcb.pipe) {\n                // if we aren't a pipe we do a full prep\n\n                if ((Gx.cmode === 5) || (this.xsub > 0)) {\n                    // TODO - is this mode supported in rasters?\n                } else if (npts > 0) {\n                    var xstart = this.xstart;\n                    var xdelta = this.xdelta;\n                    var d = npts;\n                    if (Gx.index) {\n                        n1 = 0;\n                        n2 = npts - 1;\n                    } else if (xdelta >= 0.0) {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta))) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) + 2.0)) - 1.0;\n                    } else {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) - 1.0)) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta) + 2.0)) - 1.0;\n                    }\n\n                    npts = n2 - n1 + 1;\n                    if (npts < 0) {\n                        m.log.debug(\"Nothing to plot\");\n                        npts = 0;\n                    }\n                }\n\n                if (Gx.panxmin > Gx.panxmax) {\n                    Gx.panxmin = qmin;\n                    Gx.panxmax = qmax;\n                } else {\n                    Gx.panxmin = Math.min(Gx.panxmin, qmin);\n                    Gx.panxmax = Math.max(Gx.panxmax, qmax);\n                }\n\n                if (npts <= 0) {\n                    m.log.debug(\"Nothing to plot\");\n                    return;\n                }\n\n                if ((Gx.cmode === 5) || (this.ysub > 0)) {\n                    // TODO - is this mode supported in rasters?\n                } else if (npts > 0) {\n                    var ystart = this.ystart;\n                    var ydelta = this.ydelta;\n                    var d = npts;\n                    if (Gx.index) {\n                        n1 = 0;\n                        n2 = npts - 1;\n                    } else if (ydelta >= 0.0) {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmin - ystart) / ydelta))) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmax - ystart) / ydelta) + 2.0)) - 1.0;\n                    } else {\n                        n1 = Math.max(1.0, Math.min(d, Math.round((xmax - ystart) / ydelta) - 1.0)) - 1.0;\n                        n2 = Math.max(1.0, Math.min(d, Math.round((xmin - ystart) / ydelta) + 2.0)) - 1.0;\n                    }\n\n                    npts = n2 - n1 + 1;\n                    if (npts < 0) {\n                        m.log.debug(\"Nothing to plot\");\n                        npts = 0;\n                    }\n                }\n\n                if (Gx.panymin > Gx.panymax) {\n                    Gx.panymin = this.ymin;\n                    Gx.panymax = this.ymax;\n                } else {\n                    Gx.panymin = Math.min(Gx.panymin, this.ymin);\n                    Gx.panymax = Math.max(Gx.panymax, this.ymax);\n                }\n\n                if (this.cx) {\n                    if (Gx.cmode === 1) { // mag\n                        m.cvmag(this.buf, this.zbuf, this.zbuf.length);\n                    } else if (Gx.cmode === 2) { // phase\n                        if (Gx.plab === 25) {\n                            m.cvpha(this.buf, this.zbuf, this.zbuf.length);\n                            m.vsmul(this.zbuf, 1.0 / (2 * Math.PI), this.zbuf, this.zbuf.length);\n                        } else if (Gx.plab !== 24) {\n                            m.cvpha(this.buf, this.zbuf, this.zbuf.length);\n                        } else {\n                            m.cvphad(this.buf, this.zbuf, this.zbuf.length);\n                        }\n                    } else if (Gx.cmode === 3) { // real\n                        m.vmov(this.buf, this.skip, this.zbuf, 1, this.zbuf.length);\n                    } else if (Gx.cmode === 4) { // imag\n                        m.vmov(this.buf.subarray(1), this.skip, this.zbuf, 1, this.zbuf.length);\n                    } else if (Gx.cmode === 5) { // IR - what does this mean for a raster?\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 10.0, this.zbuf);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.cvmag2logscale(this.buf, Gx.dbmin, 20.0, this.zbuf);\n                    }\n                } else {\n                    if (Gx.cmode === 1) { // mag\n                        m.vabs(this.buf, this.zbuf);\n                    } else if (Gx.cmode === 2) { // phase\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 3) { // real\n                        m.vmov(this.buf, this.skip, this.zbuf, 1, this.zbuf.length);\n                    } else if (Gx.cmode === 4) { // imag\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 5) { // IR\n                        m.vfill(this.zbuf, 0, this.zbuf.length);\n                    } else if (Gx.cmode === 6) { // 10log\n                        m.vlogscale(this.buf, Gx.dbmin, 10.0, this.zbuf);\n                    } else if (Gx.cmode === 7) { // 20log\n                        m.vlogscale(this.buf, Gx.dbmin, 20.0, this.zbuf);\n                    }\n                }\n\n                // find z-min/z-max\n                // this is equivalent to setting XRASTER /LPB=0\n                var zpoint = this.zbuf;\n\n                var min = 0;\n                var max = 0;\n\n                if ((Gx.autol <= 0) || this.hcb.pipe) {\n                    // If autol is not used or the layer is rendering\n                    // a pipe, then use the basic z-scaling method\n                    if (zpoint.length > 0) {\n                        min = zpoint[0];\n                        max = zpoint[0];\n                        for (var i = 0; i < zpoint.length; i++) {\n                            if ((i / this.xframe) >= this.lpb) {\n                                break;\n                            }\n                            if (zpoint[i] < min) {\n                                min = zpoint[i];\n                            }\n                            if (zpoint[i] > max) {\n                                max = zpoint[i];\n                            }\n                        }\n                    }\n\n                    if (((Gx.autoz & 1) !== 0)) {\n                        if (Gx.zmin !== undefined) {\n                            Gx.zmin = Math.min(Gx.zmin, min);\n                        } else {\n                            Gx.zmin = min;\n                        }\n                    }\n                    if (((Gx.autoz & 2) !== 0)) {\n                        if (Gx.zmax !== undefined) {\n                            Gx.zmax = Math.min(Gx.zmax, max);\n                        } else {\n                            Gx.zmax = max;\n                        }\n                    }\n\n                    this.img = mx.create_image(Mx,\n                        this.zbuf,\n                        this.hcb.subsize,\n                        xsize,\n                        this.lps,\n                        Gx.zmin + Gx.zoff,\n                        Gx.zmax + Gx.zoff,\n                        this.xcompression);\n                } else {\n                    // otherwise autol > 1\n                    var nny = this.hcb.size;\n                    var fac = 1.0 / (Math.max(Gx.autol, 1));\n\n                    // If the image isn't yet created, make one now\n                    if (!this.img) {\n                        this.img = mx.create_image(Mx,\n                            this.zbuf,\n                            this.hcb.subsize,\n                            xsize,\n                            this.lps,\n                            Gx.zmin + Gx.zoff,\n                            Gx.zmax + Gx.zoff);\n                    }\n\n                    Gx.zmin = 0;\n                    Gx.zmax = 0;\n                    if (zpoint.length > 0) {\n                        for (var yy = 0; yy < nny; yy++) {\n                            var noff = yy * this.xframe;\n                            var min = zpoint[noff];\n                            var max = zpoint[noff];\n                            for (var i = 0; i < this.xframe; i++) {\n                                min = Math.min(zpoint[noff + i], min);\n                                max = Math.max(zpoint[noff + i], max);\n                            }\n\n                            // Auto-scale this raster line\n                            if ((Gx.autoz !== 2) && (min !== undefined)) {\n                                Gx.zmin = (min * fac) + (Gx.zmin * (1.0 - fac));\n                            }\n                            if ((Gx.autoz !== 1) && (max !== undefined)) {\n                                Gx.zmax = (max * fac) + (Gx.zmax * (1.0 - fac));\n                            }\n\n                            // Render the row\n                            mx.update_image_row(Mx,\n                                this.img,\n                                zpoint.subarray(noff, noff + this.xframe),\n                                yy,\n                                Gx.zmin,\n                                Gx.zmax);\n\n                        }\n                    }\n                }\n            } else {\n                // Setup image for pipe-mode\n                if (Gx.panxmin > Gx.panxmax) {\n                    Gx.panxmin = qmin;\n                    Gx.panxmax = qmax;\n                } else {\n                    Gx.panxmin = Math.min(Gx.panxmin, qmin);\n                    Gx.panxmax = Math.max(Gx.panxmax, qmax);\n                }\n                if (Gx.panymin > Gx.panxmax) {\n                    Gx.panymin = this.ymin;\n                    Gx.panymax = this.ymax;\n                } else {\n                    Gx.panymin = Math.min(Gx.panymin, this.ymin);\n                    Gx.panymax = Math.max(Gx.panymax, this.ymax);\n                }\n\n                if (!this.img) {\n                    if (Gx.zmin === undefined) {\n                        Gx.zmin = 0;\n                    }\n                    if (Gx.zmax === undefined) {\n                        Gx.zmax = 0;\n                    }\n                    this.img = mx.create_image(Mx,\n                        null,\n                        this.hcb.subsize,\n                        xsize,\n                        this.lps,\n                        Gx.zmin + Gx.zoff,\n                        Gx.zmax + Gx.zoff,\n                        this.xcompression);\n                }\n            }\n\n            this.img.cmode = Gx.cmode;\n            this.img.cmap = Gx.cmap;\n            this.img.origin = Mx.origin;\n\n            // Make the parts without data transparent\n            if (this.hcb.pipe && (this.frame < this.lps)) {\n                var imgd = new Uint32Array(this.img);\n                if (this.drawmode === \"rising\") {\n                    for (var i = 0; i < imgd.length - (this.frame * xsize); i++) {\n                        imgd[i] = 0;\n                    }\n                } else {\n                    for (var i = this.frame * xsize; i < imgd.length; i++) {\n                        imgd[i] = 0;\n                    }\n                }\n            }\n\n            return npts;\n        },\n\n        draw: function() {\n            var Mx = this.plot._Mx;\n            var Gx = this.plot._Gx;\n            var HCB = this.hcb;\n\n            if (this.hcb.pipe) {\n                var lps = this.hcb.lps || Math.ceil(Math.max(1, (Mx.b - Mx.t)));\n                if ((lps !== this.lps) && this.buf) {\n                    this.lps = lps;\n                    if (this.position >= this.lps) { // if lps got resized make sure we don't go out of bounds\n                        this.position = 0;\n                    }\n                    var d = HCB.ystart + (HCB.ydelta * this.lps);\n                    this.ymin = Math.min(HCB.ystart, d);\n                    this.ymax = Math.max(HCB.ystart, d);\n                    // reset the image since we now have more lines to render\n                    // TODO - can we preserve the image data rather than resetting?\n                    this.img = null;\n                    this.plot.rescale();\n                }\n            }\n\n            var xmin = Math.max(this.xmin, Mx.stk[Mx.level].xmin);\n            var xmax = Math.min(this.xmax, Mx.stk[Mx.level].xmax);\n            if (xmin >= xmax) { // no data but do scaling\n                Gx.panxmin = Math.min(Gx.panxmin, this.xmin);\n                Gx.panxmax = Math.max(Gx.panxmax, this.xmax);\n                return;\n            }\n            var ymin = Math.max(this.ymin, Mx.stk[Mx.level].ymin);\n            var ymax = Math.min(this.ymax, Mx.stk[Mx.level].ymax);\n\n            var w = Math.abs(xmax - xmin) + 1;\n            var h = Math.abs(ymax - ymin) + 1;\n\n            w = Math.floor(w / HCB.xdelta);\n            h = Math.floor(h / HCB.ydelta);\n\n            w = Math.min(w, HCB.subsize);\n            h = Math.min(h, HCB.size);\n\n            var ul = mx.real_to_pixel(Mx, xmin, ymin);\n            var lr = mx.real_to_pixel(Mx, xmax, ymax);\n\n            var iw = lr.x - ul.x;\n            var ih = lr.y - ul.y;\n\n            var rx = iw / w;\n            var ry = ih / h;\n\n            Gx.xe = Math.max(1, Math.round(rx));\n            Gx.ye = Math.max(1, Math.round(ry));\n\n            // we might need to prep in certian situations\n            if ((!this.img) || (!this.buf) || (Gx.cmode !== this.img.cmode) || (Gx.cmap !== this.img.cmap) || (Mx.origin !== this.img.origin)) {\n                this.prep(xmin, xmax);\n            }\n\n            // if there is an image, render it\n            if (this.img) {\n                mx.draw_image(Mx, this.img, this.xmin, this.ymin, this.xmax, this.ymax, this.opacity, Gx.rasterSmoothing);\n            }\n\n            // render the scrolling pipe line\n            if (this.position !== null && this.drawmode === \"scrolling\") {\n                var pnt = mx.real_to_pixel(Mx, 0, this.position * this.ydelta);\n                if ((pnt.y > Mx.t) && (pnt.y < Mx.b)) {\n                    mx.draw_line(Mx, \"white\", Mx.l, pnt.y, Mx.r, pnt.y);\n                }\n            }\n        }\n    };\n\n    /**\n     * Factory to overlay the given file onto the given plot.\n     *\n     * @private\n     */\n    Layer2D.overlay = function(plot, hcb, layerOptions) {\n        var Gx = plot._Gx;\n        var Mx = plot._Mx;\n\n        hcb.buf_type = \"D\";\n\n        var layer = new Layer2D(plot);\n        layer.init(hcb);\n\n        if (hcb.file_name) {\n            layer.name = m.trim_name(hcb.file_name);\n        } else {\n            layer.name = \"layer_\" + Gx.lyr.length;\n        }\n\n        layer.change_settings(layerOptions);\n\n        var layers = [];\n        if (plot.add_layer(layer)) {\n            layers.push(layer);\n        }\n\n        return layers;\n    };\n\n    module.exports = Layer2D;\n\n}());\n"],"sourceRoot":""}