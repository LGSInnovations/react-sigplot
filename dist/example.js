(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["react-sigplot"] = factory();
	else
		root["react-sigplot"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _app = __webpack_require__(1);
	
	var _app2 = _interopRequireDefault(_app);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(49);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	__webpack_require__(195);
	_reactDom2.default.render(_react2.default.createElement(_app2.default, null), document.getElementById('app'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _src = __webpack_require__(33);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_Component) {
	  _inherits(App, _Component);
	
	  function App(props) {
	    _classCallCheck(this, App);
	
	    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	    _this.state = {
	      rasterData: []
	    };
	    return _this;
	  }
	
	  _createClass(App, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;
	
	      setInterval(function () {
	        var random = [];
	        for (var i = 0; i <= 1000; i += 1) {
	          random.push(Math.random());
	        }
	        _this2.setState({ rasterData: random });
	      }, 16);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _src.SigPlot,
	          { options: { autol: 1 } },
	          _react2.default.createElement(_src.ArrayLayer, { data: this.state.rasterData })
	        ),
	        _react2.default.createElement(
	          _src.SigPlot,
	          null,
	          _react2.default.createElement(_src.PipeLayer, { options: { type: 2000, subsize: 1000 },
	            data: this.state.rasterData })
	        )
	      );
	    }
	  }]);
	
	  return App;
	}(_react.Component);
	
	exports.default = App;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(3);


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var ReactChildren = __webpack_require__(6);
	var ReactComponent = __webpack_require__(19);
	var ReactPureComponent = __webpack_require__(22);
	var ReactClass = __webpack_require__(23);
	var ReactDOMFactories = __webpack_require__(25);
	var ReactElement = __webpack_require__(10);
	var ReactPropTypes = __webpack_require__(30);
	var ReactVersion = __webpack_require__(31);
	
	var onlyChild = __webpack_require__(32);
	var warning = __webpack_require__(12);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(26);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	
	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(7);
	var ReactElement = __webpack_require__(10);
	
	var emptyFunction = __webpack_require__(13);
	var traverseAllChildren = __webpack_require__(16);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(8);
	
	var invariant = __webpack_require__(9);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var ReactCurrentOwner = __webpack_require__(11);
	
	var warning = __webpack_require__(12);
	var canDefineProperty = __webpack_require__(14);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var REACT_ELEMENT_TYPE = __webpack_require__(15);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}
	
	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}
	
	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}
	
	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(13);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(8);
	
	var ReactCurrentOwner = __webpack_require__(11);
	var REACT_ELEMENT_TYPE = __webpack_require__(15);
	
	var getIteratorFn = __webpack_require__(17);
	var invariant = __webpack_require__(9);
	var KeyEscapeUtils = __webpack_require__(18);
	var warning = __webpack_require__(12);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 18 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(8);
	
	var ReactNoopUpdateQueue = __webpack_require__(20);
	
	var canDefineProperty = __webpack_require__(14);
	var emptyObject = __webpack_require__(21);
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var warning = __webpack_require__(12);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var ReactComponent = __webpack_require__(19);
	var ReactNoopUpdateQueue = __webpack_require__(20);
	
	var emptyObject = __webpack_require__(21);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;
	
	module.exports = ReactPureComponent;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);
	
	var ReactComponent = __webpack_require__(19);
	var ReactElement = __webpack_require__(10);
	var ReactPropTypeLocationNames = __webpack_require__(24);
	var ReactNoopUpdateQueue = __webpack_require__(20);
	
	var emptyObject = __webpack_require__(21);
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	var MIXINS_KEY = 'mixins';
	
	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}
	
	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;
	
	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }
	
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;
	
	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;
	
	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};
	
	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
	
	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(10);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(26);
	  createDOMFactory = ReactElementValidator.createFactory;
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),
	
	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactComponentTreeHook = __webpack_require__(27);
	var ReactElement = __webpack_require__(10);
	
	var checkReactTypeSpec = __webpack_require__(28);
	
	var canDefineProperty = __webpack_require__(14);
	var getIteratorFn = __webpack_require__(17);
	var warning = __webpack_require__(12);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();
	
	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
	
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
	    }
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(8);
	
	var ReactCurrentOwner = __webpack_require__(11);
	
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}
	
	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
	
	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;
	
	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();
	
	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };
	
	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};
	
	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };
	
	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };
	
	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}
	
	var unmountedIDs = [];
	
	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;
	
	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}
	
	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}
	
	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}
	
	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}
	
	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;
	
	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }
	
	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }
	
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },
	
	
	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};
	
	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(8);
	
	var ReactPropTypeLocationNames = __webpack_require__(24);
	var ReactPropTypesSecret = __webpack_require__(29);
	
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(27);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(27);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(10);
	var ReactPropTypeLocationNames = __webpack_require__(24);
	var ReactPropTypesSecret = __webpack_require__(29);
	
	var emptyFunction = __webpack_require__(13);
	var getIteratorFn = __webpack_require__(17);
	var warning = __webpack_require__(12);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/
	
	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;
	
	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }
	
	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }
	
	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }
	
	  return false;
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 31 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.4.1';

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(8);
	
	var ReactElement = __webpack_require__(10);
	
	var invariant = __webpack_require__(9);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _sigplot = __webpack_require__(34);
	
	Object.defineProperty(exports, 'SigPlot', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_sigplot).default;
	  }
	});
	
	var _arraylayer = __webpack_require__(46);
	
	Object.defineProperty(exports, 'ArrayLayer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_arraylayer).default;
	  }
	});
	
	var _pipelayer = __webpack_require__(48);
	
	Object.defineProperty(exports, 'PipeLayer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_pipelayer).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _sigplot = __webpack_require__(35);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var SigPlot = function (_Component) {
	  _inherits(SigPlot, _Component);
	
	  function SigPlot(props) {
	    _classCallCheck(this, SigPlot);
	
	    var _this = _possibleConstructorReturn(this, (SigPlot.__proto__ || Object.getPrototypeOf(SigPlot)).call(this, props));
	
	    _this.state = {};
	    return _this;
	  }
	
	  _createClass(SigPlot, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        plot: this.plot
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props = this.props,
	          data = _props.data,
	          file = _props.file,
	          raster = _props.raster,
	          options = _props.options,
	          xdelta = _props.xdelta,
	          xunits = _props.xunits,
	          yunits = _props.yunits,
	          type = _props.type,
	          websocket = _props.websocket;
	
	      this.plot = new _sigplot.Plot(this.element, options);
	
	      // Have to trigger context tree, setting state does that.
	      // eslint-disable-next-line react/no-did-mount-set-state
	      this.setState({ plot: this.plot });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var _props2 = this.props,
	          height = _props2.height,
	          width = _props2.width;
	
	      var plot = this.plot;
	      var children = plot ? _react2.default.Children.map(this.props.children, function (child) {
	        if (child) {
	          return _react2.default.cloneElement(child, { plot: plot });
	        }
	        return null;
	      }) : null;
	
	      return _react2.default.createElement(
	        'div',
	        {
	          style: { height: height, width: width, display: 'inline-block' },
	          ref: function ref(element) {
	            return _this2.element = element;
	          }
	        },
	        children
	      );
	    }
	  }]);
	
	  return SigPlot;
	}(_react.Component);
	
	exports.default = SigPlot;
	
	
	SigPlot.childContextTypes = {
	  plot: _react.PropTypes.instanceOf(_sigplot.Plot)
	};
	
	SigPlot.propTypes = {
	  children: _react.PropTypes.node,
	  height: _react.PropTypes.number,
	  width: _react.PropTypes.number,
	  file: _react.PropTypes.string,
	  websocket: _react.PropTypes.string,
	  data: _react.PropTypes.arrayOf(_react.PropTypes.number),
	  raster: _react.PropTypes.bool,
	  options: _react.PropTypes.object,
	  type: _react.PropTypes.number,
	  xunits: _react.PropTypes.number,
	  yunits: _react.PropTypes.number,
	  xdelta: _react.PropTypes.number
	};
	
	SigPlot.defaultProps = {
	  height: 300,
	  width: 300,
	  type: 2000,
	  xdelta: 1,
	  xunits: 3, // Hz
	  yunits: 26, // 10*log
	  options: {
	    all: true,
	    expand: true,
	    autol: 100,
	    autohide_panbars: true
	  }
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license
	 * File: sigplot.js
	 * Copyright (c) 2012-2014, Michael Ihde, All rights reserved.
	 * Copyright (c) 2012-2014, Axios Inc., All rights reserved.
	 *
	 * This file is part of SigPlot.
	 *
	 * SigPlot is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
	 * General Public License as published by the Free Software Foundation; either version 3.0 of the License, or
	 * (at your option) any later version. This library is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	 * PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the
	 * GNU Lesser General Public License along with SigPlot.
	 */
	
	/*jslint nomen: true, browser: true, devel: true */
	
	/* global module */
	/* global require */
	
	(function() {
	
	    var Spinner = __webpack_require__(36);
	    var common = __webpack_require__(37);
	    var bluefile = __webpack_require__(38);
	    var m = __webpack_require__(39);
	    var mx = __webpack_require__(41);
	    var Layer1D = __webpack_require__(44);
	    var Layer2D = __webpack_require__(45);
	
	    function sigplot(element, options) {
	        if (!(this instanceof sigplot)) {
	            return new sigplot.Plot(element, options);
	        }
	    }
	
	    sigplot.bluefile = bluefile;
	    sigplot.m = m;
	    sigplot.mx = mx;
	    sigplot.Layer1D = Layer1D;
	    sigplot.Layer2D = Layer2D;
	
	    /**
	     * Text of the keypress help dialog.
	     *
	     * @memberOf sigplot
	     * @private
	     */
	    var KEYPRESS_HELP = "Keypress Table:\n" +
	        "--------------\n" +
	        "?    - Main help box.\n" +
	        "A    - Toggle display x,y readouts:\n" +
	        "       (absc) -> (index) -> (1/absc) -> (time).\n" +
	        "B    - Toggle LM Drag Mode:\n" +
	        "       (box) -> (horizontal) -> (vertical).\n" +
	        "C    - Toggle controls.\n" +
	        "K    - Show Marker.\n" +
	        "L    - Toggle legend.\n" +
	        "M    - Pops up main menu\n" +
	        "R    - Toggle display specs (x/y readout)\n" +
	        "S    - Toggle display specs and axes.\n" +
	        "T    - Popup box with timecode value at mouse.\n" +
	        "X    - Popup box with X value at mouse.\n" +
	        "Y    - Popup box with Y value at mouse.\n" +
	        "F    - Toggle fullscreen.\n";
	
	    /**
	     * Text of the main help dialog.
	     *
	     * @memberOf sigplot
	     * @private
	     */
	    var MAIN_HELP = "To zoom, press and drag the left mouse (LM) over the region of interest and release. " +
	        "To unzoom, press right mouse (RM).  Press the middle mouse (MM) button or press the " +
	        "by selecting 'Keypress Info' from the main menu.";
	
	    /**
	     * Attempts basic checks to determine if the browser is compatible with
	     * sigplot.
	     *
	     * @memberOf sigplot
	     * @private
	     */
	    sigplot.browserIsCompatible = function browserIsCompatible() {
	        // We need a Canvas
	        var test_canvas = document.createElement('canvas');
	        var hascanvas = (test_canvas.getContext) ? true : false;
	
	        // We need ArrayBuffer
	        var hasarraybuf = ("ArrayBuffer" in window);
	
	        // File and FileReader are optional...and only
	        // required if the user wants to plot local files
	        return (hascanvas && hasarraybuf);
	    };
	
	
	
	    /**
	     * Construct and render a plot.
	     *
	     * @constructor sigplot.Plot
	     *
	     * @example plot = new sigplot.Plot(document.getElementById('plot'), {});
	     *
	     * @param element
	     *            a 'div' DOM elements
	     * @param [options]
	     *            alters the behavior of the plot.
	     *
	     * @param {String}
	     *            options.cmode the plot rendering mode "IN" = Index, "AB" =
	     *            Abscissa, "MA" = Magnitude, "PH" = Phase, "RE" = Real, "IM" =
	     *            Imaginary, "LO" or "D1" = 10*log, "L2" or "D2" = 20*log, "RI"
	     *            or "IR" = Real vs. Imaginary
	     *
	     * @param {String}
	     *            options.phunits the phase units "D" = Degrees, "R" = Radians,
	     *            "C" = Cycles
	     *
	     * @param {Boolean}
	     *            options.cross display cross hairs on the plot
	     *
	     * @param {Boolean}
	     *            options.nogrid hide the background grid
	     *
	     * @param {Boolean}
	     *            options.legend set to false to hide the legend
	     *
	     * @param {Boolean}
	     *            options.no_legend_button set to true to hide the legend button
	     *
	     * @param {Boolean}
	     *            options.nopan disable panning on the plot
	     *
	     * @param {Boolean}
	     *            options.nomenu disable the middle-click menu
	     *
	     * @param {Boolean}
	     *            options.nospec hide all plot specification displays
	     *
	     * @param {Boolean}
	     *            options.noxaxis hide the x-axis
	     *
	     * @param {Boolean}
	     *            options.noyaxis hide the y-axis
	     *
	     * @param {Boolean}
	     *            options.noreadout hide the plot readout area
	     *
	     * @param {Boolean}
	     *            options.nodragdrop prevent file drag drop
	     *
	     * @param {Number}
	     *            options.scroll_time_interval
	     *
	     * @param {Boolean}
	     *            options.index use the data-index in the X axis
	     *
	     * @param {Number}
	     *            options.autox auto-scaling settings for X axis
	     *
	     * @param {Number}
	     *            options.xmin the minimum range to display on the X axis
	     *
	     * @param {Number}
	     *            options.xmax the maximum range to display on the X axis
	     *
	     * @param {Number}
	     *            options.xlab the units that X-axis uses (see m.UNITS)
	     *
	     * @param {Object}
	     *            options.xlabel function or string for custom X-axis label
	     *
	     * @param {Number}
	     *            options.xdiv the number of divisions on the X axis
	     *
	     * @param {Number}
	     *            options.xcnt configure the mtag mouse controls 0 = Off, 1
	     *            (default) = LM Click, 2 = Continuous
	     *
	     * @param {String}
	     *            options.rubberbox_mode controls the behavior of the rubberbox
	     *            "zoom" (default) = zoom to the selected area "box" = trigger
	     *            an mtag action on the selected area
	     *
	     * @param {String}
	     *            options.rightclick_rubberbox_mode controls the behavior of the rubberbox
	     *            "zoom" = zoom to the selected area "box" = trigger
	     *            an mtag action on the selected area.  By default is null to disable
	     *            right-click boxes
	     *
	     * @param {Number}
	     *            options.line the line type to draw 0 = None, 1 = Verticals, 2 =
	     *            Horizontals, 3 (default) = Connecting
	     *
	     * @param {Number}
	     *            options.autoy auto-scaling settings for Y axis
	     *            0 = Fix , 1 = Auto Min , 2 = Auto Max, 3 = Full Auto
	     *
	     * @param {Number}
	     *            options.ylab the units that Y-axis uses (see m.UNITS)
	     *
	     * @param {Object}
	     *            options.ylabel function or string for custom Y-axis label
	     * 
	     * @param {Number}
	     *            options.ymin the minimum range to display on the Y axis
	     *
	     * @param {Number}
	     *            options.ymax the maximum range to display on the Y axis
	     *
	     * @param {Number}
	     *            options.ydiv the number of divisions on the Y axis
	     *
	     * @param {Number}
	     *            options.zmin the minimum range to display on the Z axis
	     *
	     * @param {Number}
	     *            options.zmax the maximum range to display on the Z axis
	     *
	     * @param {Boolean}
	     *            options.yinv invert the y-axis
	     *
	     * @param {String}
	     *            options.colors.fg the foreground color as a CSS color
	     *
	     * @param {String}
	     *            options.colors.bg the background color as a CSS color
	     *
	     * @param {Boolean}
	     *            options.xi invert the foreground/background colors
	     *
	     * @param {Boolean}
	     *            options.forcelab
	     *
	     * @param {Boolean}
	     *            options.all show all of the data on the plot instead of just
	     *            one buffer
	     *
	     * @param {Boolean}
	     *            options.expand auto-scale the plot based on all the data (when
	     *            combined with the all option)
	     *
	     * @param {Number}
	     *            options.origin 1 = x1:xmin, x2:xmax, y1:ymax, y2:ymin
	     *            (default), 2 = x1:xmax, x2:xmin, y1:ymax, y2:ymin (x
	     *            inverted), 3 = x1:xmax, x2:xmin, y1:ymin, y2:ymax (x & y
	     *            inverted), 4 = x1:xmin, x2:xmax, y1:ymin, y2:ymax (y inverted)
	     *
	     * @param {Number}
	     *            options.bufmax the buffer size to use
	     *
	     * @param {Boolean}
	     *            options.nokeypress disable key press actions
	     *
	     * @param options.anno_type
	     *            (Not implemented)
	     *
	     * @param options.pmt
	     *            (Not implemented)
	     *
	     * @param options.xfmt
	     *            (Not implemented)
	     *
	     * @param options.yfmt
	     *            (Not implemented)
	     *
	     * @param options.nsec
	     *            the number of sections to split the plot into (Not
	     *            implemented)
	     *
	     * @param options.font_family
	     *            the font family to use for text rendered on the plot.  Monospace
	     *            font's will generally work best.
	     *
	     * @returns {sigplot.Plot}
	     */
	    sigplot.Plot = function(element, options) {
	        if (!sigplot.browserIsCompatible()) {
	            throw "Browser is not compatible";
	        }
	        // Register with the Mx structure - Step #4
	        this._Mx = mx.open(element);
	        var Mx = this._Mx;
	
	        this._Gx = new GX();
	        this._Gx.parent = element;
	
	        // Variable which stores state of mouse position relative to the canvas
	        this.mouseOnCanvas = false;
	
	        if (!options) {
	            options = {};
	        }
	
	        plot_init(this, options);
	
	        this._refresh(); // Draw immediately
	
	        this.onmousemove = (function(plot) {
	            return function(e) {
	                var Mx = plot._Mx;
	                var Gx = plot._Gx;
	
	                var rect = e.target.getBoundingClientRect();
	                var xpos = (e.offsetX === undefined) ? (e.pageX - rect.left - window.scrollX) : e.offsetX;
	                var ypos = (e.offsetX === undefined) ? (e.pageY - rect.top - window.scrollY) : e.offsetY;
	
	                // var xpos = (e.offsetX === undefined) ? e.layerX : e.offsetX;
	                // var ypos = (e.offsetY === undefined) ? e.layerY : e.offsetY;
	                var re = pixel_to_real(plot, xpos, ypos);
	                Gx.retx = re.x;
	                Gx.rety = re.y;
	
	                if (Mx.widget) {
	                    return;
	                }
	                display_specs(plot);
	
	                var evt = document.createEvent('Event');
	                evt.initEvent('mmove', true, true);
	                evt.xpos = xpos;
	                evt.ypos = ypos;
	                evt.x = Gx.retx;
	                evt.y = Gx.rety;
	                var executeDefault = mx.dispatchEvent(Mx, evt);
	                if (!executeDefault) {
	                    return;
	                }
	
	                // The crosshair logic in websigplot is different
	                // because we need to clear the previous position
	                // of the line (via XOR) and then draw the new line
	                //
	                // The Mx.xpos and Mx.ypos may have already been
	                // updated to their new location so we need to store
	                // the crosshair position in the Gx structure
	                if (Gx.cross) {
	                    if (Mx.warpbox) {
	                        // during zoom operations undraw the crosshairs
	                        if (Gx.cross_xpos !== undefined) {
	                            mx.rubberline(Mx, Gx.cross_xpos, Mx.t,
	                                Gx.cross_xpos, Mx.b);
	                        }
	                        if (Gx.cross_ypos !== undefined) {
	                            mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r,
	                                Gx.cross_ypos);
	                        }
	                        Gx.cross_xpos = undefined;
	                        Gx.cross_ypos = undefined;
	                    } else {
	                        if (plot.mouseOnCanvas) {
	                            draw_crosshairs(plot);
	                        }
	                    }
	                }
	
	                if (Gx.cntrls === 2) {
	                    var evt = document.createEvent('Event');
	                    evt.initEvent('mtag', true, true);
	                    evt.x = Gx.retx;
	                    evt.y = Gx.rety;
	                    evt.xpos = xpos;
	                    evt.ypos = ypos;
	                    mx.dispatchEvent(Mx, evt);
	                }
	            };
	        }(this));
	
	        this.ontouchmove = (function(plot) {
	            return function(event) {
	                event.preventDefault();
	                plot.onmousemove(event);
	            };
	        }(this));
	
	        this.throttledOnMouseMove = m.throttle(this._Gx.scroll_time_interval,
	            this.onmousemove);
	
	        mx.addEventListener(Mx, "mousemove", this.throttledOnMouseMove, false);
	        // canvas.addEventListener('touchmove', this.ontouchmove, false);
	
	        this.onmouseout = (function(plot) {
	            return function(event) {
	                var Gx = plot._Gx;
	                var Mx = plot._Mx;
	                if (plot.mouseOnCanvas) {
	                    plot.mouseOnCanvas = false;
	
	                    if (Gx.autohide_readout) {
	                        display_specs(plot);
	                    }
	                    if (Gx.autohide_panbars) {
	                        draw_panbars(plot);
	                    }
	                    if (Mx.prompt) {
	                        Mx.prompt.input.enableBlur();
	                    }
	                }
	            };
	        }(this));
	        mx.addEventListener(Mx, "mouseout", this.onmouseout, false);
	
	        this.onmouseover = (function(plot) {
	            return function(event) {
	                var Gx = plot._Gx;
	                var Mx = plot._Mx;
	                plot.mouseOnCanvas = true;
	                if (Gx.autohide_panbars) {
	                    draw_panbars(plot);
	                }
	                if (Mx.prompt) {
	                    Mx.prompt.input.disableBlur();
	                }
	            };
	        }(this));
	        mx.addEventListener(Mx, "mouseover", this.onmouseover, false);
	
	        this.onmousedown = (function(plot) {
	            return function(event) {
	                event.preventDefault(); // mouse down on the canvas should never do a browser default action
	
	                var Mx = plot._Mx;
	                var Gx = plot._Gx;
	
	                if (Mx.widget && (Mx.widget.type === "ONESHOT")) {
	                    Mx.widget = null;
	                    plot.refresh();
	                }
	
	                // Update Mx event fields
	                mx.ifevent(Mx, event);
	
	                var evt = document.createEvent('Event');
	                evt.initEvent('mdown', true, true);
	                evt.xpos = Mx.xpos;
	                evt.ypos = Mx.ypos;
	                evt.x = Gx.retx;
	                evt.y = Gx.rety;
	                evt.which = event.which;
	                var executeDefault = mx.dispatchEvent(Mx, evt);
	                if (!executeDefault) {
	                    return false;
	                }
	
	                // Check if event occured in the pan region
	                var inPan = inPanRegion(plot);
	
	                // Event processing
	                if (inPan.inPanRegion) { // Mouse position lies in a pan
	                    // region
	                    event.preventDefault();
	                    if (inPan.command !== ' ') {
	                        var scrollbar = null;
	                        var position = null;
	                        if (inPan.command === "XPAN") {
	                            scrollbar = Mx.scrollbar_x;
	                        } else if (inPan.command === "YPAN") {
	                            scrollbar = Mx.scrollbar_y;
	                        }
	
	                        if (event.which === 2) {
	                            position = {
	                                x: Mx.xpos,
	                                y: Mx.ypos
	                            };
	                            if ((scrollbar !== undefined) && (onScrollbar(position, scrollbar))) {
	                                // Only show menu if on the scrollbar itself
	                                sigplot_scrollScaleMenu(plot, inPan.command);
	                            }
	                        } else {
	                            if (inPan.command !== ' ') {
	                                position = {
	                                    x: Mx.xpos,
	                                    y: Mx.ypos
	                                };
	                                if (!onScrollbar(position, scrollbar) && event.which === 1) { // Left-clicking
	                                    // not on a
	                                    // scrollbar -
	                                    // handle
	                                    // typical pan
	                                    pan(plot, inPan.command, 0, event); // Execute
	                                    // the
	                                    // first
	                                    // pan
	                                    var repeatPan = function() {
	                                        if (!onScrollbar({
	                                                "x": Mx.xpos,
	                                                "y": Mx.ypos
	                                            }, scrollbar)) {
	                                            pan(plot, inPan.command, 0, event);
	                                            // execute
	                                            // a
	                                            // pan
	                                            // on
	                                            // every
	                                            // interval
	                                        } else {
	                                            // stop
	                                            // panning
	                                            // once you
	                                            // hit the
	                                            // scrollbar
	                                            if (Gx.stillPanning) {
	                                                window.clearInterval(Gx.stillPanning);
	                                                Gx.repeatPanning = undefined;
	                                            }
	                                        }
	                                    };
	
	                                    // Make scrolling smooth, the longer initial prevents
	                                    // a single click from counting twice
	                                    Gx.stillPanning = window.setTimeout(
	
	                                        function() {
	                                            Gx.repeatPanning = window.setInterval(repeatPan, 50);
	                                        }, 250);
	                                }
	                            }
	                        }
	                    }
	                } else { // Mouse not in a pan region, handle other cases
	                    if (event.which === 1 || event.which === 3) {
	                        var lButtonPressed = false;
	                        if (Gx.legendBtnLocation) {
	                            lButtonPressed = coordsInRectangle(Mx.xpos,
	                                Mx.ypos, Gx.legendBtnLocation.x,
	                                Gx.legendBtnLocation.y,
	                                Gx.legendBtnLocation.width,
	                                Gx.legendBtnLocation.height);
	                        }
	
	                        if (lButtonPressed) {
	                            plot.change_settings({
	                                legend: !Gx.legend
	                            }); // toggle the legend
	                        } else {
	                            display_specs(plot);
	
	                            // Styles for rubberbox
	                            var zoom_style = {
	                                opacity: 0,
	                                return_value: "zoom"
	                            };
	
	                            var select_style = {
	                                opacity: 0.4,
	                                fill_color: Mx.hi,
	                                return_value: "select"
	                            };
	
	                            if (event.which === 1) {
	                                if (Gx.default_rubberbox_action === "zoom") {
	                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),
	                                        Gx.default_rubberbox_mode, zoom_style,
	                                        select_style);
	                                } else if (Gx.default_rubberbox_action === "select") {
	                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),
	                                        Gx.default_rubberbox_mode,
	                                        select_style, zoom_style);
	                                } // otherwise rubber-box is considered disabled
	                            } else if (event.which === 3) {
	                                if (Gx.default_rightclick_rubberbox_action === "zoom") {
	                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),
	                                        Gx.default_rightclick_rubberbox_mode, zoom_style,
	                                        select_style);
	                                } else if (Gx.default_rightclick_rubberbox_action === "select") {
	                                    mx.rubberbox(Mx, rubberbox_cb(plot, event.which),
	                                        Gx.default_rightclick_rubberbox_mode,
	                                        select_style, zoom_style);
	                                } // otherwise right-click rubber-box is considered disabled
	                            }
	                        }
	                    } else if (event.which === 2) {
	                        if (!Gx.nomenu) {
	                            sigplot_mainmenu(plot);
	                        }
	                    }
	                }
	                return false;
	            };
	        }(this));
	
	        this.ontouchstart = (function(plot) {
	            return function(event) {
	                event.preventDefault();
	                plot.onmousedown({
	                    which: 1
	                });
	            };
	        }(this));
	
	        mx.addEventListener(Mx, "mousedown", this.onmousedown, false);
	        // canvas.addEventListener("touchstart", this.ontouchstart, false);
	
	        this.docMouseUp = (function(plot) {
	            return function(event) {
	                var Gx = plot._Gx;
	
	                if (event.which === 1) {
	                    // in general, you shouldn't put anything in here
	                    // ...instead it should go into rubberbox_cb
	                    Gx.panning = undefined;
	                    plot._Mx.scrollbar_x.action = 0; // TODO Is this
	                    // necessary?
	                    plot._Mx.scrollbar_y.action = 0;
	                } //else if (event.which === 2) {
	                // nothing
	                //} else if (event.which === 3) {
	                // nothing
	                //}
	                if (Gx.stillPanning) {
	                    window.clearTimeout(Gx.stillPanning);
	                    Gx.stillPanning = undefined;
	                }
	                if (Gx.repeatPanning) { // Clear the panning interval on any
	                    // mouse up in the document
	                    window.clearInterval(Gx.repeatPanning);
	                    Gx.repeatPanning = undefined;
	                }
	                return false;
	            };
	        }(this));
	        document.addEventListener("mouseup", this.docMouseUp, false);
	
	        this.mouseup = (function(plot) {
	            return function(event) {
	                event.preventDefault(); // mouse up on the canvas should never do a browser default action
	
	                var Gx = plot._Gx;
	                var Mx = plot._Mx;
	
	                // Update Mx event fields
	                mx.ifevent(plot._Mx, event);
	
	                var evt = document.createEvent('Event');
	                evt.initEvent('mup', true, true);
	                evt.xpos = Mx.xpos;
	                evt.ypos = Mx.ypos;
	                evt.x = Gx.retx;
	                evt.y = Gx.rety;
	                evt.which = event.which;
	                var executeDefault = mx.dispatchEvent(Mx, evt);
	
	                if (executeDefault) {
	                    if (Mx.warpbox || Mx.widget || Mx.prompt) {
	                        // If any of these are true, the mouseup is going
	                        // to be handled by them...but this is a fragile approach
	                        // because it relies upon implicit ordering of event dispatch
	                        // for mouseup events.  It should be improved/refactored at some point
	                        return;
	                    }
	
	                    // Normal mouse up handling
	                    if (event.which === 1) {
	                        // If we are in the pan region, perform the pan
	                        // otherwise emit an mtag
	                        var inCenter = inPanCenterRegion(plot);
	                        if (inCenter.inCenterRegion) {
	                            if (inCenter.command !== ' ') {
	                                pan(plot, inCenter.command, 0, event); // pan
	                            }
	                        } else if (Gx.cntrls === 1) {
	                            // Update the mark
	                            Gx.xmrk = Gx.retx;
	                            Gx.ymrk = Gx.rety;
	
	                            var mtagevt = document.createEvent('Event');
	                            mtagevt.initEvent('mtag', true, true);
	                            mtagevt.x = Gx.xmrk;
	                            mtagevt.y = Gx.ymrk;
	                            mtagevt.xpos = event.x || event.clientX;
	                            mtagevt.ypos = event.y || event.clientY;
	                            mtagevt.w = undefined;
	                            mtagevt.h = undefined;
	                            mtagevt.shift = event.shiftKey;
	                            mx.dispatchEvent(Mx, mtagevt);
	
	                            // Refresh to draw the new marker position
	                            if (Gx.always_show_marker || Gx.show_marker) {
	                                plot.redraw();
	                            }
	                        }
	                    } else if (event.which === 2) {
	                        if (Gx.nomenu) {
	                            // Send an event so that a custom menu can be displayed
	                            // if desired
	                            var evt = document.createEvent('Event');
	                            evt.initEvent('showmenu', true, true);
	                            evt.x = event.x || event.clientX;
	                            evt.y = event.y || event.clientY;
	                            var executeDefault = mx.dispatchEvent(Mx, evt);
	
	                            if (executeDefault) {
	                                if (event.stopPropagation) {
	                                    event.stopPropagation();
	                                }
	                                event.cancelBubble = true;
	                                mx.removeEventListener(Mx, "mousedown", plot.onmousedown, false);
	
	                                var emit_hidemenu = function() {
	                                    try {
	                                        var hideMenuEvt = document.createEvent('Event');
	                                        hideMenuEvt.initEvent('hidemenu', true, true);
	                                        if (mx.dispatchEvent(Mx, hideMenuEvt)) {
	                                            mx.addEventListener(Mx, "mousedown", plot.onmousedown, false);
	                                        }
	                                    } finally {
	                                        document.removeEventListener("mouseup", emit_hidemenu, false);
	                                    }
	                                };
	                                document.addEventListener("mouseup", emit_hidemenu, false);
	                            }
	                        }
	                    } else if (event.which === 3) { // unzoom only happens on
	                        // right-clicks on plot
	                        // unzoom/expand
	                        event.preventDefault();
	
	                        plot.unzoom(1);
	                        plot.refresh();
	                    }
	                }
	
	            };
	        }(this));
	
	        this.ontouchend = (function(plot) {
	            return function(event) {
	                event.preventDefault();
	                //
	            };
	        }(this));
	
	        mx.addEventListener(Mx, "mouseup", this.mouseup, false);
	        // canvas.addEventListener("touchstart", this.ontouchend, false);
	
	        this.mouseclick = (function(plot) {
	            return function(event) {
	                event.preventDefault(); // alway prevent any default browser actions on the plot
	
	                var Gx = plot._Gx;
	                var Mx = plot._Mx;
	
	                // Update Mx event fields
	                mx.ifevent(plot._Mx, event);
	
	                var evt = document.createEvent('Event');
	                evt.initEvent('mclick', true, true);
	                evt.xpos = Mx.xpos;
	                evt.ypos = Mx.ypos;
	                evt.x = Gx.retx;
	                evt.y = Gx.rety;
	                evt.which = event.which; // not always available on all browser
	                if (mx.dispatchEvent(Mx, evt)) {
	                    // currently there isn't a default for mouseclick to cancel
	                }
	                return false;
	            };
	        }(this));
	        mx.addEventListener(Mx, "click", this.mouseclick, false);
	
	        this.mousedblclick = (function(plot) {
	            return function(event) {
	                event.preventDefault(); // alway prevent any default browser actions on the plot
	
	                var Gx = plot._Gx;
	                var Mx = plot._Mx;
	
	                // Update Mx event fields
	                mx.ifevent(plot._Mx, event);
	
	                var evt = document.createEvent('Event');
	                evt.initEvent('mdblclick', true, true);
	                evt.xpos = Mx.xpos;
	                evt.ypos = Mx.ypos;
	                evt.x = Gx.retx;
	                evt.y = Gx.rety;
	                evt.which = event.which; // not always available on all browser
	                if (mx.dispatchEvent(Mx, evt)) {
	                    // currently there isn't a default for mouseclick to cancel
	                }
	                return false;
	            };
	        }(this));
	        mx.addEventListener(Mx, "dblclick", this.mousedblclick, false);
	
	        // PANBAR DRAGGING mouse event handlers:
	        this.dragMouseDownHandler = (function(plot) {
	            return function(event) {
	                var Mx = plot._Mx;
	                var Gx = plot._Gx;
	
	                // Check if event occured in the pan region
	                var inPan = inPanRegion(plot);
	
	                // Event processing
	                if (inPan.inPanRegion) { // Mouse position lies in a pan
	                    // region
	                    event.preventDefault();
	                    if (inPan.command !== ' ') {
	                        var scrollbar;
	                        if (inPan.command === "XPAN") {
	                            scrollbar = Mx.scrollbar_x;
	                        } else if (inPan.command === "YPAN") {
	                            scrollbar = Mx.scrollbar_y;
	                        }
	
	                        var position = {
	                            x: Mx.xpos,
	                            y: Mx.ypos
	                        };
	                        if (scrollbar !== undefined && onScrollbar(position, scrollbar) && event.which === 1) { // On scrollbar, set up
	                            // a DRAG
	                            Gx.panning = {
	                                axis: inPan.command,
	                                xpos: event.screenX, // Use screen-relative
	                                // values here instead
	                                // of div/page-relative
	                                // values
	                                ypos: event.screenY,
	                                xmin: Mx.stk[Mx.level].xmin,
	                                xmax: Mx.stk[Mx.level].xmax,
	                                ymin: Mx.stk[Mx.level].ymin,
	                                ymax: Mx.stk[Mx.level].ymax
	                            };
	                        }
	                    }
	                }
	            };
	        }(this));
	        window.addEventListener("mousedown", this.dragMouseDownHandler, false);
	
	        this.dragMouseMoveHandler = (function(plot) {
	            return function(e) {
	                var Gx = plot._Gx;
	
	                if (Gx.panning !== undefined) { // execute a scrollbar DRAG
	                    try {
	                        drag_scrollbar(plot, Gx.panning.axis, e);
	                    } catch (err) {
	                        console.log("Error: " + err); // TODO Eventually come
	                        // up with better error
	                        // handling here
	                    }
	                }
	            };
	        }(this));
	
	        this.throttledDragOnMouseMove = m.throttle(this._Gx.scroll_time_interval,
	            this.dragMouseMoveHandler);
	
	        window.addEventListener("mousemove", this.throttledDragOnMouseMove,
	            false);
	
	        this.dragMouseUpHandler = (function(plot) {
	            return function(event) {
	                var Gx = plot._Gx;
	
	                if (event.which === 1) {
	                    Gx.panning = undefined; // Panbar dragging completed - clear
	                    // the state variable
	                }
	            };
	        }(this));
	        window.addEventListener("mouseup", this.dragMouseUpHandler, false);
	
	        // TODO this may need to be throttled or debounced
	        this.onresize = (function(plot) {
	            return function(event) {
	                if (mx.checkresize(plot._Mx)) {
	                    plot.refresh();
	                }
	            };
	        }(this));
	
	        // Mouse Wheel logic
	        this.wheelHandler = (function(plot) {
	
	            var Mx = plot._Mx;
	            var Gx = plot._Gx;
	
	            var throttledPan = m.throttle(100, function(inPan) {
	                // Mouse wheel
	                // event over a
	                // panning
	                // region
	
	                var scrollbar;
	                if (inPan.command === "XPAN") {
	                    scrollbar = Mx.scrollbar_x;
	                } else if (inPan.command === "YPAN") {
	                    scrollbar = Mx.scrollbar_y;
	                }
	
	                // For now, vertical mouse scrolling is the only action that
	                // will trigger a pan
	                // Later, we can add horizontal mouse scrolling if we choose
	                if (Gx.wheelscroll_mode_natural) { // Original Sig-Plot
	                    // orientation
	                    scrollbar.action = (event.deltaY < 0 ? mx.SB_WHEELDOWN : mx.SB_WHEELUP);
	                } else { // Inverted/"un-natural" orientation
	                    scrollbar.action = (event.deltaY < 0 ? mx.SB_WHEELUP : mx.SB_WHEELDOWN);
	                }
	
	                scrollbar.step = 0.1 * scrollbar.srange;
	                scrollbar.page = 9 * scrollbar.step;
	
	                // Execute wheel action on the scrollbar
	                mx.scroll(Mx, scrollbar, mx.XW_COMMAND, undefined,
	                    scrollbar);
	
	                // Update the viewbox
	                updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange, inPan.command.slice(0, 1));
	            });
	
	            var throttledZoom = m.throttle(100, function() {
	                var zoomperc = Gx.wheelZoomPercent || 0.2;
	                if (Gx.wheelscroll_mode_natural) {
	                    if (event.deltaY > 0) {
	                        zoomperc = -1 * zoomperc;
	                    }
	                } else { // Inverted/"un-natural" orientation
	                    if (event.deltaY < 0) {
	                        zoomperc = -1 * zoomperc;
	                    }
	                }
	
	                if (Gx.wheelZoom === "x") {
	                    plot.percent_zoom(zoomperc, 1, true);
	                } else if (Gx.wheelZoom === "y") {
	                    plot.percent_zoom(1, zoomperc, true);
	                } else {
	                    plot.percent_zoom(zoomperc, zoomperc, true);
	                }
	            });
	
	            return function(event) {
	                // Update Mx event fields
	                mx.ifevent(Mx, event);
	
	                // Check if event occured in the pan region
	                var inPan = inPanRegion(plot);
	
	                // Event processing
	                if (plot.mouseOnCanvas) {
	                    event.preventDefault();
	
	                    if (inPan.inPanRegion) {
	                        throttledPan(inPan);
	                    } else if (Gx.wheelZoom) {
	                        throttledZoom();
	                    }
	                }
	            };
	        }(this));
	
	        window.addWheelListener(window, this.wheelHandler, false);
	
	        window.addEventListener("resize", this.onresize, false);
	
	        // If multiple plots are in the same window, then it
	        // may be desired to disable keypress behavior and implement
	        // it at a higher-level...by default keypress behavior
	        // is enabled and only works if the mouse if over the plot
	        if (!options.nokeypress) {
	            this.onkeypress = (function(plot) {
	                return function(event) {
	                    var Mx = plot._Mx;
	                    var Gx = plot._Gx;
	                    if (plot.mouseOnCanvas) {
	
	                        if (Mx.widget && (Mx.widget.type === "MENU")) {
	                            return; // The menu absorbs the keypress
	                        }
	
	                        if (Mx.widget && (Mx.widget.type === "ONESHOT")) {
	                            Mx.widget = null;
	                            plot.refresh();
	                            return;
	                        }
	
	                        var keyCode = common.getKeyCode(event);
	
	                        // Since the mouse is in the plot area, send a keypress event
	                        var evt = document.createEvent('Event');
	                        evt.initEvent('plotkeypress', true, true);
	                        evt.keyCode = keyCode;
	                        evt.shiftKey = event.shiftKey;
	                        evt.ctrlKey = event.ctrlKey;
	                        evt.altKey = event.altKey;
	                        evt.metaKey = event.metaKey;
	                        var executeDefault = mx.dispatchEvent(Mx, evt);
	                        if (!executeDefault) {
	                            return;
	                        }
	
	                        // Only respond to keypresses if the mouse is
	                        // in the plot area....
	
	                        if (keyCode === 97) { // 'a'
	                            Gx.iabsc = (Gx.iabsc + 1) % 4;
	                            // It's kinda up in the air if changing the 'specs'
	                            // area should also change the plotting mode itself...
	                            // on one hand, if you have multiple layers with different
	                            // xdeta's then switching the specs area to index mode will
	                            // give you only the index of the baselayer...on the other hand
	                            // the use may only want to change the readout and not the x-axis
	                            // or the plot...for now this is commented out to behave in the same
	                            // manner as SIGPLOT.
	                            //plot.change_settings({
	                            //	index : Gx.iabsc === 1
	                            //});
	                            display_specs(plot);
	                        } else if (keyCode === 108) { // 'l'
	                            plot.change_settings({
	                                legend: !Gx.legend
	                            }); // toggle the legend
	                        } else if (keyCode === 103) { // 'g'
	                            plot.change_settings({
	                                grid: !Gx.grid
	                            }); // toggle the legend
	                        } else if ((keyCode === 98) || (keyCode === 2)) { // 'b' and CTRL-'b'
	                            if (Mx.warpbox) {
	                                if (Mx.warpbox.mode === "box") {
	                                    Mx.warpbox.mode = "horizontal";
	                                } else if (Mx.warpbox.mode === "horizontal") {
	                                    Mx.warpbox.mode = "vertical";
	                                } else {
	                                    Mx.warpbox.mode = "box";
	                                }
	                                mx.redraw_warpbox(Mx);
	                            }
	                        } else if (keyCode === 99) { // 'c'
	                            plot.change_settings({
	                                xcnt: -1 * Gx.cntrls
	                            });
	                        } else if (keyCode === 114) { // 'r'
	                            plot.change_settings({
	                                show_readout: !Gx.show_readout
	                            });
	                        } else if (keyCode === 115) { // 's'
	                            plot.change_settings({
	                                specs: !Gx.specs
	                            });
	                        } else if (keyCode === 120) { // 'x'
	                            sigplot_show_x(plot);
	                        } else if (keyCode === 121) { // 'y'
	                            sigplot_show_y(plot);
	                        } else if (keyCode === 122) { // 'z'
	                            sigplot_show_z(plot);
	                        } else if (keyCode === 116) { // 't'
	                            sigplot_show_timecode(plot);
	                        } else if (keyCode === 109) { // 'm'
	                            if (!Gx.nomenu) {
	                                var evt = document.createEvent('Event');
	                                evt.initEvent('showmenu', true, true);
	                                evt.x = Mx.x;
	                                evt.y = Mx.y;
	                                var executeDefault = mx.dispatchEvent(Mx, evt);
	                                if (executeDefault) {
	                                    sigplot_mainmenu(plot);
	                                }
	                            }
	                        } else if (keyCode === 63) { // '?'
	                            mx.message(Mx, MAIN_HELP);
	                        } else if (keyCode === 102) { // 'f'
	                            mx.fullscreen(Mx);
	                            plot.refresh();
	                        } else if ((keyCode === 9) && (event.ctrlKey)) { // ctrl-i
	                            plot.change_settings({
	                                invert: null
	                            });
	                        } else if (keyCode === 107) { // 'k' show marker
	                            Gx.show_marker = !Gx.show_marker;
	                            plot.redraw();
	
	                        }
	                    }
	                };
	            }(this));
	
	            common.setKeypressHandler(this.onkeypress);
	        }
	
	        return this;
	    };
	
	    // Public methods
	
	    sigplot.Plot.prototype = {
	
	        /**
	         * Add a plugin to the plot
	         *
	         * @param plugin
	         *            the plugin object
	         *
	         * @param zorder
	         *            the zorder for the plugin to render, all plugins render as
	         *            overlays on top of the plot
	         */
	        add_plugin: function(plugin, zorder) {
	            if (zorder === undefined) {
	                zorder = Number.MAX_VALUE;
	            }
	            if (zorder <= 0) {
	                throw "Invalid plugin zorder";
	            }
	
	
	            plugin.init(this);
	
	            var canvas = document.createElement('canvas');
	            canvas.width = this._Mx.canvas.width;
	            canvas.height = this._Mx.canvas.height;
	
	            this._Gx.plugins.push({
	                impl: plugin,
	                zorder: zorder,
	                canvas: canvas
	            });
	
	            this._Gx.plugins.sort(function(a, b) {
	                return (a.zorder - b.zorder);
	            });
	
	
	            this.refresh();
	        },
	
	        /**
	         * Removes a plugin from the plot
	         *
	         * @param plugin
	         *            the plugin object
	         */
	        remove_plugin: function(plugin) {
	            var i = this._Gx.plugins.length;
	            while (i--) {
	                if (this._Gx.plugins[i].impl === plugin) {
	                    if (plugin.dispose) {
	                        plugin.dispose();
	                    }
	                    if (this._Gx.plugins[i].canvas.parentNode) {
	                        this._Gx.plugins[i].canvas.parentNode.removeElement(this._Gx.plugins[i].canvas);
	                    }
	                    this._Gx.plugins.splice(i, 1);
	                }
	            }
	            this._Gx.plugins.sort(function(a, b) {
	                return (a.zorder - b.zorder);
	            });
	
	            this.refresh();
	        },
	
	        /**
	         * Adds a listener to plot events.
	         *
	         * @param what
	         *            the event to listen to mtag = a mouse 'tag' event has
	         *            occurred, mmove = a mouse move event has occurred, mdown =
	         *            a mouse down event has occurred, mup = a mouse up event
	         *            has occurred, showmenu = showmenu even has occurred,
	         *            sigplotexit = an exit plot event has occurred, reread = a
	         *            reread event has occurred, file_deoverlayed = a file has
	         *            been deoverlayed, file_overlayed = a file has been
	         *            overlayed,
	         *
	         * @param callback
	         */
	        addListener: function(what, callback) {
	            var Mx = this._Mx;
	            mx.addEventListener(Mx, what, callback, false);
	        },
	
	        /**
	         * Removes a listener to plot events.
	         *
	         * @param what
	         *            the event that was listned to
	         * @param callback
	         */
	        removeListener: function(what, callback) {
	            var Mx = this._Mx;
	            mx.removeEventListener(Mx, what, callback, false);
	        },
	
	        /**
	         * Change one or more plot settings. For boolean types, passing null
	         * will toggle the setting.
	         *
	         * @param settings
	         *            the settings to change.
	         *
	         * @param {Boolean}
	         *            settings.grid change grid visibility
	         *
	         * @param {Boolean}
	         *            settings.index change index setting
	         *
	         * @param {Boolean}
	         *            settings.all change the plot to show all data
	         *
	         * @param {Boolean}
	         *            settings.show_x_axis
	         *
	         * @param {Boolean}
	         *            settings.show_y_axis
	         *
	         * @param {Boolean}
	         *            settings.show_readout
	         *
	         * @param {Boolean}
	         *            settings.specs
	         *
	         * @param {String}
	         *            settings.xcnt "leftmouse", "continuous", "disable",
	         *            "enable"
	         *
	         * @param {Boolean}
	         *            settings.legend
	         *
	         * @param {Boolean}
	         *            settings.pan
	         *
	         * @param {Boolean}
	         *            settings.cross
	         *
	         * @param {String}
	         *            settings.rubberbox_action
	         *
	         * @param {String}
	         *            settings.rubberbox_mode
	         *
	         * @param {String}
	         *            settings.rightclick_rubberbox_action
	         *
	         * @param {String}
	         *            settings.rightclick_rubberbox_mode
	         *
	         * @param {String}
	         *            settings.wheelscroll_mode_natural
	         *
	         * @param {String}
	         *            settings.cmode
	         *
	         * @param {String}
	         *            settings.phunits
	         */
	        change_settings: function(settings) {
	            var Gx = this._Gx;
	            var Mx = this._Mx;
	
	            for (var i = 0; i < Gx.lyr.length; i++) {
	                Gx.lyr[i].change_settings(settings);
	            }
	
	            if (settings.grid !== undefined) {
	                if (settings.grid === null) {
	                    Gx.grid = !Gx.grid;
	                } else {
	                    Gx.grid = settings.grid;
	                }
	            }
	
	            if (settings.gridBackground !== undefined) {
	                Gx.gridBackground = settings.gridBackground;
	            }
	
	            if (settings.gridStyle !== undefined) {
	                Gx.gridStyle = settings.gridStyle;
	            }
	
	            if (settings.wheelZoom !== undefined) {
	                Gx.wheelZoom = settings.wheelZoom;
	            }
	
	            if (settings.wheelZoomPercent !== undefined) {
	                Gx.wheelZoomPercent = settings.wheelZoomPercent;
	            }
	
	            if (settings.autol !== undefined) {
	                Gx.autol = settings.autol;
	            }
	
	            if ((settings.index !== undefined) && (settings.index !== Gx.index)) {
	                if (settings.index === null) {
	                    Gx.index = !Gx.index;
	                } else {
	                    Gx.index = settings.index;
	                }
	
	                // the original sigplot.for fails
	                // to do this so that the specs area
	                // has the correct setting.
	                if ((Gx.index) && (Gx.iabsc !== 1)) {
	                    Gx.iabsc = 1;
	                } else if ((!Gx.index) && (Gx.iabsc === 1)) {
	                    Gx.iabsc = 0;
	                }
	
	                var xmin;
	                var xmax;
	                scale_base(this, {
	                    get_data: false
	                }, xmin, xmax);
	
	                // like sigplot, undo all zoom levels
	                this.unzoom();
	            }
	
	            if (settings.all !== undefined) {
	                if (settings.all === null) {
	                    Gx.all = !Gx.all;
	                } else {
	                    Gx.all = settings.all;
	                }
	            }
	
	            if (settings.show_x_axis !== undefined) {
	                if (settings.show_x_axis === null) {
	                    Gx.show_x_axis = !Gx.show_x_axis;
	                } else {
	                    Gx.show_x_axis = settings.show_x_axis;
	                }
	                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);
	            }
	
	            if (settings.show_y_axis !== undefined) {
	                if (settings.show_y_axis === null) {
	                    Gx.show_y_axis = !Gx.show_y_axis;
	                } else {
	                    Gx.show_y_axis = settings.show_y_axis;
	                }
	                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);
	            }
	
	            if (settings.show_readout !== undefined) {
	                if (settings.show_readout === null) {
	                    Gx.show_readout = !Gx.show_readout;
	                } else {
	                    Gx.show_readout = settings.show_readout;
	                }
	                Gx.specs = (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout);
	            }
	
	            if (settings.specs !== undefined) {
	                if (settings.specs === null) {
	                    Gx.specs = !Gx.specs;
	                } else {
	                    Gx.specs = settings.specs;
	                }
	                if (Gx.specs) {
	                    Gx.show_x_axis = true;
	                    Gx.show_y_axis = true;
	                    Gx.show_readout = true;
	                } else {
	                    Gx.show_x_axis = false;
	                    Gx.show_y_axis = false;
	                    Gx.show_readout = false;
	                }
	            }
	
	            if (settings.xcnt !== undefined) {
	                if (settings.xcnt === "leftmouse") {
	                    Gx.cntrls = 1;
	                } else if (settings.xcnt === "continuous") {
	                    Gx.cntrls = 2;
	                } else if ((settings.xcnt === "disable") && (Gx.cntrls > 0)) {
	                    Gx.cntrls = -1 * Gx.cntrls;
	                } else if ((settings.xcnt === "enable") && (Gx.cntrls < 0)) {
	                    Gx.cntrls = -1 * Gx.cntrls;
	                } else {
	                    Gx.cntrls = settings.xcnt;
	                }
	            }
	
	            if (settings.legend !== undefined) {
	                if (settings.legend === null) {
	                    Gx.legend = !Gx.legend;
	                } else {
	                    Gx.legend = settings.legend;
	                }
	            }
	
	            if (settings.pan !== undefined) {
	                if (settings.pan === null) {
	                    Gx.pan = !Gx.pan;
	                } else {
	                    Gx.pan = settings.pan;
	                }
	            }
	
	            if (settings.cross !== undefined) {
	                if (settings.cross === null) { // catch null or undefined here
	                    Gx.cross = !Gx.cross;
	                } else {
	                    Gx.cross = settings.cross;
	                }
	                if (!Gx.cross) {
	                    if (Gx.cross_xpos !== undefined) {
	                        mx.rubberline(Mx, Gx.cross_xpos, Mx.t, Gx.cross_xpos,
	                            Mx.b);
	                    }
	                    if (Gx.cross_ypos !== undefined) {
	                        mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r,
	                            Gx.cross_ypos);
	                    }
	                    Gx.cross_xpos = undefined;
	                    Gx.cross_ypos = undefined;
	                } else {
	                    Gx.cross_xpos = undefined;
	                    Gx.cross_ypos = undefined;
	                    if ((!Mx.warpbox) && (this.mouseOnCanvas)) {
	                        draw_crosshairs(this);
	                    }
	                }
	            }
	
	            if (settings.cmode !== undefined) {
	                changemode(this, settings.cmode);
	            }
	
	            if (settings.phunits !== undefined) {
	                changephunits(this, settings.phunits);
	            }
	
	            if (settings.rubberbox_action !== undefined) {
	                Gx.default_rubberbox_action = settings.rubberbox_action;
	            }
	
	            if (settings.rubberbox_mode !== undefined) {
	                Gx.default_rubberbox_mode = settings.rubberbox_mode;
	            }
	
	            if (settings.rightclick_rubberbox_action !== undefined) {
	                Gx.default_rightclick_rubberbox_action = settings.rightclick_rubberbox_action;
	            }
	
	            if (settings.rightclick_rubberbox_mode !== undefined) {
	                Gx.default_rightclick_rubberbox_mode = settings.rightclick_rubberbox_mode;
	            }
	
	            if (settings.wheelscroll_mode_natural !== undefined) {
	                Gx.wheelscroll_mode_natural = settings.wheelscroll_mode_natural;
	            }
	
	            if (settings.colors !== undefined) {
	                if (!settings.colors.fg) {
	                    settings.colors.fg = Mx.fg;
	                }
	                if (!settings.colors.bg) {
	                    settings.colors.bg = Mx.bg;
	                }
	                mx.setbgfg(Mx, settings.colors.bg, settings.colors.fg, Mx.xi);
	            }
	
	            if (settings.cmap !== undefined) {
	                if (settings.cmap === null) {
	                    // default
	                    if (Gx.cmode === 2) {
	                        Gx.cmap = 2; // wheel
	                    } else {
	                        Gx.cmap = 1; // ramp
	                    }
	                } else {
	                    Gx.cmap = settings.cmap; // TODO support string lookup
	                }
	
	                setup_cmap(this, Gx.cmap);
	            }
	
	            if (settings.yinv !== undefined) {
	                if (settings.yinv) {
	                    Mx.origin = 4;
	                } else {
	                    Mx.origin = 1;
	                }
	            }
	
	            if (settings.rasterSmoothing !== undefined) {
	                if (settings.rasterSmoothing === null) {
	                    Gx.rasterSmoothing = !Gx.rasterSmoothing;
	                } else {
	                    Gx.rasterSmoothing = settings.rasterSmoothing;
	                }
	            }
	
	            if (settings.fillStyle !== undefined) {
	                Gx.fillStyle = settings.fillStyle;
	            }
	
	            if (settings.invert !== undefined) {
	                if (settings.invert === null) {
	                    mx.invertbgfg(Mx);
	                } else if (settings.invert === true) {
	                    mx.setbgfg(this, "white", "black");
	                } else {
	                    mx.setbgfg(this, "black", "white");
	                }
	            }
	
	            if (settings.nomenu !== undefined) {
	                if (settings.nomenu === null) {
	                    Gx.nomenu = !Gx.nomenu;
	                } else {
	                    Gx.nomenu = settings.nomenu;
	                }
	            }
	
	            if (settings.ymax !== undefined) {
	                if (settings.ymax === null) {
	                    Gx.autoy = Gx.autoy | 2;
	                    Gx.panymax = undefined;
	                    scale_base(this, {});
	                    Gx.ymax = Gx.panymax;
	                } else {
	                    // autoy must be set correctly before calling updateViewbox
	                    Gx.autoy = Gx.autoy & 0xD;
	                    Gx.ymax = settings.ymax;
	                    updateViewbox(this, Mx.stk[0].ymin, settings.ymax, "Y");
	                }
	            }
	
	            if (settings.ymin !== undefined) {
	                if (settings.ymin === null) {
	                    Gx.autoy = Gx.autoy | 1;
	                    Gx.panymin = undefined;
	                    scale_base(this, {});
	                    Gx.ymin = Gx.panymin;
	                } else {
	                    // autoy must be set correctly before calling updateViewbox
	                    Gx.autoy = Gx.autoy & 0xE;
	                    Gx.ymin = settings.ymin;
	                    updateViewbox(this, settings.ymin, Mx.stk[0].ymax, "Y");
	                }
	            }
	
	            // Check autoy setting after checking ymin/ymax
	            // so that explicitly setting autoy will override
	            // implicit settings via ymin/ymax
	            if (settings.autoy !== undefined) {
	                Gx.autoy = settings.autoy;
	                if (((Gx.autoy & 1) !== 0)) {
	                    Gx.ymin = undefined;
	                }
	                if (((Gx.autoy & 2) !== 0)) {
	                    Gx.ymax = undefined;
	                }
	            }
	
	            if (settings.xmin !== undefined) {
	                updateViewbox(this, settings.xmin, Mx.stk[0].xmax, "X");
	            }
	
	            if (settings.xmax !== undefined) {
	                updateViewbox(this, Mx.stk[0].xmin, settings.xmax, "X");
	            }
	
	            if (settings.zmin !== undefined) {
	                Gx.zmin = settings.zmin;
	                Gx.autoz = (Gx.autoz & 2);
	            }
	
	            if (settings.zmax !== undefined) {
	                Gx.zmax = settings.zmax;
	                Gx.autoz = (Gx.autoz & 1);
	            }
	
	            if (settings.autoz !== undefined) {
	                Gx.autoz = settings.autoz;
	                if (((Gx.autoz & 1) !== 0)) {
	                    Gx.zmin = undefined;
	                }
	                if (((Gx.autoz & 2) !== 0)) {
	                    Gx.zmax = undefined;
	                }
	            }
	
	            if (settings.note !== undefined) {
	                Gx.note = settings.note;
	            }
	
	            this.refresh();
	            if (settings.pan !== undefined) { // refactor - new code to handle
	                // disappearing specs
	                display_specs(this);
	            }
	        },
	
	        /**
	         * Reread all files and refresh the plot.
	         */
	        reread: function() {
	            var Gx = this._Gx;
	            var oldLayerData = [];
	            for (var k = 0; k < Gx.lyr.length; k++) { // make a copy of layer
	                // data before
	                // destroying Gx.lyr
	                // with the deoverlay
	                oldLayerData[k] = Gx.lyr[k];
	            }
	
	            var origHCB = Gx.HCB.slice();
	            this.deoverlay();
	            for (var i = 0; i < origHCB.length; i++) {
	                this.overlay_bluefile(origHCB[i]);
	            }
	
	            // propagate old layer attributes to re-read layers
	            for (var j = 0; j < Gx.lyr.length; j++) {
	                // TODO Assumes indices of old Gx.lyr and new Gx.lyr will match
	                // up correctly - should we instead use hcb and name to identify
	                Gx.lyr[j].symbol = oldLayerData[j].symbol;
	                Gx.lyr[j].radius = oldLayerData[j].radius;
	                // TODO re-copy other things like line type???
	            }
	            this.refresh();
	
	            // Notify listeners that a reread was performed
	            var evt = document.createEvent('Event');
	            evt.initEvent('reread', true, true);
	            mx.dispatchEvent(this._Mx, evt);
	        },
	
	        /**
	         * Placeholder for cleanup logic.
	         */
	        cleanup: function() {
	            // TODO not sure what we really want to do here yet
	        },
	
	        /**
	         * Reload data without adjusting other aspects about a plot
	         *
	         * @param {Number} n
	         *            the layer to push data into
	         * @param {Number[]} data
	         *            data to push
	         * @param {Object} hdrmod
	         *            optional changes to the file header
	         */
	        reload: function(n, data, hdrmod, rsync) {
	            var Mx = this._Mx;
	            var Gx = this._Gx;
	            if ((n < 0) || (n >= Gx.lyr.length)) {
	                return;
	            }
	
	            if (Gx.lyr[n].reload === undefined) {
	                return;
	            }
	
	            var xbnds = Gx.lyr[n].reload(data, hdrmod);
	
	            if (Mx.level === 0) {
	                // Unlike push(), always call scale_base
	                // when reload is invoked
	                scale_base(this, {
	                    get_data: false
	                }, xbnds.xmin, xbnds.xmax);
	            }
	
	            if (rsync) {
	                this._refresh();
	            } else {
	                this.refresh();
	            }
	
	        },
	
	        rescale: function() {
	            var Mx = this._Mx;
	
	            if (Mx.level === 0) {
	                scale_base(this, {
	                    get_data: false
	                }, undefined, undefined);
	            }
	
	            this.refresh();
	        },
	
	        /**
	         * Push data into a layer that was created with overlay_pipe
	         *
	         * @param {Number} n
	         *            the layer to push data into
	         * @param {Number[]} data
	         *            data to push
	         * @param {Object} hdrmod
	         *            optional changes to the file header
	         * @param {boolean} [sync=false]
	         *            optional dispatch onpipewrite syncronously
	         * @param {boolean} [rsync=false]
	         *            optional dispatch refresh syncronously
	         */
	        push: function(n, data, hdrmod, sync, rsync) {
	            var Mx = this._Mx;
	            var Gx = this._Gx;
	            if ((n < 0) || (n >= Gx.lyr.length)) {
	                return;
	            }
	
	            if (Gx.lyr[n].push === undefined) {
	                return;
	            }
	
	            var rescale = Gx.lyr[n].push(data, hdrmod, sync);
	
	            if ((Mx.level === 0) && rescale) {
	                scale_base(this, {
	                    get_data: false
	                });
	            }
	
	            if (rsync) {
	                this._refresh();
	            } else {
	                this.refresh();
	            }
	        },
	
	        /**
	         * Create a plot layer backed by an array
	         *
	         * @param filname
	         * @param data
	         *            {Number[]} data to plot
	         * @param overrides
	         *            optional bluefile header overrides
	         * @param layerType
	         */
	        overlay_array: function(data, overrides, layerOptions) {
	            m.log.debug("Overlay array");
	            var hcb = m.initialize(data, overrides);
	            return this.overlay_bluefile(hcb, layerOptions);
	        },
	
	        overlay_pipe: function(overrides, layerOptions) {
	            m.log.debug("Overlay pipe");
	            if (!overrides) {
	                overrides = {};
	            }
	            overrides.pipe = true;
	            var hcb = m.initialize(null, overrides);
	            //console.log("pipe filename: "+hcb.file_name);
	            return this.overlay_bluefile(hcb, layerOptions);
	        },
	
	        overlay_websocket: function(wsurl, overrides, layerOptions) {
	            m.log.debug("Overlay websocket: " + wsurl);
	            var ws = new WebSocket(wsurl, "plot-data");
	            ws.binaryType = "arraybuffer";
	
	            var plot = this;
	            if (!overrides) {
	                overrides = {};
	            }
	            overrides.pipe = true;
	            var hcb = m.initialize(null, overrides);
	            hcb.ws = ws;
	
	            var layer_n = this.overlay_bluefile(hcb, layerOptions);
	
	            ws.onopen = function(evt) {};
	
	            ws.onmessage = (function(theSocket) {
	                return function(evt) {
	                    if (evt.data instanceof ArrayBuffer) {
	                        var data = hcb.createArray(evt.data);
	                        plot.push(layer_n, data);
	                    } else if (typeof evt.data === "string") {
	                        var Gx = plot._Gx;
	                        var hdr = Gx.lyr[layer_n].hcb;
	                        if (!hdr) {
	                            m.log.warning("Couldn't find header for layer " + layer_n);
	                        }
	
	                        var newHdr = JSON.parse(evt.data);
	                        plot.push(layer_n, [], newHdr);
	                    }
	                };
	            })(ws);
	
	            return layer_n;
	        },
	
	        /**
	         * Create a plot layer from an HREF that points to a BLUEFILE
	         *
	         * @param {String}
	         *            href the url to the bluefile
	         * @param [onload]
	         *            callback to be called when the file has been loaded
	         */
	        overlay_href: function(href, onload, layerOptions) {
	            m.log.debug("Overlay href: " + href);
	            try {
	                this.show_spinner();
	
	                var handleHeader = (function(plot, onload) {
	                    return function(hcb) {
	                        try {
	                            if (!hcb) {
	                                alert("Failed to load data");
	                            } else {
	                                var i = plot.overlay_bluefile(hcb, layerOptions);
	                                if (onload) {
	                                    onload(hcb, i);
	                                }
	                            }
	                        } finally {
	                            plot.hide_spinner();
	                        }
	                    };
	                }(this, onload));
	
	                var br = new bluefile.BlueFileReader();
	                br.read_http(href, handleHeader);
	            } catch (error) {
	                console.log(error);
	                alert("Failed to load data");
	                this.hide_spinner();
	            }
	        },
	
	        show_spinner: function() {
	            if (!this._Gx.spinner) {
	                SPINNER_OPTS.color = this._Mx.xwfg;
	                this._Gx.spinner = new Spinner(SPINNER_OPTS).spin(this._Gx.parent);
	            }
	        },
	
	        hide_spinner: function() {
	            if (this._Gx.spinner) {
	                this._Gx.spinner.stop();
	            }
	            this._Gx.spinner = undefined;
	        },
	
	        add_layer: function(layer) {
	            var Gx = this._Gx;
	            var Mx = this._Mx;
	
	            // Notify listeners that a file was overlayed
	            var evt = document.createEvent('Event');
	            evt.initEvent('lyradd', true, true);
	            evt.index = Gx.lyr.length; // the new index of the layer
	            evt.name = layer.name; // the name of the layer
	            evt.layer = layer;
	            var executeDefault = mx.dispatchEvent(Mx, evt);
	            if (executeDefault) {
	                Gx.lyr.push(layer);
	            }
	        },
	
	        get_layer: function(n) {
	            var Gx = this._Gx;
	            if ((n >= 0) && (n < Gx.lyr.length)) {
	                return Gx.lyr[n];
	            } else {
	                return null;
	            }
	        },
	
	        /**
	         * Create a plot layer backed by a bluefile header
	         *
	         * @param hcb
	         *            {BlueHeader} an opened BlueHeader file
	         * @returns the index of the new layer
	         */
	        overlay_bluefile: function(hcb, layerOptions) {
	            m.log.debug("Overlay bluefile: " + hcb.file_name);
	            var Mx = this._Mx;
	            var Gx = this._Gx;
	            var size = 0;
	
	            layerOptions = layerOptions || {};
	
	            var basefiles = (Gx.HCB.length === 0);
	
	            Gx.HCB.push(hcb);
	
	            if (Gx.HCB.length === 1) {
	                basefile(this, true);
	            }
	
	            var newlayer = Gx.lyr.length;
	
	            if (layerOptions.layerType === undefined) {
	                if (hcb["class"] === 1) {
	                    Layer1D.overlay(this, hcb, layerOptions);
	                } else if (hcb["class"] === 2) {
	                    Layer2D.overlay(this, hcb, layerOptions);
	                }
	            } else {
	                if (layerOptions.layerType === "1D") {
	                    Layer1D.overlay(this, hcb, layerOptions);
	                } else if (layerOptions.layerType === "2D") {
	                    Layer2D.overlay(this, hcb, layerOptions);
	                } else {
	                    layerOptions.layerType.overlay(this, hcb, layerOptions);
	                }
	            }
	
	            // TODO - do we want to alert like the XM plot did?
	            //if (!Gx.all && size > Gx.bufmax && Gx.HCB.length == 1) {
	            // alert("Plot truncated to buffer size. Use panning or /ALL
	            // switch");
	            //}
	            // The original code has a bug here. Fixed by moving changemode
	            // outside of
	            // the !basefiles check.
	            // You can recreate with SIGPLOT ,,, IR
	            // And then loading a file.
	            changemode(this, Gx.cmode);
	
	            if (!basefiles && !layerOptions.expand) {
	                for (var n = newlayer; n < Gx.lyr.length; n++) {
	                    draw_layer(this, n);
	                }
	            } else {
	                if (Gx.HCB.length === 0) { // TODO dead code that cannot be reached
	                    basefile(this, false);
	                } else {
	                    Gx.basemode = Gx.cmode;
	                    var xmin;
	                    var xmax;
	                    if ((Gx.autox && 1) === 0) {
	                        xmin = Gx.xmin;
	                    }
	                    if ((Gx.autox && 2) === 0) {
	                        xmax = Gx.xmin;
	                    }
	                    scale_base(this, {
	                        get_data: true
	                    }, xmin, xmax);
	                    Mx.level = 0;
	                    if ((Gx.autox && 1) !== 0) {
	                        Gx.xmin = Mx.stk[0].xmin;
	                    }
	                    if ((Gx.autox && 2) !== 0) {
	                        Gx.xmax = Mx.stk[0].xmax;
	                    }
	                    if ((Gx.autoy && 1) !== 0) {
	                        Gx.ymin = Mx.stk[0].ymin;
	                    }
	                    if ((Gx.autoy && 2) !== 0) {
	                        Gx.ymax = Mx.stk[0].ymax;
	                    }
	                    Mx.resize = true;
	                    if (Gx.lyr[0].preferred_origin) {
	                        Mx.origin = Gx.lyr[0].preferred_origin;
	                    } else {
	                        Mx.origin = 1;
	                    }
	                }
	            }
	            form_plotnote(this);
	            this.refresh();
	
	            return (Gx.HCB.length - 1);
	        },
	
	        /**
	         * Load one or more files.
	         *
	         * @param {File[]}
	         *            a list of files to plot
	         */
	        load_files: function(files, layerType) {
	            var onload = (function(plot) {
	                return function(hdr) {
	                    plot.overlay_bluefile(hdr, layerType);
	                };
	            })(this);
	
	            for (var i = 0; i < files.length; i++) {
	                var f = files[i];
	                var br = new bluefile.BlueFileReader();
	                br.read(f, onload);
	            }
	        },
	
	        /**
	         * Remove layers.
	         *
	         * @param [index]
	         *            the layer to remove, if not provided all layers are
	         *            removed. Negative indices can be used to remove layers
	         *            from the back of the layer stack.
	         */
	        deoverlay: function(index) {
	            var Gx = this._Gx;
	            var Mx = this._Mx;
	
	            if (Gx.HCB.length > 0) {
	                if (index === undefined) {
	                    for (var n = Gx.HCB.length - 1; n >= 0; n--) {
	                        this.remove_layer(n);
	                    }
	                } else if (index < 0) {
	                    var n = Gx.HCB.length + index;
	                    if (n < 0) {
	                        return;
	                    }
	                    this.remove_layer(n);
	                } else if (index < Gx.HCB.length) {
	                    this.remove_layer(index);
	                }
	            }
	            if (Gx.lyr.length === 0) {
	                basefile(this, false);
	                scale_base(this, {});
	            }
	        },
	
	        /**
	         * Remove a layer.
	         *
	         * @param index
	         *            the layer to remove
	         */
	        remove_layer: function(index) {
	            var Gx = this._Gx;
	
	            var fileName = "";
	            var HCB = null;
	
	            if ((index >= 0) && (index < Gx.HCB.length)) {
	                fileName = Gx.HCB[index].file_name;
	                // TODO if (Gx.modsource > 0) {
	                //	
	                // }
	                HCB = Gx.HCB[index];
	                Gx.HCB[index] = null;
	                for (var n = index; n < Gx.HCB.length - 1; n++) {
	                    Gx.HCB[n] = Gx.HCB[n + 1];
	                }
	                Gx.HCB.length -= 1;
	            }
	
	            for (var n = Gx.lyr.length - 1; n >= 0; n--) {
	                if (Gx.lyr[n].hcb === HCB) {
	                    delete_layer(this, n);
	                }
	            }
	            form_plotnote(this);
	            this.refresh();
	
	            // Notify listeners that a file has been deoverlayed
	            var evt = document.createEvent('Event');
	            evt.initEvent('file_deoverlayed', true, true);
	            if (fileName !== "") {
	                evt.fileName = fileName; // The fileName that was
	            }
	            // de-overlayed
	            mx.dispatchEvent(this._Mx, evt);
	        },
	
	        /**
	         * Zoom onto a given pixel range.
	         */
	        pixel_zoom: function(x1, y1, x2, y2, continuous) {
	            var r1 = pixel_to_real(this, x1, y1);
	            var r2 = pixel_to_real(this, x2, y2);
	
	            this.zoom(r1, r2, continuous);
	        },
	
	        percent_zoom: function(xperc, yperc, continuous) {
	            var Mx = this._Mx;
	            var Gx = this._Gx;
	
	            var xadj = 0;
	            if (Math.abs(xperc) < 1) {
	                xadj = Math.abs(Mx.stk[Mx.level].xmax - Mx.stk[Mx.level].xmin);
	                xadj = (xadj * xperc) / 2;
	            }
	
	            var yadj = 0;
	            if (Math.abs(yperc) < 1) {
	                yadj = Math.abs(Mx.stk[Mx.level].ymax - Mx.stk[Mx.level].ymin);
	                yadj = (yadj * yperc) / 2;
	            }
	
	            var ul = {
	                x: Math.max(Mx.stk[Mx.level].xmin + xadj, Gx.panxmin),
	                y: Math.max(Mx.stk[Mx.level].ymin + yadj, Gx.panymin)
	            };
	            var lr = {
	                x: Math.min(Mx.stk[Mx.level].xmax - xadj, Gx.panxmax),
	                y: Math.min(Mx.stk[Mx.level].ymax - yadj, Gx.panymax)
	            };
	
	            this.zoom(ul, lr, continuous);
	        },
	
	        /**
	         * Zoom onto a given region.
	         *
	         * @param ul
	         *            the uppler left corner
	         * @param {Number}
	         *            ul.x the upper left x pos in real plot value
	         * @param {Number}
	         *            ul.y the upper left y pos in real plot values
	         *
	         * @param lr
	         *            the lower right corner
	         * @param {Number}
	         *            lr the lower right x pos in real plot value
	         * @param {Number}
	         *            lr the lower right y pos in real plot values
	         *
	         * @param continuous
	         *            enter continuous zoom mode.  This will create a
	         *            new if you are on level 0, but stay on the same level
	         *            otherwise
	         */
	        zoom: function(ul, lr, continuous) {
	            var Mx = this._Mx;
	            var Gx = this._Gx;
	
	            if (Mx.level >= 9) { // currently only allow 10 zooms
	                return;
	            }
	
	            if (ul.x === undefined) {
	                ul.x = Mx.stk[Mx.level].xmin;
	            }
	            if (ul.y === undefined) {
	                ul.y = Mx.stk[Mx.level].ymin;
	            }
	            if (lr.x === undefined) {
	                lr.x = Mx.stk[Mx.level].xmax;
	            }
	            if (lr.y === undefined) {
	                lr.y = Mx.stk[Mx.level].ymax;
	            }
	
	            if (lr.x < ul.x) {
	                var xtmp = lr.x;
	                lr.x = ul.x;
	                ul.x = xtmp;
	            }
	            if (lr.y < ul.y) {
	                var ytmp = lr.y;
	                lr.y = ul.y;
	                ul.y = ytmp;
	            }
	
	            var zstk = {};
	
	            // xscl/yscl are reset in sigplot.refresh
	            zstk.xscl = Mx.stk[Mx.level].xscl;
	            zstk.yscl = Mx.stk[Mx.level].yscl;
	
	            zstk.xmin = ul.x; // real world val at x1(origin=1,4) or
	            // x2(origin=2,4)
	            zstk.xmax = lr.x; // real world val at x2(origin=1,4) or
	            // x1(origin=2,4)
	            zstk.ymin = ul.y; // real world val at y2(origin=1,2) or
	            // y1(origin=3,4)
	            zstk.ymax = lr.y; // real world val at y1(origin=1,2) or
	            // y2(origin=3,4)
	            if (Gx.index) {
	                zstk.xmin = Math.min(zstk.xmin / Gx.xdelta);
	                zstk.xmax = Math.min(zstk.xmax / Gx.xdelta);
	            }
	
	            if (!continuous || (!Gx.inContinuousZoom)) {
	                // We aren't yet in continuous zoom mode
	                // so create a new level
	                Mx.stk.push(zstk);
	                Mx.level = Mx.stk.length - 1;
	            } else {
	                // Once in continuous zoom mode update the current level
	                Mx.stk[Mx.level] = zstk;
	            }
	            Gx.inContinuousZoom = continuous;
	
	            this.inZoom = true; // prevent recursive zooms
	            var evt = document.createEvent('Event');
	            evt.initEvent('zoom', true, true);
	            evt.level = Mx.level;
	            evt.inContinuousZoom = Gx.inContinuousZoom;
	            evt.xmin = Mx.stk[Mx.level].xmin;
	            evt.ymin = Mx.stk[Mx.level].ymin;
	            evt.xmax = Mx.stk[Mx.level].xmax;
	            evt.ymax = Mx.stk[Mx.level].ymax;
	            mx.dispatchEvent(Mx, evt); // TODO should we allow zoom to be cancelled?
	            this.inZoom = false;
	
	            this.refresh();
	        },
	
	        /**
	         * Unzoom one or more levels.
	         *
	         * @param [levels]
	         *            the number of levels to unzoom, if not provided unzoom
	         *            all.
	         */
	        unzoom: function(levels) {
	            var Mx = this._Mx;
	            var Gx = this._Gx;
	
	            if (Mx.level === 0) {
	                return;
	            }
	
	            if (!levels) {
	                levels = Mx.stk.length;
	            }
	
	            while (levels > 0) {
	                if (Mx.level === 0) {
	                    break;
	                }
	                Mx.stk.pop();
	                Mx.level = Mx.stk.length - 1;
	                levels -= 1;
	            }
	
	            // If we are back at level 0, then
	            // rescale
	            if (Mx.level === 0) {
	                this.rescale();
	            }
	
	            // After any unzooms you can no longer remain in
	            // continuous zoom
	            Gx.inContinuousZoom = false;
	
	            this.inZoom = true; // prevent recursive zoom
	            // Send the event to listeners
	            var evt = document.createEvent('Event');
	            evt.initEvent('unzoom', true, true);
	            evt.level = Mx.level;
	            evt.xmin = Mx.stk[Mx.level].xmin;
	            evt.ymin = Mx.stk[Mx.level].ymin;
	            evt.xmax = Mx.stk[Mx.level].xmax;
	            evt.ymax = Mx.stk[Mx.level].ymax;
	            mx.dispatchEvent(Mx, evt);
	            this.inZoom = false;
	
	            this.refresh();
	        },
	
	        /**
	         * Register this plot to mimic zoom/unzoom of other plot
	         *
	         * @param other
	         *     the other plot to mimic
	         *
	         * @param mask
	         *     the set of event to respond to
	         *
	         * @param mask.zoom
	         *     if true, respond to zoom events
	         *
	         * @param mask.xzoom
	         *     if true, respond to zoom events for the x-axis only
	         *
	         * @param mask.yzoom
	         *     if true, respond to zoom events for the y-axis only
	         *
	         * @param mask.unzoom
	         *     if true, respond to unzoom events
	         *
	         * @param mask.pan
	         *     if true, respond to pan events
	         *
	         * @param mask.xpan
	         *     if true, respond to pan events for the x-axis only
	         *
	         * @param mask.ypan
	         *     if true, respond to pan events for the y-axis only
	         */
	        mimic: function(other, mask) {
	            var self = this;
	
	            if (!mask) {
	                throw "mimic must be called with at least one event mask";
	            }
	
	            if (mask.zoom) {
	                other.addListener("zoom", function(event) {
	                    if (self.inZoom) {
	                        return;
	                    }
	                    self.zoom({
	                            x: event.xmin,
	                            y: event.ymin
	                        }, {
	                            x: event.xmax,
	                            y: event.ymax
	                        },
	                        event.inContinuousZoom);
	                });
	            } else if (mask.xzoom) {
	                other.addListener("zoom", function(event) {
	                    if (self.inZoom) {
	                        return;
	                    }
	                    self.zoom({
	                            x: event.xmin,
	                            y: undefined
	                        }, {
	                            x: event.xmax,
	                            y: undefined
	                        },
	                        event.inContinuousZoom);
	                });
	            } else if (mask.yzoom) {
	                other.addListener("zoom", function(event) {
	                    if (self.inZoom) {
	                        return;
	                    }
	                    self.zoom({
	                            x: undefined,
	                            y: event.ymin
	                        }, {
	                            x: undefined,
	                            y: event.ymax
	                        },
	                        event.inContinuousZoom);
	                });
	            }
	
	            if (mask.unzoom) {
	                other.addListener("unzoom", function(event) {
	                    if (self.inZoom) {
	                        return;
	                    }
	                    if (event.level < self._Mx.level) {
	                        self.unzoom(self._Mx.level - event.level);
	                    }
	                });
	            }
	
	            if (mask.pan || mask.xpan) {
	                other.addListener("xpan", function(event) {
	                    if (self.inPan) {
	                        return;
	                    }
	                    updateViewbox(self, event.xmin, event.xmax, "X");
	                });
	            }
	
	            if (mask.pan || mask.ypan) {
	                other.addListener("ypan", function(event) {
	                    if (self.inPan) {
	                        return;
	                    }
	                    updateViewbox(self, event.ymin, event.ymax, "Y");
	                });
	            }
	
	        },
	
	        // TODO - do we want an unmimic?
	
	        /**
	         * Like refresh, but doesn't rerender data
	         *
	         */
	        redraw: function() {
	            var Gx = this._Gx;
	            var Mx = this._Mx;
	            var ctx = Mx.canvas.getContext("2d");
	
	            if (!Gx.plotData.valid) {
	                this.refresh();
	            } else {
	                ctx.drawImage(Gx.plotData,
	                    Mx.l - 1,
	                    Mx.t - 1, (Mx.r - Mx.l) + 2, (Mx.b - Mx.t) + 2,
	                    Mx.l - 1,
	                    Mx.t - 1, (Mx.r - Mx.l) + 2, (Mx.b - Mx.t) + 2
	                );
	
	                draw_plugins(this);
	
	                Gx.cross_xpos = undefined;
	                Gx.cross_ypos = undefined;
	                if ((!Mx.warpbox) && (this.mouseOnCanvas)) {
	                    draw_crosshairs(this);
	                }
	
	                if (Gx.always_show_marker || Gx.show_marker) {
	                    draw_marker(this);
	                }
	            }
	        },
	
	        /**
	         * Refresh the entire plot
	         */
	        refresh: function() {
	            var self = this;
	            mx.render(this._Mx, function() {
	                self._refresh();
	            });
	        },
	
	        enable_listeners: function() {
	            var Mx = this._Mx;
	            mx.addEventListener(Mx, "mousedown", this.onmousedown, false);
	            mx.addEventListener(Mx, "mousemove", this.throttledOnMouseMove, false);
	            window.addEventListener("mouseup", Mx.onmouseup, false);
	            window.addEventListener("keydown", Mx.onkeydown, false);
	            window.addEventListener("keyup", Mx.onkeyup, false);
	            window.addEventListener("resize", this.onresize, false);
	            document.addEventListener("mouseup", this.docMouseUp, false);
	            mx.addEventListener(Mx, "mouseup", this.mouseup, false);
	            window.addEventListener("mousedown", this.dragMouseDownHandler, false);
	            window.addEventListener("mousemove", this.throttledDragOnMouseMove, false);
	            window.addEventListener("mouseup", this.dragMouseUpHandler, false);
	            window.addEventListener("wheel", this.wheelHandler, false);
	            window.addEventListener("mousewheel", this.wheelHandler, false);
	            window.addEventListener("DOMMouseScroll", this.wheelHandler, false);
	            window.addEventListener("keypress", this.onkeypress, false);
	        },
	
	        disable_listeners: function() {
	            var Mx = this._Mx;
	
	            mx.removeEventListener(Mx, "mousedown", this.onmousedown, false);
	            mx.removeEventListener(Mx, "mousemove", this.throttledOnMouseMove,
	                false);
	            mx.removeEventListener(Mx, "mouseup", this.mouseup, false);
	            window.removeEventListener("mouseup", Mx.onmouseup, false);
	            window.removeEventListener("keydown", Mx.onkeydown, false);
	            window.removeEventListener("keyup", Mx.onkeyup, false);
	            window.removeEventListener("resize", this.onresize, false);
	            document.removeEventListener("mouseup", this.docMouseUp, false);
	            window.removeEventListener("mousedown", this.dragMouseDownHandler,
	                false);
	            window.removeEventListener("mousemove", this.throttledDragOnMouseMove,
	                false);
	            window.removeEventListener("mouseup", this.dragMouseUpHandler, false);
	            window.removeEventListener("wheel", this.wheelHandler, false);
	            window.removeEventListener("mousewheel", this.wheelHandler, false);
	            window.removeEventListener("DOMMouseScroll", this.wheelHandler, false);
	            window.removeEventListener("keypress", this.onkeypress, false);
	        },
	
	        checkresize: function() {
	            if (mx.checkresize(this._Mx)) {
	                this.refresh();
	            }
	        },
	
	        _refresh: function() {
	            var Mx = this._Mx;
	            var Gx = this._Gx;
	            var ctx = Mx.canvas.getContext("2d");
	            var plugin_index = 0;
	
	            if (Gx.hold) {
	                return;
	            }
	            mx.set_font(Mx, Math.min(8, Mx.width / 64));
	            Gx.pthk = Mx.text_w * 1.5;
	
	            if (Gx.specs) {
	                var ytimecode = false;
	                if (Gx.ylab === 4) { //time-based tics
	                    ytimecode = true;
	                }
	                // Set left and right edges
	                if (Gx.show_y_axis === true) {
	                    Mx.l = Mx.text_w * 6;
	                    if (ytimecode) {
	                        // If we are in ytimecode, determine if we need the extra
	                        // space to hold the entire YYYY:MM:DD
	                        var need_full_ymd = ((Math.abs(Mx.stk[0].ymin) >= 31536000) ||
	                            (Math.abs(Mx.stk[0].ymax) >= 31536000));
	                        if (need_full_ymd) {
	                            Mx.l = Mx.text_w * 11;
	                        }
	                    }
	                } else {
	                    Mx.l = 1;
	                }
	                if (Gx.pan === true) {
	                    Mx.r = Mx.width - (Gx.pthk + 2 * Mx.text_w);
	                } else {
	                    Mx.r = Mx.width - 5;
	                }
	
	                // Set top and bottom
	                if (Gx.show_readout) {
	                    Mx.t = Mx.text_h * 2;
	                    if (Gx.show_x_axis) {
	                        Mx.b = Mx.height - Mx.text_h * 4;
	                    } else {
	                        Mx.b = Mx.height - Mx.text_h * 3;
	                    }
	                } else if (Gx.x_scrollbar_location === "bottom") {
	                    Mx.t = Mx.text_h * 2;
	                    if (Gx.pan) {
	                        if (Gx.show_x_axis) {
	                            Mx.b = Mx.height - Mx.text_h * 3;
	                        } else {
	                            Mx.b = Mx.height - Mx.text_h * 2;
	                        }
	                    } else {
	                        if (Gx.show_x_axis) {
	                            Mx.b = Mx.height - Mx.text_h * 2;
	                        } else {
	                            Mx.b = Mx.height - 5;
	                        }
	                    }
	                } else {
	                    if (Gx.pan) {
	                        Mx.t = Gx.pthk + 2 * Mx.text_w;
	                    } else {
	                        Mx.t = 1;
	                    }
	                    if (Gx.show_x_axis) {
	                        Mx.b = Mx.height - (Mx.text_h * 3) / 2;
	                    } else {
	                        Mx.b = Mx.height - 2;
	                    }
	                }
	
	                // set left and right edges for X scrollbar
	                if (Gx.show_readout) {
	                    // If there is a readout, show it in the bottom-right
	                    // next to the readout
	                    Gx.pl = Mx.text_w * 50;
	                } else {
	                    // Otherwise, by default it conforms to legacy
	                    // behaviour and renders at the top next to the label
	                    if (Gx.x_scrollbar_location === "bottom") {
	                        Gx.pl = Mx.l;
	                    } else {
	                        Gx.pl = Mx.text_w * 35;
	                    }
	                }
	                Gx.pr = Math.max(Gx.pl + Mx.text_w * 9, Mx.r);
	
	                // set top scrollbar edge for X scrollbar
	                if (Gx.show_readout) {
	                    if (Gx.show_x_axis) {
	                        Gx.pt = Mx.b + Mx.text_h + (Mx.height - Mx.b - Mx.text_h - Gx.pthk) / 2;
	                    } else {
	                        Gx.pt = Mx.b + (Mx.height - Mx.b - Gx.pthk) / 2;
	                    }
	                } else {
	                    // Otherwise, by default it conforms to legacy
	                    // behaviour and renders at the top
	                    if (Gx.x_scrollbar_location === "bottom") {
	                        if (Gx.show_x_axis) {
	                            Gx.pt = Mx.b + Mx.text_h + (Mx.height - Mx.b - Mx.text_h - Gx.pthk) / 2;
	                        } else {
	                            Gx.pt = Mx.b + (Mx.height - Mx.b - Gx.pthk) / 2;
	                        }
	                    } else {
	                        Gx.pt = (Mx.t - Gx.pthk) / 2;
	                    }
	                }
	                Gx.lbtn = Mx.text_h + Mx.text_w + 2;
	            } else {
	                if (Gx.pan) {
	                    Mx.t = Gx.pthk + 2 * Mx.text_w;
	                    Mx.r = Mx.width - (Gx.pthk + Mx.text_w);
	                } else {
	                    Mx.t = 1;
	                    Mx.r = Mx.width - 2;
	                }
	                Mx.b = Mx.height - 2;
	                Mx.l = 1;
	                Gx.pl = Mx.l;
	                Gx.pr = Mx.r;
	                Gx.pt = (Mx.t - Gx.pthk) / 2;
	                Gx.lbtn = 0;
	            }
	
	            // pan select ranges
	            Gx.pyl = Mx.r + (Mx.width - Mx.r - Gx.pthk) / 2 + 1;
	
	            // set virtual window size/pos/scaling for current level
	            var k = Mx.level;
	            Mx.stk[k].x1 = Mx.l;
	            Mx.stk[k].y1 = Mx.t;
	            Mx.stk[k].x2 = Mx.r;
	            Mx.stk[k].y2 = Mx.b;
	            Mx.stk[k].xscl = (Mx.stk[k].xmax - Mx.stk[k].xmin) / (Mx.r - Mx.l);
	            Mx.stk[k].yscl = (Mx.stk[k].ymax - Mx.stk[k].ymin) / (Mx.b - Mx.t);
	
	            // In case things have rescaled
	            var re = pixel_to_real(this, Mx.xpos, Mx.ypos);
	            Gx.retx = re.x;
	            Gx.rety = re.y;
	
	            // modify stack for section plotting
	            //if (Gx.sections) {
	            // TODO
	            //}
	
	            if (Gx.panning === 0 || Gx.panning !== 0) { // TODO Gx.panning !==
	                // 0?? Does this work?
	                Gx.plotData.valid = false;
	                mx.clear_window(Mx);
	            } //else if (!Gx.specs) {
	            // TODO
	            //} else if (Gx.panning === 1) {
	            // TODO
	            //} else {
	            // TODO
	            //}
	
	            var xlab = Gx.xlab;
	            var ylab = Gx.ylab;
	
	            if (xlab === undefined) {
	                xlab = 30;
	            }
	            if (Gx.index) {
	                xlab = 0;
	            }
	
	            if (ylab === undefined) {
	                var cx = ((Gx.lyr.length > 0) && Gx.lyr[0].cx);
	                if (Gx.cmode === 1) {
	                    ylab = 28;
	                } else if (Gx.cmode === 2) {
	                    ylab = Gx.plab;
	                } else if ((Gx.cmode === 3) && (cx)) {
	                    ylab = 21;
	                } else if (Gx.cmode === 4) {
	                    ylab = 22;
	                } else if (Gx.cmode === 5) {
	                    ylab = 22;
	                    xlab = 21;
	                } else if (Gx.cmode === 6) {
	                    ylab = 26;
	                } else if (Gx.cmode === 7) {
	                    ylab = 27;
	                } else {
	                    ylab = 0;
	                }
	            }
	
	            if (Gx.specs) {
	                if (Gx.sections === 0) {
	                    var drawaxis_flags = {
	                        grid: Gx.grid
	                    };
	                    if (Gx.panning === 2) {
	                        drawaxis_flags.noxtlab = true;
	                    } // TODO Does this work??
	                    if (!Gx.show_x_axis) {
	                        drawaxis_flags.noxtics = true;
	                        drawaxis_flags.noxtlab = true;
	                        drawaxis_flags.noxplab = true;
	                    }
	                    if (!Gx.show_y_axis) {
	                        drawaxis_flags.noytics = true;
	                        drawaxis_flags.noytlab = true;
	                        drawaxis_flags.noyplab = true;
	                    }
	                    if (Gx.specs && !Gx.show_readout && !Gx.pan) {
	                        drawaxis_flags.noyplab = true;
	                        drawaxis_flags.noxplab = true;
	                    }
	                    if (Gx.gridBackground) {
	                        drawaxis_flags.fillStyle = Gx.gridBackground;
	                    }
	                    if (Gx.gridStyle) {
	                        drawaxis_flags.gridStyle = Gx.gridStyle;
	                    }
	                    if (Gx.xmult) {
	                        drawaxis_flags.xmult = Gx.xmult;
	                    }
	                    if (Gx.ymult) {
	                        drawaxis_flags.ymult = Gx.ymult;
	                    }
	                    if (xlab === 4) { //time-based tics
	                        drawaxis_flags.xtimecode = true;
	                    }
	                    if (ylab === 4) { //time-based tics
	                        drawaxis_flags.ytimecode = true;
	                    }
	                    if (Gx.xlabel !== undefined) {
	                        drawaxis_flags.xlabel = Gx.xlabel;
	                    }
	                    if (Gx.ylabel !== undefined) {
	                        drawaxis_flags.ylabel = Gx.ylabel;
	                    }
	                    mx.drawaxis(Mx, Gx.xdiv, Gx.ydiv, xlab, ylab, drawaxis_flags);
	                } //else {
	                // Not implemented yet
	                //}
	
	                var i = Gx.lbtn - 2;
	
	                if (Gx.show_readout && Gx.pan && !Gx.no_legend_button) {
	                    if (Gx.legend) {
	                        Gx.legendBtnLocation = {
	                            x: Mx.width - Gx.lbtn,
	                            y: 2,
	                            width: i,
	                            height: i
	                        };
	                        mx.shadowbox(Mx, Mx.width - Gx.lbtn, 2, i, i, 1, -2,
	                            'L');
	                    } else {
	                        Gx.legendBtnLocation = {
	                            x: Mx.width - Gx.lbtn,
	                            y: 2,
	                            width: i,
	                            height: i
	                        };
	                        mx.shadowbox(Mx, Mx.width - Gx.lbtn, 2, i, i, 1,
	                            2, 'L');
	                    }
	                    display_specs(this);
	                } else {
	                    Gx.legendBtnLocation = null;
	                }
	            } else if (Gx.grid && Gx.sections >= 0) {
	                var drawaxis_flags = {
	                    grid: true,
	                    noaxisbox: true,
	                    noxtics: true,
	                    noxtlab: true,
	                    noxplab: true,
	                    noytics: true,
	                    noytlab: true,
	                    noyplab: true
	                };
	                mx.drawaxis(Mx, Gx.xdiv, Gx.ydiv, xlab, ylab,
	                    drawaxis_flags);
	            }
	
	            for (var n = 0; n < Gx.lyr.length; n++) {
	                //if (Gx.sections !== 0) {
	                // TODO
	                //}
	                draw_layer(this, n);
	            }
	
	            draw_accessories(this, 4);
	
	            if ((Mx.r > Mx.l) && (Mx.b > Mx.t)) {
	                // Resize
	                Gx.plotData.width = Mx.canvas.width;
	                Gx.plotData.height = Mx.canvas.height;
	                Gx.plotData.getContext("2d").drawImage(Mx.canvas, 0, 0);
	                Gx.plotData.valid = true;
	            }
	
	            draw_plugins(this);
	
	
	            Gx.cross_xpos = undefined;
	            Gx.cross_ypos = undefined;
	            if ((!Mx.warpbox) && (this.mouseOnCanvas)) {
	                draw_crosshairs(this);
	            }
	
	            if (Gx.always_show_marker || Gx.show_marker) {
	                draw_marker(this);
	            }
	        }
	    };
	
	    // /////////////////////////////////////////////////////////////////////////
	    // Private methods and objects
	    // /////////////////////////////////////////////////////////////////////////
	
	    /**
	     * Options used when displaying the spinner.
	     *
	     * @memberOf sigplot
	     * @private
	     */
	    var SPINNER_OPTS = {
	        lines: 13, // The number of lines to draw
	        length: 7, // The length of each line
	        width: 4, // The line thickness
	        radius: 10, // The radius of the inner circle
	        corners: 1, // Corner roundness (0..1)
	        rotate: 0, // The rotation offset
	        color: '#FFF', // #rgb or #rrggbb
	        speed: 1, // Rounds per second
	        trail: 60, // Afterglow percentage
	        shadow: false, // Whether to render a shadow
	        hwaccel: false, // Whether to use hardware acceleration
	        className: 'spinner', // The CSS class to assign to the spinner
	        zIndex: 2e9, // The z-index (defaults to 2000000000)
	        top: 'auto', // Top position relative to parent in px
	        left: 'auto' // Left position relative to parent in px
	    };
	
	    /**
	     * Map integer cmode to string equivalent.
	     *
	     * @memberOf sigplot
	     * @private
	     */
	    var cxm = ["Ma", "Ph", "Re", "Im", "IR", "Lo", "L2"];
	
	    /**
	     * Map integer abscissa mode to string equivalent.
	     *
	     * @memberOf sigplot
	     * @private
	     */
	    var cam = ["(absc)", "(indx)", "(1/ab)", "(dydx)"];
	
	
	
	    /**
	     * This object holds the data associated with layers in the plot.
	     *
	     * @constructor
	     * @memberOf sigplot
	     * @private
	     */
	    function SIGPLOTLAYER() {
	
	        this.xbuf = undefined; // raw (ArrayBuffer) of ABSC data
	        this.ybuf = undefined; // raw (ArrayBuffer) of ORD data
	
	        this.offset = 0.0;
	        this.xstart = 0.0;
	        this.xdelta = 0.0;
	        this.imin = 0;
	        this.xmin = 0.0;
	        this.xmax = 0.0;
	        this.name = "";
	        this.cx = false;
	        this.hcb = undefined; // index in Gx.HCB
	        // xbufn = xbuf.byteLength
	        // ybufn = ybuf.byteLength
	        this.size = 0;
	
	        this.display = true;
	        this.color = 0;
	        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting
	        this.thick = 1; // negative for dashed
	        this.symbol = 0;
	        this.radius = 3;
	
	        this.skip = 0; // number of elements between ord values
	        this.xsub = 0;
	        this.ysub = 0;
	        this.xdata = false; // true if X data is data from file
	
	        this.options = {};
	    }
	
	    /**
	     * The graphics structure object used to hold state about the plot.
	     *
	     * @constructor
	     * @memberOf sigplot
	     * @private
	     */
	    function GX() {
	        this.xptr = undefined; // xpoints as anything "array-like"...
	        this.yptr = undefined; // ypoints as anything "array-like"...
	
	        this.retx = 0.0; // absc coord. at mouse location
	        this.rety = 0.0;
	        this.xmrk = 0.0; // absc coord of mark
	        this.ymrk = 0.0;
	        this.aretx = 0.0; // absc coord. at mouse location
	        this.arety = 0.0;
	
	        this.xstart = 0.0;
	        this.xdelta = 0.0;
	
	        this.panxmin = 0.0;
	        this.panxmax = 0.0;
	        this.panymin = 0.0;
	        this.panymax = 0.0;
	        this.xmin = 0.0;
	        this.xmax = 0.0;
	        this.xmult = undefined;
	        this.ymin = 0.0;
	        this.ymax = 0.0;
	        this.ymult = undefined;
	        this.zmin = undefined;
	        this.zmax = undefined;
	        this.dbmin = 0.0;
	        this.pxscl = 0.0;
	        this.pyscl = 0.0;
	        this.pmt = 0.0;
	
	        this.note = "";
	        // this.mouse unnecssary because we don't have res table
	        this.format = "";
	
	        this.pl = 0;
	        this.pr = 0;
	        this.pt = 0;
	        this.pb = 0;
	        this.px1 = 0; // specifies plotting field
	        this.px2 = 0;
	        this.py1 = 0;
	        this.py2 = 0;
	
	        this.pyl = 0;
	        this.pthk = 0; // thickness of pan drag box
	
	        this.modlayer = 0;
	        this.modsource = 0;
	        this.modified = false;
	        this.modmode = 0;
	
	        this.xdiv = 0;
	        this.ydiv = 0;
	
	        this.all = false;
	        this.expand = false;
	        this.cross = false;
	        this.grid = true;
	        this.gridBackground = undefined;
	        this.index = false;
	        this.pan = true;
	        this.specs = true;
	        this.legend = true;
	        this.xdata = false;
	
	        this.show_x_axis = true;
	        this.show_y_axis = true;
	        this.show_readout = true;
	        this.hide_note = false;
	        this.autohide_readout = false;
	        this.autohide_panbars = false;
	        this.panning = undefined;
	        this.panmode = 0; // TODO Is this a good default value? Where is this
	        // changed?
	        this.hold = false;
	
	        this.sections = 0; // number of plot sections, -1 for layers
	        this.iysec = 0;
	        this.nsec = 0; // actual number of sections
	        this.isec = 0; // current sections
	
	        this.xlab = undefined;
	        this.xlabel = undefined;
	        this.ylab = undefined;
	        this.ylabel = undefined;
	
	        // 0 - use HTML5 canvas smoothing
	        // 1 - average
	        // 2 - min
	        // 3 - max
	        // 4 - first
	        // 5 - max abs
	        this.xcompression = 0;
	
	        this.default_rubberbox_action = "zoom";
	        this.default_rubberbox_mode = "box";
	
	        this.wheelscroll_mode_natural = true;
	        this.scroll_time_interval = 10;
	
	        this.repeatPanning = undefined;
	        this.stillPanning = undefined; // TODO maybe merge this variable with
	        // Gx.panning in future?
	
	        this.autol = -1;
	
	        this.lineSmoothing = false; // not implemented
	        this.rasterSmoothing = false;
	
	        this.wheelZoom = false;
	        this.wheelZoomPercent = 0.2;
	        this.inContinuousZoom = false;
	
	        this.lyr = [];
	        this.HCB = [];
	        this.plugins = [];
	
	        this.plotData = document.createElement("canvas");
	        this.plotData.valid = false;
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function setup_cmap(plot, cmap) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        // If a color map array was provided make a custom map
	        if (Array.isArray(cmap)) {
	            var custom_cmap = {
	                name: "Custom",
	                colors: cmap
	            };
	            if (m.Mc.colormap[m.Mc.colormap.length - 1].name === "Custom") {
	                m.Mc.colormap[m.Mc.colormap.length - 1].colors = cmap;
	            } else {
	                m.Mc.colormap.push(custom_cmap);
	            }
	            Gx.cmap = m.Mc.colormap.length - 1;
	        } else if (typeof cmap === "string") {
	            Gx.cmap = -1;
	            for (var xc = 0; xc < m.Mc.colormap.length; xc++) {
	                if (m.Mc.colormap[xc].name === cmap) {
	                    Gx.cmap = xc;
	                    break;
	                }
	            }
	        } else {
	            Gx.cmap = cmap;
	        }
	
	        if (Gx.ncolors < 0) {
	            Gx.ncolors = -1 * Gx.ncolors;
	            Gx.cmap = Math.max(1, Gx.cmap);
	        }
	        if ((Gx.cmap < 0) || (Gx.cmap > m.Mc.colormap.length)) {
	            if (Gx.cmode === 2) {
	                Gx.cmap = 2; // wheel
	            } else {
	                Gx.cmap = 1; // ramp
	            }
	        }
	
	        mx.colormap(Mx, m.Mc.colormap[Gx.cmap].colors, Gx.ncolors);
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function sigplot_show_x(plot) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        var ls = Gx.aretx.toString();
	        if (Gx.iabsc === 1) {
	            mx.message(Mx, "INDEX = " + ls);
	        } else if (Gx.iabsc === 2) {
	            mx.message(Mx, "1/X = " + ls);
	        } else {
	            //if (Gx.xlab === 4) {
	            // TODO
	            //}
	            mx.message(Mx, "X = " + ls);
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function sigplot_show_timecode(plot) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        if (Gx.lyr.length > 0) {
	            //var hcb = Gx.HCB[Gx.lyr[0].hcb];
	            var hcb = Gx.lyr[0].hcb; // mmm-TODO-needs investigation
	            if ((hcb["class"] === 1) && ((hcb.xunits === 1) || (hcb.xunits === 4))) {
	                mx.message(Mx, "Time = " + m.sec2tod(hcb.timecode + Gx.retx), true);
	            } else if ((hcb["class"] === 2) && ((hcb.yunits === 1) || (hcb.yunits === 4))) {
	                mx.message(Mx, "Time = " + m.sec2tod(hcb.timecode + Gx.rety), true);
	            } else {
	                mx.message(Mx, "Time = UNK");
	            }
	
	        }
	
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function sigplot_show_y(plot) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        var ls = Gx.arety.toString();
	        if (Gx.iabsc === 2) {
	            mx.message(Mx, "1/Y = " + ls);
	        } else {
	            //if (Gx.xlab === 4) {
	            // TODO
	            //}
	            mx.message(Mx, "Y = " + ls);
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function sigplot_show_z(plot) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        if (Gx.zmin && Gx.zmax) { // at least one layer has a z dimension
	            var msg = "";
	            if (Gx.lyr.length === 1) {
	                var msg = "Z = " + Gx.lyr[0].get_z(Gx.retx, Gx.rety).toString();
	            } else {
	                var msg = "TODO"; // TODO we need to think of what we want to display here
	            }
	            mx.message(Mx, msg);
	        }
	    }
	
	    /**
	     * Constructs a menu for updating the pan scale of the plot.
	     *
	     * @param plot
	     *            The plot to work with.
	     * @param command
	     *            The scroll direction to use. Either "XPAN" or "YPAN" are
	     *            acceptable.
	     * @private
	     */
	    function sigplot_scrollScaleMenu(plot, command) {
	        var Mx = plot._Mx;
	
	        mx.removeEventListener(Mx, "mousedown", plot.onmousedown, false);
	
	        mx.menu(Mx, {
	            title: "SCROLLBAR",
	            refresh: function() {
	                plot.refresh();
	            },
	            finalize: function() {
	                mx.addEventListener(Mx, "mousedown",
	                    plot.onmousedown, false);
	                plot.refresh();
	            },
	            items: [{
	                text: "Expand Range",
	                handler: function() {
	                    middleClickScrollMenuAction(plot,
	                        mx.SB_EXPAND, command);
	                }
	            }, {
	                text: "Shrink Range",
	                handler: function() {
	                    middleClickScrollMenuAction(plot,
	                        mx.SB_SHRINK, command);
	                }
	            }, {
	                text: "Expand Full",
	                handler: function() {
	                    middleClickScrollMenuAction(plot,
	                        mx.SB_FULL, command);
	                }
	            }]
	        });
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function sigplot_mainmenu(plot) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        // show mainmenu
	        //
	
	        mx.removeEventListener(Mx, "mousedown", plot.onmousedown, false);
	
	        // Sub-menus
	        var CONTROLS_MENU = {
	            text: "Cntrls...",
	            menu: {
	                title: "CONTROLS OPTIONS",
	                items: [{
	                    text: "Continuous (Disabled)",
	                    checked: Gx.cntrls === -2,
	                    handler: function() {
	                        plot.change_settings({
	                            xcnt: -2
	                        });
	                    }
	                }, {
	                    text: "LM Click (Disabled)",
	                    checked: Gx.cntrls === -1,
	                    handler: function() {
	                        plot.change_settings({
	                            xcnt: -1
	                        });
	                    }
	                }, {
	                    text: "Off",
	                    checked: Gx.cntrls === 0,
	                    handler: function() {
	                        plot.change_settings({
	                            xcnt: 0
	                        });
	                    }
	                }, {
	                    text: "LM Click",
	                    checked: Gx.cntrls === 1,
	                    handler: function() {
	                        plot.change_settings({
	                            xcnt: 1
	                        });
	                    }
	                }, {
	                    text: "Continuous",
	                    checked: Gx.cntrls === 2,
	                    handler: function() {
	                        plot.change_settings({
	                            xcnt: 2
	                        });
	                    }
	                }]
	            }
	        };
	
	        var CXMODE_MENU = {
	            text: "CX Mode...",
	            menu: {
	                title: "COMPLEX MODE",
	                items: [{
	                    text: "Magnitude",
	                    checked: Gx.cmode === 1,
	                    handler: function() {
	                        plot.change_settings({
	                            cmode: 1
	                        });
	                    }
	                }, {
	                    text: "Phase",
	                    checked: Gx.cmode === 2,
	                    handler: function() {
	                        plot.change_settings({
	                            cmode: 2
	                        });
	                    }
	                }, {
	                    text: "Real",
	                    checked: Gx.cmode === 3,
	                    handler: function() {
	                        plot.change_settings({
	                            cmode: 3
	                        });
	                    }
	                }, {
	                    text: "Imaginary",
	                    checked: Gx.cmode === 4,
	                    handler: function() {
	                        plot.change_settings({
	                            cmode: 4
	                        });
	                    }
	                }, {
	                    text: "IR: Imag/Real",
	                    checked: Gx.cmode === 5,
	                    handler: function() {
	                        plot.change_settings({
	                            cmode: 5
	                        });
	                    }
	                }, {
	                    text: "10*Log10",
	                    checked: Gx.cmode === 6,
	                    handler: function() {
	                        plot.change_settings({
	                            cmode: 6
	                        });
	                    }
	                }, {
	                    text: "20*Log10",
	                    checked: Gx.cmode === 7,
	                    handler: function() {
	                        plot.change_settings({
	                            cmode: 7
	                        });
	                    }
	                }]
	            }
	        };
	
	        var SCALING_MENU = {
	            text: "Scaling...",
	            menu: {
	                title: "SCALING",
	                items: [{
	                    text: "Y Axis",
	                    style: "separator"
	                }, {
	                    text: "Parameters...",
	                    checked: (Gx.autoy === 0),
	                    handler: function() {
	                        Gx.autoy = 0;
	
	                        var nextPrompt = function() {
	                            setupPrompt(
	                                plot,
	                                "Y Axis Max:",
	                                mx.floatValidator,
	                                function(finalValue) {
	                                    if (parseFloat(finalValue) !== Mx.stk[Mx.level].ymax) {
	                                        // Only update if different
	                                        // value
	                                        if (finalValue === "") {
	                                            finalValue = 0;
	                                        }
	                                        updateViewbox(
	                                            plot,
	                                            Mx.stk[Mx.level].ymin,
	                                            parseFloat(finalValue),
	                                            "Y");
	                                    } else {
	                                        plot.refresh();
	                                    }
	                                }, Mx.stk[Mx.level].ymax,
	                                undefined, undefined, undefined);
	                        };
	
	                        setupPrompt(
	                            plot,
	                            "Y Axis Min:",
	                            mx.floatValidator,
	                            function(finalValue) {
	                                if (parseFloat(finalValue) !== Mx.stk[Mx.level].ymin) {
	                                    // Only update if different
	                                    // value
	                                    if (finalValue === "") {
	                                        finalValue = 0;
	                                    }
	                                    updateViewbox(plot,
	                                        parseFloat(finalValue),
	                                        Mx.stk[Mx.level].ymax,
	                                        "Y");
	                                } else {
	                                    plot.refresh();
	                                }
	
	                            }, Mx.stk[Mx.level].ymin, undefined,
	                            undefined, nextPrompt);
	                    }
	                }, {
	                    text: "Min Auto",
	                    checked: (Gx.autoy === 1),
	                    handler: function() {
	                        Gx.autoy = 1;
	                    }
	                }, {
	                    text: "Max Auto",
	                    checked: (Gx.autoy === 2),
	                    handler: function() {
	                        Gx.autoy = 2;
	                    }
	                }, {
	                    text: "Full Auto",
	                    checked: (Gx.autoy === 3),
	                    handler: function() {
	                        Gx.autoy = 3;
	                    }
	                }, {
	                    text: "X Axis",
	                    style: "separator"
	                }, {
	                    text: "Parameters...",
	                    checked: (Gx.autox === 0),
	                    handler: function() {
	                        Gx.autox = 0;
	
	                        var nextPrompt = function() {
	                            setupPrompt(
	                                plot,
	                                "X Axis Max:",
	                                mx.floatValidator,
	                                function(finalValue) {
	                                    if (parseFloat(finalValue) !== Mx.stk[Mx.level].xmax) {
	                                        // Only update if different
	                                        // value
	                                        if (finalValue === "") {
	                                            finalValue = 0;
	                                        }
	                                        updateViewbox(
	                                            plot,
	                                            Mx.stk[Mx.level].xmin,
	                                            parseFloat(finalValue),
	                                            "X");
	                                    } else {
	                                        plot.refresh();
	                                    }
	                                }, Mx.stk[Mx.level].xmax,
	                                undefined, undefined, undefined);
	                        };
	
	                        setupPrompt(
	                            plot,
	                            "X Axis Min:",
	                            mx.floatValidator,
	                            function(finalValue) {
	                                if (parseFloat(finalValue) !== Mx.stk[Mx.level].xmin) {
	                                    // Only update if different
	                                    // value
	                                    if (finalValue === "") {
	                                        finalValue = 0;
	                                    }
	                                    updateViewbox(plot,
	                                        parseFloat(finalValue),
	                                        Mx.stk[Mx.level].xmax,
	                                        "X");
	                                } else {
	                                    plot.refresh();
	                                }
	                            }, Mx.stk[Mx.level].xmin, undefined,
	                            undefined, nextPrompt);
	                    }
	                }, {
	                    text: "Min Auto",
	                    checked: (Gx.autox === 1),
	                    handler: function() {
	                        Gx.autox = 1;
	                    }
	                }, {
	                    text: "Max Auto",
	                    checked: (Gx.autox === 2),
	                    handler: function() {
	                        Gx.autox = 2;
	                    }
	                }, {
	                    text: "Full Auto",
	                    checked: (Gx.autox === 3),
	                    handler: function() {
	                        Gx.autox = 3;
	                    }
	                }, {
	                    text: "Z Axis",
	                    style: "separator"
	                }, {
	                    text: "Parameters...",
	                    checked: (Gx.autoz === 0),
	                    handler: function() {
	                        Gx.autoz = 0;
	
	                        var nextPrompt = function() {
	                            setupPrompt(
	                                plot,
	                                "Z Axis Max:",
	                                mx.floatValidator,
	                                function(finalValue) {
	                                    if (parseFloat(finalValue) !== Gx.zmax) {
	                                        // Only update if different
	                                        // value
	                                        if (finalValue === "") {
	                                            finalValue = 0;
	                                        }
	                                        plot.change_settings({
	                                            zmax: finalValue
	                                        });
	                                    }
	                                }, Gx.zmax,
	                                undefined, undefined, undefined);
	                        };
	
	                        setupPrompt(
	                            plot,
	                            "Z Axis Min:",
	                            mx.floatValidator,
	                            function(finalValue) {
	                                if (parseFloat(finalValue) !== Gx.zmin) {
	                                    if (finalValue === "") {
	                                        finalValue = 0;
	                                    }
	                                    plot.change_settings({
	                                        zmin: finalValue
	                                    });
	                                }
	                            }, Gx.zmin, undefined,
	                            undefined, nextPrompt);
	                    }
	                }, {
	                    text: "Min Auto",
	                    checked: (Gx.autoz === 1),
	                    handler: function() {
	                        plot.change_settings({
	                            autoz: 1
	                        });
	                    }
	                }, {
	                    text: "Max Auto",
	                    checked: (Gx.autoz === 2),
	                    handler: function() {
	                        plot.change_settings({
	                            autoz: 2
	                        });
	                    }
	                }, {
	                    text: "Full Auto",
	                    checked: (Gx.autoz === 3),
	                    handler: function() {
	                        plot.change_settings({
	                            autoz: 3
	                        });
	                    }
	                }]
	            }
	        };
	
	        var GRID_MENU = {
	            text: "Grid",
	            handler: function() {
	                plot.change_settings({
	                    grid: !Gx.grid
	                });
	            }
	        };
	
	        var SETTINGS_MENU = {
	            text: "Settings...",
	            menu: {
	                title: "SETTINGS",
	                items: [{
	                    text: "ALL Mode",
	                    checked: Gx.all,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            all: !Gx.all
	                        });
	                    }
	                }, {
	                    text: "Controls...",
	                    menu: {
	                        title: "CONTROLS OPTIONS",
	                        items: [{
	                            text: "Continuous (Disabled)",
	                            checked: Gx.cntrls === -2,
	                            handler: function() {
	                                plot.change_settings({
	                                    xcnt: -2
	                                });
	                            }
	                        }, {
	                            text: "LM Click (Disabled)",
	                            checked: Gx.cntrls === -1,
	                            handler: function() {
	                                plot.change_settings({
	                                    xcnt: -1
	                                });
	                            }
	                        }, {
	                            text: "Off",
	                            checked: Gx.cntrls === 0,
	                            handler: function() {
	                                plot.change_settings({
	                                    xcnt: 0
	                                });
	                            }
	                        }, {
	                            text: "LM Click",
	                            checked: Gx.cntrls === 1,
	                            handler: function() {
	                                plot.change_settings({
	                                    xcnt: 1
	                                });
	                            }
	                        }, {
	                            text: "Continuous",
	                            checked: Gx.cntrls === 2,
	                            handler: function() {
	                                plot.change_settings({
	                                    xcnt: 2
	                                });
	                            }
	                        }]
	                    }
	                }, {
	                    text: "Mouse...",
	                    menu: {
	                        title: "MOUSE OPTIONS",
	                        items: [{
	                            text: "LM Drag (Zoom)",
	                            checked: Gx.default_rubberbox_action === "zoom",
	                            handler: function() {
	                                Gx.default_rubberbox_action = "zoom";
	                            }
	                        }, {
	                            text: "LM Drag (Select)",
	                            checked: Gx.default_rubberbox_action === "select",
	                            handler: function() {
	                                Gx.default_rubberbox_action = "select";
	                            }
	                        }, {
	                            text: "LM Drag (Disabled)",
	                            checked: Gx.default_rubberbox_action === null,
	                            handler: function() {
	                                Gx.default_rubberbox_action = null;
	                            }
	                        }, {
	                            text: "RM Drag (Zoom)",
	                            checked: Gx.default_rightclick_rubberbox_action === "zoom",
	                            handler: function() {
	                                Gx.default_rightclick_rubberbox_action = "zoom";
	                            }
	                        }, {
	                            text: "RM Drag (Select)",
	                            checked: Gx.default_rightclick_rubberbox_action === "select",
	                            handler: function() {
	                                Gx.default_rightclick_rubberbox_action = "select";
	                            }
	                        }, {
	                            text: "RM Drag (Disabled)",
	                            checked: Gx.default_rightclick_rubberbox_action === null,
	                            handler: function() {
	                                Gx.default_rightclick_rubberbox_action = null;
	                            }
	                        }, {
	                            text: "Mode...",
	                            menu: {
	                                title: "MOUSE Mode",
	                                items: [{
	                                    text: "Box",
	                                    checked: Gx.default_rubberbox_mode === "box",
	                                    handler: function() {
	                                        Gx.default_rubberbox_mode = "box";
	                                    }
	
	                                }, {
	                                    text: "Horizontal",
	                                    checked: Gx.default_rubberbox_mode === "horizontal",
	                                    handler: function() {
	                                        Gx.default_rubberbox_mode = "horizontal";
	                                    }
	                                }, {
	                                    text: "Vertical",
	                                    checked: Gx.default_rubberbox_mode === "vertical",
	                                    handler: function() {
	                                        Gx.default_rubberbox_mode = "vertical";
	                                    }
	                                }]
	                            }
	                        }, {
	                            text: "CROSShairs...",
	                            menu: {
	                                title: "Crosshairs Mode",
	                                items: [{
	                                    text: "Off",
	                                    checked: !Gx.cross,
	                                    handler: function() {
	                                        Gx.cross = false;
	                                    }
	
	                                }, {
	                                    text: "On",
	                                    checked: Gx.cross === true,
	                                    handler: function() {
	                                        Gx.cross = true;
	                                    }
	                                }, {
	                                    text: "Horizontal",
	                                    checked: Gx.cross === "horizontal",
	                                    handler: function() {
	                                        Gx.cross = "horizontal";
	                                    }
	                                }, {
	                                    text: "Vertical",
	                                    checked: Gx.cross === "vertical",
	                                    handler: function() {
	                                        Gx.cross = "vertical";
	                                    }
	                                }]
	                            }
	                        }, {
	                            text: "Mousewheel Natural Mode",
	                            checked: Gx.wheelscroll_mode_natural,
	                            style: "checkbox",
	                            handler: function() {
	                                plot
	                                    .change_settings({
	                                        wheelscroll_mode_natural: !Gx.wheelscroll_mode_natural
	                                    });
	                            }
	                        }]
	                    }
	                }, {
	                    text: "CROSShairs",
	                    checked: Gx.cross,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            cross: !Gx.cross
	                        });
	                    }
	                }, {
	                    text: "GRID",
	                    checked: Gx.grid,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            grid: !Gx.grid
	                        });
	                    }
	                }, {
	                    text: "INDEX Mode",
	                    checked: Gx.index,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            index: !Gx.index
	                        });
	                    }
	                }, {
	                    text: "LEGEND",
	                    checked: Gx.legend,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            legend: !Gx.legend
	                        });
	                    }
	                }, {
	                    text: "PAN Scrollbars",
	                    checked: Gx.pan,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            pan: !Gx.pan
	                        });
	                    }
	                }, {
	                    text: "PHase UNITS...",
	                    menu: {
	                        title: "PHASE UNITS",
	                        items: [{
	                            text: "Radians",
	                            checked: Gx.plab === 23,
	                            handler: function() {
	                                plot.change_settings({
	                                    phunits: 'R'
	                                });
	                            }
	
	                        }, {
	                            text: "Degrees",
	                            checked: Gx.plab === 24,
	                            handler: function() {
	                                plot.change_settings({
	                                    phunits: 'D'
	                                });
	                            }
	                        }, {
	                            text: "Cycles",
	                            checked: Gx.plab === 25,
	                            handler: function() {
	                                plot.change_settings({
	                                    phunits: 'C'
	                                });
	                            }
	                        }]
	                    }
	                }, {
	                    text: "SPECS",
	                    checked: Gx.specs,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            specs: !Gx.specs
	                        });
	                    }
	                }, {
	                    text: "XDIVisions...",
	                    handler: function() {
	                        var validator = function(value) {
	                            var isValid = mx.intValidator(value);
	                            var maxXDIV = m.trunc(Mx.width / 2); // TODO
	                            // Make value an option on the plot?
	                            // Maybe still a little too high
	                            // while dotted-line grids are
	                            // being drawn?
	                            if (isValid.valid && value > maxXDIV) {
	                                return {
	                                    valid: false,
	                                    reason: "Exceeds maximum number of divisions (" + maxXDIV + ")."
	                                };
	                            } else {
	                                return isValid;
	                            }
	                        };
	
	                        setupPrompt(
	                            plot,
	                            "X Divisions:",
	                            validator,
	                            function(finalValue) {
	                                if (parseFloat(finalValue) !== Gx.xdiv) { // Only
	                                    // update if different value
	                                    if (finalValue === "") {
	                                        finalValue = 1;
	                                    }
	                                    Gx.xdiv = parseFloat(finalValue);
	                                }
	                                plot.refresh();
	
	                            }, Gx.xdiv, undefined, undefined,
	                            undefined);
	                    }
	                }, {
	                    text: "XLABel...",
	                    handler: function() {
	                        var validator = function(value) {
	                            console.log("The value is " + value);
	                            var isValid = mx.intValidator(value);
	                            return isValid;
	                        };
	
	                        setupPrompt(
	                            plot,
	                            "X Units:",
	                            validator,
	                            function(finalValue) {
	                                if (parseFloat(finalValue) !== Gx.xlab) { // Only
	                                    // update if different value
	                                    if (finalValue < 0) {
	                                        finalValue = 0;
	                                    }
	                                    Gx.xlab = parseFloat(finalValue);
	                                }
	                                plot.refresh();
	
	                            }, Gx.xlab, undefined, undefined,
	                            undefined);
	                    }
	                }, {
	                    text: "YDIVisions...",
	                    handler: function() {
	                        var validator = function(value) {
	                            var isValid = mx.intValidator(value);
	                            var maxYDIV = m.trunc(Mx.height / 2); // TODO
	                            // Make value an option on the plot?
	                            // Maybe still a little too high
	                            // while dotted-line grids are
	                            // being drawn?
	                            if (isValid.valid && value > maxYDIV) {
	                                return {
	                                    valid: false,
	                                    reason: "Exceeds maximum number of divisions (" + maxYDIV + ")."
	                                };
	                            } else {
	                                return isValid;
	                            }
	                        };
	
	                        setupPrompt(
	                            plot,
	                            "Y Divisions:",
	                            validator,
	                            function(finalValue) {
	                                if (parseFloat(finalValue) !== Gx.ydiv) {
	                                    // Only update if different
	                                    // value
	                                    if (finalValue === "") {
	                                        finalValue = 1;
	                                    }
	                                    Gx.ydiv = parseFloat(finalValue);
	                                }
	                                plot.refresh();
	
	                            }, Gx.ydiv, undefined, undefined,
	                            undefined);
	                    }
	                }, {
	                    text: "YINVersion",
	                    checked: (Mx.origin === 4),
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            yinv: (Mx.origin !== 4)
	                        });
	                    }
	                }, {
	                    text: "YLABel...",
	                    handler: function() {
	                        var validator = function(value) {
	                            var isValid = mx.intValidator(value);
	                            return isValid;
	                        };
	
	                        setupPrompt(
	                            plot,
	                            "Y Units:",
	                            validator,
	                            function(finalValue) {
	                                if (parseFloat(finalValue) !== Gx.ylab) { // Only
	                                    // update if different value
	                                    if (finalValue < 0) {
	                                        finalValue = 0;
	                                    }
	                                    Gx.ylab = parseFloat(finalValue);
	                                }
	                                plot.refresh();
	
	                            }, Gx.ylab, undefined, undefined,
	                            undefined);
	                    }
	                }, {
	                    text: "X-axis",
	                    checked: Gx.show_x_axis,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            show_x_axis: !Gx.show_x_axis
	                        });
	                    }
	                }, {
	                    text: "Y-axis",
	                    checked: Gx.show_y_axis,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            show_y_axis: !Gx.show_y_axis
	                        });
	                    }
	                }, {
	                    text: "Readout",
	                    checked: Gx.show_readout,
	                    style: "checkbox",
	                    handler: function() {
	                        plot.change_settings({
	                            show_readout: !Gx.show_readout
	                        });
	                    }
	                }, {
	                    text: "Invert Colors",
	                    checked: Mx.xi,
	                    style: "checkbox",
	                    handler: function() {
	                        mx.invertbgfg(Mx);
	                    }
	                }]
	            }
	        };
	
	        var COLORMAP_MENU = {
	            text: "Colormap...",
	            menu: {
	                title: "COLORMAP",
	                items: []
	            }
	        };
	
	        var colormap_handler = function(item) {
	            plot.change_settings({
	                cmap: this.cmap
	            });
	        };
	
	        for (var xc = 0; xc < m.Mc.colormap.length; xc++) {
	            var menuitem = {
	                text: m.Mc.colormap[xc].name,
	                cmap: xc,
	                checked: (Gx.cmap === xc),
	                handler: colormap_handler
	            };
	            COLORMAP_MENU.menu.items.push(menuitem);
	        }
	
	        var traceoptionsmenu = function(index) {
	            return {
	                title: "TRACE OPTIONS",
	                items: [{
	                    text: "Dashed...",
	                    handler: function() {
	                        // Figure out the current thickness
	                        var thk = 1;
	                        if (index !== undefined) {
	                            thk = Math.abs(plot._Gx.lyr[index].thick);
	                        } else {
	                            if (Gx.lyr.length === 0) {
	                                return;
	                            }
	
	                            thk = Math.abs(plot._Gx.lyr[0].thick);
	                            for (var i = 0; i < Gx.lyr.length; i++) {
	                                if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {
	                                    thk = 1;
	                                    break;
	                                }
	                            }
	                        }
	                        setupPrompt(
	                            plot,
	                            "Line thickness:",
	                            mx.intValidator,
	                            function(finalValue) {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].line = 3;
	                                    plot._Gx.lyr[index].thick = -1 * finalValue;
	                                    plot._Gx.lyr[index].symbol = 0;
	                                } else {
	                                    for (var index = 0; index < Gx.lyr.length; index++) {
	                                        plot._Gx.lyr[index].line = 3;
	                                        plot._Gx.lyr[index].thick = -1 * finalValue;
	                                        plot._Gx.lyr[index].symbol = 0;
	                                    }
	                                }
	                            }, thk);
	                    }
	                }, {
	                    text: "Dots...",
	                    handler: function() {
	                        // Figure out the current thickness
	                        var radius = 3;
	                        if (index !== undefined) {
	                            radius = Math.abs(plot._Gx.lyr[index].radius);
	                        } else {
	                            if (Gx.lyr.length === 0) {
	                                return;
	                            }
	                            for (var i = 0; i < Gx.lyr.length; i++) {
	                                if (radius !== Math.abs(plot._Gx.lyr[i].radius)) {
	                                    radius = 3;
	                                    break;
	                                }
	                            }
	                        }
	                        setupPrompt(
	                            plot,
	                            "Radius/Shape:",
	                            mx.intValidator,
	                            function(finalValue) {
	                                var sym;
	                                var rad;
	                                if (finalValue < 0) {
	                                    sym = 3; // square
	                                    rad = Math.abs(finalValue);
	                                } else if (finalValue > 0) {
	                                    sym = 2; // circle
	                                    rad = finalValue;
	                                } else {
	                                    sym = 1;
	                                    rad = 0;
	                                }
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].line = 0;
	                                    plot._Gx.lyr[index].radius = rad;
	                                    plot._Gx.lyr[index].symbol = sym;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].line = 0;
	                                        plot._Gx.lyr[i].radius = rad;
	                                        plot._Gx.lyr[i].symbol = sym;
	                                    }
	                                }
	                            }, radius);
	                    }
	                }, {
	                    text: "Solid...",
	                    handler: function() {
	                        // Figure out the current thickness
	                        var thk = 1;
	                        if (index !== undefined) {
	                            thk = Math.abs(plot._Gx.lyr[index].thick);
	                        } else {
	                            if (Gx.lyr.length === 0) {
	                                return;
	                            }
	
	                            thk = Math.abs(plot._Gx.lyr[0].thick);
	                            for (var i = 0; i < Gx.lyr.length; i++) {
	                                if (thk !== Math.abs(plot._Gx.lyr[i].thick)) {
	                                    thk = 1;
	                                    break;
	                                }
	                            }
	                        }
	                        setupPrompt(
	                            plot,
	                            "Line thickness:",
	                            mx.intValidator,
	                            function(finalValue) {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].line = 3;
	                                    plot._Gx.lyr[index].thick = finalValue;
	                                    plot._Gx.lyr[index].symbol = 0;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].line = 3;
	                                        plot._Gx.lyr[i].thick = finalValue;
	                                        plot._Gx.lyr[i].symbol = 0;
	                                    }
	                                }
	                            }, thk);
	                    }
	                }, {
	                    text: "Toggle",
	                    style: (index !== undefined) ? "checkbox" : undefined,
	                    checked: (index !== undefined) ? plot._Gx.lyr[index].display : undefined,
	                    handler: function() {
	                        if (index !== undefined) {
	                            plot._Gx.lyr[index].display = !plot._Gx.lyr[index].display;
	                        } else {
	                            for (var i = 0; i < Gx.lyr.length; i++) {
	                                plot._Gx.lyr[i].display = !plot._Gx.lyr[i].display;
	                            }
	                        }
	                    }
	                }, {
	                    text: "Symbols...",
	                    menu: {
	                        title: "SYMBOLS",
	                        items: [{
	                            text: "Retain Current"
	                        }, {
	                            text: "None",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 0 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].radius = 0;
	                                    plot._Gx.lyr[index].symbol = 0;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].radius = 0;
	                                        plot._Gx.lyr[i].symbol = 0;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "Pixels",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 1 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].radius = 1;
	                                    plot._Gx.lyr[index].symbol = 1;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].radius = 1;
	                                        plot._Gx.lyr[i].symbol = 1;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "Circles",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 2 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].radius = 4;
	                                    plot._Gx.lyr[index].symbol = 2;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].radius = 4;
	                                        plot._Gx.lyr[i].symbol = 2;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "Squares",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 3 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].radius = 4;
	                                    plot._Gx.lyr[index].symbol = 3;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].radius = 4;
	                                        plot._Gx.lyr[i].symbol = 3;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "Plusses",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 4 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].radius = 4;
	                                    plot._Gx.lyr[index].symbol = 4;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].radius = 4;
	                                        plot._Gx.lyr[i].symbol = 4;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "X's",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 5 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].radius = 4;
	                                    plot._Gx.lyr[index].symbol = 5;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].radius = 4;
	                                        plot._Gx.lyr[i].symbol = 5;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "Triangles",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 6 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].radius = 6;
	                                    plot._Gx.lyr[index].symbol = 6;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].radius = 6;
	                                        plot._Gx.lyr[i].symbol = 6;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "Downward Triangles",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].symbol === 7 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].radius = 6;
	                                    plot._Gx.lyr[index].symbol = 7;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].radius = 6;
	                                        plot._Gx.lyr[i].symbol = 7;
	                                    }
	                                }
	                            }
	                        }]
	                    }
	                }, {
	                    text: "Line Type...",
	                    menu: {
	                        title: "LINE TYPE",
	                        items: [{
	                            text: "Retain Current"
	                        }, {
	                            text: "None",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 0 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].line = 0;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].line = 0;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "Verticals",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 1 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].line = 1;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].line = 1;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "Horizontals",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 2 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].line = 2;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].line = 2;
	                                    }
	                                }
	                            }
	                        }, {
	                            text: "Connecting",
	                            checked: (index !== undefined) ? plot._Gx.lyr[index].line === 3 : undefined,
	                            handler: function() {
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].line = 3;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].line = 3;
	                                    }
	                                }
	                            }
	                        }]
	                    }
	                }, {
	                    text: "Thickness...",
	                    handler: function() {
	                        var thickness = 1;
	                        if (index !== undefined) {
	                            thickness = plot._Gx.lyr[index].thick;
	                        }
	                        setupPrompt(
	                            plot,
	                            "Thickness",
	                            mx.intValidator,
	                            function(finalValue) {
	                                if (finalValue === "") {
	                                    finalValue = 1;
	                                }
	                                finalValue = Math.max(0, finalValue);
	
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].thick = finalValue;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].thick = finalValue;
	                                    }
	                                }
	                            }, thickness, undefined,
	                            undefined, undefined);
	                    }
	                }, {
	                    text: "Opacity...",
	                    handler: function() {
	                        var opacity = 1.0;
	                        if (index !== undefined) {
	                            opacity = plot._Gx.lyr[index].opacity;
	                        }
	                        setupPrompt(
	                            plot,
	                            "Opacity:",
	                            mx.floatValidator,
	                            function(finalValue) {
	                                if (finalValue === "") {
	                                    finalValue = 1.0;
	                                }
	                                finalValue = Math.max(0, finalValue);
	                                finalValue = Math.min(1, finalValue);
	
	                                if (index !== undefined) {
	                                    plot._Gx.lyr[index].opacity = finalValue;
	                                } else {
	                                    for (var i = 0; i < Gx.lyr.length; i++) {
	                                        plot._Gx.lyr[i].opacity = finalValue;
	                                    }
	                                }
	                            }, opacity, undefined,
	                            undefined, undefined);
	                    }
	                }]
	            };
	        };
	
	        var VIEW_MENU = {
	            text: "View...",
	            menu: {
	                title: "VIEW",
	                items: [{
	                    text: "Reset",
	                    handler: function() {
	                        plot.unzoom();
	                    }
	                }, {
	                    text: "Y Axis",
	                    style: "separator"
	                }, {
	                    text: "Expand Range",
	                    handler: function() {
	                        middleClickScrollMenuAction(plot,
	                            mx.SB_EXPAND, "YPAN");
	                    }
	                }, {
	                    text: "Shrink Range",
	                    handler: function() {
	                        middleClickScrollMenuAction(plot,
	                            mx.SB_SHRINK, "YPAN");
	                    }
	                }, {
	                    text: "Expand Full",
	                    handler: function() {
	                        middleClickScrollMenuAction(plot,
	                            mx.SB_FULL, "YPAN");
	                    }
	                }, {
	                    text: "X Axis",
	                    style: "separator"
	                }, {
	                    text: "Expand Range",
	                    handler: function() {
	                        middleClickScrollMenuAction(plot,
	                            mx.SB_EXPAND, "XPAN");
	                    }
	                }, {
	                    text: "Shrink Range",
	                    handler: function() {
	                        middleClickScrollMenuAction(plot,
	                            mx.SB_SHRINK, "XPAN");
	                    }
	                }, {
	                    text: "Expand Full",
	                    handler: function() {
	                        middleClickScrollMenuAction(plot,
	                            mx.SB_FULL, "XPAN");
	                    }
	                }]
	            }
	        };
	
	        var TRACES_MENU = {
	            text: "Traces...",
	            menu: function() {
	                var Gx = plot._Gx;
	                var tracemenu = {
	                    title: "TRACE",
	                    items: []
	                };
	                // Add the ALL option
	                tracemenu.items.push({
	                    text: "All",
	                    menu: traceoptionsmenu()
	                });
	                // Add all the active layers
	                for (var i = 0; i < Gx.lyr.length; i++) {
	                    tracemenu.items.push({
	                        text: Gx.lyr[i].name,
	                        menu: traceoptionsmenu(i)
	                    });
	                }
	                return tracemenu;
	            }
	        };
	
	        var FILES_MENU = {
	            text: "Files...",
	            menu: {
	                title: "FILES OPTIONS",
	                items: [
	                    // Overlay File... is disabled
	                    // because it's actually very
	                    // difficult to bring up a
	                    // a file upload browse dialog
	                    /*
	                     * { text: "Overlay File...", handler: function() {
	                     * plot.change_settings( {phunits: 'R'} ); } },
	                     */
	                    {
	                        text: "Deoverlay File...",
	                        menu: function() {
	                            var Gx = plot._Gx;
	                            var deoverlaymenu = {
	                                title: "DEOVERLAY",
	                                items: []
	                            };
	                            deoverlaymenu.items.push({
	                                text: "Deoverlay All",
	                                handler: function() {
	                                    plot.deoverlay();
	                                }
	                            });
	                            /* jshint -W083 */
	                            /* TODO figure out how to not create functions within a loop */
	                            for (var i = 0; i < Gx.lyr.length; i++) {
	                                var handler = (function(index) {
	                                    return function() {
	                                        plot.deoverlay(index);
	                                    };
	                                }(i));
	
	                                deoverlaymenu.items.push({
	                                    text: Gx.lyr[i].name,
	                                    handler: handler
	                                });
	                            }
	                            /* jshint +W083 */
	                            return deoverlaymenu;
	                        }
	                    }
	                ]
	            }
	        };
	
	        var PLUGINS_MENU = {
	            text: "Plugins...",
	            menu: {
	                title: "PLUGINS",
	                items: (function() { // Immediately
	                    // Invoked
	                    // Function
	                    var result = [];
	                    for (var i = 0; i < Gx.plugins.length; i++) {
	                        var plugin = Gx.plugins[i];
	                        if (plugin.impl.menu) {
	                            if (typeof plugin.impl.menu === 'function') {
	                                result.push(plugin.impl.menu());
	                            } else {
	                                result.push(plugin.impl.menu);
	                            }
	                        }
	                    }
	                    return result;
	                }())
	            }
	        };
	
	        var SAVE_MENU = {
	            text: "Save as...",
	            menu: {
	                title: "SAVE AS",
	                items: [{
	                    text: "PNG",
	                    handler: function() {
	                        var img = plot._Mx.active_canvas.toDataURL("image/png");
	                        var link = document.createElement("a");
	                        link.href = img;
	                        link.download = "SigPlot." + (new Date()).getTime() + ".png";
	                        link.display = "none";
	                        document.body.appendChild(link);
	                        link.click();
	                        document.body.removeChild(link);
	                    }
	                }, {
	                    text: "JPG",
	                    handler: function() {
	                        var img = plot._Mx.active_canvas.toDataURL("image/jpg");
	                        var link = document.createElement("a");
	                        link.href = img;
	                        link.download = "SigPlot." + (new Date()).getTime() + ".jpg";
	                        link.display = "none";
	                        document.body.appendChild(link);
	                        link.click();
	                        document.body.removeChild(link);
	                    }
	                }, {
	                    text: "SVG",
	                    handler: function() {
	                        var img = plot._Mx.active_canvas.toDataURL("image/svg");
	                        var link = document.createElement("a");
	                        link.href = img;
	                        link.download = "SigPlot." + (new Date()).getTime() + ".svg";
	                        link.display = "none";
	                        document.body.appendChild(link);
	                        link.click();
	                        document.body.removeChild(link);
	                    }
	                }]
	            }
	        };
	
	        var REFRESH_ITEM = {
	            text: "Refresh" // no handler, just let the finalizer deal with
	                // it
	        };
	
	        var KEYPRESSINFO_ITEM = {
	            text: "Keypress Info",
	            handler: function() {
	                mx.message(Mx, KEYPRESS_HELP);
	            }
	        };
	
	        var EXIT_ITEM = {
	            text: "Exit",
	            handler: function() {
	                var evt = document.createEvent('Event');
	                evt.initEvent('sigplotexit', true, true);
	                mx.dispatchEvent(Mx, evt);
	            }
	        };
	
	        // Main Menu
	        var MAINMENU = {
	            title: "SIG-PLOT",
	            finalize: function() {
	                if (!Mx.prompt) {
	                    // A prompt may have been
	                    // created by a menu handler
	                    // - let it deal with
	                    // eventListener re-setting
	                    mx.addEventListener(Mx, "mousedown", plot.onmousedown,
	                        false);
	                }
	                plot.refresh();
	            },
	            items: [REFRESH_ITEM, CONTROLS_MENU, CXMODE_MENU, SCALING_MENU, VIEW_MENU,
	                GRID_MENU, SETTINGS_MENU, COLORMAP_MENU, TRACES_MENU, FILES_MENU,
	                PLUGINS_MENU, KEYPRESSINFO_ITEM, SAVE_MENU, EXIT_ITEM
	            ]
	        };
	
	        mx.menu(Mx, MAINMENU);
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function rubberbox_cb(plot, triggerEvent) {
	        return function(event, xo, yo, xl, yl, action, mode) {
	            var Gx = plot._Gx;
	            var Mx = plot._Mx;
	
	            var x = Math.min(xo, xl);
	            var y = Math.min(yo, yl);
	            var w = Math.abs(xl - xo);
	            var h = Math.abs(yl - yo);
	
	            var takeAction = false;
	            if (event.which === triggerEvent) {
	                // On some browsers, a click will actually be sent as
	                // mousedown/mousemove/mouseup so
	                // don't make insanely small zooms...instead treat them as a
	                // click
	                if (mode === "horizontal") {
	                    takeAction = (w > 2);
	                } else if (mode === "vertical") {
	                    takeAction = (h > 2);
	                } else {
	                    takeAction = ((w > 2) && (h > 2));
	                }
	            }
	
	            if (!takeAction) {
	                // The mouse didn't shift enough to be considered
	                // as a rubberbox action so treat it as mouseup
	                plot.mouseup(event);
	            } else {
	                // action === null is disabled, but undefined is default
	                if ((action === undefined) || (action === "zoom")) {
	                    plot.pixel_zoom(xo, yo, xl, yl);
	                    plot.refresh();
	                } else if (action === "select") {
	                    var evt = document.createEvent('Event');
	                    evt.initEvent('mtag', true, true);
	                    var re = pixel_to_real(plot, x, y);
	                    var rwh = pixel_to_real(plot, x + w, y + h);
	                    evt.x = re.x;
	                    evt.y = re.y;
	                    evt.xpos = x;
	                    evt.ypos = y;
	                    evt.w = Math.abs(rwh.x - re.x);
	                    evt.h = Math.abs(rwh.y - re.y);
	                    evt.wpxl = w;
	                    evt.hpxl = h;
	                    evt.shift = event.shiftKey;
	                    mx.dispatchEvent(Mx, evt);
	                }
	            }
	        };
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function plot_init(plot, o) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	
	        // Equivalent to reading cmd line args
	        Gx.xmin = o.xmin === undefined ? 0.0 : o.xmin;
	        Gx.xmax = o.xmax === undefined ? 0.0 : o.xmax;
	        var havexmin = (o.xmin !== undefined);
	        var havexmax = (o.xmax !== undefined);
	        var address = o.cmode === undefined ? "" : o.cmode.toUpperCase();
	        var line = o.line === undefined ? 3 : o.line;
	        Gx.ylab = o.ylab;
	        Gx.ylabel = o.ylabel;
	        Gx.ymin = o.ymin === undefined ? 0.0 : o.ymin;
	        Gx.ymax = o.ymax === undefined ? 0.0 : o.ymax;
	        var haveymin = (o.ymin !== undefined);
	        var haveymax = (o.ymax !== undefined);
	        Gx.zmin = o.zmin;
	        Gx.zmax = o.zmax;
	        var havezmin = (o.zmin !== undefined);
	        var havezmax = (o.zmax !== undefined);
	
	        if (o.colors !== undefined) {
	            mx.setbgfg(Mx, o.colors.bg, o.colors.fg, Mx.xi);
	        }
	
	        if (o.xi !== undefined) {
	            mx.invertbgfg(Mx);
	        }
	
	        Gx.forcelab = o.forcelab === undefined ? true : o.forcelab;
	
	        Gx.all = o.all === undefined ? false : o.all;
	        // By default, SIGPLOT auto-scales only on the first buffer size.
	        // "expand" is a feature added for websigplot that when
	        // combined with "all" will expand the y-range automaticall
	        // to accomodate all of the samples
	        Gx.expand = o.expand === undefined ? false : o.expand;
	
	        // TODO Gx.mimic = M$GET_SWITCH ('MIMIC')
	        Gx.xlab = o.xlab;
	        Gx.xlabel = o.xlabel;
	        Gx.segment = o.segment === undefined ? false : o.segment;
	        Gx.plab = 24;
	
	        var phunits = (o.phunits === undefined) ? 'D' : o.phunits;
	        if (phunits[0] === 'R') {
	            Gx.plab = 23;
	        } else if (phunits[0] === 'C') {
	            Gx.plab = 25;
	        }
	        Gx.xdiv = o.xdiv === undefined ? 5 : o.xdiv;
	        Gx.ydiv = o.ydiv === undefined ? 5 : o.ydiv;
	
	        Gx.xcompression = o.xcmp || 0;
	        Gx.rasterSmoothing = o.smoothing || false;
	
	        Mx.origin = 1;
	        if (o.yinv) {
	            Mx.origin = 4;
	        }
	        Gx.pmt = o.pmt === undefined ? 1.0 : o.pmt;
	        Gx.bufmax = o.bufmax === undefined ? 32768 : o.bufmax;
	        Gx.sections = o.nsec === undefined ? 0 : o.nsec;
	        Gx.anno_type = o.anno_type === undefined ? 0 : o.anno_type;
	
	        Gx.xfmt = o.xfmt === undefined ? "" : o.xfmt;
	        Gx.yfmt = o.yfmt === undefined ? "" : o.yfmt;
	
	        // TODO Gx.xf.msgid = M$GET_SWITCH ('MSGID')
	        // Gx.xf.msgmask = max (0, M$GET_SWITCH ('MASK'))
	
	        Gx.index = o.index === undefined ? false : o.index;
	        var imode = (Gx.index || (address.slice(0, 2) === "IN"));
	        if (imode) {
	            if (havexmin && (Gx.xmin === 1.0)) {
	                havexmin = false;
	            }
	            if (havexmax && (Gx.xmin === 1.0)) {
	                havexmax = false;
	            }
	        }
	
	        Gx.xdata = false;
	        Gx.note = "";
	        Gx.hold = 0;
	        Gx.always_show_marker = o.always_show_marker || false;
	
	        m.vstype('D');
	
	        if (!o.inputs) {
	            basefile(plot, false);
	        } else {
	            // TODO load files
	        }
	
	        var cmode = address.slice(0, 2);
	        if (cmode === "IN" || cmode === "AB" || cmode === "__") {
	            cmode = address.slice(2, 4);
	        }
	
	        // TODO
	        if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {
	            Gx.cmode = 1;
	        } else {
	            Gx.cmode = 3;
	        }
	
	        if (cmode === "MA") {
	            Gx.cmode = 1;
	        }
	        if (cmode === "PH") {
	            Gx.cmode = 2;
	        }
	        if (cmode === "RE") {
	            Gx.cmode = 3;
	        }
	        if (cmode === "IM") {
	            Gx.cmode = 4;
	        }
	        if ((cmode === "LO") || (cmode === "D1")) {
	            Gx.cmode = 6;
	        }
	        if ((cmode === "L2") || (cmode === "D2")) {
	            Gx.cmode = 7;
	        }
	        if ((cmode === "RI") || (cmode === "IR")) {
	            if (Gx.index) {
	                alert("Imag/Real mode not permitted in INDEX mode");
	            } else {
	                Gx.cmode = 5;
	            }
	        }
	        Gx.basemode = Gx.cmode;
	        plot.change_settings({
	            cmode: Gx.cmode
	        });
	
	        // if ( (Gx.forcelab) .and. (Gx.xlab .le. 0) .and.
	        // & (Gx.ylab .le. 0) ) then
	        // call M$WARNING
	        // & ('/xlab or /ylab is missing with /forcelab usage')
	        // Gx.forcelab = .false.
	        // endif
	
	        Gx.dbmin = 1.0e-20;
	        if (Gx.cmode >= 6) {
	            var dbscale = 10.0;
	            if (Gx.cmode === 7) {
	                dbscale = 20.0;
	            }
	            if (cmode[0] === "L") {
	                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {
	                    Gx.ymin = Math.max(Gx.ymin, 1e-10);
	                    Gx.ymax = Math.max(Gx.ymax, 1e-10);
	                } else {
	                    Gx.ymin = Math.max(Gx.ymin, 1e-20);
	                    Gx.ymax = Math.max(Gx.ymax, 1e-20);
	                }
	                Gx.ymin = m.log10(Gx.ymin) * dbscale;
	                Gx.ymax = m.log10(Gx.ymax) * dbscale;
	            } else if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {
	                Gx.ymin = Math.max(-18.0 * dbscale, Gx.ymin);
	                Gx.ymax = Math.max(-18.0 * dbscale, Gx.ymax);
	                Gx.dbmin = 1e-37;
	            } else if (Math.min(Gx.ymin, Gx.ymax) < -20.0 * dbscale) {
	                Gx.ymin = Math.max(-37.0 * dbscale, Gx.ymin);
	                Gx.ymax = Math.max(-37.0 * dbscale, Gx.ymax);
	                Gx.dbmin = Math.pow(10, Math.min(Gx.ymin, Gx.ymax) / dbscale);
	            }
	        }
	
	        Mx.level = 0;
	        if (imode && !Gx.index) {
	            if (havexmin) {
	                Gx.xmin = Gx.xstart + Gx.xdelta * (Gx.xmin - 1.0);
	            }
	            if (havexmin) {
	                Gx.xmax = Gx.xstart + Gx.xdelta * (Gx.xmax - 1.0);
	            }
	        }
	        Gx.xmult = o.xmult;
	        Gx.ymult = o.xmult;
	        Gx.autox = o.autox === undefined ? -1 : o.autox;
	        if (Gx.autox < 0) {
	            Gx.autox = 0;
	            if (!havexmin) {
	                Gx.autox += 1;
	            }
	            if (!havexmax) {
	                Gx.autox += 2;
	            }
	        }
	        Gx.autoy = o.autoy === undefined ? -1 : o.autoy;
	        if (Gx.autoy < 0) {
	            Gx.autoy = 0;
	            if (!haveymin) {
	                Gx.autoy += 1;
	            }
	            if (!haveymax) {
	                Gx.autoy += 2;
	            }
	        }
	        Gx.autoz = o.autoz === undefined ? -1 : o.autoz;
	        if (Gx.autoz < 0) {
	            Gx.autoz = 0;
	            if (!havezmin) {
	                Gx.autoz += 1;
	            }
	            if (!havezmax) {
	                Gx.autoz += 2;
	            }
	        }
	        Gx.autol = o.autol === undefined ? -1 : o.autol;
	
	        if (!havexmin) {
	            Gx.xmin = undefined;
	        }
	        if (!havexmax) {
	            Gx.xmax = undefined;
	        }
	        scale_base(plot, {
	            get_data: true
	        }, Gx.xmin, Gx.xmax, Gx.xlab, Gx.ylab);
	
	        if (!havexmin) {
	            Gx.xmin = Mx.stk[0].xmin;
	        }
	        if (!havexmax) {
	            Gx.xmax = Mx.stk[0].xmax;
	        }
	        if (!haveymin) {
	            Gx.ymin = Mx.stk[0].ymin;
	        }
	        if (!haveymax) {
	            Gx.ymax = Mx.stk[0].ymax;
	        }
	
	        if (Gx.xmin > Gx.xmax) {
	            Mx.stk[0].xmin = Gx.xmax;
	            Gx.xmax = Gx.xmin;
	            Gx.xmin = Mx.stk[0].xmin;
	        }
	        if (Gx.ymin > Gx.ymax) {
	            Mx.stk[0].ymin = Gx.ymax;
	            Gx.ymax = Gx.ymin;
	            Gx.ymin = Mx.stk[0].ymin;
	        }
	        Mx.stk[0].xmin = Gx.xmin;
	        Mx.stk[0].xmax = Gx.xmax;
	        Mx.stk[0].ymin = Gx.ymin;
	        Mx.stk[0].ymax = Gx.ymax;
	        Gx.panxmin = Math.min(Gx.panxmin, Gx.xmin);
	        Gx.panxmax = Math.max(Gx.panxmax, Gx.xmax);
	        Gx.panymin = Math.min(Gx.panymin, Gx.ymin);
	        Gx.panymax = Math.max(Gx.panymax, Gx.ymax);
	
	        Gx.xmin = Mx.stk[0].xmin;
	        Gx.ymin = Mx.stk[0].ymin;
	
	        if (o.font_family) {
	            Mx.font_family = o.font_family;
	        }
	        mx.set_font(Mx, Math.min(7, Mx.width / 64));
	
	        Gx.ncolors = o.ncolors === undefined ? 16 : o.ncolors;
	        Gx.cmap = null;
	        if (o.cmap) {
	            Gx.cmap = o.cmap;
	        } else {
	            Gx.cmap = o.xc === undefined ? -1 : o.xc;
	        }
	
	        setup_cmap(plot, Gx.cmap);
	
	        // TODO setup annotate, boxes and points facilities
	
	        // TODO initialize layer structure line types
	
	        if (o.xcnt === "leftmouse") {
	            Gx.cntrls = 1;
	        } else if (o.xcnt === "continuous") {
	            Gx.cntrls = 2;
	        } else {
	            Gx.cntrls = o.xcnt === undefined ? 1 : o.xcnt;
	        }
	
	        Gx.default_rubberbox_mode = o.rubberbox_mode === undefined ? "box" : o.rubberbox_mode;
	        Gx.default_rubberbox_action = o.rubberbox_action === undefined ? "zoom" : o.rubberbox_action;
	        Gx.default_rightclick_rubberbox_mode = o.rightclick_rubberbox_mode === undefined ? "box" : o.rightclick_rubberbox_mode;
	        Gx.default_rightclick_rubberbox_action = o.rightclick_rubberbox_action === undefined ? null : o.rightclick_rubberbox_action;
	
	        Gx.cross = o.cross === undefined ? false : o.cross;
	        Gx.grid = o.nogrid === undefined ? true : !o.nogrid;
	        Gx.fillStyle = o.fillStyle;
	        Gx.gridBackground = o.gridBackground;
	        Gx.gridStyle = o.gridStyle;
	        Gx.wheelZoom = o.wheelZoom;
	        Gx.wheelZoomPercent = o.wheelZoomPercent;
	        Gx.legend = o.legend === undefined ? false : o.legend;
	        Gx.no_legend_button = o.no_legend_button === undefined ? false : o.no_legend_button;
	        Gx.legendBtnLocation = null;
	        Gx.pan = o.nopan === undefined ? true : !o.nopan;
	        Gx.nomenu = o.nomenu === undefined ? false : o.nomenu;
	
	        // TODO Gx.lmap.ip = 0
	        Gx.modmode = 0;
	        Gx.modlayer = -1; // 0-based indexing instead of 1
	        Gx.modsource = 0;
	        Gx.modified = (o.mod && Gx.lyr.length > 0);
	        // TODO Gx.marks(5) = 5
	        Gx.nmark = 0;
	        Gx.iabsc = 0;
	        if (Gx.index) {
	            Gx.iabsc = 1;
	        }
	        // TODO if (o.specs > 0) Gx.iabsc = M$SEARCH('IRS',c(1:1))
	        Gx.specs = !o.nospecs;
	
	        Gx.scroll_time_interval = o.scroll_time_interval === undefined ? Gx.scroll_time_interval : o.scroll_time_interval;
	
	        Gx.autohide_readout = o.autohide_readout;
	        Gx.autohide_panbars = o.autohide_panbars;
	        Gx.x_scrollbar_location = o.x_scrollbar_location;
	        if (Gx.specs) {
	            Gx.show_x_axis = !o.noxaxis;
	            Gx.show_y_axis = !o.noyaxis;
	            Gx.show_readout = !o.noreadout;
	            if (Gx.show_x_axis || Gx.show_y_axis || Gx.show_readout) {
	                Gx.specs = true;
	            } else {
	                Gx.specs = false;
	            }
	        } else {
	            Gx.show_x_axis = false;
	            Gx.show_y_axis = false;
	            Gx.show_readout = false;
	        }
	        Gx.hide_note = o.hide_note || false;
	
	        Gx.xmrk = 0.0;
	        Gx.ymrk = 0.0;
	
	        if (!o.nodragdrop) {
	            mx.addEventListener(Mx, "dragover", function(evt) {
	                evt.preventDefault();
	            }, false);
	
	            mx.addEventListener(Mx, "drop", (function(plot) {
	                return function(evt) {
	                    var files = evt.dataTransfer.files;
	                    if (files.length > 0) {
	                        evt.preventDefault();
	                        plot.load_files(files);
	                    }
	                };
	            }(plot)), false);
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function basefile(plot, open) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	        // != BASEFILE(false)
	
	        // unlike SIGPLOT, where if Gx.index == 1
	        // then xstart = 1.0 and xdelta = 1.0...technically
	        // Gx.retx is supposed to be the real X coordinate
	        // and Gx.aretx is supposed to be the X coordinate in the
	        // current abscissa mode
	        if (open) {
	            var hcb = Gx.HCB[0];
	            Gx.xstart = hcb.xstart;
	            Gx.xdelta = hcb.xdelta;
	            Mx.origin = 1;
	        } else {
	            Gx.xstart = 0.0;
	            Gx.xdelta = 1.0;
	            Gx.autol = -1;
	            Mx.origin = 1;
	        }
	
	        // if (!open) {
	        // Gx.lay[0].cx = false;
	        // }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function draw_accessories(plot, mode) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	        if (mode > 0) {
	            if ((mode >= 4) && (Gx.show_readout) && (!Gx.hide_note)) {
	                var ln = Gx.note.length;
	                mx.text(Mx, Mx.width - Gx.lbtn - (ln + 1) * Mx.text_w,
	                    Mx.text_h, Gx.note);
	            }
	            if (mode >= 4) {
	                draw_panbars(plot);
	            }
	            if ((mode >= 1) && (Gx.legend)) {
	                draw_legend(plot);
	            }
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function draw_plugins(plot) {
	        var Gx = plot._Gx;
	        var ctx = plot._Mx.canvas.getContext("2d");
	        var canvas;
	
	        var plugin_index = 0;
	        while (plugin_index < Gx.plugins.length) {
	            var plugin = Gx.plugins[plugin_index].impl;
	            if (plugin.refresh) {
	                canvas = Gx.plugins[plugin_index].canvas;
	
	                // Ensure the plugin canvas has the same size as the plot
	                if (canvas.width !== plot._Mx.canvas.width) {
	                    canvas.width = plot._Mx.canvas.width;
	                }
	                if (canvas.height !== plot._Mx.canvas.height) {
	                    canvas.height = plot._Mx.canvas.height;
	                }
	
	                // If the plugin canvas is visible, draw it
	                if (canvas.height !== 0 && canvas.width !== 0) {
	                    if (canvas.width !== plot._Mx.canvas.width) {
	                        canvas.width = plot._Mx.canvas.width;
	                    }
	                    if (canvas.height !== plot._Mx.canvas.height) {
	                        canvas.height = plot._Mx.canvas.height;
	                    }
	                    canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
	                    Gx.plugins[plugin_index].impl.refresh(canvas);
	                    ctx.drawImage(canvas, 0, 0);
	                }
	            }
	            plugin_index = plugin_index + 1;
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function draw_legend(plot) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	        var ctx = Mx.canvas.getContext("2d");
	
	        var n = 0; // integer*4
	        var ix = 0; // integer*4
	        var iy = 0; // integer*4
	        var ln = 0; // integer*4
	        var tw = 0; // integer*4
	        var xc = 0; // integer*4
	        var yc = 0; // integer*4
	        var xs = 0; // integer*4
	        var ys = 0; // integer*4
	        var thk = 0; // integer*4
	        var ic = 0; // integer*4
	
	        tw = Mx.text_w;
	        xs = tw * 23;
	        ys = (Gx.lyr.length + 1) * Mx.text_h;
	        xc = Mx.r - xs;
	        yc = Mx.t;
	
	        var legendPos = {
	            x: xc + 2,
	            y: yc + 2,
	            width: xs - 5,
	            height: ys - 5
	        }; // default legend size
	
	        // Determine legend position and label offset based on label sizes
	        var defLabelWidth = 98; // a magic number - default width of pixels
	        var maxLabelWidth = 0;
	        var labelOffset = 0;
	        for (n = 0; n < Gx.lyr.length; n++) { // figure out maximum label
	            // length
	            var labelLength = ctx.measureText(Gx.lyr[n].name).width;
	            if (labelLength > maxLabelWidth) {
	                maxLabelWidth = labelLength;
	            }
	        }
	        if (maxLabelWidth > defLabelWidth) {
	            labelOffset = (maxLabelWidth - defLabelWidth);
	            legendPos.width += labelOffset;
	            legendPos.x -= labelOffset;
	        }
	
	        ctx.strokeStyle = Mx.fg; // Mx.xwfg swapped in for FGColor
	        ctx.fillStyle = Mx.bg;
	        ctx.fillRect(legendPos.x, legendPos.y, legendPos.width,
	            legendPos.height); // Creating a filled box instead of using
	        // clear_area
	        ctx.strokeRect(legendPos.x, legendPos.y, legendPos.width,
	            legendPos.height);
	
	        for (n = 0; n < Gx.lyr.length; n++) {
	            ix = xc + 4 * tw;
	            iy = yc + n * Mx.text_h + Mx.text_h; // additional text_h to
	            // account for 0-based
	            // indexing
	            if (n === Gx.modlayer) {
	                mx.text(Mx, xc + tw - labelOffset, iy + Math.floor(Mx.text_w / 2), '**'); // Added text_w/2
	                // offset
	            }
	            if (Gx.lyr[n].display) {
	                ic = Gx.lyr[n].color;
	                if (Gx.lyr[n].line > 0) {
	                    thk = m.sign(Math.min(tw, Math.abs(Gx.lyr[n].thick)),
	                        Gx.lyr[n].thick);
	                    // added magic -3 offset to y coordinates to center lines
	                    // with text
	                    if (thk < 0 || thk === mx.L_dashed) {
	                        mx.draw_line(Mx, ic, ix - labelOffset, iy - 3, (ix + tw * 2) - labelOffset, iy - 3, Math.abs(thk), {
	                            mode: "dashed",
	                            on: 4,
	                            off: 4
	                        });
	                    } else {
	                        mx.draw_line(Mx, ic, ix - labelOffset, iy - 3, (ix + tw * 2) - labelOffset, iy - 3, Math.abs(thk));
	                    }
	                }
	                if (Gx.lyr[n].symbol > 0) {
	                    // New logic here with 0.6*tw to help with legend symbol
	                    // sizing
	                    if (Gx.lyr[n].radius < 0) {
	                        thk = -m.trunc(0.6 * tw);
	                    } else {
	                        thk = Math.min(Gx.lyr[n].radius, m.trunc(0.6 * tw));
	                    }
	
	                    mx.draw_symbol(Mx, ic, ix + tw - labelOffset, iy - 3,
	                        Gx.lyr[n].symbol, thk);
	                }
	            }
	            ix = ix + tw * 3;
	            iy = iy + Mx.text_h * 0.3;
	            mx.text(Mx, ix - labelOffset, iy, Gx.lyr[n].name);
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function form_plotnote(plot) {
	        var Gx = plot._Gx;
	        if (Gx.HCB.length === 0) {
	            Gx.note = "";
	        } else if (Gx.HCB[0].plotnote === undefined) {
	            var files = [];
	            for (var n = 0; n < Gx.HCB.length; n++) {
	                if (Gx.HCB[n].file_name) {
	                    files.push(Gx.HCB[n].file_name);
	                }
	            }
	            Gx.note = files.join("|").toUpperCase();
	        }
	    }
	
	    /**
	     * Draws the specified layer.
	     *
	     * This is expected to be called after clearing the plot.
	     *
	     * @param {sigplot.Plot}
	     *            the plot object
	     * @param {Number}
	     *            the layer to draw
	     * @private
	     * @memberOf sigplot
	     */
	    function draw_layer(plot, n) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	
	        if ((n >= Gx.lyr.length) || (!Gx.lyr[n].display) || (Gx.hold !== 0)) {
	            return;
	        }
	
	        Gx.lyr[n].draw();
	
	        var evt = document.createEvent('Event');
	        evt.initEvent('lyrdraw', true, true);
	        evt.index = n;
	        evt.name = Gx.lyr[n].name; // the name of the layer
	        evt.layer = Gx.lyr[n];
	        mx.dispatchEvent(Mx, evt);
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function delete_layer(plot, n) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	        //if (n < Gx.modlayer) Gx.modlayer = Gx.modlayer - 1;
	        //if (n < Gx.modsource) Gx.modsource = Gx.modsource - 1;
	
	        // Notify listeners that a layer is about to be deleted
	        var evt = document.createEvent('Event');
	        evt.initEvent('lyrdel', true, true);
	        evt.index = n;
	        evt.name = Gx.lyr[n].name; // the name of the layer
	        evt.layer = Gx.lyr[n];
	        var executeDefault = mx.dispatchEvent(Mx, evt);
	        if (!executeDefault) {
	            return; // Delete was prevented
	        }
	
	        Gx.lyr[n].ybufn = 0;
	        Gx.lyr[n].ybuf = null;
	        if (n < Gx.lyr.length - 1) {
	            var lyr = Gx.lyr[n];
	            for (var i = n; i < Gx.lyr.length - 1; i++) {
	                Gx.lyr[i] = Gx.lyr[i + 1];
	            }
	        }
	        Gx.lyr.length -= 1;
	
	        if (Gx.HCB.length > 0) {
	            Gx.panxmin = 1.0;
	            Gx.panxmax = -1.0;
	            Gx.panymin = 1.0;
	            Gx.panymax = -1.0;
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function draw_crosshairs(plot) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        if (Gx.cross) {
	            if ((Gx.cross === "vertical") || (Gx.cross === true)) {
	                if ((Mx.xpos >= Mx.l) && (Mx.xpos <= Mx.r) && (Gx.cross_xpos !== Mx.xpos)) {
	                    if (Gx.cross_xpos !== undefined) {
	                        mx.rubberline(Mx, Gx.cross_xpos, Mx.t, Gx.cross_xpos, Mx.b);
	                    }
	                    mx.rubberline(Mx, Mx.xpos, Mx.t, Mx.xpos, Mx.b);
	                    Gx.cross_xpos = Mx.xpos;
	                }
	            }
	            if ((Gx.cross === "horizontal") || (Gx.cross === true)) {
	                if ((Mx.ypos >= Mx.t) && (Mx.ypos <= Mx.b) && (Gx.cross_ypos !== Mx.ypos)) {
	                    if (Gx.cross_ypos !== undefined) {
	                        mx.rubberline(Mx, Mx.l, Gx.cross_ypos, Mx.r, Gx.cross_ypos);
	                    }
	
	                    mx.rubberline(Mx, Mx.l, Mx.ypos, Mx.r, Mx.ypos);
	                    Gx.cross_ypos = Mx.ypos;
	                }
	            }
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function draw_marker(plot) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        if (Gx.xmrk !== null && Gx.ymrk !== null) {
	            var pix = mx.real_to_pixel(Mx, Gx.xmrk, Gx.ymrk);
	            if (pix.clipped) {
	                return;
	            }
	            var ctx = Mx.active_canvas.getContext("2d");
	            ctx.beginPath();
	            ctx.strokeStyle = Mx.xwfg;
	            ctx.fillStyle = Mx.xwfg;
	            ctx.arc(pix.x, pix.y, 2, 0, 360);
	            ctx.stroke(); // just draw the arc's outline
	
	            // TODO add x/y coord
	            ctx.textBaseline = "alphabetic";
	            ctx.textAlign = "left";
	            ctx.fillStyle = Mx.fg;
	            ctx.font = Mx.font.font;
	
	            var text = "x:" + mx.format_g(Gx.xmrk, 6, 3, true);
	            ctx.fillText(text, pix.x + 5, pix.y - 5);
	            text = "y:" + mx.format_g(Gx.ymrk, 6, 3, true);
	            ctx.fillText(text, pix.x + 5, pix.y - 5 + Mx.text_h);
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function changephunits(plot, newphunits) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	        var newplab = Gx.plab;
	        if (newphunits === 'R') {
	            newplab = 23;
	        } else if (newphunits === 'D') {
	            newplab = 24;
	        }
	        if (newphunits === 'C') {
	            newplab = 25;
	        }
	        if (newplab !== Gx.plab) {
	            var phscale = [Math.PI, 180.0, 0.5];
	            var dscl = phscale[newplab - 23] / phscale[Gx.plab - 23];
	            Gx.plab = newplab;
	            if (Gx.cmode === 2) {
	                for (var i = 0; i <= Mx.level; i++) {
	                    Mx.stk[i].ymin = Mx.stk[i].ymin * dscl;
	                    Mx.stk[i].ymax = Mx.stk[i].ymax * dscl;
	                    Mx.stk[i].yscl = Mx.stk[i].yscl * dscl;
	                }
	
	                Gx.panymin = Gx.panymin * dscl;
	                Gx.panymax = Gx.panymax * dscl;
	                plot.refresh();
	            }
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function changemode(plot, newmode) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	
	        Gx.xdata = false;
	        for (var n = 0; n < Gx.lyr.length; n++) {
	            if (newmode === 5) {
	                Gx.lyr[n].xdata = true;
	            } else {
	                Gx.lyr[n].xdata = false; // TODO (Gx.lyr(n).xsub > 0)
	            }
	            if (Gx.lyr[n].xdata) {
	                Gx.xdata = true;
	            }
	        }
	
	        if (newmode === Gx.cmode) {
	            return;
	        } else if (newmode === 5 && Gx.index) {
	            alert("Imag/Real mode not permitted in INDEX mode");
	        } else if (Gx.lyr.length <= 0) {
	            Gx.cmode = newmode;
	            // The call to display specs isn't found in sigplot.for;
	            // which causes a small bug where the plot mode is
	            // changed but the mode label in the specs area
	            // isn't updated.
	            display_specs(plot);
	        } else if (newmode > 0) {
	            var oldmode = Gx.cmode;
	            Gx.cmode = newmode;
	
	            var autox = Gx.autox;
	            var autoy = Gx.autoy;
	            Gx.autox = 3;
	            Gx.autoy = 3;
	
	            if ((newmode === 5) || (oldmode === 5)) {
	                Gx.panxmin = 1.0;
	                Gx.panxmax = -1.0;
	                Gx.panymin = 1.0;
	                Gx.panymax = -1.0;
	                Mx.level = 0;
	
	                if (newmode === Gx.basemode) {
	                    Mx.stk[0].xmin = Gx.xmin;
	                    Mx.stk[0].xmax = Gx.xmax;
	                    Mx.stk[0].ymin = Gx.ymin;
	                    Mx.stk[0].ymax = Gx.ymax;
	                } else if ((newmode === 5) || (Gx.basemode === 5)) {
	                    scale_base(plot, {
	                        get_data: true
	                    });
	                } else {
	                    Mx.stk[0].xmin = Gx.xmin;
	                    Mx.stk[0].xmax = Gx.xmax;
	                    scale_base(plot, {
	                        get_data: true
	                    }, Gx.xmin, Gx.xmax);
	                }
	            } else {
	                if (newmode === Gx.basemode) { // This is only correct if we
	                    // didn't load a basefile
	                    Gx.panymin = 1.0;
	                    Gx.panymax = -1.0;
	                    Mx.stk[0].ymin = Gx.ymin;
	                    Mx.stk[0].ymax = Gx.ymax;
	                } else {
	                    scale_base(plot, {}, Mx.stk[Mx.level].xmin,
	                        Mx.stk[Mx.level].xmax);
	                }
	                for (var n = 1; n <= Mx.level; n++) {
	                    Mx.stk[n].ymin = Mx.stk[0].ymin;
	                    Mx.stk[n].ymax = Mx.stk[0].ymax;
	                }
	            }
	            Gx.autox = autox;
	            Gx.autoy = autoy;
	            plot.refresh();
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function draw_panbars(plot) {
	        var k; // integer*4
	        //var i1; // integer*4
	        //var itext; // integer*4
	
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	
	        if ((!Gx.pan) || (Mx.widget)) {
	            return;
	        }
	
	        k = Mx.level; // Y scrollbar
	
	        var out = {
	            ps: Mx.stk[k].ymin,
	            pe: Mx.stk[k].ymax
	        };
	        var need_y_scrollbar = ((out.ps !== Gx.panymin) || (out.pe !== Gx.panymax));
	        need_y_scrollbar = need_y_scrollbar && (Mx.level > 0);
	
	        if (Gx.autohide_panbars && (!need_y_scrollbar || !plot.mouseOnCanvas) && !Gx.panning) {
	            var ctx = Mx.canvas.getContext("2d");
	            ctx.fillStyle = Mx.bg;
	            ctx.fillRect(Gx.pyl, Mx.t, Gx.pyl + Gx.pthk, Mx.b - Mx.t);
	        } else {
	            var i1 = mx.scrollbar(Mx, 0, Gx.pyl, Gx.pyl + Gx.pthk, Mx.t, Mx.b, out,
	                Gx.panymin, Gx.panymax, undefined, Mx.scrollbar_y);
	            Mx.stk[k].ymin = out.ps;
	            Mx.stk[k].ymax = out.pe;
	        }
	
	        if (Gx.pl < Mx.width) { // X scrollbar
	            out = {
	                ps: Mx.stk[k].xmin,
	                pe: Mx.stk[k].xmax
	            };
	            var need_x_scrollbar = ((out.ps !== Gx.panxmin) || (out.pe !== Gx.panxmax));
	            need_x_scrollbar = need_x_scrollbar && (!Gx.all || (Mx.level > 0));
	
	            if (Gx.autohide_panbars && (!need_x_scrollbar || !plot.mouseOnCanvas) && !Gx.panning) {
	                var ctx = Mx.canvas.getContext("2d");
	                ctx.fillStyle = Mx.bg;
	                ctx.fillRect(Gx.pl, Gx.pt - 1, Gx.pr - Gx.pl, Gx.pthk + 4);
	            } else {
	                var i1 = mx.scrollbar(Mx, 0, Gx.pl, Gx.pr, Gx.pt, Gx.pt + Gx.pthk, out,
	                    Gx.panxmin, Gx.panxmax, undefined, Mx.scrollbar_x);
	                Mx.stk[k].xmin = out.ps;
	                Mx.stk[k].xmax = out.pe;
	            }
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function pan(plot, action, flag, mouseEvent) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	
	        var i; // an integer*4
	        var k; // an integer*4
	        // var ih // an integer*4
	        // var iw; // an integer*4
	        // var imin; // an integer*4
	        // var imax; // an integer*4
	        var j; // an integer*4
	        var xmin; // a real*8
	        var xmax; // a real*8
	        var xran; // a real*8
	        // var xtemp; // a real*8
	        var ymin; // a real*8
	        var ymax; // a real*8
	        var yran; // a real*8
	        // var ytemp; // a real*8
	        var warn; // a logical*4
	
	        var scrollbarState;
	
	        var sbx = new mx.SCROLLBAR(); // a SCROLLBAR
	        var sby = new mx.SCROLLBAR(); // a SCROLLBAR
	
	        var SIGPLOT_PAN = false;
	        k = Mx.level;
	        if (Gx.panmode > 0) {
	            sbx.flag = 11;
	            sby.flag = 11;
	        } else {
	            sbx.flag = -12;
	            sby.flag = -12;
	        }
	        if (flag === 0) {
	            sbx.action = 0;
	            sby.action = 0;
	        }
	
	        warn = true;
	        if (action.substring(0, 1) === 'Y') {
	            ymin = Mx.stk[k].ymin;
	            ymax = Mx.stk[k].ymax;
	            yran = ymax - ymin;
	            if (action === 'YPAN') {
	                scrollbarState = Mx.scrollbar_y;
	
	                var out = {
	                    ps: ymin,
	                    pe: ymax
	                };
	                i = mx
	                    .scrollbar(Mx, sby, Gx.pyl, Gx.pyl + Gx.pthk, Mx.t,
	                        Mx.b, out, Gx.panymin, Gx.panymax, mouseEvent,
	                        scrollbarState);
	                ymin = out.ps;
	                ymax = out.pe;
	                // TODO: Warn only if Scrollbar arrow is pressed and no
	                // movement.
	                if (sby.action !== 0) {
	                    j = mx.scroll(Mx, sby, mx.XW_UPDATE, undefined,
	                        scrollbarState);
	                }
	                warn = false;
	            } else if (action === 'YCENTER') {
	                // Orig code : ymin = ymin - yran * (Mx.ypos - (Mx.t + Mx.b) /
	                // 2) / (Mx.b - Mx.t) // TODO Worry about any int division here?
	                ymin = ymin - yran * (Mx.ypos - (Mx.t + Mx.b) / 2) / (Mx.b - Mx.t);
	                ymax = ymin + yran;
	                warn = false;
	            }
	
	            if (ymin !== Mx.stk[k].ymin || ymax !== Mx.stk[k].ymax) {
	                Mx.stk[k].ymin = ymin;
	                Mx.stk[k].ymax = ymax;
	                if (Gx.cmode === Gx.basemode && Mx.level === 1) {
	                    Gx.ymin = Math.min(Gx.ymin, ymin);
	                    Gx.ymax = Math.max(Gx.ymax, ymax);
	                }
	
	                this.inPan = true; // prevent recursive pans
	                var evt = document.createEvent('Event');
	                evt.initEvent('ypan', true, true);
	                evt.level = Mx.level;
	                evt.xmin = Mx.stk[Mx.level].xmin;
	                evt.ymin = Mx.stk[Mx.level].ymin;
	                evt.xmax = Mx.stk[Mx.level].xmax;
	                evt.ymax = Mx.stk[Mx.level].ymax;
	                mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?
	                this.inPan = false;
	
	                plot.refresh();
	                // MSGDO(MSK_PANY, Mx.level); // just sets plotinfo.xmin and
	                // xmax into the MQD for the menu
	                SIGPLOT_PAN = true;
	            }
	            // TODO Later - Implement a messagebox status method
	            // else if (warn) {
	            // mx.message('All panned out', -1.0);
	            // }
	        } else {
	            xmin = Mx.stk[k].xmin;
	            xmax = Mx.stk[k].xmax;
	            xran = xmax - xmin;
	            if (action === 'XPAN') {
	                scrollbarState = Mx.scrollbar_x;
	
	                var out = {
	                    ps: xmin,
	                    pe: xmax
	                };
	                i = mx
	                    .scrollbar(Mx, sbx, Gx.pl, Gx.pr, Gx.pt, Gx.pt + Gx.pthk, out, Gx.panxmin, Gx.panxmax,
	                        mouseEvent, scrollbarState);
	                xmin = out.ps;
	                xmax = out.pe;
	                // TODO: Warn only if Scrollbox arrow is pressed and no
	                // movement.
	                if (sbx.action !== 0) {
	                    j = mx.scroll(Mx, sbx, mx.XW_UPDATE, undefined,
	                        scrollbarState);
	                }
	                warn = false;
	            } else if (action === 'XCENTER') {
	                // Original code : xmin = xmin + xran * (Mx.xpos - (Mx.l + Gx.r)
	                // / 2) / (Mx.r - Mx.l) // TODO Worry about any int division
	                // here?
	                xmin = xmin + xran * (Mx.xpos - (Mx.l + Mx.r) / 2) / (Mx.r - Mx.l);
	                if (xmin !== Mx.stk[k].xmin) {
	                    xmax = xmin + xran;
	                }
	                warn = false;
	            }
	
	            if (Mx.stk[k].xmin !== xmin || Mx.stk[k].xmax !== xmax) {
	                Mx.stk[k].xmin = xmin;
	                Mx.stk[k].xmax = xmax;
	                if (!Gx.xdata && Mx.level === 1) {
	                    Gx.xmin = Mx.stk[1].xmin;
	                    Gx.xmax = Mx.stk[1].xmax;
	                }
	
	                this.inPan = true; // prevent recursive pans
	                var evt = document.createEvent('Event');
	                evt.initEvent('xpan', true, true);
	                evt.level = Mx.level;
	                evt.xmin = Mx.stk[Mx.level].xmin;
	                evt.ymin = Mx.stk[Mx.level].ymin;
	                evt.xmax = Mx.stk[Mx.level].xmax;
	                evt.ymax = Mx.stk[Mx.level].ymax;
	                mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?
	                this.inPan = false;
	
	                plot.refresh();
	                // MSGDO (MSK_PANX, Mx.level); // just sets plotinfo.xmin and
	                // xmax into the MQD for the menu
	                SIGPLOT_PAN = true;
	            }
	            // TODO Later - Implement a messagebox status method
	            // else if (warn) {
	            // mx.message('All panned out', -1.0);
	            // }
	        }
	
	        return SIGPLOT_PAN;
	    }
	
	    /**
	     * Direct method to handle the dragging of a scrollbar.
	     *
	     * @param plot
	     *            The plot to work with.
	     * @param scrollAction
	     *            The scroll action being performed. Either "YPAN" or "XPAN" are
	     *            accepted.
	     * @param event
	     *            The mouse move event.
	     * @private
	     * @memberOf sigplot
	     */
	    function drag_scrollbar(plot, scrollAction, event) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	        var min;
	        var max;
	
	        // ----- Retrieve appropriate SCROLLBAR -----
	        var scrollbar;
	        if (scrollAction === "XPAN") {
	            scrollbar = plot._Mx.scrollbar_x;
	        } else if (scrollAction === "YPAN") {
	            scrollbar = plot._Mx.scrollbar_y;
	        } else {
	            throw "Unable to drag scrollbar - scrollAction is not 'XPAN' or 'YPAN'!!";
	        }
	
	        // ----- OLD SIGPLOT.PAN Logic -----
	        scrollbar.flag = -12; // TODO Necessary?
	        var k = Mx.level;
	        if (scrollAction === "XPAN") {
	            min = Mx.stk[k].xmin;
	            max = Mx.stk[k].xmax;
	        } else if (scrollAction === "YPAN") {
	            min = Mx.stk[k].ymin;
	            max = Mx.stk[k].ymax;
	        } else {
	            min = undefined;
	            max = undefined;
	        }
	
	        // ----- MX.SCROLLBAR Logic -----
	        var rangeOut = {
	            "min": min,
	            "max": max
	        };
	        drag_updateRange(Mx, Gx, scrollbar, scrollAction, rangeOut, event);
	        min = rangeOut.min;
	        max = rangeOut.max;
	
	        // ----- UPDATE SCROLLBAR -----
	        scrollbar.smin = min;
	        scrollbar.srange = max - min;
	        mx.redrawScrollbar(scrollbar, Mx, undefined);
	
	        // ----- Update the viewbox -----
	        updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange,
	            scrollAction.slice(0, 1));
	
	        this.inPan = true; // prevent recursive pans
	        var evt = document.createEvent('Event');
	        if (scrollAction === "XPAN") {
	            evt.initEvent('xpan', true, true);
	        } else if (scrollAction === "YPAN") {
	            evt.initEvent('ypan', true, true);
	        }
	        evt.level = Mx.level;
	        evt.xmin = Mx.stk[Mx.level].xmin;
	        evt.ymin = Mx.stk[Mx.level].ymin;
	        evt.xmax = Mx.stk[Mx.level].xmax;
	        evt.ymax = Mx.stk[Mx.level].ymax;
	        mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?
	        this.inPan = false;
	
	        scrollbar.action = 0; // TODO New step - reset action of the scrollbar
	        // after drag is done...
	        plot.refresh();
	    }
	
	    /**
	     * Method to update plot range based on a drag event. Takes the mouse offset
	     * introduced by the drag and adds a scale factor.
	     *
	     * @param Gx
	     *            The GX Context to work with.
	     * @param scrollbar
	     *            The Scrollbar to use.
	     * @param scrollAction
	     *            The scroll action being performed. Either "YPAN" or "XPAN" are
	     *            accepted.
	     * @param range
	     *            The plot' min and max range values to update.
	     * @param event
	     *            The mouse move event.
	     *
	     * @private
	     * @memberOf sigplot
	     */
	    function drag_updateRange(Mx, Gx, scrollbar, scrollAction, range, event) {
	        scrollbar.action = mx.SB_DRAG;
	
	        if (scrollAction === "YPAN") {
	            var scaleFactor = Mx.scrollbar_y.trange / Mx.scrollbar_y.h;
	            if (scrollbar.origin === 4) { // inverted y
	                scaleFactor *= -1;
	            }
	            var mouseOffset = event.screenY - Gx.panning.ypos;
	            var realOffset = mouseOffset * scaleFactor;
	
	            if ((Gx.panning.ymin - realOffset) < Gx.panymin) { // At the left
	                // edge
	                range.max = Gx.panymin + (range.max - range.min);
	                range.min = Gx.panymin;
	            } else if ((Gx.panning.ymax - realOffset) > Gx.panymax) { // At
	                // the
	                // right
	                // edge
	                range.min = Gx.panymax - (range.max - range.min);
	                range.max = Gx.panymax;
	            } else {
	                range.min = Gx.panning.ymin - realOffset;
	                range.max = Gx.panning.ymax - realOffset;
	            }
	        } else if (scrollAction === "XPAN") {
	            var scaleFactor = Mx.scrollbar_x.trange / Mx.scrollbar_x.w;
	            if (scrollbar.origin === 3) { // inverted x
	                scaleFactor *= -1;
	            }
	            var mouseOffset = event.screenX - Gx.panning.xpos;
	            var realOffset = mouseOffset * scaleFactor;
	
	            if ((Gx.panning.xmin + realOffset) < Gx.panxmin) { // At the left
	                // edge
	                range.max = Gx.panxmin + (range.max - range.min);
	                range.min = Gx.panxmin;
	            } else if ((Gx.panning.xmax + realOffset) > Gx.panxmax) { // At
	                // the
	                // right
	                // edge
	                range.min = Gx.panxmax - (range.max - range.min);
	                range.max = Gx.panxmax;
	            } else {
	                range.min = Gx.panning.xmin + realOffset;
	                range.max = Gx.panning.xmax + realOffset;
	            }
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function setupPrompt(plot, promptText, isValid, onSuccess, inputValue,
	        xpos, ypos, callback) {
	        var Mx = plot._Mx;
	
	        if (Mx.prompt) {
	            throw "Prompt already exists! Can only have one prompt at a time!";
	        }
	
	        // Disable Mx keypress/mouse listeners
	        mx.disableListeners(Mx);
	
	        // Disable Plot keypress/mouse listeners
	        plot.disable_listeners();
	
	        // Add on to the onSuccess method with plot specifics
	        var realOnSuccess = function(plot, onSuccess) {
	            return function(value) {
	                onSuccess(value);
	
	                // Re-enable Mx keypress/mouse listeners
	                mx.enableListeners(Mx);
	
	                // Re-enable Plot keypress/mouse listeners
	                plot.enable_listeners();
	
	                plot.refresh();
	
	                if (callback !== undefined) {
	                    callback();
	                }
	            };
	        };
	
	        var refresh = function() { // TODO Refactor this setup method to be
	            // more like mx.menu/main menu widget?
	            plot.refresh();
	        };
	
	        // Create the prompt
	        var errorMessageTimeout = 5000;
	
	        try {
	            mx.prompt(Mx, promptText, isValid, realOnSuccess(plot, onSuccess),
	                refresh, inputValue, xpos, ypos, errorMessageTimeout);
	        } catch (err) {
	            console.log("ERROR: Failed to set up prompt due to: " + err);
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function enable_listeners(plot) {
	        var Mx = plot._Mx;
	        mx.addEventListener(Mx, "mousedown", plot.onmousedown, false);
	        mx.addEventListener(Mx, "mousemove", plot.throttledOnMouseMove, false);
	        document.addEventListener("mouseup", plot.docMouseUp, false);
	        mx.addEventListener(Mx, "mouseup", plot.mouseup, false);
	        window.addEventListener("mousedown", plot.dragMouseDownHandler, false);
	        window.addEventListener("mousemove", plot.throttledDragOnMouseMove, false);
	        window.addEventListener("mouseup", plot.dragMouseUpHandler, false);
	        window.addEventListener("wheel", plot.wheelHandler, false);
	        window.addEventListener("mousewheel", plot.wheelHandler, false);
	        window.addEventListener("DOMMouseScroll", plot.wheelHandler, false);
	        window.addEventListener("keypress", plot.onkeypress, false);
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function disable_listeners(plot) {
	        var Mx = plot._Mx;
	
	        mx.removeEventListener(Mx, "mousedown", plot.onmousedown, false);
	        mx.removeEventListener(Mx, "mousemove", plot.throttledOnMouseMove,
	            false);
	        document.removeEventListener("mouseup", plot.docMouseUp, false);
	        mx.removeEventListener(Mx, "mouseup", plot.mouseup, false);
	        window.removeEventListener("mousedown", plot.dragMouseDownHandler,
	            false);
	        window.removeEventListener("mousemove", plot.throttledDragOnMouseMove,
	            false);
	        window.removeEventListener("mouseup", plot.dragMouseUpHandler, false);
	        window.removeEventListener("wheel", plot.wheelHandler, false);
	        window.removeEventListener("mousewheel", plot.wheelHandler, false);
	        window.removeEventListener("DOMMouseScroll", plot.wheelHandler, false);
	        window.removeEventListener("keypress", plot.onkeypress, false);
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function display_specs(plot) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	
	        var ctx = Mx.canvas.getContext("2d");
	
	        // section logic
	        if (Gx.sections !== 0) {
	            // TODO
	        } else {
	            Gx.isec = 0;
	        }
	
	        // transform into realworld coordinates
	        // is already done by the mousemove listener
	        // adjust for abscissa mode
	        if (Mx.warpbox) {
	            var re = pixel_to_real(plot, Mx.warpbox.xo, Mx.warpbox.yo);
	            var rwh = pixel_to_real(plot, Mx.warpbox.xl, Mx.warpbox.yl);
	
	            Gx.aretx = re.x;
	            Gx.arety = re.y;
	            Gx.dretx = rwh.x - re.x;
	            Gx.drety = rwh.y - re.y;
	        } else {
	            Gx.aretx = Gx.retx;
	            Gx.arety = Gx.rety;
	            Gx.dretx = Gx.retx - Gx.xmrk;
	            Gx.drety = Gx.rety - Gx.ymrk;
	        }
	
	        if ((Gx.cmode === 5) && (Gx.iabsc === 1)) {
	            Gx.iabsc = 2;
	        } // R/I mode
	        if (Gx.iabsc === 1) { // index
	            Gx.aretx = Math.round((Gx.aretx - Gx.xstart) / Gx.xdelta);
	            if (!Gx.index) {
	                Gx.aretx += 1;
	            }
	            Gx.dretx = Math.round(Gx.dretx / Gx.xdelta);
	        } else if (Gx.iabsc === 2) { // 1/absc
	            if (Gx.aretx !== 0.0) {
	                Gx.aretx = 1.0 / Gx.aretx;
	            }
	            if (Gx.arety !== 0.0) {
	                Gx.arety = 1.0 / Gx.arety;
	            }
	            if (Gx.dretx !== 0.0) {
	                Gx.dretx = 1.0 / Gx.dretx;
	            }
	            if (Gx.drety !== 0.0) {
	                Gx.drety = 1.0 / Gx.drety;
	            }
	        }
	
	        if ((!Gx.show_readout) || (Mx.widget)) {
	            return;
	        }
	
	        // Clear the specs area
	        // First clear the y-row
	        ctx.fillStyle = Mx.bg;
	        var iy = Math.floor(Mx.height - 2.5 * Mx.text_h);
	        ctx.fillRect(Mx.text_w, iy - 1, 49 * Mx.text_w, iy + 1.5 * Mx.text_h);
	
	        // Then clear the x-row
	        iy = Math.floor(Mx.height - 0.5 * Mx.text_h);
	        var k = Math.max(Gx.pr + Mx.text_w, Mx.width - Mx.text_w * 2);
	        ctx.fillStyle = Mx.bg;
	        ctx.fillRect(k, iy - Mx.text_h, Mx.text_w, Mx.text_h);
	
	        if (Gx.autohide_readout && !plot.mouseOnCanvas && !Gx.panning) {
	            return;
	        }
	
	        var xval, yval, xdelta, ydelta;
	        // TODO handle xfmt/yfmt using m.d2a_form equivalent 
	        if ((Gx.iabsc === 0) && (Gx.ylab === 4)) {
	            yval = (m.sec2tspec(Gx.arety) + "                ").substring(0, 16);
	            ydelta = (m.sec2tspec(Gx.drety, "delta") + "                ").substring(0, 16);
	        } else {
	            yval = mx.format_g(Gx.arety, 16, 9, true);
	            ydelta = mx.format_g(Gx.drety, 16, 9);
	        }
	        if ((Gx.iabsc === 0) && (Gx.xlab === 4)) {
	            xval = (m.sec2tspec(Gx.aretx) + "                ").substring(0, 16);
	            xdelta = (m.sec2tspec(Gx.dretx, "delta") + "                ").substring(0, 16);
	        } else {
	            xval = mx.format_g(Gx.aretx, 16, 9, true);
	            xdelta = mx.format_g(Gx.dretx, 16, 9);
	        }
	
	        var chara = "y: " + yval + " dy: " + ydelta + " L=" + Mx.level + " " + cxm[Gx.cmode - 1];
	        var charb = "x: " + xval + " dx: " + xdelta + " " + cam[Gx.iabsc];
	        if (Gx.iabsc === 3) {
	            if (Gx.dretx === 0.0) {
	                chara = chara.substr(0, 20) + "sl: Inf             " + chara.substr(40, chara.length);
	            } else {
	                chara = chara.substr(0, 20) + "sl: " + mx.format_g(Gx.drety / Gx.dretx, 16, 9) + chara.substr(40, chara.length);
	            }
	        }
	
	        iy = Math.floor(Mx.height - 1.5 * Mx.text_h);
	        mx.text(Mx, Mx.text_w, iy, chara);
	        iy = Math.floor(Mx.height - 0.5 * Mx.text_h);
	        mx.text(Mx, Mx.text_w, iy, charb);
	
	        if (mx.LEGACY_RENDER) {
	            // display controls indicator
	            if (k < Mx.width) {
	                if (Gx.cntrls > 0) {
	                    mx.text(Mx, k, iy, 'C');
	                } else {
	                    mx.text(Mx, k, iy, ' ');
	                }
	            }
	        }
	
	        // draw color bar
	        var x = (49 * Mx.text_w) - 3;
	        var y = Mx.height - Mx.text_h * 2.5;
	        var w = Mx.text_w;
	        var h = Mx.text_h * 2;
	
	        mx.colorbar(Mx, x, y, w, h);
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function scale_base(plot, mode, xxmin, xxmax, xlab, ylab) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	
	        var load = (mode.get_data === true);
	
	        Gx.panxmin = 1.0;
	        Gx.panxmax = -1.0;
	        Gx.panymin = 1.0;
	        Gx.panymax = -1.0;
	        var xmin = xxmin;
	        var xmax = xxmax;
	        var noxmin = (xmin === undefined);
	        var noxmax = (xmax === undefined);
	        if (Gx.lyr.length === 0) {
	            Gx.panxmin = -1.0;
	            Gx.panxmax = 1.0;
	            Gx.panymin = -1.0;
	            Gx.panymax = 1.0;
	        } else {
	            if (xlab === undefined) {
	                Gx.xlab = Gx.lyr[0].xlab;
	            }
	            if (ylab === undefined) {
	                Gx.ylab = Gx.lyr[0].ylab;
	            }
	
	            for (var n = 0; n < Gx.lyr.length; n++) {
	                if (noxmin) {
	                    xmin = Gx.lyr[n].xmin;
	                }
	
	                if (noxmax) {
	                    xmax = Gx.lyr[n].xmax;
	                }
	
	                if (Gx.xlab !== Gx.lyr[n].xlab) {
	                    Gx.xlab = 0; // If the layers aren't consistent use None
	                }
	                if (Gx.ylab !== Gx.lyr[n].ylab) {
	                    Gx.ylab = 0; // If the layers aren't consistent use None
	                }
	
	                if (load) {
	                    Gx.lyr[n].get_data(xmin, xmax);
	                }
	
	                if (Gx.autox > 0 || Gx.autoy > 0) {
	                    while (xmin < xmax) {
	                        // get_data fills in the layer xbuf/ybuf with data
	                        Gx.lyr[n].get_data(xmin, xmax);
	
	                        // have the layer prep it's data to be rendered
	                        var npts = Gx.lyr[n].prep(xmin, xmax);
	
	                        // If both All and Expand are provided we
	                        // need to look at the entire file to auto-scale it
	                        if (Gx.all && Gx.expand) {
	                            if (Gx.lyr[n].size === 0) {
	                                xmin = xmax;
	                            } else {
	                                if (Gx.index) {
	                                    xmin = xmin + npts;
	                                } else {
	                                    if (Gx.lyr[n].xdelta >= 0) {
	                                        xmin = xmin + (Gx.lyr[n].size * Gx.lyr[n].xdelta);
	                                    } else {
	                                        xmax = xmax + (Gx.lyr[n].size * Gx.lyr[n].xdelta);
	                                    }
	                                }
	                            }
	                        } else {
	                            xmin = xmax;
	                        }
	                    }
	                } else {
	                    Gx.lyr[n].prep(1.0, -1.0);
	                }
	            }
	        }
	
	        var xran = Gx.panxmax - Gx.panxmin;
	        if (xran < 0.0) {
	            Gx.panxmax = Gx.panxmin;
	            Gx.panxmin = Gx.panxmax + xran;
	            xran = -xran;
	        }
	        if (xran <= 1.0e-20) {
	            Gx.panxmin = Gx.panxmin - 1.0;
	            Gx.panxmax = Gx.panxmax + 1.0;
	        }
	
	        if (((Gx.autox & 1) !== 0) && noxmin) {
	            Mx.stk[0].xmin = Gx.panxmin;
	        }
	        if (((Gx.autox & 2) !== 0) && noxmax) {
	            Mx.stk[0].xmax = Gx.panxmax;
	            if (!(Gx.all || Gx.xdata)) {
	                for (var n = 0; n < Gx.lyr.length; n++) {
	                    xmax = Math.min(Gx.lyr[n].xmax, Mx.stk[0].xmax);
	                    var dpts = Math.abs((xmax - Gx.lyr[n].xmin) / Gx.lyr[n].xdelta) - Gx.bufmax + 1.0;
	                    if (dpts > 0) {
	                        Mx.stk[0].xmax = xmax - dpts * Math.abs(Gx.lyr[n].xdelta);
	                    }
	                }
	            }
	        }
	
	        if (((Gx.autoy & 1) !== 0)) {
	            Mx.stk[0].ymin = Gx.panymin;
	        }
	        if (((Gx.autoy & 2) !== 0)) {
	            Mx.stk[0].ymax = Gx.panymax;
	        }
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function pixel_to_real(plot, xpos, ypos) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        var ret = mx.pixel_to_real(Mx, xpos, ypos);
	        if (Gx.index) {
	            ret.x = ret.x * Gx.xdelta;
	        }
	
	        return ret;
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function coordsInRectangle(x, y, rect_x, rect_y, rect_width, rect_height) {
	        return (x >= rect_x && x <= rect_x + rect_width && y >= rect_y && y <= rect_y + rect_height);
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function inPanRegion(plot) {
	        var inPanRegion = false;
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	        var x = Mx.xpos;
	        var y = Mx.ypos;
	
	        var command = ' ';
	
	        if (!plot.mouseOnCanvas) {
	            return false;
	        }
	
	        if (!Gx.pan) {
	            return false;
	        }
	
	        var outside_right_border = (x > Mx.r);
	        var above_top_border = (y <= Gx.pt + Gx.pthk + 2);
	        var below_bottom_border = (y > Gx.pt - 2);
	        var between_top_and_bottom = (y >= Mx.t && y <= Mx.b);
	        var between_left_and_right = (x >= Gx.pl && x <= Gx.pr);
	        var has_bottom_scrollbar = (Gx.show_readout || (Gx.x_scrollbar_location === "bottom"));
	
	        if (outside_right_border && between_top_and_bottom) { // YPAN
	            command = 'YPAN'; // Y scrollbar
	            Mx.xpos = Gx.pyl + m.trunc(Gx.pthk / 2); // TODO do we want to
	            // reset the xposition?
	            inPanRegion = true;
	        } else if (has_bottom_scrollbar && between_left_and_right && below_bottom_border) {
	            command = 'XPAN'; // X scrollbar
	            Mx.ypos = Gx.pt + m.trunc(Gx.pthk / 2); // TODO Do we want to reset
	            // the yposition?
	            inPanRegion = true;
	        } else if (!has_bottom_scrollbar && between_left_and_right && above_top_border) {
	            command = 'XPAN'; // X scrollbar
	            Mx.ypos = Gx.pt + m.trunc(Gx.pthk / 2); // TODO Do we want to reset
	            // the yposition?
	            inPanRegion = true;
	        }
	
	        return {
	            inPanRegion: inPanRegion,
	            command: command
	        };
	    }
	
	    /**
	     * @memberOf sigplot
	     * @private
	     */
	    function inPanCenterRegion(plot) {
	        var inCenterRegion = false;
	        var Mx = plot._Mx;
	        var x = Mx.xpos;
	        var y = Mx.ypos;
	        var th = Mx.text_h;
	        var tw = Mx.text_w;
	        var command = ' ';
	
	        if (x < Mx.l - tw && y <= Mx.b && y >= Mx.t) { // YCENTER
	            // Mx.canvas.getContext("2d").strokeStyle = "blue";
	            // Mx.canvas.getContext("2d").strokeRect(0, Mx.t, Mx.l - tw, Mx.b -
	            // Mx.t);
	            command = 'YCENTER';
	            inCenterRegion = true;
	        } else if (y > Mx.b + m.trunc(0.5 * tw) && y <= Mx.b + m.trunc(m.trunc(3 * th) / 2) && x >= Mx.l && x <= Mx.r) { // XCENTER
	            // Mx.canvas.getContext("2d").strokeStyle = "red";
	            // Mx.canvas.getContext("2d").strokeRect(Mx.l, Mx.b + m.trunc(.5 *
	            // tw),
	            // Mx.r - Mx.l, (Mx.b + m.trunc(m.trunc(3 * th) / 2)) - (Mx.b +
	            // m.trunc(.5 * tw)));
	            command = 'XCENTER';
	            inCenterRegion = true;
	        }
	
	        return {
	            inCenterRegion: inCenterRegion,
	            command: command
	        };
	    }
	
	    /**
	     * Returns true if position is within the given scrollbar's area. Depends on
	     * mx.scroll_real2pix method.
	     *
	     * @param position
	     *            An object containing 'x' and 'y' pixel values that represent a
	     *            position.
	     * @param scrollbar
	     *            The scrollbar object itself.
	     *
	     * @private
	     * @memberOf sigplot
	     */
	    function onScrollbar(position, scrollbar) {
	        var s1;
	        var sw;
	
	        /*
	         * Compute s, the offset in pixels from the 'origin' of the scrollbar's
	         * on-screen region.
	         */
	        var s;
	        if (scrollbar.origin & 1) {
	            s = position.x - scrollbar.x;
	            if (scrollbar.origin & 2) {
	                s = scrollbar.w - s;
	            }
	        } else {
	            s = position.y - scrollbar.y;
	            if (scrollbar.origin <= 2) {
	                s = scrollbar.h - s;
	            }
	        }
	
	        // Update s1 and sw values
	        var scrollReal2PixOut = mx.scroll_real2pix(scrollbar);
	        s1 = scrollReal2PixOut.s1;
	        sw = scrollReal2PixOut.sw;
	
	        // Determine if mouse is on scrollbar
	        if (s >= s1 && s <= s1 + sw) {
	            return true;
	        } else {
	            return false;
	        }
	    }
	
	    /**
	     * Performs the middle-click scroll-menu action specified on the plot.
	     *
	     * @param plot
	     *            The plot to work with.
	     * @param action
	     *            The scrollbar action to perform.
	     * @param direction
	     *            The scroll direction to update. Acceptable directions are
	     *            either "XPAN" or "YPAN".
	     * @memberOf sigplot
	     * @private
	     */
	    function middleClickScrollMenuAction(plot, action, direction) {
	        var Mx = plot._Mx;
	
	        // Determine the appropriate scrollbar to work with
	        var scrollbar;
	        if (direction === "XPAN") {
	            scrollbar = Mx.scrollbar_x;
	        } else if (direction === "YPAN") {
	            scrollbar = Mx.scrollbar_y;
	        }
	
	        // Set scrollbar action
	        scrollbar.action = action;
	        scrollbar.step = 0.1 * scrollbar.srange;
	        scrollbar.page = 9 * scrollbar.step;
	        scrollbar.scale = 2.0;
	
	        // Update min and range to the appropriate values based on action
	        mx.scroll(Mx, scrollbar, mx.XW_COMMAND, undefined, scrollbar);
	
	        // Update the viewbox based on new min and max values
	        updateViewbox(plot, scrollbar.smin, scrollbar.smin + scrollbar.srange,
	            direction.slice(0, 1));
	
	        this.inPan = true; // prevent recursive pans
	        var evt = document.createEvent('Event');
	        if (direction === "XPAN") {
	            evt.initEvent('xpan', true, true);
	        } else if (direction === "YPAN") {
	            evt.initEvent('ypan', true, true);
	        }
	        evt.level = Mx.level;
	        evt.xmin = Mx.stk[Mx.level].xmin;
	        evt.ymin = Mx.stk[Mx.level].ymin;
	        evt.xmax = Mx.stk[Mx.level].xmax;
	        evt.ymax = Mx.stk[Mx.level].ymax;
	        mx.dispatchEvent(Mx, evt); // TODO should we allow pan to be cancelled?
	        this.inPan = false;
	
	    }
	
	    /**
	     * Updates a plot's viewbox along a given axis to the provided min and max
	     * values.
	     *
	     * @param plot
	     *            The plot to work with.
	     * @param newMin
	     *            The new minimum axis value to use
	     * @param newMax
	     *            The new maximum axis value to use
	     * @param axis
	     *            The axis to update. Acceptable axis values are "X" or "Y".
	     * @memberOf sigplot
	     * @private
	     */
	    function updateViewbox(plot, newMin, newMax, axis) {
	        var Mx = plot._Mx;
	        var Gx = plot._Gx;
	
	        var k = Mx.level;
	
	        if (axis === "X") {
	            var xmin = newMin;
	            var xmax = newMax;
	
	            if (Mx.stk[k].xmin !== xmin || Mx.stk[k].xmax !== xmax) {
	                Mx.stk[k].xmin = xmin;
	                Mx.stk[k].xmax = xmax;
	                if (!Gx.xdata && Mx.level === 1) {
	                    Gx.xmin = Mx.stk[1].xmin;
	                    Gx.xmax = Mx.stk[1].xmax;
	                }
	                plot.refresh();
	            }
	        } else if (axis === "Y") {
	            var ymin = newMin;
	            var ymax = newMax;
	
	            if (ymin !== Mx.stk[k].ymin || ymax !== Mx.stk[k].ymax) {
	                Mx.stk[k].ymin = ymin;
	                Mx.stk[k].ymax = ymax;
	                if (Gx.cmode === Gx.basemode && Mx.level === 1) {
	                    Gx.ymin = Math.min(Gx.ymin, ymin);
	                    Gx.ymax = Math.max(Gx.ymax, ymax);
	                }
	                plot.refresh();
	            }
	        }
	    }
	
	    module.exports = sigplot;
	
	}());


/***/ },
/* 36 */
/***/ function(module, exports) {

	//fgnass.github.com/spin.js#v1.2.5
	/**
	 * Copyright (c) 2011 Felix Gnass [fgnass at neteye dot de]
	 * Licensed under the MIT license
	 */
	
	var prefixes = ['webkit', 'Moz', 'ms', 'O']; /* Vendor prefixes */
	var animations = {}; /* Animation rules keyed by their name */
	var useCssAnimations;
	
	/**
	 * Utility function to create elements. If no tag name is given,
	 * a DIV is created. Optionally properties can be passed.
	 */
	function createEl(tag, prop) {
	  var el = document.createElement(tag || 'div');
	  var n;
	
	  for(n in prop) {
	    el[n] = prop[n];
	  }
	  return el;
	}
	
	/**
	 * Appends children and returns the parent.
	 */
	function ins(parent /* child1, child2, ...*/) {
	  for (var i=1, n=arguments.length; i<n; i++) {
	    parent.appendChild(arguments[i]);
	  }
	  return parent;
	}
	
	/**
	 * Insert a new stylesheet to hold the @keyframe or VML rules.
	 */
	var sheet = function() {
	  var el = createEl('style');
	  ins(document.getElementsByTagName('head')[0], el);
	  return el.sheet || el.styleSheet;
	}();
	
	/**
	 * Creates an opacity keyframe animation rule and returns its name.
	 * Since most mobile Webkits have timing issues with animation-delay,
	 * we create separate rules for each line/segment.
	 */
	function addAnimation(alpha, trail, i, lines) {
	  var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-');
	  var start = 0.01 + i/lines*100;
	  var z = Math.max(1-(1-alpha)/trail*(100-start) , alpha);
	  var prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase();
	  var pre = prefix && '-'+prefix+'-' || '';
	
	  if (!animations[name]) {
	    sheet.insertRule(
	      '@' + pre + 'keyframes ' + name + '{' +
	      '0%{opacity:'+z+'}' +
	      start + '%{opacity:'+ alpha + '}' +
	      (start+0.01) + '%{opacity:1}' +
	      (start+trail)%100 + '%{opacity:'+ alpha + '}' +
	      '100%{opacity:'+ z + '}' +
	      '}', 0);
	    animations[name] = 1;
	  }
	  return name;
	}
	
	/**
	 * Tries various vendor prefixes and returns the first supported property.
	 **/
	function vendor(el, prop) {
	  var s = el.style;
	  var pp;
	  var i;
	
	  if(s[prop] !== undefined) return prop;
	  prop = prop.charAt(0).toUpperCase() + prop.slice(1);
	  for(i=0; i<prefixes.length; i++) {
	    pp = prefixes[i]+prop;
	    if(s[pp] !== undefined) return pp;
	  }
	}
	
	/**
	 * Sets multiple style properties at once.
	 */
	function css(el, prop) {
	  for (var n in prop) {
	    el.style[vendor(el, n)||n] = prop[n];
	  }
	  return el;
	}
	
	/**
	 * Fills in default values.
	 */
	function merge(obj) {
	  for (var i=1; i < arguments.length; i++) {
	    var def = arguments[i];
	    for (var n in def) {
	      if (obj[n] === undefined) obj[n] = def[n];
	    }
	  }
	  return obj;
	}
	
	/**
	 * Returns the absolute page-offset of the given element.
	 */
	function pos(el) {
	  var o = {x:el.offsetLeft, y:el.offsetTop};
	  while((el = el.offsetParent)) {
	    o.x+=el.offsetLeft;
	    o.y+=el.offsetTop;
	  }
	  return o;
	}
	
	var defaults = {
	  lines: 12,            // The number of lines to draw
	  length: 7,            // The length of each line
	  width: 5,             // The line thickness
	  radius: 10,           // The radius of the inner circle
	  rotate: 0,            // rotation offset
	  color: '#000',        // #rgb or #rrggbb
	  speed: 1,             // Rounds per second
	  trail: 100,           // Afterglow percentage
	  opacity: 1/4,         // Opacity of the lines
	  fps: 20,              // Frames per second when using setTimeout()
	  zIndex: 2e9,          // Use a high z-index by default
	  className: 'spinner', // CSS class to assign to the element
	  top: 'auto',          // center vertically
	  left: 'auto'          // center horizontally
	};
	
	/** The constructor */
	var Spinner = function Spinner(o) {
	  if (!this.spin) return new Spinner(o);
	  this.opts = merge(o || {}, Spinner.defaults, defaults);
	};
	
	Spinner.defaults = {};
	merge(Spinner.prototype, {
	  spin: function(target) {
	    this.stop();
	    var self = this;
	    var o = self.opts;
	    var el = self.el = css(createEl(0, {className: o.className}), {position: 'relative', zIndex: o.zIndex});
	    var mid = o.radius+o.length+o.width;
	    var ep; // element position
	    var tp; // target position
	
	    if (target) {
	      target.insertBefore(el, target.firstChild||null);
	      tp = pos(target);
	      ep = pos(el);
	      css(el, {
	        left: (o.left == 'auto' ? tp.x-ep.x + (target.offsetWidth >> 1) : o.left+mid) + 'px',
	        top: (o.top == 'auto' ? tp.y-ep.y + (target.offsetHeight >> 1) : o.top+mid)  + 'px'
	      });
	    }
	
	    el.setAttribute('aria-role', 'progressbar');
	    self.lines(el, self.opts);
	
	    if (!useCssAnimations) {
	      // No CSS animation support, use setTimeout() instead
	      var i = 0;
	      var fps = o.fps;
	      var f = fps/o.speed;
	      var ostep = (1-o.opacity)/(f*o.trail / 100);
	      var astep = f/o.lines;
	
	      !function anim() {
	        i++;
	        for (var s=o.lines; s; s--) {
	          var alpha = Math.max(1-(i+s*astep)%f * ostep, o.opacity);
	          self.opacity(el, o.lines-s, alpha, o);
	        }
	        self.timeout = self.el && setTimeout(anim, ~~(1000/fps));
	      }();
	    }
	    return self;
	  },
	  stop: function() {
	    var el = this.el;
	    if (el) {
	      clearTimeout(this.timeout);
	      if (el.parentNode) el.parentNode.removeChild(el);
	      this.el = undefined;
	    }
	    return this;
	  },
	  lines: function(el, o) {
	    var i = 0;
	    var seg;
	
	    function fill(color, shadow) {
	      return css(createEl(), {
	        position: 'absolute',
	        width: (o.length+o.width) + 'px',
	        height: o.width + 'px',
	        background: color,
	        boxShadow: shadow,
	        transformOrigin: 'left',
	        transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',
	        borderRadius: (o.width>>1) + 'px'
	      });
	    }
	    for (; i < o.lines; i++) {
	      seg = css(createEl(), {
	        position: 'absolute',
	        top: 1+~(o.width/2) + 'px',
	        transform: o.hwaccel ? 'translate3d(0,0,0)' : '',
	        opacity: o.opacity,
	        animation: useCssAnimations && addAnimation(o.opacity, o.trail, i, o.lines) + ' ' + 1/o.speed + 's linear infinite'
	      });
	      if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}));
	      ins(el, ins(seg, fill(o.color, '0 0 1px rgba(0,0,0,.1)')));
	    }
	    return el;
	  },
	  opacity: function(el, i, val) {
	    if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;
	  }
	});
	
	/////////////////////////////////////////////////////////////////////////
	// VML rendering for IE
	/////////////////////////////////////////////////////////////////////////
	
	/**
	 * Check and init VML support
	 */
	!function() {
	
	  function vml(tag, attr) {
	    return createEl('<' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr);
	  }
	
	  var s = css(createEl('group'), {behavior: 'url(#default#VML)'});
	
	  if (!vendor(s, 'transform') && s.adj) {
	
	    // VML support detected. Insert CSS rule ...
	    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)');
	
	    Spinner.prototype.lines = function(el, o) {
	      var r = o.length+o.width;
	      var s = 2*r;
	
	      function grp() {
	        return css(vml('group', {coordsize: s +' '+s, coordorigin: -r +' '+-r}), {width: s, height: s});
	      }
	
	      var margin = -(o.width+o.length)*2+'px';
	      var g = css(grp(), {position: 'absolute', top: margin, left: margin});
	
	      var i;
	
	      function seg(i, dx, filter) {
	        ins(g,
	          ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),
	            ins(css(vml('roundrect', {arcsize: 1}), {
	                width: r,
	                height: o.width,
	                left: o.radius,
	                top: -o.width>>1,
	                filter: filter
	              }),
	              vml('fill', {color: o.color, opacity: o.opacity}),
	              vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change
	            )
	          )
	        );
	      }
	
	      if (o.shadow) {
	        for (i = 1; i <= o.lines; i++) {
	          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)');
	        }
	      }
	      for (i = 1; i <= o.lines; i++) seg(i);
	      return ins(el, g);
	    };
	    Spinner.prototype.opacity = function(el, i, val, o) {
	      var c = el.firstChild;
	      o = o.shadow && o.lines || 0;
	      if (c && i+o < c.childNodes.length) {
	        c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild;
	        if (c) c.opacity = val;
	      }
	    };
	  }
	  else {
	    useCssAnimations = vendor(s, 'animation');
	  }
	}();
	
	module.exports = Spinner;


/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * @license
	 * File: common.js
	 * Copyright (c) 2012-2014, Michael Ihde, All rights reserved.
	 * Copyright (c) 2012-2014, Axios Inc., All rights reserved.
	 *
	 * This file is part of SigPlot.
	 *
	 * SigPlot is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
	 * General Public License as published by the Free Software Foundation; either version 3.0 of the License, or
	 * (at your option) any later version. This library is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	 * PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the
	 * GNU Lesser General Public License along with SigPlot.
	 *
	 */
	
	/* global module */
	/* global require */
	
	(function() {
	
	module.exports = {};
	
	if (window.ArrayBuffer) {
	    if (!ArrayBuffer.prototype.slice) {
	        //Monkey Patching for iOS and early Firefox
	        ArrayBuffer.prototype.slice = function(start, end) {
	            var that = new Uint8Array(this);
	            if (end === undefined) {
	                end = that.length;
	            }
	            var result = new ArrayBuffer(end - start);
	            var resultArray = new Uint8Array(result);
	            for (var i = 0; i < resultArray.length; i++) {
	                resultArray[i] = that[i + start];
	            }
	            return result;
	        };
	    }
	}
	
	//Array Remove - By John Resig (MIT Licensed)
	Array.prototype.remove = function(from, to) {
	    var rest = this.slice((to || from) + 1 || this.length);
	    this.length = from < 0 ? this.length + from : from;
	    return this.push.apply(this, rest);
	};
	
	// Shim for requestAnimationFrame compatibility
	window.requestAnimFrame = (function(callback) {
	    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||
	        function(callback) {
	            return window.setTimeout(callback, 1000 / 60);
	    };
	})();
	
	window.cancelAnimFrame = (function(callback) {
	    return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCanelAnimationFrame ||
	        function(timeoutID) {
	            window.clearTimeout(timeoutID);
	    };
	})();
	
	// Handle various ways to draw dashed lines
	module.exports.dashOn = function(ctx, on, off) {
	    if (ctx.setLineDash) {
	        ctx.setLineDash([on, off]);
	        return true;
	    } else if (ctx.mozDash !== undefined) { // Gecko 7.0+
	        ctx.mozDash = [on, off];
	        return true;
	    } else if (ctx.webkitLineDash && ctx.webkitLineDash.length === 0) {
	        ctx.webkitLineDash = [on, off];
	        return true;
	    }
	    return false;
	};
	
	module.exports.dashOff = function(ctx) {
	    if (ctx.setLineDash) {
	        ctx.setLineDash([]);
	    } else if (ctx.mozDash) { // Gecko 7.0+
	        ctx.mozDash = null;
	    } else if (ctx.webkitLineDash) {
	        ctx.webkitLineDash = [];
	    }
	};
	
	// Firefox behaves differntly for keypress events
	module.exports.getKeyCode = function(e) {
	    e = window.event || e;
	    e = e.charCode || e.keyCode;
	    return e;
	};
	
	module.exports.setKeypressHandler = function(handler) {
	    if (window.addEventListener) { window.addEventListener('keypress', handler, false); }
	    else if (window.attachEvent) {
	        window.attachEvent('onkeypress', handler);
	    }
	};
	
	// Array.isArray
	// FF 4+
	// IE 9+
	// SF 5+
	// http://kangax.github.io/es5-compat-table/#Array.isArray
	if (!Array.isArray) {
	    Array.isArray = function(obj) {
	        return Object.prototype.toString.call(obj) === "[object Array]";
	    };
	}
	
	if (!window.Float64Array) {
	    //Monkey Patching for iOS
	    // This is essentially ReadOnly because
	    // if someone does x[i] = 5
	    // the value will be set in the array
	    // but not in the underlying buffer
	    window.Float64Array = (function() {
	        return window.Float64Array ||
	            function(buffer, byteOffset, length) {
	                if (!(buffer instanceof ArrayBuffer)) {
	                    throw "Invalid type";
	                }
	                var dv = new DataView(buffer);
	                var b = [];
	                var maxlength = (buffer.byteLength - byteOffset) / 8;
	                if (length === undefined) {
	                    b.length = maxlength;
	                } else {
	                    b.length = Math.min(length, maxlength);
	                }
	
	                for (var i = 0; i < b.length; i++) {
	                    b[i] = dv.getFloat64(i * 8 + byteOffset, true);
	                }
	                b.subarray = function(begin, end) {
	                    return b.slice(begin, end);
	                };
	                return b;
	        };
	    })();
	}
	
	// Shims
	(function() {
	    /* console shim*/
	    var f = function() {};
	    if (!window.console) {
	        window.console = {
	            log: f,
	            info: f,
	            warn: f,
	            debug: f,
	            error: f
	        };
	    }
	
	    // Firefox 4 has a glaring subarray bug
	    // http://ryanberdeen.com/2011/04/16/firefox-subarray-bug.html
	    if (new Int8Array([0, 1, 0]).subarray(1).subarray(1)[0]) {
	        var subarray = function(begin, end) {
	            if (arguments.length === 0) {
	                begin = 0;
	                end = this.length;
	            } else {
	                if (begin < 0) {
	                    // relative to end
	                    begin += this.length;
	                }
	                // clamp to 0, length
	                begin = Math.max(0, Math.min(this.length, begin));
	                if (arguments.length === 1) {
	                    // slice to end
	                    end = this.length;
	                } else {
	                    if (end < 0) {
	                        // relative to end
	                        end += this.length;
	                    }
	                    // clamp to begin, length
	                    end = Math.max(begin, Math.min(this.length, end));
	                }
	            }
	
	            var byteOffset = this.byteOffset + begin * this.BYTES_PER_ELEMENT;
	            return new this.constructor(this.buffer, byteOffset, end - begin);
	        };
	
	        var typedArrays = [Int8Array, Uint8Array, Int16Array, Uint16Array,
	            Int32Array, Uint32Array, Float32Array, Float64Array
	        ];
	        typedArrays.forEach(function(cls) {
	            cls.prototype.subarray = subarray;
	        });
	    }
	
	}());
	
	// https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel?redirectlocale=en-US&redirectslug=DOM%2FMozilla_event_reference%2Fwheel#Listening_to_this_event_across_browser
	// creates a global "addWheelListener" method
	// example: addWheelListener( elem, function( e ) { console.log( e.deltaY ); e.preventDefault(); } );
	(function(window, document) {
	
	    var prefix = "",
	        _addEventListener, onwheel, support;
	
	    // detect event model
	    if (window.addEventListener) {
	        _addEventListener = "addEventListener";
	    } else {
	        _addEventListener = "attachEvent";
	        prefix = "on";
	    }
	
	    // detect available wheel event
	    support = "onwheel" in document.createElement("div") ? "wheel" : // Modern browsers support "wheel"
	    document.onmousewheel !== undefined ? "mousewheel" : // Webkit and IE support at least "mousewheel"
	    "DOMMouseScroll"; // let's assume that remaining browsers are older Firefox
	
	    window.addWheelListener = function(elem, callback, useCapture) {
	        _addWheelListener(elem, support, callback, useCapture);
	
	        // handle MozMousePixelScroll in older Firefox
	        if (support === "DOMMouseScroll") {
	            _addWheelListener(elem, "MozMousePixelScroll", callback, useCapture);
	        }
	    };
	
	    /* jshint -W030 */
	    function _addWheelListener(elem, eventName, callback, useCapture) {
	        elem[_addEventListener](prefix + eventName, support === "wheel" ? callback : function(originalEvent) {
	            !originalEvent && (originalEvent = window.event);
	
	            // create a normalized event object
	            var event = {
	                // keep a ref to the original event object
	                originalEvent: originalEvent,
	                target: originalEvent.target || originalEvent.srcElement,
	                type: "wheel",
	                deltaMode: originalEvent.type === "MozMousePixelScroll" ? 0 : 1,
	                deltaX: 0,
	                delatZ: 0,
	                preventDefault: function() {
	                    originalEvent.preventDefault ?
	                        originalEvent.preventDefault() :
	                        originalEvent.returnValue = false;
	                }
	            };
	
	            // calculate deltaY (and deltaX) according to the event
	            if (support === "mousewheel") {
	                event.deltaY = -1 / 40 * originalEvent.wheelDelta;
	                // Webkit also support wheelDeltaX
	                originalEvent.wheelDeltaX && (event.deltaX = -1 / 40 * originalEvent.wheelDeltaX);
	            } else {
	                event.deltaY = originalEvent.detail;
	            }
	
	            // it's time to fire the callback
	            return callback(event);
	
	        }, useCapture || false);
	    }
	    /* jshint +W030 */
	
	})(window, document);
	
	//Updates destenation object with source values
	module.exports.update = function update(dst, src) {
	    for (var prop in src) {
	        var val = src[prop];
	        if (typeof val === "object") { // recursive
	            update(dst[prop], val);
	        } else {
	            dst[prop] = val;
	        }
	    }
	    return dst; // return dst to allow method chaining
	};
	
	}());


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license
	 * File: bluefile.js
	 * Copyright (c) 2012-2014, Michael Ihde, All rights reserved.
	 * Copyright (c) 2012-2014, Axios Inc., All rights reserved.
	 *
	 * This file is part of SigPlot.
	 *
	 * SigPlot is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
	 * General Public License as published by the Free Software Foundation; either version 3.0 of the License, or
	 * (at your option) any later version. This library is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	 * PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the
	 * GNU Lesser General Public License along with SigPlot.
	 *
	 */
	/**
	 * Bluefiles are a binary format directly supported by SigPlot.  A Bluefile consists of a 512-byte header
	 * followed by binary data.
	 * For more information on BLUEFILES, please visit http://nextmidas.techma.com/nm/htdocs/usersguide/BlueFiles.html
	 *
	 * Offset   Name        Size    Type        Description
	 * -----------------------------------------------------------------------------
	 * 0        version     4   char[4]     Header version
	 * 4        head_rep    4   char[4]     Header representation
	 * 8        data_rep    4   char[4]     Data representation
	 *12        detached    4   int_4       Detached header
	 *16        protected   4   int_4       Protected from overwrite
	 *20        pipe        4   int_4       Pipe mode (N/A)
	 *24        ext_start   4   int_4       Extended header start, in 512-byte blocks
	 *28        ext_size    4   int_4       Extended header size in bytes
	 *32        data_start  8   real_8      Data start in bytes
	 *40        data_size   8   real_8      Data size in bytes
	 *48        type        4   int_4       File type code
	 *52        format      2   char[2]     Data format code
	 *54        flagmask    2   int_2       16-bit flagmask (1=flagbit)
	 *56        timecode    8   real_8      Time code field
	 *64        inlet       2   int_2       Inlet owner
	 *66        outlets     2   int_2       Number of outlets
	 *68        outmask     4   int_4       Outlet async mask
	 *72        pipeloc     4   int_4       Pipe location
	 *76        pipesize    4   int_4       Pipe size in bytes
	 *80        in_byte     8   real_8      Next input byte
	 *88        out_byte    8   real_8      Next out byte (cumulative)
	 *96        outbytes    64  real_8[8]   Next out byte (each outlet)
	 *160       keylength   4   int_4       Length of keyword string
	 *164       keywords    92  char[92]    User defined keyword string
	 *256       Adjunct     256     char[256]   Type-specific adjunct union (See below for 1000 and 2000 type bluefiles)
	 *
	 *
	 * Type-1000 Adjunct
	 * 0        xstart      8   real_8      Abscissa value for first sample
	 *8         xdelta      8   real_8      Abscissa interval between samples
	 *16        xunits      4   int_4       Units for abscissa values
	 *
	 * Type-2000 Adjunct
	 *0         xstart      8   real_8      Frame (column) starting value
	 *8         xdelta      8   real_8      Increment between samples in frame
	 *16        xunits      4   int_4       Frame (column) units
	 *20        subsize     4   int_4       Number of data points per frame (row)
	 *24        ystart      8   real_8      Abscissa (row) start
	 *32        ydelta      8   real_8      Increment between frames
	 *36        yunits      4   int_4       Abscissa (row) unit code
	 *
	 * @namespace bluefile
	 */
	
	/* global module */
	/* global require */
	
	(function() {
	    'use strict';
	
	    var common = __webpack_require__(37);
	
	    function bluefile() {}
	
	    /**
	     * @memberOf bluefile
	     * @private
	     */
	    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);
	    // https://gist.github.com/TooTallNate/4750953
	    /**
	     * @memberof bluefile
	     * @private
	     */
	    function endianness() {
	        var b = new ArrayBuffer(4);
	        var a = new Uint32Array(b);
	        var c = new Uint8Array(b);
	        a[0] = 0xdeadbeef;
	        if (c[0] === 0xef) {
	            return 'LE';
	        }
	        if (c[0] === 0xde) {
	            return 'BE';
	        }
	        throw new Error('unknown endianness');
	    }
	    /**
	     * @memberOf bluefile
	     * @private
	     */
	    var ARRAY_BUFFER_ENDIANNESS = endianness();
	    /**
	     * @memberOf bluefile
	     * @private
	     */
	    var _SPA = {
	        'S': 1,
	        'C': 2,
	        'V': 3,
	        'Q': 4,
	        'M': 9,
	        'X': 10,
	        'T': 16,
	        'U': 1,
	        '1': 1,
	        '2': 2,
	        '3': 3,
	        '4': 4,
	        '5': 5,
	        '6': 6,
	        '7': 7,
	        '8': 8,
	        '9': 9
	    };
	    /**
	     * @memberOf bluefile
	     * @private
	     */
	    var _BPS = {
	        'P': 0.125,
	        'A': 1,
	        'O': 1,
	        'B': 1,
	        'I': 2,
	        'L': 4,
	        'X': 8,
	        'F': 4,
	        'D': 8
	    };
	    /**
	     * @memberOf bluefile
	     * @private
	     */
	    var _XM_TO_TYPEDARRAY = {
	        'P': null,
	        'A': null,
	        'O': Uint8Array,
	        'B': Int8Array,
	        'I': Int16Array,
	        'L': Int32Array,
	        'X': null,
	        'F': Float32Array,
	        'D': Float64Array
	    };
	    /**
	     * @memberof bluefile
	     * @param   {array}     buf         Data bffer
	     * @param number
	     * @param bool
	     * @private
	     */
	    function getInt64(dataView, index, littleEndian) {
	        var highIndex, lowIndex;
	        var MAX_INT = Math.pow(2, 53);
	        if (littleEndian) {
	            highIndex = 4;
	            lowIndex = 0;
	        } else {
	            highIndex = 0;
	            lowIndex = 4;
	        }
	        var high = dataView.getInt32(index + highIndex, littleEndian);
	        var low = dataView.getInt32(index + lowIndex, littleEndian);
	        var rv = low + pow2(32) * high;
	        if (rv >= MAX_INT) {
	            window.console.info("Int is bigger than JS can represent.");
	            return Infinity;
	        }
	        return rv;
	    }
	    /**
	     * @memberOf bluefile
	     * @private
	     */
	    var _XM_TO_DATAVIEW = {
	        'P': null,
	        'A': null,
	        'O': "getUint8",
	        'B': "getInt8",
	        'I': "getInt16",
	        'L': "getInt32",
	        'X': getInt64,
	        'F': "getFloat32",
	        'D': "getFloat64"
	    };
	    /**
	     * @memberOf bluefile
	     * @private
	     */
	    var _applySupportsTypedArray = true;
	    try {
	        var uintbuf = new Uint8Array(new ArrayBuffer(4));
	        uintbuf[0] = 66;
	        uintbuf[1] = 76;
	        uintbuf[2] = 85;
	        uintbuf[3] = 69;
	        var test = String.fromCharCode.apply(null, uintbuf);
	        if (test !== "BLUE") {
	            _applySupportsTypedArray = false;
	        }
	    } catch (error) {
	        _applySupportsTypedArray = false;
	    }
	    /**
	     * @memberof bluefile
	     * @param   {array}     buf         Data bffer
	     * @private
	     */
	    function ab2str(buf) {
	        var uintbuf = new Uint8Array(buf);
	        // Firefox 3.6 nor iOS devices can use ArrayBuffers with .apply
	        if (_applySupportsTypedArray) {
	            return String.fromCharCode.apply(null, uintbuf);
	        } else {
	            var str = "";
	            for (var i = 0; i < uintbuf.length; i++) {
	                str += String.fromCharCode(uintbuf[i]);
	            }
	            return str;
	        }
	    }
	    /**
	     * @memberof bluefile
	     * @param   {string}
	     * @private
	     */
	    function str2ab(str) {
	        var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char
	        var bufView = new Uint16Array(buf);
	        for (var i = 0, strLen = str.length; i < strLen; i++) {
	            bufView[i] = str.charCodeAt(i);
	        }
	        return buf;
	    }
	    /**
	     * @memberof bluefile
	     * @param   {number}
	     * @private
	     */
	    function pow2(n) {
	        return (n >= 0 && n < 31) ? (1 << n) : (pow2[n] || (pow2[n] = Math.pow(2, n)));
	    }
	    /**
	     * Create bluefile header and attach data buffer
	     * @memberof bluefile
	     * @param   {array}     buf         Data bffer
	     */
	    bluefile.BlueHeader = function(buf, options) {
	        this.options = {
	            ext_header_type: "dict"
	        };
	        common.update(this.options, options);
	        this.file = null;
	        this.file_name = null;
	        this.offset = 0;
	        this.buf = buf;
	        if (this.buf != null) {
	            var dvhdr = new DataView(this.buf);
	            this.version = ab2str(this.buf.slice(0, 4));
	            this.headrep = ab2str(this.buf.slice(4, 8));
	            this.datarep = ab2str(this.buf.slice(8, 12));
	            var littleEndianHdr = (this.headrep === "EEEI");
	            var littleEndianData = (this.datarep === "EEEI");
	            this.ext_start = dvhdr.getInt32(24, littleEndianHdr);
	            this.ext_size = dvhdr.getInt32(28, littleEndianHdr);
	            this.type = dvhdr.getUint32(48, littleEndianHdr);
	            this["class"] = this.type / 1000;
	            this.format = ab2str(this.buf.slice(52, 54));
	            this.timecode = dvhdr.getFloat64(56, littleEndianHdr);
	            // the adjunct starts at offset 0x100
	            if (this["class"] === 1) {
	                this.xstart = dvhdr.getFloat64(0x100, littleEndianHdr);
	                this.xdelta = dvhdr.getFloat64(0x100 + 8, littleEndianHdr);
	                this.xunits = dvhdr.getInt32(0x100 + 16, littleEndianHdr);
	                this.yunits = dvhdr.getInt32(0x100 + 40, littleEndianHdr);
	                this.subsize = 1;
	            } else if (this["class"] === 2) {
	                this.xstart = dvhdr.getFloat64(0x100, littleEndianHdr);
	                this.xdelta = dvhdr.getFloat64(0x100 + 8, littleEndianHdr);
	                this.xunits = dvhdr.getInt32(0x100 + 16, littleEndianHdr);
	                this.subsize = dvhdr.getInt32(0x100 + 20, littleEndianHdr);
	                this.ystart = dvhdr.getFloat64(0x100 + 24, littleEndianHdr);
	                this.ydelta = dvhdr.getFloat64(0x100 + 32, littleEndianHdr);
	                this.yunits = dvhdr.getInt32(0x100 + 40, littleEndianHdr);
	            }
	            this.data_start = dvhdr.getFloat64(32, littleEndianHdr);
	            this.data_size = dvhdr.getFloat64(40, littleEndianHdr);
	            var ds = this.data_start;
	            var de = this.data_start + this.data_size;
	            if (this.ext_size) {
	                this.ext_header = this.unpack_keywords(this.buf, this.ext_size, this.ext_start * 512, littleEndianHdr);
	            }
	            this.setData(this.buf, ds, de, littleEndianData);
	        }
	    };
	
	    bluefile.BlueHeader.prototype = {
	        /**
	         * @memberof bluefile
	         * @param   buf
	         * @param   offset
	         * @param   data_end
	         * @param   littleEndian
	         *
	         */
	        setData: function(buf, offset, data_end, littleEndian) {
	            if (this["class"] === 1) {
	                this.spa = _SPA[this.format[0]];
	                this.bps = _BPS[this.format[1]];
	                this.bpa = this.spa * this.bps;
	                this.ape = 1;
	                this.bpe = this.ape * this.bpa;
	            } else if (this["class"] === 2) {
	                this.spa = _SPA[this.format[0]];
	                this.bps = _BPS[this.format[1]];
	                this.bpa = this.spa * this.bps;
	                this.ape = this.subsize;
	                this.bpe = this.ape * this.bpa;
	            }
	            if (littleEndian === undefined) {
	                littleEndian = (ARRAY_BUFFER_ENDIANNESS === "LE");
	            }
	            // TODO handle mismatch between host and data endianness using arrayBufferEndianness
	            if (ARRAY_BUFFER_ENDIANNESS === "LE" && !littleEndian) {
	                throw ("Not supported " + ARRAY_BUFFER_ENDIANNESS + " " + littleEndian);
	            } else if (ARRAY_BUFFER_ENDIANNESS === "BE" && this.littleEndianData) {
	                throw ("Not supported " + ARRAY_BUFFER_ENDIANNESS + " " + littleEndian);
	            }
	            if (buf) {
	                if ((offset) && (data_end)) {
	                    this.dview = this.createArray(buf, offset, (data_end - offset) / this.bps);
	                } else {
	                    this.dview = this.createArray(buf);
	                }
	                this.size = this.dview.length / (this.spa * this.ape);
	            } else {
	                this.dview = this.createArray(null, null, this.size);
	            }
	        },
	        /**
	         * @author Sean Sullivan https://github.com/desean1625
	         * @memberof bluefile
	         * @param   buf
	         * @param   lbuf
	         * @param   offset
	         * @param   littleEndian
	         *
	         */
	        unpack_keywords: function(buf, lbuf, offset, littleEndian) {
	            var lkey, lextra, ltag, format, tag, data, ldata, itag, idata, dvk;
	            var keywords = [];
	            var dic_index = {};
	            var dict_keywords = {};
	            var ii = 0;
	            buf = buf.slice(offset, buf.length);
	            var dvhdr = new DataView(buf);
	            buf = ab2str(buf);
	            while (ii < lbuf) {
	                idata = ii + 8;
	                lkey = dvhdr.getUint32(ii, littleEndian);
	                lextra = dvhdr.getInt16(ii + 4, littleEndian);
	                ltag = dvhdr.getInt8(ii + 6, littleEndian);
	                format = buf.slice(ii + 7, ii + 8);
	                ldata = lkey - lextra;
	                itag = idata + ldata;
	                tag = buf.slice(itag, itag + ltag);
	                if (format === "A") {
	                    data = buf.slice(idata, idata + ldata);
	                } else {
	                    if (_XM_TO_DATAVIEW[format]) {
	                        if (typeof _XM_TO_DATAVIEW[format] === "string") {
	                            data = dvhdr[_XM_TO_DATAVIEW[format]](idata, littleEndian);
	                        } else {
	                            data = _XM_TO_DATAVIEW[format](dvhdr, idata, littleEndian);
	                        }
	                    } else {
	                        //Should never get here now.
	                        window.console.info("Unsupported keyword format " + format + " for tag " + tag);
	                    }
	                }
	                if (typeof dic_index[tag] === "undefined") {
	                    dic_index[tag] = 1;
	                } else {
	                    dic_index[tag]++;
	                    tag = "" + tag + dic_index[tag]; //Force to string just incase the tag is interpreted as a number
	                }
	                dict_keywords[tag] = data;
	                keywords.push({
	                    tag: tag,
	                    value: data
	                });
	                ii += lkey;
	            }
	            var dictTypes = ['dict', 'json', {}, 'XMTable', 'JSON', 'DICT'];
	            for (var k in dictTypes) {
	                if (dictTypes[k] === this.options.ext_header_type) {
	                    return dict_keywords;
	                }
	            }
	            return keywords;
	        },
	        /**
	         * Create typed array
	         * @memberof bluefile
	         * @param   buf
	         * @param   offset
	         * @param   length
	         * @returns -
	         */
	        createArray: function(buf, offset, length) {
	            var TypedArray = _XM_TO_TYPEDARRAY[this.format[1]];
	            if (TypedArray === undefined) {
	                throw ("unknown format " + this.format[1]);
	            }
	            // backwards compatibility with some implementations of typed array
	            // requires this
	            if (offset === undefined) {
	                offset = 0;
	            }
	            if (length === undefined) {
	                length = buf.length || (buf.byteLength / _BPS[this.format[1]]);
	            }
	            if (buf) {
	                return new TypedArray(buf, offset, length);
	            } else {
	                return new TypedArray(length);
	            }
	        }
	    };
	
	    // Internal method from http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	    /**
	     * This function creates a new anchor element and uses location
	     * properties (inherent) to get the desired URL data. Some String
	     * operations are used (to normalize results across browsers).
	     *
	     * @memberof bluefile
	     * @private
	     * @param   url
	     * @returns -
	     */
	    function parseURL(url) {
	        var a = document.createElement('a');
	        a.href = url;
	        return {
	            source: url,
	            protocol: a.protocol.replace(':', ''),
	            host: a.hostname,
	            port: a.port,
	            query: a.search,
	            params: (function() {
	                var ret = {},
	                    seg = a.search.replace(/^\?/, '').split('&'),
	                    len = seg.length,
	                    i = 0,
	                    s;
	                for (; i < len; i++) {
	                    if (!seg[i]) {
	                        continue;
	                    }
	                    s = seg[i].split('=');
	                    ret[s[0]] = s[1];
	                }
	                return ret;
	            })(),
	            file: (a.pathname.match(/\/([^\/?#]+)$/i) || [null, ''])[1],
	            hash: a.hash.replace('#', ''),
	            path: a.pathname.replace(/^([^\/])/, '/$1'),
	            relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [null, ''])[1],
	            segments: a.pathname.replace(/^\//, '').split('/')
	        };
	    }
	    /**
	     * @memberof bluefile
	     * @private
	     * @param   text
	     * @param   oncomplete
	     * @param   blocksize
	     */
	    function text2buffer(text, oncomplete, blocksize) {
	        blocksize = blocksize || 1024;
	        var i = 0;
	        var arrayBuffer = new ArrayBuffer(text.length);
	        var bufView = new Uint8Array(arrayBuffer);
	        var worker = function() {
	            var end = i + blocksize;
	            for (; i < end; i++) {
	                bufView[i] = (text.charCodeAt(i) & 0xff);
	            }
	            if (i >= text.length) {
	                oncomplete(arrayBuffer);
	            } else {
	                setTimeout(worker, 0);
	            }
	        };
	        setTimeout(worker, 0);
	    }
	    /**
	     * Bluefile Reader
	     * @memberof    bluefile
	     * @param   options
	     */
	    bluefile.BlueFileReader = function(options) {
	        this.options = options;
	    };
	
	    bluefile.BlueFileReader.prototype = {
	        /**
	         * @memberof bluefile
	         * @param   theFile
	         * @param   onload
	         *
	         */
	        readheader: function readheader(theFile, onload) {
	            var that = this;
	            var reader = new FileReader();
	            var blob = theFile.webkitSlice(0, 512); // Chrome specific
	            // Closure to capture the file information.
	            reader.onloadend = (function(theFile) {
	                return function(e) {
	                    if (e.target.error) {
	                        onload(null);
	                        return;
	                    }
	                    var rawhdr = reader.result;
	                    var hdr = new bluefile.BlueHeader(rawhdr, that.options);
	                    hdr.file = theFile;
	                    onload(hdr);
	                };
	            })(theFile);
	            reader.readAsArrayBuffer(blob);
	        },
	        /**
	         *
	         * @memberof bluefile
	         * @param   theFile
	         * @param   onload
	         *
	         */
	        read: function read(theFile, onload) {
	            var that = this;
	            var reader = new FileReader();
	            // Closure to capture the file information.
	            reader.onloadend = (function(theFile) {
	                return function(e) {
	                    if (e.target.error) {
	                        onload(null);
	                        return;
	                    }
	                    var raw = reader.result;
	                    var hdr = new bluefile.BlueHeader(raw, that.options);
	                    hdr.file = theFile;
	                    hdr.file_name = theFile.name;
	                    onload(hdr);
	                };
	            })(theFile);
	            reader.readAsArrayBuffer(theFile);
	        },
	        /**
	         *
	         * @memberof bluefile
	         * @param   href
	         * @param   onload
	         *
	         */
	        read_http: function read_http(href, onload) {
	            var that = this;
	            var oReq = new XMLHttpRequest();
	            oReq.open("GET", href, true);
	            oReq.responseType = "arraybuffer";
	            oReq.overrideMimeType('text\/plain; charset=x-user-defined');
	            oReq.onload = function(oEvent) {
	                if (oReq.readyState === 4) {
	                    if ((oReq.status === 200) || (oReq.status === 0)) { // status = 0 is necessary for file URL
	                        var arrayBuffer = null; // Note: not oReq.responseText
	                        if (oReq.response) {
	                            arrayBuffer = oReq.response;
	                            var hdr = new bluefile.BlueHeader(arrayBuffer, that.options);
	                            parseURL(href);
	                            var fileUrl = parseURL(href);
	                            hdr.file_name = fileUrl.file;
	                            onload(hdr);
	                        } else if (oReq.responseText) {
	                            text2buffer(oReq.responseText, function(arrayBuffer) {
	                                var hdr = new bluefile.BlueHeader(arrayBuffer, that.options);
	                                parseURL(href);
	                                var fileUrl = parseURL(href);
	                                hdr.file_name = fileUrl.file;
	                                onload(hdr);
	                            });
	                        }
	                        return;
	                    }
	                }
	                onload(null);
	            };
	            oReq.onerror = function(oEvent) {
	                onload(null);
	            };
	            oReq.send(null);
	        }
	    };
	
	    // Node: Export function
	    module.exports = bluefile;
	
	}());


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license
	 * File: m.js
	 * Copyright (c) 2012-2014, Michael Ihde, All rights reserved.
	 * Copyright (c) 2012-2014, Axios Inc., All rights reserved.
	 *
	 * This file is part of SigPlot.
	 *
	 * SigPlot is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
	 * General Public License as published by the Free Software Foundation; either version 3.0 of the License, or
	 * (at your option) any later version. This library is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	 * PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the
	 * GNU Lesser General Public License along with SigPlot.
	 */
	
	/*jslint nomen: true, browser: true, devel: true*/
	
	//Uses Immediately-invoked Function Expressions (IIFE)s for namespaces
	//See http://addyosmani.com/blog/essential-js-namespacing/ for details.
	
	/* global module */
	/* global require */
	
	(function() {
	    'use strict';
	
	    var bluefile = __webpack_require__(38);
	    var loglevel = __webpack_require__(40);
	
	    function m() {}
	
	    m.log = loglevel;
	
	    /**
	     *
	     *
	     * @memberOf sigplot
	     * @private
	     */
	    var PointArray = null;
	
	    /**
	     * True if we detected that we are on an iOS device
	     *
	     * @memberOf sigplot
	     * @private
	     */
	    var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false);
	    if ((iOS) || // iOS doesn't support Float64
	        (typeof Float64Array === 'undefined') || // If it's undefined it's obviously not supported
	        (Float64Array.emulated) || // If it's emulated, don't waste time on extra precision
	        (!Float64Array.BYTES_PER_ELEMENT)) { // If bytes per element isn't defined, it's a buggy implementation (i.e. PhantomJS)
	        m.PointArray = Float32Array;
	    } else {
	        m.PointArray = Float64Array;
	    }
	
	
	    /** UNITS Structure:
	     *		0: ["None", "U"],
	     *		1: ["Time", "sec"],
	     *		2: ["Delay", "sec"],
	     *		3: ["Frequency", "Hz"],
	     *		4: ["Time code format", ""],
	     *		5: ["Distance", "m"],
	     *		6: ["Speed", "m/s"],
	     *		7: ["Acceleration", "m/sec^2"],
	     *		8: ["Jerk", "m/sec^3"],
	     *		9: ["Doppler", "Hz"],
	     *		10: ["Doppler rate", "Hz/sec"],
	     *		11: ["Energy", "J"],
	     *		12: ["Power", "W"],
	     *		13: ["Mass", "g"],
	     *		14: ["Volume", "l"],
	     *		15: ["Angular power density", "W/ster"],
	     *		16: ["Integrated power density", "W/rad"],
	     *		17: ["Spatial power density", "W/m^2"],
	     *		18: ["Integrated power density", "W/m"],
	     *		19: ["Spectral power density", "W/MHz"],
	     *		20: ["Amplitude", "U"],
	     *		21: ["Real", "U"],
	     *		22: ["Imaginary", "U"],
	     *		23: ["Phase", "rad"],
	     *		24: ["Phase", "deg"],
	     *		25: ["Phase", "cycles"],
	     *		26: ["10*Log", "U"],
	     *		27: ["20*Log", "U"],
	     *		28: ["Magnitude", "U"],
	     *		29: ["Unknown", "U"],
	     *		30: ["Unknown", "U"],
	     *		31: ["General dimensionless", ""],
	     *		32: ["Counts", ""],
	     *		33: ["Angle", "rad"],
	     *		34: ["Angle", "deg"],
	     *		35: ["Relative power", "dB"],
	     *		36: ["Relative power", "dBm"],
	     *		37: ["Relative power", "dBW"],
	     *		38: ["Solid angle", "ster"],
	     *		40: ["Distance", "ft"],
	     *		41: ["Distance", "nmi"],
	     *		42: ["Speed", "ft/sec"],
	     *		43: ["Speed", "nmi/sec"],
	     *		44: ["Speed", "knots=nmi/hr"],
	     *		45: ["Acceleration", "ft/sec^2"],
	     *		46: ["Acceleration", "nmi/sec^2"],
	     *		47: ["Acceleration", "knots/sec"],
	     *		48: ["Acceleration", "G"],
	     *		49: ["Jerk", "G/sec"],
	     *		50: ["Rotation", "rps"],
	     *		51: ["Rotation", "rpm"],
	     *		52: ["Angular velocity", "rad/sec"],
	     *		53: ["Angular velocity", "deg/sec"],
	     *		54: ["Angular acceleration", "rad/sec^2"],
	     *		55: ["Angular acceleration", "deg/sec^2"],
	     *		60: ["Latitude", "deg"],
	     *		61: ["Longitude", "deg"],
	     *		62: ["Altitude", "ft"],
	     *		63: ["Altitude", "m"]
	     * @global
	     */
	    var UNITS = {
	        0: ["None", "U"],
	        1: ["Time", "sec"],
	        2: ["Delay", "sec"],
	        3: ["Frequency", "Hz"],
	        4: ["Time code format", ""],
	        5: ["Distance", "m"],
	        6: ["Speed", "m/s"],
	        7: ["Acceleration", "m/sec^2"],
	        8: ["Jerk", "m/sec^3"],
	        9: ["Doppler", "Hz"],
	        10: ["Doppler rate", "Hz/sec"],
	        11: ["Energy", "J"],
	        12: ["Power", "W"],
	        13: ["Mass", "g"],
	        14: ["Volume", "l"],
	        15: ["Angular power density", "W/ster"],
	        16: ["Integrated power density", "W/rad"],
	        17: ["Spatial power density", "W/m^2"],
	        18: ["Integrated power density", "W/m"],
	        19: ["Spectral power density", "W/MHz"],
	        20: ["Amplitude", "U"],
	        21: ["Real", "U"],
	        22: ["Imaginary", "U"],
	        23: ["Phase", "rad"],
	        24: ["Phase", "deg"],
	        25: ["Phase", "cycles"],
	        26: ["10*Log", "U"],
	        27: ["20*Log", "U"],
	        28: ["Magnitude", "U"],
	        29: ["Unknown", "U"],
	        30: ["Unknown", "U"],
	        31: ["General dimensionless", ""],
	        32: ["Counts", ""],
	        33: ["Angle", "rad"],
	        34: ["Angle", "deg"],
	        35: ["Relative power", "dB"],
	        36: ["Relative power", "dBm"],
	        37: ["Relative power", "dBW"],
	        38: ["Solid angle", "ster"],
	        40: ["Distance", "ft"],
	        41: ["Distance", "nmi"],
	        42: ["Speed", "ft/sec"],
	        43: ["Speed", "nmi/sec"],
	        44: ["Speed", "knots=nmi/hr"],
	        45: ["Acceleration", "ft/sec^2"],
	        46: ["Acceleration", "nmi/sec^2"],
	        47: ["Acceleration", "knots/sec"],
	        48: ["Acceleration", "G"],
	        49: ["Jerk", "G/sec"],
	        50: ["Rotation", "rps"],
	        51: ["Rotation", "rpm"],
	        52: ["Angular velocity", "rad/sec"],
	        53: ["Angular velocity", "deg/sec"],
	        54: ["Angular acceleration", "rad/sec^2"],
	        55: ["Angular acceleration", "deg/sec^2"],
	        60: ["Latitude", "deg"],
	        61: ["Longitude", "deg"],
	        62: ["Altitude", "ft"],
	        63: ["Altitude", "m"]
	    };
	
	    /** Common structure 
	     * @private
	     */
	    m.Mc = {
	        // Colormaps are stored as 7 element tables which are then
	        //	interpolated to the number of colors actually used in a graphics routine
	        //	call to MX$COLORMAP.
	
	        // There are 4 colormap tables stored in the environment: A GREYSCALE,
	        // COLORRAMP, COLORWHEEL, COLORSPECTRUM, or SUNSET.  The specific values that
	        // are listed here are from xcolordef.prm (use the XCOLORMAP widget).
	        //
	        // The actual values are a result of tribal knowledge and years of experience
	        colormap: [{
	            name: "Greyscale",
	            colors: [{
	                pos: 0,
	                red: 0,
	                green: 0,
	                blue: 0
	            }, {
	                pos: 60,
	                red: 50,
	                green: 50,
	                blue: 50
	            }, {
	                pos: 100,
	                red: 100,
	                green: 100,
	                blue: 100
	            }, {
	                pos: 100,
	                red: 0,
	                green: 0,
	                blue: 0
	            }, {
	                pos: 100,
	                red: 0,
	                green: 0,
	                blue: 0
	            }, {
	                pos: 100,
	                red: 0,
	                green: 0,
	                blue: 0
	            }, {
	                pos: 100,
	                red: 0,
	                green: 0,
	                blue: 0
	            }]
	        }, {
	            name: "Ramp Colormap",
	            colors: [{
	                pos: 0,
	                red: 0,
	                green: 0,
	                blue: 15
	            }, {
	                pos: 10,
	                red: 0,
	                green: 0,
	                blue: 50
	            }, {
	                pos: 31,
	                red: 0,
	                green: 65,
	                blue: 75
	            }, {
	                pos: 50,
	                red: 0,
	                green: 85,
	                blue: 0
	            }, {
	                pos: 70,
	                red: 75,
	                green: 80,
	                blue: 0
	            }, {
	                pos: 83,
	                red: 100,
	                green: 60,
	                blue: 0
	            }, {
	                pos: 100,
	                red: 100,
	                green: 0,
	                blue: 0
	            }]
	        }, {
	            name: "Color Wheel",
	            colors: [{
	                pos: 0,
	                red: 100,
	                green: 100,
	                blue: 0
	            }, {
	                pos: 20,
	                red: 0,
	                green: 80,
	                blue: 40
	            }, {
	                pos: 30,
	                red: 0,
	                green: 100,
	                blue: 100
	            }, {
	                pos: 50,
	                red: 10,
	                green: 10,
	                blue: 0
	            }, {
	                pos: 65,
	                red: 100,
	                green: 0,
	                blue: 0
	            }, {
	                pos: 88,
	                red: 100,
	                green: 40,
	                blue: 0
	            }, {
	                pos: 100,
	                red: 100,
	                green: 100,
	                blue: 0
	            }]
	        }, {
	            name: "Spectrum",
	            colors: [{
	                pos: 0,
	                red: 0,
	                green: 75,
	                blue: 0
	            }, {
	                pos: 22,
	                red: 0,
	                green: 90,
	                blue: 90
	            }, {
	                pos: 37,
	                red: 0,
	                green: 0,
	                blue: 85
	            }, {
	                pos: 49,
	                red: 90,
	                green: 0,
	                blue: 85
	            }, {
	                pos: 68,
	                red: 90,
	                green: 0,
	                blue: 0
	            }, {
	                pos: 80,
	                red: 90,
	                green: 90,
	                blue: 0
	            }, {
	                pos: 100,
	                red: 95,
	                green: 95,
	                blue: 95
	            }]
	        }, {
	            name: "Sunset",
	            colors: [{
	                pos: 0,
	                red: 10,
	                green: 0,
	                blue: 23
	            }, {
	                pos: 18,
	                red: 34,
	                green: 0,
	                blue: 60
	            }, {
	                pos: 36,
	                red: 58,
	                green: 20,
	                blue: 47
	            }, {
	                pos: 55,
	                red: 74,
	                green: 20,
	                blue: 28
	            }, {
	                pos: 72,
	                red: 90,
	                green: 43,
	                blue: 0
	            }, {
	                pos: 87,
	                red: 100,
	                green: 72,
	                blue: 0
	            }, {
	                pos: 100,
	                red: 100,
	                green: 100,
	                blue: 76
	            }]
	        }]
	    };
	
	    /** Pipe Size 
	     * @private
	     */
	    m.PIPESIZE = 1024 * 1024;
	
	    /**
	     * Creates new file with header initialized to type-1000 defaults
	     * and data appended. (tbd)
	     * @param	{string}	filename	Name of File to Create
	     * @param  	{array}		data		Input data buffer
	     * @param  	{array}	  	overrides	List of fields/values to be overridden in the bluefile header
	     * @return 	{header} 	hcb		Return <hcb> type-1000 bluefile header, filename=null
	     */
	    m.initialize = function(data, overrides) {
	        var hcb = new bluefile.BlueHeader(null);
	
	        hcb.version = 'BLUE';
	        hcb.size = 0;
	        hcb.type = 1000;
	        hcb.format = 'SF';
	        hcb.timecode = 0.0;
	        hcb.xstart = 0.0;
	        hcb.xdelta = 1.0;
	        hcb.xunits = 0;
	        hcb.subsize = 1;
	        hcb.ystart = 0.0;
	        hcb.ydelta = 1.0;
	        hcb.yunits = 0;
	
	        if (!overrides) { /* if no overrides provided...set it to empty*/
	            overrides = {};
	        }
	
	        for (var field in overrides) {
	            hcb[field] = overrides[field];
	        }
	
	        // Force type 2000 is subsize is specified
	        if (hcb["subsize"] > 1) {
	            hcb.type = 2000;
	        }
	        hcb["class"] = hcb.type / 1000;
	        // If this is a type 2000 , subsize *must* be provided
	        if ((hcb["class"] === 2) && (overrides["subsize"] === undefined)) {
	            throw "subsize must be provided with type 2000 files";
	        }
	
	
	        if (!overrides.pipe) {
	            hcb.setData(data);
	        } else {
	            hcb.pipe = true;
	            hcb.in_byte = 0;
	            hcb.out_byte = 0;
	            // TODO round pipe size to nearest number of elements
	            var pipesize = overrides.pipesize || m.PIPESIZE;
	
	            hcb.buf = new ArrayBuffer(pipesize);
	            hcb.setData(hcb.buf);
	            hcb.data_free = hcb.dview.length;
	        }
	
	        return hcb;
	    };
	
	    /** 
	     * Convert type-2000 header internals to force GRAB and FILAD routines to treat file as a 1000-type file.
	     * @param	{header}	hcb		Bluefile header control block
	     */
	    m.force1000 = function(hcb) {
	        if (hcb["class"] === 2) {
	            if ((hcb.size) && (!hcb.pipe)) {
	                hcb.size = hcb.subsize * hcb.size;
	            } else {
	                // assume the size is 0
	                hcb.size = 0;
	            }
	            hcb.bpe = hcb.bpe / hcb.subsize;
	            hcb.ape = 1;
	        }
	    };
	
	    /** 
	     * Get data from file at specified start location.
	     * @param	{header}	hcb		Bluefile header control block
	     * @param	{array}		bufview		Data buffer to receive data
	     * @param	{number}	start		Start location
	     * @param	{number}	nget		Number of requested data
	     * @return	{number}	ngot		Number of received data
	     */
	    m.grab = function(hcb, bufview, start, nget) {
	        if (!hcb.dview) {
	            return 0;
	        }
	
	        // TODO reformat
	        if (hcb.format[0] === 'C') {
	            start = start * 2;
	        }
	
	        nget = hcb.ape * nget; // TODO - this is never used????
	
	        //var ngot = Math.min(bufview.length, (hcb.dview.length-start)); //mmm
	        var ngot = Math.min(bufview.length, (hcb.dview.length - start));
	        // iOS doesn't have .set on TypedArrays
	        if (bufview.set === undefined) {
	            for (var i = 0; i < ngot; i++) {
	                bufview[i] = hcb.dview[start + i];
	            }
	        } else {
	            bufview.set(hcb.dview.subarray(start, start + ngot));
	        }
	        if (hcb.format[0] === 'C') {
	            ngot = ngot / 2;
	        }
	        return ngot;
	    };
	
	    /**
	     * Append data buffer to file specified in the bluefile header control block.
	     * @param	{header}	hcb		Bluefile header control block
	     * @param	{array}		data		Data buffer
	     * @param   {boolean}       [sync=false]    dispatch onpipewrite syncronously
	     */
	    m.filad = function(hcb, data, sync) {
	        if (hcb.data_free < data.length) {
	            throw "Pipe full";
	        }
	        var sidx = hcb.in_byte / hcb.dview.BYTES_PER_ELEMENT;
	        var eidx = (sidx + data.length);
	        if (eidx > hcb.dview.length) {
	            var head = hcb.dview.length - sidx;
	            var tail = data.length - head;
	            if (data.subarray) {
	                hcb.dview.set(data.subarray(0, head), sidx);
	                hcb.dview.set(data.subarray(head, data.length), 0);
	            } else {
	                hcb.dview.set(data.slice(0, head), sidx);
	                hcb.dview.set(data.slice(head, data.length), 0);
	            }
	            hcb.in_byte = (tail * hcb.dview.BYTES_PER_ELEMENT);
	        } else {
	            hcb.dview.set(data, sidx);
	            hcb.in_byte = (eidx * hcb.dview.BYTES_PER_ELEMENT) % hcb.buf.byteLength;
	        }
	        hcb.data_free -= data.length;
	        if (hcb.onwritelisteners) {
	            for (var i = 0; i < hcb.onwritelisteners.length; i++) {
	                if (!sync) {
	                    window.setTimeout(hcb.onwritelisteners[i], 0);
	                } else {
	                    hcb.onwritelisteners[i]();
	                }
	            }
	        }
	    };
	
	    /**
	     * @param	{header}	hcb		Bluefile header control block
	     * @return	{number}	elements available
	     * @private
	     */
	    m.pavail = function(hcb) {
	        return hcb.dview.length - hcb.data_free;
	    };
	
	    /**
	     * Get data from file in dataflow fashion.
	     * @param	{array}		hcb	Bluefile header control block
	     * @param 	{array}		dview	Data buffer to receive data
	     * @param	{number}	nget	Input variable name of parameter to receive data
	     * @param	{number}	offset	Offset into file
	     * @return	{number}	ngot	Number of data values gotten
	     */
	    // WARNING - nget is number of scalars...which differs from the normal API
	    m.grabx = function(hcb, dview, nget, offset) {
	        var navail = hcb.dview.length - hcb.data_free;
	        if (offset === undefined) {
	            offset = 0;
	        }
	        if (!nget) {
	            nget = Math.min(dview.length - offset, navail);
	        } else if (nget > dview.length - offset) {
	            throw "m.grabx : nget larger then available buffer space";
	        }
	        if (nget < 0) {
	            throw "m.grabx : nget cannot be negative";
	        }
	        if (nget > navail) {
	            return 0;
	        }
	
	        var sidx = hcb.out_byte / hcb.dview.BYTES_PER_ELEMENT;
	        var eidx = (sidx + nget);
	        if (eidx >= hcb.dview.length) {
	            var head = hcb.dview.length - sidx;
	            eidx = eidx - hcb.dview.length;
	            dview.set(hcb.dview.subarray(sidx, hcb.dview.length), offset);
	            dview.set(hcb.dview.subarray(0, eidx), offset + head);
	        } else {
	            dview.set(hcb.dview.subarray(sidx, eidx), offset);
	        }
	        hcb.out_byte = (eidx * hcb.dview.BYTES_PER_ELEMENT) % hcb.buf.byteLength;
	        hcb.data_free += nget;
	        var ngot = nget;
	        return ngot;
	    };
	
	
	    /**
	     * @param	{header}	hcb		Bluefile header control block
	     * @param	{number}	onwrite		-
	     * @private
	     */
	    m.addPipeWriteListener = function(hcb, onwrite) {
	        if (!hcb.onwritelisteners) {
	            hcb.onwritelisteners = [];
	        }
	        if (hcb.onwritelisteners.indexOf(onwrite) === -1) {
	            hcb.onwritelisteners.push(onwrite);
	        }
	    };
	
	    /**
	     * Returns ASCII description of units code
	     * @param 	{number}	UNITS array index (see global UNITS)
	     * @return 	{string}	ASCII code pair
	     */
	    // ~= M$UNITS_NAME
	    m.units_name = function(units) {
	        var u = UNITS[units];
	        return u[0] + " (" + u[1] + ")";
	    };
	
	    /**
	     * Extract filename from full path
	     * @param 	{string}	pathfilename	Full path, including filename
	     * @return	{string}	filename	    Trimmed filename
	     */
	    m.trim_name = function(pathfilename) {
	        var i = pathfilename.indexOf(']');
	        if (i === -1) {
	            i = pathfilename.indexOf('/');
	        }
	        if (i === -1) {
	            i = pathfilename.indexOf(':');
	        }
	        var j = pathfilename.substr(i + 1, pathfilename.length).indexOf('.');
	        if (j < 0) {
	            j = pathfilename.length - i;
	        }
	        var filename = pathfilename.substr(i + 1, i + j + 1);
	        return filename;
	    };
	
	    /**
	     * Takes an integer code for units and a multiplier and returns the string representation of the two.
	     * Example: l = m.label(1,1.0e3) ==> l =  Time (Ksec)
	     * @param 	{number}	units	Integer code for Unit (see global UNITS)
	     * @param 	{number} 	mult	Units multiplier (i.e 1.0e3 ==> 'K')
	     * @return {string} representation of units and multiplier
	     */
	    // ~= M$LABEL
	    m.label = function(units, mult) {
	        var u = ["Unknown", "U"];
	
	        if (typeof units === "string") {
	            u = [units, null];
	        } else if (Array.isArray(units)) {
	            u = units;
	        } else {
	            u = UNITS[units];
	            if (u === undefined) {
	                u = ["Unknown", "U"];
	            }
	        }
	
	        var prefix = m.mult_prefix(mult);
	
	        if (u[1]) {
	            return u[0] + " (" + prefix + u[1] + ")";
	        } else {
	            return u[0];
	        }
	    };
	
	    m.mult_prefix = function(mult) {
	        var prefix = "?";
	
	        /* jshint -W116 */
	        if (mult == 1) {
	            prefix = "";
	        } else if (mult == 10) {
	            prefix = 'da';
	        } else if (mult == 0.1) {
	            prefix = 'd';
	        } else if (mult == 100) {
	            prefix = 'h';
	        } else if (mult == 0.01) {
	            prefix = 'c';
	        } else if (mult == 1.0e3) {
	            prefix = 'K';
	        } else if (mult == 1.0e-3) {
	            prefix = 'm';
	        } else if (mult == 1.0e6) {
	            prefix = 'M';
	        } else if (mult == 1.0e-6) {
	            prefix = 'u';
	        } else if (mult == 1.0e9) {
	            prefix = 'G';
	        } else if (mult == 1.0e-9) {
	            prefix = 'n';
	        } else if (mult == 1.0e12) {
	            prefix = 'T';
	        } else if (mult == 1.0e-12) {
	            prefix = 'p';
	        }
	        /* jshint +W116 */
	
	        return prefix;
	    };
	
	    /** 
	     * @private
	     */
	    var VECTOR = {
	        MV: 'F', // vector type
	        MS: 'F', // scalar type...not really necessary in javascript
	        nbpt: 4,
	        view: undefined
	    };
	
	
	    /**
	     * Sets data type for all subsequent calls to vector libraries.  Remains in effect until another call to this routine.
	     * @param ctype
	     */
	    // ~= VSTYPE - not really necessary
	    m.vstype = function(ctype) {
	        VECTOR.MS = ctype;
	        VECTOR.MV = ctype;
	        if (VECTOR.MV === 'D') {
	            VECTOR.nbpt = 8;
	        } else if ((VECTOR.MV === 'L') || (VECTOR.MV === 'F')) {
	            VECTOR.nbpt = 4;
	        } else if (VECTOR.MV === 'I') {
	            VECTOR.nbpt = 2;
	        } else if (VECTOR.MV === 'B') {
	            VECTOR.nbpt = 1;
	        } else {
	            alert("Unsupported vector type");
	        }
	    };
	
	    m.log10 = function(v, lo_thresh) {
	        if (lo_thresh === undefined) {
	            lo_thresh = 1.0e-20;
	        }
	        return Math.log(Math.max(v, lo_thresh)) / Math.log(10);
	    };
	
	    /**
	     * For each vector element in <src>, determine the max of <src> element and <lo_thresh>, returns the log(base10) of that value in <dst>
	     * @param	{array}		src		Input vector.
	     * @param 	{number} 	lo_thresh	User-set minimum log threshold (if not defined, set default=1.0e-20). Prevent computing log of 0 or negative values.
	     * @param 	{array}		dst		Ouput vector.  If undefined, <src> elements will be overwritten.
	     */
	    // ~= M$VLOG10- not really necessary
	    m.vlog10 = function(src, lo_thresh, dst) {
	        if (lo_thresh === undefined) {
	            lo_thresh = 1.0e-20;
	        }
	        if (dst === undefined) {
	            dst = src;
	        }
	        for (var i = 0; i < src.length; i++) {
	            if (dst.length <= i) {
	                break;
	            }
	            dst[i] = Math.log(Math.max(src[i], lo_thresh)) / Math.log(10);
	        }
	    };
	
	    /**
	     * Same as vlog10 but multiply each output value by a scale factor <dbscale>.
	     * @param 	{array}		src		Input vector.
	     * @param 	{number}	lo_thresh	User-set minimum log threshold.
	     *                                              If undefined, defaults to 1.0e-20. Prevent computing log of 0 or negative values.
	     * @param 	{number}	dbscale		Output scale factor. If undefined, defaults to 1.
	     * @param 	{array}		dst		Output vector. If undefined, <src> elements will be overwritten.
	     * @private
	     */
	    m.vlogscale = function(src, lo_thresh, dbscale, dst) {
	        if (lo_thresh === undefined) {
	            lo_thresh = 1.0e-20;
	        }
	        if (dbscale === undefined) {
	            dbscale = 1;
	        }
	        if (dst === undefined) {
	            dst = src;
	        }
	        for (var i = 0; i < src.length; i++) {
	            if (dst.length <= i) {
	                break;
	            }
	            dst[i] = Math.log(Math.abs(Math.max(src[i], lo_thresh))) / Math.log(10);
	            dst[i] = dst[i] * dbscale;
	        }
	    };
	
	    /**
	     * Same as vlogscale but computes magnitude squared.
	     *
	     * @param 	{array}		src		Input vector.
	     * @param 	{number}	lo_thresh	User-set minimum log threshold.
	     *                                              If undefined, defaults to 1.0e-20. Prevent computing log of 0 or negative values.
	     * @param 	{number}	dbscale		Output scale factor. If undefined, defaults to 1.
	     * @param 	{array}		dst		Output vector. If undefined, <src> elements will be overwritten.
	     * @private
	     */
	    m.cvmag2logscale = function(src, lo_thresh, dbscale, dst) {
	        if (lo_thresh === undefined) {
	            lo_thresh = 1.0e-20;
	        }
	        if (dbscale === undefined) {
	            dbscale = 1;
	        }
	        if (dst === undefined) {
	            dst = src;
	        }
	        var j = 0;
	        for (var i = 0; i < dst.length; i++) {
	            j = 2 * i + 1;
	            if (j >= src.length) {
	                break;
	            }
	            dst[i] = (src[j - 1] * src[j - 1]) + (src[j] * src[j]);
	            dst[i] = Math.log(Math.abs(Math.max(dst[i], lo_thresh))) / Math.log(10);
	            dst[i] = dst[i] * dbscale;
	        }
	    };
	
	    /**
	     * Multiply <count> elements of <src> by <mul>, store results in <dst>
	     * @param	{array} 	src		Input vector.
	     * @param	{number}	mul		Vector multiplier.
	     * @param	{array}		dst		Output vector. If not defined, <src> elements will be overwritten.
	     * @param	{number}	count		Number of elements to apply multiplier, starting with first <src> element.
	     */
	    // ~= M$VSMUL
	    m.vsmul = function(src, mul, dst, count) {
	        if (dst === undefined) {
	            dst = src;
	        }
	        if (count === undefined) {
	            count = dst.length;
	        }
	        count = Math.min(dst.length, count);
	        count = Math.min(src.length, count);
	
	        for (var i = 0; i < count; i++) {
	            if (dst.length <= i) {
	                break;
	            }
	            dst[i] = src[i] * mul;
	        }
	    };
	
	    /**
	     * Finds max and min values in vector <vec> and returns values.
	     * @param 	{array}		vec		Input vector.
	     * @param	{number}	size		Number of elements to search to find max.min values.
	     * @return 	{array}		mxmin		Index and value of min and max elements in <vec>.
	     */
	    // ~= M$VMXMN
	    m.vmxmn = function(vec, size) {
	        // Originally this code used an object to hold the values
	        // but Chrome 34.0.1847.131 seemed to have a bug where
	        // these values would somehow get messed up...oddly
	        // putting printouts or breakpoints prevented the
	        // problem from showing up.
	        var smax = vec[0];
	        var smin = vec[0];
	        var imax = 0;
	        var imin = 0;
	        size = Math.min(size, vec.length);
	        for (var i = 0; i < size; i++) {
	            if (vec[i] > smax) {
	                smax = vec[i];
	                imax = i;
	            }
	            if (vec[i] < smin) {
	                smin = vec[i];
	                imin = i;
	            }
	        }
	        return {
	            smax: smax,
	            smin: smin,
	            imax: imax,
	            imin: imin
	        };
	    };
	
	    /**
	     * Move <count> elements from <src> to <dest>.  Stride is the distance between each array element in either or both the input and output vectors.
	     * @param {array}	src		Input vector.
	     * @param {number}	sstride		Input stride.
	     * @param {array}	dest		Output vector.
	     * @param {number}	dstride		Output stride.
	     * @param {number}	count		Number of input vector elements to move, starting with 0th element of <vec>. Cannot exceed vector lengths,
	     *					taking into account the strides.
	     */
	    m.vmov = function(src, sstride, dest, dstride, count) {
	        if (count === undefined) {
	            count = src.length;
	        }
	        count = Math.min(src.length, count);
	        //count = Math.min(src.length, count, (count)*(dest.length)*(dstride)); //mmm-TODO
	
	        for (var i = 0; i < count; i++) {
	            var s = i * sstride;
	            var d = i * dstride;
	            if (s >= src.length) {
	                break;
	            }
	            if (d >= dest.length) {
	                break;
	            }
	            dest[d] = src[s];
	        }
	    };
	
	    /**
	     * Initialize <count> consecutive elements of input vector <vec> with value <inpval>.
	     * @param	{array}		vec		Input vector
	     * @param	{number}	inpval		Value
	     * @param 	{number}	count		Number of elements to write, starting with 0th element of <vec>.  If undefined, entire <vec> is written.
	     */
	    // ~= M$VFILL
	    // TODO - more optimal version?
	    m.vfill = function(vec, inpval, count) {
	        if (count === undefined) {
	            count = vec.length;
	        }
	        count = Math.min(vec.length, count);
	        for (var i = 0; i < count; i++) {
	            vec[i] = inpval;
	        }
	    };
	
	    /**
	     * Compute the absolute value of <count> elements in <vec> and write to output vector <dest>
	     * @param 	{array}		vec		Input vector.
	     * @param 	{array}		dest		Ouput vector. If <dest> is undefined, overwrite input vector <vec>.
	     * @param 	{number}	count		Number of elements to write, starting with 0th element of <vec>. Cannot exceed vector lengths.
	     */
	    m.vabs = function(vec, dest, count) {
	        if (count === undefined) {
	            count = vec.length;
	        }
	        if (dest === undefined) {
	            dest = vec;
	        }
	        //count = Math.min(dest.length, count, vec.length); //mmm-TODO
	        for (var i = 0; i < count; i++) {
	            dest[i] = Math.abs(vec[i]);
	        }
	    };
	
	
	    /**
	     * Computes the magnitude of <count> complex vector <cxvec> elements. Store results in output vector <dest>.
	     * @param	{array}		cxvec		Input vector
	     * @param 	{array}		dest		Output vector
	     * @param 	{number}	count		Number of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.
	     */
	    // ~= M$CVMAG
	    m.cvmag = function(cxvec, dest, count) {
	        if (count === undefined) {
	            count = dest.length;
	        }
	        count = Math.min(dest.length, count);
	        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO
	
	        for (var i = 0; i < count; i++) {
	            var j = 2 * i + 1;
	            if (j >= cxvec.length) {
	                break;
	            }
	            dest[i] = Math.sqrt((cxvec[j - 1] * cxvec[j - 1]) + (cxvec[j] * cxvec[j]));
	        }
	    };
	
	    /**
	     * Computes the magnitude squared of <count> complex vector <cxvec> elements. Store results in output vector <dest>.
	     * @param	{array}		cxvec		Input vector
	     * @param 	{array}		dest		Output vector
	     * @param 	{number}	count		Number of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.
	     */
	    // ~= M$CVMAG2
	    m.cvmag2 = function(cxvec, dest, count) {
	        if (count === undefined) {
	            count = dest.length;
	        }
	        count = Math.min(dest.length, count);
	        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO
	
	        var j = 0;
	        for (var i = 0; i < count; i++) {
	            j = 2 * i + 1;
	            if (j >= cxvec.length) {
	                break;
	            }
	            dest[i] = (cxvec[j - 1] * cxvec[j - 1]) + (cxvec[j] * cxvec[j]);
	        }
	    };
	
	    /**
	     * Computes phase in radians of <count> complex vector <cxvec> elements. Store results in output vector <dest>.
	     * @param	{array}		cxvec		Input vector
	     * @param 	{array}		dest		Output vector
	     * @param 	{number}	count		Number of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.
	     */
	    // ~= M$CVPHA
	    m.cvpha = function(cxvec, dest, count) {
	        if (count === undefined) {
	            count = dest.length;
	        }
	        count = Math.min(dest.length, count);
	        //count = Math.min(dest.length, count, cxvec.length); //mmm-TODO
	
	        var j = 0;
	        var re = 0;
	        var im = 0;
	        for (var i = 0; i < count; i++) {
	            j = 2 * i + 1;
	            if (j >= cxvec.length) {
	                break;
	            }
	            re = cxvec[j - 1];
	            im = cxvec[j];
	            if ((re === 0.0) && (im === 0.0)) {
	                re = 1.0;
	            }
	            dest[i] = Math.atan2(im, re);
	        }
	    };
	
	    /**
	     * Computes the phase in degrees of <count> complex vector <cxvec> elements. Store results in output vector <dest>.
	     * @param	{array}		cxvec		Input vector
	     * @param 	{array}		dest		Output vector
	     * @param 	{number}	count		Number of elements to write, starting with 0th element of <cxvec>. Cannot exceed vector lengths.  If undefined, defaults to output vector <dest> length.
	     */
	    // ~= M$CVPHAD
	    m.cvphad = function(cxvec, dest, count) {
	        if (count === undefined) {
	            count = dest.length;
	        }
	        count = Math.min(dest.length, count);
	
	        var j = 0;
	        var re = 0;
	        var im = 0;
	        for (var i = 0; i < count; i++) {
	            j = 2 * i + 1;
	            if (j >= cxvec.length) {
	                break;
	            }
	            re = cxvec[j - 1];
	            im = cxvec[j];
	            if ((re === 0.0) && (im === 0.0)) {
	                re = 1.0;
	            }
	            dest[i] = Math.atan2(im, re) * (180.0 / Math.PI);
	        }
	    };
	
	    /**
	     * @param n
	     * @private
	     */
	    // ~= INT(), DINT
	    m.trunc = function(n) {
	        return n - n % 1;
	    };
	
	    /**
	     * @param a1
	     * @param a2
	     * @private
	     */
	    // Transfer of sign function from Fortran
	    m.sign = function(a1, a2) {
	        if (a2 >= 0) {
	            return Math.abs(a1);
	        } else {
	            return -Math.abs(a1);
	        }
	    };
	
	    /**
	     * @method pad2
	     * @param number
	     * @private
	     */
	
	    function pad2(number) {
	        return (number < 10 ? '0' : '') + number;
	    }
	
	    /**
	     * Convert J1950 time or seconds-since-Epoch (midnight Dec-31-1949) to time-of-day. Fractional seconds accurate to milliseconds.
	     * @param 	{number}	sec		Number of seconds.
	     * @return	{string}	tod		Time of day
	     */
	
	    /* Output string can be in different forms as follows:
	     * -31536000 <  sec < 0                   -DDD::HH:MM:SS
	     *         0 <= sec < 86400                     HH:MM:SS
	     *         86400 <= sec < 31536000         DDD::HH:MM:SS
	     *         31536000 <=sec            YYYY:MM:DD:HH:MM:SS.<FFFFFF>
	     *                                    where FFFFFF is in microseconds
	     *
	     */
	
	    m.sec2tod = function(sec, trim_trailing_zeros) {
	        var tod = "";
	        var j1950 = Date.UTC(1950, 0, 1); //From 1950 to 1970
	        var j1950Date = new Date(j1950); //debug var
	        var j1949 = Date.UTC(1949, 11, 31);
	        var j1949Date = new Date(j1949); //debug var
	        var d = new Date();
	        var midnightToday = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0, 0);
	        var diffDaySecs = 86400; //    86400 secs = 24*60*60
	        var diffYearSecs = 31536000; // 31536000 secs = 365*24*60*60
	        var negDiffYearSecs = -1 * diffYearSecs; //-31536000 secs
	
	        if (sec >= 0) {
	            if (sec < diffDaySecs) {
	                // hh:mm:ss
	                var millisecs = midnightToday.getTime() + (sec * 1000);
	                var d = new Date(millisecs);
	                tod = pad2(d.getHours()) + ":" + pad2(d.getMinutes()) + ":" + pad2(d.getSeconds());
	            } else if (sec === 86400) {
	                tod = "24:00:00";
	            } else if (sec < diffYearSecs) {
	                // ddd:hh:mm:ss
	                var days = sec / diffDaySecs;
	                days = [days > 0 ? Math.floor(days) : Math.ceil(days)];
	                var d = new Date((sec * 1000) + midnightToday.getTime());
	                tod = days.toString() + "::" + pad2(d.getHours()) + ":" + pad2(d.getMinutes()) + ":" + pad2(d.getSeconds());
	            } else {
	                // convert to j1950
	                var secMilli = Math.floor(sec * 1000) + j1950;
	                d = new Date(secMilli);
	                tod = d.getUTCFullYear() + ":" + pad2(d.getUTCMonth() + 1) + ":" + pad2(d.getUTCDate()) + "::" +
	                    pad2(d.getUTCHours()) + ":" + pad2(d.getUTCMinutes()) + ":" + pad2(d.getUTCSeconds());
	            }
	        } else {
	            if (sec > negDiffYearSecs) {
	                // -ddd:hh:mm:ss
	                var days = sec / diffDaySecs;
	                days = (days <= 0) ? Math.ceil(days) : Math.floor(days);
	                var d = new Date(Math.abs(sec * 1000) + midnightToday.getTime());
	                if (days === 0) {
	                    days = "-0";
	                } else {
	                    days = days.toString();
	                }
	                tod = days + "::" + pad2(d.getHours()) + ":" + pad2(d.getMinutes()) + ":" + pad2(d.getSeconds());
	            } else {
	                // convert to j1950
	                var secMilli = Math.floor(sec * 1000) + j1950;
	                d = new Date(secMilli);
	                tod = d.getUTCFullYear() + ":" + pad2(d.getUTCMonth() + 1) + ":" + pad2(d.getUTCDate()) + "::" +
	                    pad2(d.getUTCHours()) + ":" + pad2(d.getUTCMinutes()) + ":" + pad2(d.getUTCSeconds());
	            }
	        }
	
	        // violate legacy behavior, include full precision always
	        // even if we are on a full second boundary, otherwise
	        // on rising/falling rasters it can look like the display
	        // is flickering
	        var fractional = (sec % 1);
	        if (fractional === 0.0) {
	            tod += ".000000";
	        } else {
	            tod += "." + Math.abs(sec % 1).toPrecision(6).slice(2, 8);
	        }
	
	        if (trim_trailing_zeros) {
	            var dloc = tod.indexOf(".");
	            var zloc = -1;
	            // If there is a 'decimal point'
	            if (dloc !== -1) {
	                zloc = tod.substr(dloc, tod.length).indexOf("0");
	            }
	            if (zloc !== -1) {
	                tod = tod.substr(0, dloc + zloc);
	            }
	        }
	        return tod;
	
	    };
	
	    /**
	     * The offset to convert midnight Jan 1st 1970 to
	     * midnight Jan 1st 1950.
	     *
	     * @private
	     */
	    var j1950offset = (20.0 * 365.0 + 5.0) * (24 * 3600);
	
	    /**
	     * 0.0 - 86400 == m.sec2tod
	     * >86400 then modulo 86400
	     *   if modulo <= 0 return m.sec2tod(modulo)+86400
	     *   if module <
	     */
	    m.sec2tspec = function(sec, mode, trim_trailing_zeros) {
	        mode = mode || "";
	        if (sec >= 0 && sec <= 86400) {
	            return m.sec2tod(sec, trim_trailing_zeros);
	        } else {
	            sec = sec % 86400;
	            if (mode !== "delta" && sec <= 0) {
	                return m.sec2tod(sec + 86400, trim_trailing_zeros);
	            } else if (mode === "delta" && sec <= 0) {
	                return "-" + m.sec2tod(-1 * sec, trim_trailing_zeros);
	            } else {
	                return m.sec2tod(sec, trim_trailing_zeros);
	            }
	        }
	    };
	
	    /**
	     * @param 	{number}	sec		Number of seconds.
	     * @return	{string}	tod		Time of day
	     */
	
	    m.sec2tod_j1970 = function(sec) {
	        var tod = "";
	        var d;
	        if ((sec >= 0) && (sec < 86400)) {
	            // hh:mm:ss
	            d = new Date(sec * 1000);
	            tod = pad2(d.getHours()) + ":" + pad2(d.getMinutes()) + ":" + pad2(d.getSeconds());
	
	        } else if ((sec < 0) && (sec > -31536000)) {
	            // -ddd:hh:mm:ss
	            var days = -1 * (sec / (24 * 60 * 60));
	            d = new Date(sec * 1000);
	            tod = days.toString() + "::" + pad2(d.getHours()) + ":" + pad2(d.getMinutes()) + ":" + pad2(d.getSeconds());
	        } else {
	            // convert to j1950
	            d = new Date((sec - j1950offset) * 1000);
	            tod = d.getFullYear() + ":" + pad2(d.getMonth()) + ":" + pad2(d.getDate()) + "::" +
	                pad2(d.getHours()) + ":" + pad2(d.getMinutes()) + ":" + pad2(d.getSeconds());
	        }
	        if ((sec % 1) !== 0) {
	            tod += "." + (sec % 1).toPrecision(6).slice(2, 8);
	        }
	        return tod;
	    };
	
	    m.j1970toj1950 = function(t) {
	        if (t.getTime !== undefined) {
	            return ((t.getTime() / 1000) + j1950offset);
	        } else {
	            return (t + j1950offset);
	        }
	    };
	
	    m.j1950toj1970 = function(t) {
	        return (t - j1950offset);
	    };
	
	    /**
	     * @private
	     */
	    // Throttle calls to "callback" routine and ensure that it
	    // is not invoked any more often than "delay" milliseconds.
	    //
	    m.throttle = function(delay, callback) {
	        var previousCall = new Date().getTime();
	        return function() {
	            var time = new Date().getTime();
	
	            //
	            // if "delay" milliseconds have expired since
	            // the previous call then propagate this call to
	            // "callback"
	            //
	            if ((time - previousCall) >= delay) {
	                previousCall = time;
	                callback.apply(null, arguments);
	            }
	        };
	    };
	
	    // Node: Export function
	    module.exports = m;
	
	}());


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	* loglevel - https://github.com/pimterry/loglevel
	*
	* Copyright (c) 2013 Tim Perry
	* Licensed under the MIT license.
	*/
	(function (root, definition) {
	    "use strict";
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module === 'object' && module.exports) {
	        module.exports = definition();
	    } else {
	        root.log = definition();
	    }
	}(this, function () {
	    "use strict";
	    var noop = function() {};
	    var undefinedType = "undefined";
	
	    function realMethod(methodName) {
	        if (typeof console === undefinedType) {
	            return false; // We can't build a real method without a console to log to
	        } else if (console[methodName] !== undefined) {
	            return bindMethod(console, methodName);
	        } else if (console.log !== undefined) {
	            return bindMethod(console, 'log');
	        } else {
	            return noop;
	        }
	    }
	
	    function bindMethod(obj, methodName) {
	        var method = obj[methodName];
	        if (typeof method.bind === 'function') {
	            return method.bind(obj);
	        } else {
	            try {
	                return Function.prototype.bind.call(method, obj);
	            } catch (e) {
	                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
	                return function() {
	                    return Function.prototype.apply.apply(method, [obj, arguments]);
	                };
	            }
	        }
	    }
	
	    // these private functions always need `this` to be set properly
	
	    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
	        return function () {
	            if (typeof console !== undefinedType) {
	                replaceLoggingMethods.call(this, level, loggerName);
	                this[methodName].apply(this, arguments);
	            }
	        };
	    }
	
	    function replaceLoggingMethods(level, loggerName) {
	        /*jshint validthis:true */
	        for (var i = 0; i < logMethods.length; i++) {
	            var methodName = logMethods[i];
	            this[methodName] = (i < level) ?
	                noop :
	                this.methodFactory(methodName, level, loggerName);
	        }
	    }
	
	    function defaultMethodFactory(methodName, level, loggerName) {
	        /*jshint validthis:true */
	        return realMethod(methodName) ||
	               enableLoggingWhenConsoleArrives.apply(this, arguments);
	    }
	
	    var logMethods = [
	        "trace",
	        "debug",
	        "info",
	        "warn",
	        "error"
	    ];
	
	    function Logger(name, defaultLevel, factory) {
	      var self = this;
	      var currentLevel;
	      var storageKey = "loglevel";
	      if (name) {
	        storageKey += ":" + name;
	      }
	
	      function persistLevelIfPossible(levelNum) {
	          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();
	
	          // Use localStorage if available
	          try {
	              window.localStorage[storageKey] = levelName;
	              return;
	          } catch (ignore) {}
	
	          // Use session cookie as fallback
	          try {
	              window.document.cookie =
	                encodeURIComponent(storageKey) + "=" + levelName + ";";
	          } catch (ignore) {}
	      }
	
	      function getPersistedLevel() {
	          var storedLevel;
	
	          try {
	              storedLevel = window.localStorage[storageKey];
	          } catch (ignore) {}
	
	          if (typeof storedLevel === undefinedType) {
	              try {
	                  var cookie = window.document.cookie;
	                  var location = cookie.indexOf(
	                      encodeURIComponent(storageKey) + "=");
	                  if (location) {
	                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
	                  }
	              } catch (ignore) {}
	          }
	
	          // If the stored level is not valid, treat it as if nothing was stored.
	          if (self.levels[storedLevel] === undefined) {
	              storedLevel = undefined;
	          }
	
	          return storedLevel;
	      }
	
	      /*
	       *
	       * Public API
	       *
	       */
	
	      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
	          "ERROR": 4, "SILENT": 5};
	
	      self.methodFactory = factory || defaultMethodFactory;
	
	      self.getLevel = function () {
	          return currentLevel;
	      };
	
	      self.setLevel = function (level, persist) {
	          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
	              level = self.levels[level.toUpperCase()];
	          }
	          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
	              currentLevel = level;
	              if (persist !== false) {  // defaults to true
	                  persistLevelIfPossible(level);
	              }
	              replaceLoggingMethods.call(self, level, name);
	              if (typeof console === undefinedType && level < self.levels.SILENT) {
	                  return "No console available for logging";
	              }
	          } else {
	              throw "log.setLevel() called with invalid level: " + level;
	          }
	      };
	
	      self.setDefaultLevel = function (level) {
	          if (!getPersistedLevel()) {
	              self.setLevel(level, false);
	          }
	      };
	
	      self.enableAll = function(persist) {
	          self.setLevel(self.levels.TRACE, persist);
	      };
	
	      self.disableAll = function(persist) {
	          self.setLevel(self.levels.SILENT, persist);
	      };
	
	      // Initialize with the right level
	      var initialLevel = getPersistedLevel();
	      if (initialLevel == null) {
	          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
	      }
	      self.setLevel(initialLevel, false);
	    }
	
	    /*
	     *
	     * Package-level API
	     *
	     */
	
	    var defaultLogger = new Logger();
	
	    var _loggersByName = {};
	    defaultLogger.getLogger = function getLogger(name) {
	        if (typeof name !== "string" || name === "") {
	          throw new TypeError("You must supply a name when creating a logger.");
	        }
	
	        var logger = _loggersByName[name];
	        if (!logger) {
	          logger = _loggersByName[name] = new Logger(
	            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
	        }
	        return logger;
	    };
	
	    // Grab the current global log variable in case of overwrite
	    var _log = (typeof window !== undefinedType) ? window.log : undefined;
	    defaultLogger.noConflict = function() {
	        if (typeof window !== undefinedType &&
	               window.log === defaultLogger) {
	            window.log = _log;
	        }
	
	        return defaultLogger;
	    };
	
	    return defaultLogger;
	}));


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license
	 * File: mx.js
	 * Copyright (c) 2012-2014, Michael Ihde, All rights reserved.
	 * Copyright (c) 2012-2014, Axios Inc., All rights reserved.
	 *
	 * This file is part of SigPlot.
	 *
	 * SigPlot is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
	 * General Public License as published by the Free Software Foundation; either version 3.0 of the License, or
	 * (at your option) any later version. This library is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	 * PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the
	 * GNU Lesser General Public License along with SigPlot.
	 */
	
	/*jslint nomen: true, browser: true, devel: true*/
	
	//Uses Immediately-invoked Function Expressions (IIFE)s for namespaces
	//See http://addyosmani.com/blog/essential-js-namespacing/ for details.
	
	/**
	 * This namespace includes generic graphical routines and functions
	 * the manipulate a canvas.
	 *
	 * @namespace
	 */
	
	/* global module */
	/* global require */
	/* global requestAnimFrame */
	/* global cancelAnimFrame */
	
	(function() {
	
	    var tinycolor = __webpack_require__(42);
	    var common = __webpack_require__(37);
	    var CanvasInput = __webpack_require__(43);
	    var m = __webpack_require__(39);
	
	    function mx() {}
	
	
	    mx.XW_INIT = -3;
	    mx.XW_DRAW = 1;
	    mx.XW_EVENT = 2;
	    mx.XW_UPDATE = 3;
	    mx.XW_COMMAND = 5;
	    mx.SB_EXPAND = 1;
	    mx.SB_SHRINK = 2;
	    mx.SB_FULL = 3;
	    mx.SB_STEPINC = 4;
	    mx.SB_STEPDEC = 5;
	    mx.SB_PAGEINC = 6;
	    mx.SB_PAGEDEC = 7;
	    mx.SB_DRAG = 8;
	    mx.SB_WHEELUP = 9;
	    mx.SB_WHEELDOWN = 10;
	
	    // Grayscale colors:
	    // "15%,15%,10%" - very dark gray
	    // "25%,25%,20%" - dark gray
	    // "35%,35%,30%" - medium gray
	    // "40%,40%,35%" - light medium gray
	    // "60%,60%,55%" - light gray
	    // "70%,70%,65%" - very light gray	
	    // "80%,80%,75%" - very very light gray
	
	    mx.L_ArrowLeft = 1001;
	    mx.L_ArrowRight = 1002;
	    mx.L_ArrowUp = 1003;
	    mx.L_ArrowDown = 1004;
	    mx.L_dashed = 801;
	    mx.GBorder = 3; // TODO Is this a good original value to use...?
	    mx.L_RModeOff = 900;
	    mx.L_RModeOn = 901;
	    mx.L_PixelSymbol = 1;
	    mx.L_CircleSymbol = 2;
	    mx.L_SquareSymbol = 3;
	    mx.L_PlusSymbol = 4;
	    mx.L_XSymbol = 5;
	    mx.L_TriangleSymbol = 6;
	    mx.L_ITriangleSymbol = 7;
	    mx.L_HLineSymbol = 8;
	    mx.L_VLineSymbol = 9;
	
	    /**
	     * Set to True for a retro look that would make hipsters proud
	     */
	    mx.LEGACY_RENDER = false;
	
	    /**
	     * The zoom stack structure object
	     * @private
	     */
	    mx.STKSTRUCT = function() {
	        this.xmin = 0.0; // real world val at x1(origin=1,4) or x2(origin=2,4)
	        this.xmax = 0.0; // real world val at x2(origin=1,4) or x1(origin=2,4)
	        this.ymin = 0.0; // real world val at y2(origin=1,2) or y1(origin=3,4)
	        this.ymax = 0.0; // real world val at y1(origin=1,2) or y2(origin=3,4)
	        this.xscl = 0.0; // ratio of X real world units to pixel units
	        this.yscl = 0.0; // ratio of Y real world units to pixel units
	        this.x1 = 0; // left edge relative to window (pixels)
	        this.y1 = 0; // top edge relative to window (pixels)
	        this.x2 = 0; // right edge relative to window (pixels)
	        this.y2 = 0; // bottom edge relative to window (pixels)
	    };
	
	    /**
	     * The scrollbar structure object used to hold state about scrolling
	     * @private
	     */
	    mx.SCROLLBAR = function() {
	        this.flag = null; // int_4 // flag field for MX$SCROLLBAR routine
	        this.action = null; // int_4 // returned action performed (XW_EVENT)
	        this.smin = null;
	        this.srange = null; // real_8 // real_8 // min and range values of scroll
	        // bar
	        this.tmin = null;
	        this.trange = null; // real_8 // real_8 // min and range values of trough
	        this.step = null; // real_8 // ratios of smin to move for step
	        this.page = null; // real_8 // ratios of smin to move for page
	        this.scale = null; // real_8 // ratio to scale by for expand/shrink
	        this.dragoutline = null; // bool_4 // FALSE = smooth scroll, TRUE = drag &
	        // drop
	        this.initial_pause = null; // real_4
	        this.repeat_pause = null; // real_4
	
	        this.x = null;
	        this.y = null;
	        this.w = null;
	        this.h = null; // int_2 // These fields are private and are to be
	        this.s1 = null;
	        this.sw = null;
	        this.swmin = null;
	        this.soff = null; // int_2 // set through other interfaces
	        this.a1 = null;
	        this.a2 = null;
	        this.arrow = null; // int_2
	        this.mxevent = null; // bool_1
	        this.origin = null; // int_1
	        this.repeat_count = null; // int_4
	    };
	
	    /**
	     * @method WARPBOX
	     * @private
	     */
	    function WARPBOX() {
	        this.xo = 0;
	        this.yo = 0;
	        this.xl = 0;
	        this.yl = 0;
	        this.xmin = 0;
	        this.xmax = 0;
	        this.ymin = 0;
	        this.ymax = 0;
	        this.func = undefined;
	        this.mode = undefined;
	    }
	
	    /**
	     * Defines 2 canvas layers, canvas and wid_canvas
	     * @method MX
	     * @param element
	     * @private
	     */
	    function MX(element) { // this is where the canvases are setup/defined
	        this.root = element;
	
	        // Create a div to hold all the various canvas layers
	        this.parent = document.createElement('div');
	        this.parent.style.position = "relative";
	        //this.parent.style.height = "100%"; //element.clientHeight;
	        //this.parent.style.width = "100%"; //element.clientHeight;
	        //this.parent.clientWidth = element.clientWidth;
	        this.parent.width = element.clientWidth;
	        this.parent.height = element.clientHeight;
	        element.appendChild(this.parent);
	
	        // Create the canvas that will hold the plot
	        this.canvas = document.createElement('canvas');
	        this.canvas.style.position = "absolute";
	        this.canvas.style.top = "0px";
	        this.canvas.style.left = "0px";
	        this.canvas.width = element.clientWidth;
	        this.canvas.height = element.clientHeight;
	
	        this.parent.appendChild(this.canvas);
	        this.active_canvas = this.canvas;
	
	        // This canvas holds all widgets and reacts to mouse events
	        this.wid_canvas = document.createElement('canvas');
	        this.wid_canvas.style.position = "absolute";
	        this.wid_canvas.style.top = "0px";
	        this.wid_canvas.style.left = "0px";
	        this.wid_canvas.style.zIndex = 1;
	        this.wid_canvas.width = element.clientWidth;
	        this.wid_canvas.height = element.clientHeight;
	
	        this.parent.appendChild(this.wid_canvas);
	
	        //if ((this.canvas.height <= 0) || (this.canvas.width <= 0)) {
	        //	throw "Plot could not be instantiated correctly; did you specify a size for your placeholder?";
	        //}
	
	        this.font = undefined; // the full calculated font string
	        this.font_family = "Courier New, monospace"; // default font family
	        this.text_w = 0; // text width
	        this.text_h = 0; // text height
	        this.level = 0; // current zoom level
	        this.width = this.parent.width; // width of window
	        this.height = this.parent.height; // height of window
	        this.xpos = 0; // x-pixel loc of mouse during event
	        this.ypos = 0; // y-pixel loc of mouse during event
	        this.xmrk = 0.0; // absc coord of mark
	        this.ymrk = 0.0;
	        this.origin = 1;
	        this.stk = [new mx.STKSTRUCT()]; // zoom stack
	
	        mx.setbgfg(this, "black", "white");
	
	        // Custom stuff for the Javascript implementation
	        this.event_cb = undefined;
	        this.warpbox = undefined;
	
	        // draw_mode flags;
	        this.rmode = false;
	        this.linewidth = 1;
	        this.style = undefined;
	        this.xi = false;
	
	        // Button Eventing variables
	        this.button_release = 0;
	        this.button_press = 0;
	        this.state_mask = 0;
	
	        // Specifies display field
	        this.l = 0;
	        this.r = this.width;
	        this.t = 0;
	        this.b = this.height;
	
	        // Scrollbar state
	        this.scrollbar_x = new mx.SCROLLBAR();
	        this.scrollbar_y = new mx.SCROLLBAR();
	
	        // Prompt mode state variable
	        this.prompt = undefined;
	
	        // Colormap
	        this.pixel = [];
	
	        // Render Canvas
	        this._renderCanvas = document.createElement("canvas");
	    }
	
	    /**
	     * Create Canvas and it's Mx structure and functions
	     * @param {element}	element 	Reference to a DOM window element
	     */
	    /* Step #5*/
	    mx.open = function(element) {
	        var Mx = new MX(element); /* Step #6*/
	
	        Mx.wid_canvas.oncontextmenu = function(event) {
	            event.preventDefault();
	            return false;
	        };
	
	        this._ctx = Mx.active_canvas.getContext("2d");
	
	        Mx.onmousemove = (function(Mx) {
	            return function(e) {
	                var rect = e.target.getBoundingClientRect();
	                // Screen x/y of mouse
	                Mx.x = e.x || e.clientX;
	                Mx.y = e.y || e.clientY;
	                // Plot relative x/y of mouse
	                Mx.xpos = (e.offsetX === undefined) ? (e.pageX - rect.left - window.scrollX) : e.offsetX;
	                Mx.ypos = (e.offsetX === undefined) ? (e.pageY - rect.top - window.scrollY) : e.offsetY;
	
	                //				Mx.xpos = (e.offsetX === undefined) ? e.layerX : e.offsetX;
	                //				Mx.ypos = (e.offsetY === undefined) ? e.layerY : e.offsetY;
	
	                if (Mx.warpbox) {
	                    if ((e.ctrlKey || e.metaKey) && (Mx.warpbox.alt_style !== undefined)) {
	                        Mx.warpbox.style = Mx.warpbox.alt_style;
	                    } else {
	                        Mx.warpbox.style = Mx.warpbox.def_style;
	                    }
	                    mx.redraw_warpbox(Mx);
	                }
	
	                mx.widget_callback(Mx, e);
	            };
	        })(Mx);
	
	        Mx.onmouseup = (function(Mx) {
	            return function(event) {
	                if (Mx.warpbox) {
	                    mx.onWidgetLayer(Mx, function() {
	                        mx.erase_window(Mx);
	                    });
	
	                    var old_warpbox = Mx.warpbox;
	                    Mx.warpbox = undefined;
	
	                    if (event.which === 1 || event.which === 3) {
	                        if (old_warpbox.func) {
	                            var xo = old_warpbox.xo;
	                            var yo = old_warpbox.yo;
	                            var xl = old_warpbox.xl;
	                            var yl = old_warpbox.yl;
	
	                            if (old_warpbox.mode === "vertical") {
	                                xo = Mx.l;
	                                xl = Mx.r;
	                            } else if (old_warpbox.mode === "horizontal") {
	                                yo = Mx.t;
	                                yl = Mx.b;
	                            } // else "box"
	                            old_warpbox.func(event, xo, yo, xl, yl,
	                                old_warpbox.style.return_value,
	                                old_warpbox.mode);
	                        }
	                    }
	
	                }
	                mx.widget_callback(Mx, event);
	            };
	        })(Mx);
	
	        Mx.onmousedown = (function(Mx) {
	            return function(event) {
	                event.preventDefault();
	                mx.widget_callback(Mx, event);
	                return false;
	            };
	        })(Mx);
	
	        Mx.onkeydown = (function(Mx) {
	            return function(event) {
	                if (Mx.warpbox) {
	                    var keyCode = common.getKeyCode(event);
	                    if (((keyCode === 17) || // Ctrl 
	                            (keyCode === 224) || // Mac Command Firefox 
	                            (keyCode === 91) || // Safari/Chrome Left-command
	                            (keyCode === 93)) && // Safari/Chrome Right-command
	                        (Mx.warpbox.style !== Mx.warpbox.alt_style)) {
	                        Mx.warpbox.style = Mx.warpbox.alt_style;
	                        mx.redraw_warpbox(Mx);
	                    }
	                }
	
	                mx.widget_callback(Mx, event);
	            };
	        })(Mx);
	
	        Mx.onkeyup = (function(Mx) {
	            return function(event) {
	                if (Mx.warpbox) {
	                    var keyCode = common.getKeyCode(event);
	                    if (((keyCode === 17) || // Ctrl 
	                            (keyCode === 224) || // Mac Command Firefox 
	                            (keyCode === 91) || // Safari/Chrome Left-command
	                            (keyCode === 93)) && // Safari/Chrome Right-command
	                        (Mx.warpbox.style !== Mx.warpbox.def_style)) {
	                        Mx.warpbox.style = Mx.warpbox.def_style;
	                        mx.redraw_warpbox(Mx);
	                    }
	                }
	            };
	        })(Mx);
	
	        Mx.ontouchend = (function(Mx) {
	            return function(event) {
	                Mx.onmouseup({
	                    which: 1
	                });
	            };
	        })(Mx);
	
	        Mx.ontouchmove = (function(Mx) {
	            return function(event) {
	                // Compute the total offset - consider caching offset and only calculating on resize
	                var element = Mx.canvas;
	                var offsetX = 0;
	                var offsetY = 0;
	                if (element.offsetParent !== undefined) {
	                    do {
	                        offsetX += element.offsetLeft;
	                        offsetY += element.offsetTop;
	                    } while ((element = element.offsetParent));
	                }
	
	                Mx.xpos = event.targetTouches[0].pageX - offsetX;
	                Mx.ypos = event.targetTouches[0].pageY - offsetY;
	                mx.redraw_warpbox(Mx);
	            };
	        })(Mx);
	
	        mx.enableListeners(Mx);
	
	        return Mx;
	    };
	
	    /**
	     * @param Mx
	     * @private
	     */
	    mx.enableListeners = function(Mx) {
	        mx.addEventListener(Mx, "mousemove", Mx.onmousemove, false);
	        window.addEventListener("mouseup", Mx.onmouseup, false);
	        mx.addEventListener(Mx, "mousedown", Mx.onmousedown, false);
	        window.addEventListener("keydown", Mx.onkeydown, false);
	        window.addEventListener("keyup", Mx.onkeyup, false);
	        //mx.addEventListener(Mx, "touchend", Mx.ontouchend);
	        //mx.addEventListener(Mx, 'touchmove', Mx.ontouchmove, false);
	
	    };
	
	    /**
	     * @param Mx
	     * @private
	     */
	    mx.disableListeners = function(Mx) {
	        mx.removeEventListener(Mx, "mousemove", Mx.onmousemove, false);
	        window.removeEventListener("mouseup", Mx.onmouseup, false);
	        mx.removeEventListener(Mx, "mousedown", Mx.onmousedown, false);
	        window.removeEventListener("keydown", Mx.onkeydown, false);
	        window.removeEventListener("keyup", Mx.onkeyup, false);
	        //mx.addEventListener(Mx, "touchend", Mx.ontouchend);
	        //mx.addEventListener(Mx, 'touchmove', Mx.ontouchmove, false);
	    };
	
	    /**
	     * @param Mx
	     * @param event
	     * @param callback
	     * @param useCapture
	     * @private
	     */
	    mx.addEventListener = function(Mx, event, callback, useCapture) {
	        return Mx.wid_canvas.addEventListener(event, callback, useCapture);
	    };
	
	    /**
	     * @param Mx
	     * @param event
	     * @param callback
	     * @param useCapture
	     * @private
	     */
	    mx.removeEventListener = function(Mx, event, callback, useCapture) {
	        return Mx.wid_canvas.removeEventListener(event, callback, useCapture);
	    };
	
	    /**
	     * @param Mx
	     * @param event
	     * @private
	     */
	    mx.dispatchEvent = function(Mx, event) {
	        return Mx.wid_canvas.dispatchEvent(event);
	    };
	
	    /**
	     * @param Mx
	     * @param func
	     * @private
	     */
	    mx.onWidgetLayer = function(Mx, func) {
	        mx.onCanvas(Mx, Mx.wid_canvas, func);
	    };
	
	    /**
	     * @param Mx
	     * @param func
	     * @private
	     */
	    mx.onCanvas = function(Mx, canvas, func) {
	        var current_active = Mx.active_canvas;
	        Mx.active_canvas = canvas;
	        try {
	            if (func) {
	                return func();
	            }
	        } finally {
	            Mx.active_canvas = current_active;
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param func
	     * @private
	     */
	    mx.withWidgetLayer = function(Mx, func) {
	        var f = function() {
	            mx.onWidgetLayer(Mx, func);
	        };
	        return f;
	    };
	
	    /**
	     * @param Mx
	     * @param func
	     * @private
	     */
	    mx.render = function(Mx, func) {
	        if (!func) {
	            return;
	        }
	
	        var active_canvas = Mx.active_canvas;
	
	        if (!active_canvas._animationFrameHandle) {
	            active_canvas._animationFrameHandle = requestAnimFrame(function() {
	                active_canvas._animationFrameHandle = undefined;
	                func();
	            });
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param value
	     * @private
	     */
	    mx.fullscreen = function(Mx, value) {
	        if (value === undefined) {
	            value = !Mx.fullscreen;
	        }
	        if (value) {
	            Mx.fullscreen = {
	                position: Mx.root.style.position,
	                height: Mx.root.style.height,
	                width: Mx.root.style.width,
	                left: Mx.root.style.left,
	                top: Mx.root.style.top,
	                zIndex: Mx.root.style.zIndex
	            };
	            Mx.root.style.position = "fixed";
	            Mx.root.style.height = "100%";
	            Mx.root.style.width = "100%";
	            Mx.root.style.left = "0px";
	            Mx.root.style.top = "0px";
	            Mx.root.style.zIndex = 16777271; // http://www.puidokas.com/max-z-index/
	        } else {
	            Mx.root.style.position = Mx.fullscreen.position;
	            Mx.root.style.height = Mx.fullscreen.height;
	            Mx.root.style.width = Mx.fullscreen.width;
	            Mx.root.style.left = Mx.fullscreen.left;
	            Mx.root.style.top = Mx.fullscreen.top;
	            Mx.root.style.zIndex = Mx.fullscreen.zIndex;
	            Mx.fullscreen = undefined;
	        }
	        mx.checkresize(Mx);
	    };
	
	    /**
	     * @param Mx
	     * @private
	     */
	    mx.checkresize = function(Mx) {
	        var canvas = Mx.canvas;
	        if ((canvas.height !== Mx.root.clientHeight) || (canvas.width !== Mx.root.clientWidth)) {
	
	            Mx.height = Mx.root.clientHeight;
	            Mx.width = Mx.root.clientWidth;
	
	            Mx.canvas.height = Mx.height;
	            Mx.canvas.width = Mx.width;
	            Mx.wid_canvas.height = Mx.height;
	            Mx.wid_canvas.width = Mx.width;
	
	            return true;
	        }
	        return false;
	    };
	
	    /**
	     * @param Mx
	     * @private
	     */
	    mx.invertbgfg = function(Mx) {
	        mx.setbgfg(Mx, Mx.fg, Mx.bg, !Mx.xi);
	    };
	
	    /**
	     * @param color1
	     * @param color2
	     * @param color3
	     * @private
	     */
	    mx.mixcolor = function(color1, color2, perc1to2) {
	        var c1 = tinycolor(color1).toRgb();
	        var c2 = tinycolor(color2).toRgb();
	        var mix = 1.0 - perc1to2;
	        c2.r = c1.r * mix + c2.r * perc1to2;
	        c2.g = c1.g * mix + c2.g * perc1to2;
	        c2.b = c1.b * mix + c2.b * perc1to2;
	        return tinycolor(c2).toHexString(true);
	    };
	
	    /**
	     * @param Mx
	     * @param x
	     * @param y
	     * @param w
	     * @param h
	     * @param fillStyle
	     * @private
	     */
	    mx.linear_gradient = function(Mx, x, y, w, h, fillStyle) {
	        var ctx = Mx.active_canvas.getContext("2d");
	        var step_size = 1.0 / fillStyle.length;
	        var lingrad = ctx.createLinearGradient(x, y, w, h);
	        for (var i = 0; i < fillStyle.length - 1; i++) {
	            lingrad.addColorStop(step_size * (i), fillStyle[i]);
	        }
	        lingrad.addColorStop(1, fillStyle[fillStyle.length - 1]);
	        return lingrad;
	    };
	
	    /**
	     * Set's the background and foreground
	     * xwfg : usually used for text on a widget
	     * xwbg : background for a widget
	     * @param Mx
	     * @param bg
	     * @param fg
	     * @param xi
	     * @private
	     */
	    mx.setbgfg = function(Mx, bg, fg, xi) {
	        Mx.bg = tinycolor(bg).toHexString();
	        Mx.fg = tinycolor(fg).toHexString();
	        Mx.xi = tinycolor(xi).toHexString();
	
	        if ((tinycolor.equals(Mx.bg, "black")) && (tinycolor.equals(Mx.fg, "white"))) { ///mmm
	            Mx.xwfg = Mx.fg; // X-Widget Foreground color
	            Mx.xwbg = "rgb(35%,35%,30%)"; // X-Widget Background color
	            Mx.xwts = "rgb(60%,60%,55%)"; // X-Widget top shadow color
	            Mx.xwbs = "rgb(25%,25%,20%)"; // X-Widget bottom shadow color
	            Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow
	            Mx.xwlo = "rgb(15%,15%,10%)"; // X-Widget top shadow color
	            Mx.hi = Mx.xwts; //  Highlight color
	        } else if ((tinycolor.equals(Mx.bg, "white")) && (tinycolor.equals(Mx.fg, "black"))) {
	            Mx.xwfg = Mx.fg; // X-Widget Foreground color
	            Mx.xwbg = "rgb(60%,60%,55%)"; // X-Widget Background color
	            Mx.xwts = "rgb(80%,80%,75%)"; // X-Widget top shadow color
	            Mx.xwbs = "rgb(40%,40%,35%)"; // X-Widget bottom shadow color
	            Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow
	            Mx.xwlo = "rgb(70%,70%,65%)";
	            Mx.hi = Mx.xwbs; //  Highlight color
	        } else {
	            var clr = tinycolor(Mx.bg).toRgb();
	            var hsp = Math.sqrt( // HSP equation from http://alienryderflex.com/hsp.html
	                0.299 * (clr.r * clr.r) +
	                0.587 * (clr.g * clr.g) +
	                0.114 * (clr.b * clr.b)
	            );
	            if (hsp > 127.5) { // light
	                Mx.xwfg = "black";
	                Mx.xwbg = "rgb(60%,60%,55%)"; // X-Widget Background color
	                Mx.xwts = "rgb(80%,80%,75%)"; // X-Widget top shadow color
	                Mx.xwbs = "rgb(40%,40%,35%)"; // X-Widget bottom shadow color
	                Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow
	                Mx.xwlo = "rgb(70%,70%,65%)";
	                Mx.hi = Mx.xwts;
	            } else { // dark
	                Mx.xwfg = "white";
	                Mx.xwbg = "rgb(35%,35%,30%)"; // X-Widget Background color
	                Mx.xwts = "rgb(60%,60%,55%)"; // X-Widget top shadow color
	                Mx.xwbs = "rgb(25%,25%,20%)"; // X-Widget bottom shadow color
	                Mx.xwms = mx.mixcolor(Mx.xwts, Mx.xwbs, 0.5); // mid shadow
	                Mx.xwlo = "rgb(15%,15%,10%)"; // X-Widget top shadow color
	                Mx.hi = Mx.xwbs;
	            }
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param theme
	     * @private
	     */
	    mx.settheme = function(Mx, theme) {
	        Mx.bg = theme.bg;
	        Mx.fg = theme.fg;
	        Mx.xi = theme.xi;
	        Mx.xwfg = theme.xwfg;
	        Mx.xwbg = theme.xwbg;
	        Mx.xwts = theme.xwts;
	        Mx.xwbs = theme.xwbs;
	        Mx.xwlo = theme.xwlo;
	        Mx.hi = theme.hi;
	    };
	
	    /**
	     * Close graphics windows.
	     * @param Mx
	     */
	    mx.close = function(Mx) {
	        var canvas = Mx.wid_canvas;
	        canvas.removeEventListener("mousemove", Mx.onmousemove, false);
	        //canvas.removeEventListener("touchmove", Mx.ontouchmove);
	        canvas.removeEventListener("mouseup", Mx.onmouseup, false);
	        //canvas.addEventListener("touchend", Mx.onmouseup);
	
	        if (Mx.parent && Mx.parent.parentNode) {
	            Mx.parent.parentNode.removeChild(Mx.parent);
	        }
	    };
	
	    /**
	     * Draws and implements a scrollbar
	     * @param Mx
	     * @param sb
	     * @param xs
	     * @param xe
	     * @param ys
	     * @param ye
	     * @param out
	     * @param qs
	     * @param qe
	     * @param mouseEvent
	     * @param scrollbarState
	     */
	    //
	    // ~= MX$SCROLLBAR
	    //
	    mx.scrollbar = function(Mx, sb, xs, xe, ys, ye, out, qs, qe, mouseEvent, scrollbarState) {
	        // Param types:
	        // mx.SCROLLBAR* sb, 
	        // int xs, int xe, int ys, int ye, 
	        // real* ps, real* pe, real qs, real qe
	
	        var mode; // an int
	        var action; // an int
	        var origin; // an int
	        var stat = 0; // an int
	
	        var step; // a real_8
	        var page; // a real_8
	        var scale; // a real_8
	        var sblocal = new mx.SCROLLBAR(); // a SCROLLBAR
	
	        mode = (sb.flag !== undefined ? sb.flag : sb); // REFACTOR - if user sends in a number instead of a scrollbar
	        action = Math.abs(mode);
	
	        if (ye - ys > xe - xs) {
	            if (Mx.origin < 3) {
	                origin = 2; /* inverted Y scrollbar */
	            } else {
	                origin = 4; /* normal Y scrollbar */
	            }
	        } else {
	            if (Mx.origin & 2) {
	                origin = 3; /* inverted X scrollbar */
	            } else {
	                origin = 1; /* normal X scrollbar */
	            }
	        }
	
	        if (action < 10) {
	            sb = sblocal; /* use local SB structure */
	        }
	        if (action < 10 || sb.action === 0) { /* re-init the SB structure */
	            mx.scroll(Mx, sb, mx.XW_INIT, undefined, scrollbarState);
	            sb.flag = mode;
	            /* Turn off repeated event handling in mx_scroll */
	            sb.initial_pause = -1.0;
	            mx.scroll_loc(sb, xs, ys, xe - xs + 1, ye - ys + 1, origin, scrollbarState);
	        }
	        sb.srange = out.pe - out.ps;
	
	        switch (action) {
	            case 0:
	                step = page = scale = 1.0;
	                break;
	            case 1:
	            case 11:
	                step = page = 0.9 * sb.srange;
	                scale = 2.0;
	                break;
	            case 2:
	            case 12:
	                step = 0.1 * sb.srange;
	                page = 9 * step;
	                scale = 2.0;
	                break;
	            case 3:
	            case 13:
	                step = 1.0;
	                page = sb.srange - 1.0;
	                scale = 1.0;
	                break;
	            default:
	                return 0;
	        }
	        mx.scroll_vals(sb, out.ps, sb.srange, qs, qe - qs, step, page, scale, scrollbarState);
	
	        if (mode === 0) {
	            mx.scroll(Mx, sb, mx.XW_DRAW, undefined, undefined); // No need for a mouse event 
	        } else {
	            if (mx.scroll(Mx, sb, mx.XW_EVENT, mouseEvent, scrollbarState)) {
	                if (out.ps !== sb.smin) {
	                    out.ps = sb.smin;
	                    stat += 1;
	                }
	                if (out.pe !== sb.smin + sb.srange) {
	                    out.pe = sb.smin + sb.srange;
	                    stat += 2;
	                }
	            }
	        }
	        return stat;
	    };
	
	    /**
	     * Instantiate scrollbar on graphics window
	     * @param Mx
	     * @param sv
	     * @param op
	     * @param mouseEvent
	     * @param scrollbarState
	     */
	    // 
	    // ~= mx_scroll
	    //
	    mx.scroll = function(Mx, sv, op, mouseEvent, scrollbarState) {
	        var btn; // an int
	        var smin; // a real_8
	        var srange; // a real_8
	        var s; // an int_4
	
	        if (sv === undefined) {
	            return false; /* an mx.SCROLLBAR */
	        }
	
	        switch (op) {
	            case mx.XW_INIT:
	                mx.scroll_loc(sv, 0, 0, Mx.width, 20, 1, scrollbarState);
	                mx.scroll_vals(sv, 0.0, 10.0, 0.0, 100.0, 1.0, 10.0, 1.0, scrollbarState);
	                sv.flag = 0;
	                sv.action = 0;
	                sv.initial_pause = 0.25;
	                sv.repeat_pause = 0.05;
	                sv.mxevent = true;
	                sv.repeat_count = 0;
	                break;
	            case mx.XW_EVENT:
	                /*  Determine which button, if any, was pressed/released
	                 */
	                btn = 0;
	                if (sv.mxevent) { // TODO make sure mxevent is set properly when an event goes off - how is this supposed to be set?
	                    btn = (Mx.button_release) ? -Mx.button_release : Mx.button_press;
	                } else if (mouseEvent.type === "mousedown" || mouseEvent.type === "mouseup") {
	                    // TODO Does this case ever happen?
	                    switch (mouseEvent.which) {
	                        case 1:
	                            btn = 1;
	                            break;
	                        case 2:
	                            btn = 2;
	                            break;
	                        case 3:
	                            btn = 3;
	                            break;
	                            /* Add these cases for the mouse wheel */
	                        case 4:
	                            btn = 4;
	                            break;
	                        case 5:
	                            btn = 5;
	                            break;
	                    }
	                    if (mouseEvent.type === "mouseup") {
	                        btn = -btn;
	                    }
	                } else if (mouseEvent.type === "mousewheel" || mouseEvent.type === "DOM-MouseScroll") {
	                    // TODO Does this case ever happen?
	                    if (mouseEvent.wheelDelta && mouseEvent.wheelDelta > 0) {
	                        btn = 4; // TODO is 4 right for negative scroll (aka a scroll forwards away from the user)
	                        // TODO Do we need to worry about a release here?
	                    } else if (mouseEvent.wheelDelta && mouseEvent.wheelDelta < 0) {
	                        btn = 5; // TODO is 5 right for negative scroll (aka a scroll backward towards the user)
	                        // TODO Do we need to worry about a release here?
	                    }
	                }
	
	                if (sv.action === 0) {
	                    /*  First-time action -- only interested in button presses
	                     *  1 or 2 within our bounds
	                     */
	                    /* If scroll wheel, pretend we're on vertical scroll bar */
	                    if (btn === 4 || btn === 5) {
	                        Mx.xpos = sv.x;
	                    }
	
	
	                    /* Button !=1,2,4,5 OR NOT on scroll bar */
	                    if ((btn !== 1 && btn !== 2 && btn !== 4 && btn !== 5) ||
	                        Mx.xpos < sv.x || Mx.ypos < sv.y ||
	                        Mx.xpos > sv.x + sv.w || Mx.ypos > sv.y + sv.h) {
	                        return false;
	                    }
	                } else if (btn < 0) {
	                    /* Any button release within a repeated action will make us exit */
	                    sv.action = sv.repeat_count = 0; // TODO Update scrollbarState's action?
	                    return true;
	                }
	
	                /*  Compute s, the offset in pixels from the 'origin' of
	                 *  the scrollbar's on-screen region.
	                 */
	                if (sv.origin & 1) {
	                    s = Mx.xpos - sv.x;
	                    if (sv.origin & 2) {
	                        s = sv.w - s;
	                    }
	                } else {
	                    s = Mx.ypos - sv.y;
	                    if (sv.origin <= 2) {
	                        s = sv.h - s;
	                    }
	                }
	
	                /*  Determine action */
	                if (sv.action === 0) {
	                    /* First-time action */
	
	                    sv.repeat_count = 0; // TODO Is repeat count necessary any more?
	
	                    var scrollReal2PixOut = mx.scroll_real2pix(sv);
	                    // UPDATE SCROLLBAR STATE as well
	                    sv.s1 = scrollbarState.s1 = scrollReal2PixOut.s1;
	                    sv.sw = scrollbarState.sw = scrollReal2PixOut.sw;
	                    sv.soff = scrollbarState.soff = s - sv.s1;
	                    if (sv.trange === 0.0) {
	                        // UPDATE SCROLLBAR STATE as well
	                        sv.smin = scrollbarState.smin = sv.tmin;
	                        sv.srange = scrollbarState.srange = 0.0;
	                    } else switch (btn) {
	                        case 1:
	                            if (s > sv.a1 && s < sv.a2) { /* on scroll trough */
	                                sv.action = (sv.soff > 0) ? mx.SB_PAGEINC : mx.SB_PAGEDEC;
	                            } else { /* on arrows */
	                                sv.action = (sv.soff > 0) ? mx.SB_STEPINC : mx.SB_STEPDEC;
	                            }
	                            break;
	                        case 4:
	                            sv.action = mx.SB_WHEELUP;
	                            break;
	                        case 5:
	                            sv.action = mx.SB_WHEELDOWN;
	                            break;
	                    }
	                } else {
	                    /* We're repeating sv.action */
	                    switch (sv.action) {
	                        case mx.SB_WHEELUP:
	                        case mx.SB_WHEELDOWN:
	                        case mx.SB_EXPAND:
	                            /* we don't want to repeat these */
	                        case mx.SB_SHRINK:
	                        case mx.SB_FULL:
	                            sv.action = sv.repeat_count = 0;
	                    }
	                }
	                /* FALL THROUGH!!! */
	                /* jshint -W086 */
	            case mx.XW_COMMAND:
	                /* jshint +W086 */
	
	                smin = sv.smin;
	                srange = sv.srange;
	
	                switch (sv.action) {
	                    case mx.SB_STEPINC:
	                        smin += sv.step;
	                        break;
	                    case mx.SB_STEPDEC:
	                        smin -= sv.step;
	                        break;
	                    case mx.SB_PAGEINC:
	                        smin += sv.page;
	                        break;
	                    case mx.SB_PAGEDEC:
	                        smin -= sv.page;
	                        break;
	                    case mx.SB_FULL:
	                        smin = sv.tmin;
	                        srange = sv.trange;
	                        break;
	                    case mx.SB_EXPAND:
	                        srange = srange * sv.scale;
	                        if (smin <= 0 && smin + sv.srange >= 0) {
	                            smin *= sv.scale;
	                        } else {
	                            smin -= (srange - sv.srange) / 2.0;
	                        }
	                        break;
	                    case mx.SB_SHRINK:
	                        srange = srange / sv.scale;
	                        if (smin < 0 && smin + sv.srange >= 0) {
	                            smin += srange / sv.scale; /* Plot crosses axis */
	                        } else if (smin === 0 && smin + sv.srange >= 0) {
	                            smin = srange / sv.scale; /* Plot touches axis */
	                        } else {
	                            smin += (sv.srange - srange) / 2.0; /* Plot is completely contained on positive side of axis */
	                        }
	                        break;
	                        /* The mouse wheel needs to scroll 1 page at a time, if you want an 
			           application to scroll differently, change sv.page with 
			           mx_scroll_vals in the application code */
	                    case mx.SB_WHEELUP:
	                        smin -= sv.page;
	                        break;
	                    case mx.SB_WHEELDOWN:
	                        smin += sv.page;
	                        break;
	                }
	
	                if (sv.trange > 0) {
	                    smin = Math.max(sv.tmin, Math.min(smin, sv.tmin + sv.trange - srange));
	                    srange = Math.min(srange, sv.trange);
	                } else {
	                    smin = Math.min(sv.tmin, Math.max(smin, sv.tmin + sv.trange - srange));
	                    srange = Math.max(srange, sv.trange);
	                }
	
	                if (sv.smin === smin && sv.srange === srange) {
	                    if (sv.action !== mx.SB_DRAG) {
	                        sv.action = sv.repeat_count = 0;
	                    }
	                } else {
	                    // UPDATE SCROLLBAR STATE as well
	                    sv.smin = scrollbarState.smin = smin;
	                    sv.srange = scrollbarState.srange = srange;
	                    sv.repeat_count++;
	                }
	
	                if (op === mx.XW_COMMAND) {
	                    mx.scroll(Mx, sv, mx.XW_UPDATE, undefined);
	                    sv.action = 0;
	                }
	
	                break;
	            case mx.XW_DRAW:
	            case mx.XW_UPDATE:
	                mx.redrawScrollbar(sv, Mx, op);
	
	        } /* switch */
	        return true;
	    };
	
	    /**
	     * Specify location and orientation of a scrollbar
	     * @param sv
	     * @param x
	     * @param y
	     * @param w
	     * @param h
	     * @param origin
	     * @param scrollbarState
	     */
	    //
	    // ~= mx_scroll_loc
	    //
	    mx.scroll_loc = function(sv, x, y, w, h, origin, scrollbarState) {
	        // UPDATE local scrollbar and SCROLLBAR STATE
	        if (sv === undefined) {
	            return; /* mx.SCROLLBAR */
	        }
	        sv.x = scrollbarState.x = x; // int
	        sv.y = scrollbarState.y = y; // int
	        sv.w = scrollbarState.w = w; // int
	        sv.h = scrollbarState.h = h; // int
	        sv.origin = scrollbarState.origin = Math.max(1, Math.min(4, origin)); // int
	
	        if (sv.origin & 1) {
	            sv.a2 = scrollbarState.a2 = sv.w;
	            sv.arrow = scrollbarState.arrow = Math.min(m.trunc((sv.w - m.trunc(2 * mx.GBorder)) / 3), sv.h + mx.GBorder);
	        } else {
	            sv.a2 = scrollbarState.a2 = sv.h;
	            sv.arrow = scrollbarState.arrow = Math.min(m.trunc((sv.h - m.trunc(2 * mx.GBorder)) / 3), sv.w + mx.GBorder);
	        }
	        sv.a1 = scrollbarState.a1 = sv.arrow + mx.GBorder;
	        sv.a2 -= sv.arrow + mx.GBorder;
	        scrollbarState.a2 -= sv.arrow + mx.GBorder;
	        sv.swmin = scrollbarState.swmin = Math.min(10, sv.a2 - sv.a1);
	        sv.s1 = scrollbarState.s1 = 0;
	        sv.sw = scrollbarState.sw = 0;
	        sv.action = scrollbarState.action = 0;
	    };
	
	    /**
	     * Set coordinates in scrollbar structure
	     * @param sv
	     * @param smin
	     * @param srange
	     * @param tmin
	     * @param trange
	     * @param step
	     * @param page
	     * @param scale
	     * @param scrollbarState
	     */
	    //
	    // ~= mx_scroll_vals
	    //
	    mx.scroll_vals = function(sv, smin, srange, tmin, trange, step, page, scale, scrollbarState) {
	        // UPDATE SCROLLBAR STATE as well
	        if (sv === undefined) {
	            return; /* an mx.SCROLLBAR */
	        }
	        sv.smin = scrollbarState.smin = smin;
	        sv.srange = scrollbarState.srange = srange;
	        sv.tmin = scrollbarState.tmin = tmin;
	        sv.trange = scrollbarState.trange = trange;
	        sv.step = scrollbarState.step = step;
	        sv.page = scrollbarState.page = page;
	        sv.scale = scrollbarState.scale = Math.max(scale, 1.0);
	    };
	
	    /**
	     * Draw single symbol centered at pixel (x,y)
	     * @param Mx
	     * @param ic
	     * @param x
	     * @param y
	     * @param symbol
	     * @param rr
	     */
	    //
	    // ~= MX$DRAW_SYMBOL
	    //
	    mx.draw_symbol = function(Mx, ic, x, y, symbol, rr, n) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        var r = 0; // int
	        var d = 0; // int
	        var d2 = 0; // int
	        var rmode = false; // bool
	        var fill = false; // bool
	        var tri = []; // XPoint array of size 4
	        for (var cnt = 0; cnt < 4; cnt++) { // initializing 4 points in the array
	            tri[cnt] = {
	                x: 0,
	                y: 0
	            };
	        }
	
	        var c = ''; // char
	
	        fill = rr < 0;
	        r = Math.abs(rr);
	        d = r * 2;
	
	        // Set the foreground color
	        ctx.fillStyle = ic;
	        ctx.strokeStyle = ic;
	
	        if (typeof symbol === "function") {
	            symbol(ctx, n, x, y);
	        } else {
	            switch (symbol) {
	                case mx.L_CircleSymbol:
	                    ctx.beginPath();
	                    if (fill) {
	                        ctx.arc(x, y, r, 0, 360); // draw arc
	                        ctx.fill(); // fill in the area of the arc
	                    } else {
	                        ctx.arc(x, y, r, 0, 360);
	                        ctx.stroke(); // just draw the arc's outline
	                    }
	                    break;
	                case mx.L_SquareSymbol:
	                    if (fill) {
	                        fill_rectangle(ctx, x - r, y - r, d, d);
	                    } else {
	                        draw_rectangle(ctx, x - r, y - r, d, d);
	                    }
	                    break;
	                case mx.L_PixelSymbol:
	                    d = 1; // d = 2*GMaxLines; // TODO Do we care about a maximum number of lines?
	                    // No native way to draw just a pixel - so use a circle instead
	                    ctx.beginPath();
	                    ctx.arc(x, y, 1, 0, 2 * Math.PI, true);
	                    ctx.fill();
	                    break;
	                case mx.L_ITriangleSymbol:
	                    r = -r; // TODO Refactor without switch fall-through?
	                    /* jshint -W086 */
	                case mx.L_TriangleSymbol:
	                    /* jshint +W086 */
	                    d = m.trunc(r * 1.5);
	                    d2 = m.trunc(r * 0.80);
	
	                    // Coordinates of just the triangle itself
	                    tri[1].x = -d2;
	                    tri[1].y = d;
	                    tri[2].x = d2 * 2;
	                    tri[2].y = 0;
	                    tri[3].x = -d2;
	                    tri[3].y = -d;
	
	                    var tempTri = []; // XPoint array of size 4
	                    for (var cnt = 0; cnt < 4; cnt++) { // initializing 4 points in the array
	                        tempTri[cnt] = {
	                            x: 0,
	                            y: 0
	                        };
	                    }
	
	                    if (fill) {
	                        tempTri[0].x = x;
	                        tempTri[0].y = y - r;
	
	                        // Replacement for CoordModePrevious offset (updating coordinates to be relative to origin, instead of previous pt)
	                        tempTri[1].x = tempTri[0].x + tri[1].x;
	                        tempTri[1].y = tempTri[0].y + tri[1].y;
	                        tempTri[2].x = tempTri[1].x + tri[2].x;
	                        tempTri[2].y = tempTri[1].y + tri[2].y;
	                        tempTri[3].x = tempTri[2].x + tri[3].x;
	                        tempTri[3].y = tempTri[2].y + tri[3].y;
	
	                        fill_poly(ctx, tempTri);
	                    } else {
	                        tempTri[0].x = x;
	                        tempTri[0].y = y - r;
	
	                        // Replacement for CoordModePrevious offset (updating coordinates to be relative to origin, instead of previous pt)
	                        tempTri[1].x = tempTri[0].x + tri[1].x;
	                        tempTri[1].y = tempTri[0].y + tri[1].y;
	                        tempTri[2].x = tempTri[1].x + tri[2].x;
	                        tempTri[2].y = tempTri[1].y + tri[2].y;
	                        tempTri[3].x = tempTri[2].x + tri[3].x;
	                        tempTri[3].y = tempTri[2].y + tri[3].y;
	
	                        draw_poly(ctx, tempTri);
	                    }
	                    break;
	                case mx.L_PlusSymbol:
	                    draw_line(ctx, x, y + r, x, y - r);
	                    draw_line(ctx, x + r, y, x - r, y);
	                    break;
	                case mx.L_HLineSymbol:
	                    draw_line(ctx, x + r, y, x - r, y);
	                    break;
	                case mx.L_VLineSymbol:
	                    draw_line(ctx, x, y + r, x, y - r);
	                    break;
	                case mx.L_XSymbol:
	                    draw_line(ctx, x - r, y - r, x + r, y + r);
	                    draw_line(ctx, x + r, y - r, x - r, y + r);
	                    break;
	                default:
	                    c = symbol;
	                    r = m.trunc(Mx.text_w / 2); //tbd
	                    if (fill && !rmode) {
	                        ctx.fillText(c.substring(0, 2), x - r, y + r); // TODO Does this cover it? Do we need to also fill in a rectangle behind 
	                    }
	                    break;
	            } // end switch (symbol)
	        }
	    };
	
	    /**
	     * Plot symbols at centers defined by an array of pixels
	     * @param Mx
	     * @param ic
	     * @param pixx
	     * @param pixy
	     * @param npix
	     * @param symbol
	     * @param rr
	     * @private
	     */
	    //
	    // ~= MX$DRAW_SYMBOLS
	    //
	    mx.draw_symbols = function(Mx, ic, pixx, pixy, npix, symbol, rr, istart) {
	        for (var i = 0; i < npix; i++) {
	            mx.draw_symbol(Mx, ic, pixx[i], pixy[i], symbol, rr, i + istart);
	        }
	    };
	
	    /* http://geomalgorithms.com/a01-_area.html
	     *   > 0 left
	     *   = 0 on
	     *   < 0 right
	     */
	    /**
	     * Test if a point is Left|On|Right of an infinite 2D line.
	     * @method isLeft
	     * @param p_x Point's x-coordinate
	     * @param p_y Point's y-coordinate
	     * @param e_x1 Lines's x1-coordinate
	     * @param e_y1 Lines's y1-coordinate
	     * @param e_x2 Lines's x2-coordinate
	     * @param e_y2 Lines's y2-coordinate
	     * @private
	     */
	    function isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) {
	        return ((e_x1 - p_x) * (e_y2 - p_y) - (e_x2 - p_x) * (e_y1 - p_y));
	    }
	
	    /**
	     * @method update_winding_number
	     * @param wn
	     * @param p_x
	     * @param p_y
	     * @param e_x1
	     * @param e_y1
	     * @param e_x2
	     * @param e_y2
	     * @private
	     */
	    function update_winding_number(wn, p_x, p_y, e_x1, e_y1, e_x2, e_y2) {
	        if (e_y1 <= p_y) { // start y <= P.y
	            if (e_y2 > p_y) { // an upward crossing
	                if (isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) > 0) {
	                    wn += 1;
	                }
	            }
	        } else { // start y > P.y (no test needed)
	            if (e_y2 <= p_y) { // a downward crossing
	                if (isLeft(p_x, p_y, e_x1, e_y1, e_x2, e_y2) < 0) {
	                    wn -= 1;
	                }
	            }
	        }
	        return wn;
	    }
	
	    /**
	     * Converts array of (x,y) coordinates to pixel coordinates, plots lines or dots
	     * @param Mx
	     * @param color
	     * @param xpoint
	     * @param ypoint
	     * @param npts
	     * @param skip
	     * @param line
	     * @param symb
	     * @param rad
	     * @param options
	     */
	    //
	    // ~= MX$TRACE
	    //
	    mx.trace = function(Mx, color, xpoint, ypoint, npts, istart, skip, line, symb, rad, options) {
	        if ((xpoint === undefined) || (ypoint === undefined)) {
	            throw "mx.trace requires xpoint and ypoint";
	        }
	
	        if (skip === undefined) {
	            skip = 1;
	        }
	
	        if (line === undefined) {
	            line = 1;
	        }
	
	        if (symb === undefined) {
	            symb = 0;
	        }
	
	        if (rad === undefined) {
	            rad = 0;
	        }
	
	        if (options === undefined) {
	            options = {};
	        }
	
	        if (npts <= 0) {
	            m.log.warn("No points to draw");
	            return;
	        }
	
	        if ((line === 0) && (symb === 0)) {
	            m.log.warn("No line or symbol to draw");
	            return;
	        }
	
	        var style;
	        if (options.dashed) {
	            style = {
	                mode: "dashed",
	                on: 4,
	                off: 4
	            };
	        }
	
	        var stk4 = mx.origin(Mx.origin, 4, Mx.stk[Mx.level]);
	        if ((stk4.xscl === 0.0) || (stk4.yscl === 0.0)) {
	            // the min and max are the same
	            return;
	        }
	
	        var left = stk4.x1;
	        var top = stk4.y1;
	
	        var xxmin = stk4.xmin;
	        var xscl = 1.0 / stk4.xscl;
	
	        var yymin = stk4.ymin;
	        var yscl = 1.0 / stk4.yscl;
	
	        if (!options.noclip) {
	            mx.clip(Mx, left, top, stk4.x2 - left + 1, stk4.y2 - top + 1);
	        }
	
	        var dx = Math.abs(stk4.xmax - stk4.xmin);
	        var dy = Math.abs(stk4.ymax - stk4.ymin);
	        var xmin = Math.min(stk4.xmin, stk4.xmax);
	        var ymin = Math.min(stk4.ymin, stk4.ymax);
	        var xmax = xmin + dx;
	        var ymax = ymin + dy;
	        //dx = dx * 0.5;
	        //if ((line == -1) || (line == 1)) {
	        //	dy = dy * 10.0;
	        //} else {
	        //	dy = dy * 0.5;
	        //}
	        //xmin = xmin - dx;
	        //ymin = ymin - dy;
	        //xmax = xmax + dx;
	        //ymax = ymax + dy;
	        // These buffers need to be able to hold 2 times the number of points.
	        // if all points are on screen, then we will will need 'n' points
	        // if all points are off the screen, then we will need (2*n)-2
	        var bufsize = 4 * Math.ceil(2 * xpoint.length);
	        var pixx = new Int32Array(new ArrayBuffer(bufsize));
	        var pixy = new Int32Array(new ArrayBuffer(bufsize));
	
	        var ib = 0;
	        if ((line === 0) && (symb !== 0)) {
	            for (var n = (skip - 1); n < npts; n += skip) {
	                var x = xpoint[n];
	                var y = ypoint[n];
	                var lvisible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));
	                if (lvisible) {
	                    pixx[0] = Math.round((x - xxmin) * xscl) + left;
	                    pixy[0] = Math.round((y - yymin) * yscl) + top;
	                    mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);
	                }
	            }
	        } else if ((options.vertsym === true) && (symb !== 0)) {
	            for (var n = (skip - 1); n < npts; n += skip) {
	                var x = xpoint[n];
	                var y = ypoint[n];
	                if ((x >= xmin) && (x <= xmax)) {
	                    var i = Math.round((x - xxmin) * xscl) + left;
	                    mx.draw_line(Mx, color, i, 0, i, Mx.height);
	                    if ((y >= ymin) && (y <= ymax)) {
	                        pixx[0] = i;
	                        pixy[0] = Math.round((y - yymin) * yscl) + top;
	                        mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);
	                    }
	                }
	            }
	        } else if ((options.horzsym === true) && (symb !== 0)) {
	            for (var n = (skip - 1); n < npts; n += skip) {
	                var x = xpoint[n];
	                var y = ypoint[n];
	                if ((y >= ymin) && (y <= ymax)) {
	                    var i = Math.round((y - yymin) * yscl) + top;
	                    mx.draw_line(Mx, color, 0, i, Mx.width, i);
	                    if ((x >= xmin) && (x <= xmax)) {
	                        pixx[0] = Math.round((x - xxmin) * xscl) + left;
	                        pixy[0] = i;
	                        mx.draw_symbol(Mx, color, pixx[0], pixy[0], symb, rad, istart + n);
	                    }
	                }
	            }
	        } else if (line !== 0) {
	            var colors;
	            if ((options) && (options.highlight)) {
	                colors = [];
	                for (var sn = 0; sn < options.highlight.length; sn++) {
	                    if (options.highlight[sn].xstart >= xmax) {
	                        continue;
	                    }
	                    if (options.highlight[sn].xend <= xmin) {
	                        continue;
	                    }
	
	                    var xs = Math.max(options.highlight[sn].xstart, xmin);
	                    var xe = Math.min(options.highlight[sn].xend, xmax);
	
	                    if (xs < xe) {
	                        var rxs = Math.round((xs - xxmin) * xscl) + left;
	                        var rxe = Math.round((xe - xxmin) * xscl) + left;
	
	                        for (var cn = colors.length - 1; cn >= 0; cn--) {
	                            // This highlight overlaps the entire range of a previous
	                            // highlight...we can thus remove the color
	                            if ((rxs <= colors[cn].start) && (rxe >= colors[cn].end)) {
	                                colors.splice(cn, 1);
	                                continue;
	                            }
	                            // This highlight splits a previous highlight...we need
	                            // to create a new color range
	                            else if ((rxs >= colors[cn].start) && (rxe <= colors[cn].end)) {
	                                colors.push({
	                                    start: rxe,
	                                    end: colors[cn].end,
	                                    color: colors[cn].color
	                                });
	                                colors[cn].end = rxs;
	
	                            }
	                            // This highlight overlaps partially
	                            else if ((rxs <= colors[cn].start) && (rxe >= colors[cn].start)) {
	                                colors[cn].start = rxe;
	                            } else if ((rxs <= colors[cn].end) && (rxe >= colors[cn].end)) {
	                                colors[cn].end = rxs;
	                            }
	
	                            // See if this colors is still valid
	                            if (colors[cn].end <= colors[cn].start) {
	                                colors.splice(cn, 1);
	                            }
	                        }
	
	                        colors.push({
	                            start: rxs,
	                            end: rxe,
	                            color: options.highlight[sn].color
	                        });
	                    }
	                }
	
	                // The first color is the start of the plot
	                // in the base-line color
	                colors.push({
	                    start: left,
	                    color: color
	                });
	
	                colors.sort(function(a, b) {
	                    return a.start - b.start;
	                });
	
	            } else {
	                colors = color;
	            }
	
	            var wn = 0; // the winding number counter http://geomalgorithms.com/a03-_inclusion.html
	            var mid_x = (Mx.stk[Mx.level].xmax + Mx.stk[Mx.level].xmin) / 2.0;
	            var mid_y = (Mx.stk[Mx.level].ymax + Mx.stk[Mx.level].ymin) / 2.0;
	
	            var x = xpoint[0];
	            var y = ypoint[0];
	
	            wn = update_winding_number(wn, mid_x, mid_y, Mx.stk[Mx.level].xmin, Mx.stk[Mx.level].ymin, x, y);
	
	            var lvisible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));
	            // The first point is visible
	            if (lvisible) {
	                pixx[ib] = Math.round((x - xxmin) * xscl) + left;
	                pixy[ib] = Math.round((y - yymin) * yscl) + top;
	                ib += 1;
	                if (symb !== 0) {
	                    mx.draw_symbols(Mx, color, pixx, pixy, 1, symb, rad, istart);
	                }
	            } else {
	                ib = 0;
	            }
	
	            var ie = 0;
	            var visible = false;
	            for (var n = skip; n <= (skip * (npts - 1)); n += skip) {
	
	                var lx = x;
	                var ly = y;
	                x = xpoint[n];
	                y = ypoint[n];
	
	                wn = update_winding_number(wn, mid_x, mid_y, lx, ly, x, y);
	
	                visible = ((x >= xmin) && (x <= xmax) && (y >= ymin) && (y <= ymax));
	                if ((lvisible) && (visible)) {
	                    // both the left point and right point are visible, so we can draw the trace
	                    pixx[ib] = Math.round((x - xxmin) * xscl) + left;
	                    pixy[ib] = Math.round((y - yymin) * yscl) + top;
	                    ib += 1;
	                } else {
	                    // clipping necessary, either the left or right point are not visible
	                    lvisible = visible;
	                    // calculate the difference between the last point and this point
	                    dx = lx - x;
	                    dy = ly - y;
	                    if ((dx !== 0.0) || (dy !== 0.0)) {
	                        var o = {
	                            tL: 1.0,
	                            tE: 0.0
	                        };
	                        // Between the last point and the current point,
	                        // determine the ratio of the x and y porionts
	                        // that intersects the border.  If clipt returns
	                        // false then no portion of the line between the two
	                        // points is visible
	                        if (clipt(dx, xmin - x, o)) {
	                            if (clipt(-dx, x - xmax, o)) {
	                                if (clipt(dy, ymin - y, o)) {
	                                    if (clipt(-dy, y - ymax, o)) {
	                                        // If this point is starting the on-screen portion, start the line
	                                        if (o.tL < 1) {
	                                            pixx[ib] = Math.round((x - xxmin + o.tL * dx) * xscl) + left;
	                                            pixy[ib] = Math.round((y - yymin + o.tL * dy) * yscl) + top;
	                                            ib += 1;
	                                        }
	
	                                        // If this point is ending the on-screen portion draw the line
	                                        if (o.tE > 0) {
	                                            pixx[ib] = Math.round((x - xxmin + o.tE * dx) * xscl) + left;
	                                            pixy[ib] = Math.round((y - yymin + o.tE * dy) * yscl) + top;
	                                            ib += 1;
	                                            mx.draw_lines(Mx, colors, pixx.subarray(ie, ib), pixy.subarray(ie, ib), (ib - ie), line, style);
	
	                                            if (symb !== 0 && (ib - ie) > 2) {
	                                                mx.draw_symbols(Mx,
	                                                    color,
	                                                    pixx.subarray(ie + 1, ib - 1),
	                                                    pixy.subarray(ie + 1, ib - 1), (ib - ie - 2),
	                                                    symb,
	                                                    rad,
	                                                    istart + n - (ib - ie - 2));
	                                            }
	                                            ie = ib;
	                                        } else {
	                                            // otherwise add it to the line to be drawn
	                                            pixx[ib] = Math.round((x - xxmin) * xscl) + left;
	                                            pixy[ib] = Math.round((y - yymin) * yscl) + top;
	                                            ib += 1;
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	            wn = update_winding_number(wn, mid_x, mid_y, x, y, Mx.stk[Mx.level].xmax, Mx.stk[Mx.level].ymin);
	            wn = update_winding_number(wn, mid_x, mid_y, Mx.stk[Mx.level].xmax, Mx.stk[Mx.level].ymin, Mx.stk[Mx.level].xmin, Mx.stk[Mx.level].ymin);
	            if ((ib - ie) > 0) {
	                mx.draw_lines(Mx, colors, pixx.subarray(ie, ib), pixy.subarray(ie, ib), (ib - ie), line, style);
	                if (visible) {
	                    ie = ie + 1;
	                }
	                if (symb !== 0 && (ib - ie) > 1) {
	                    // TODO ib - 1 is used below because
	                    // otherwise the last point has undefined
	                    // for it's x/y coordinates...but this may
	                    // be a bug because it may neglect drawing
	                    // the last data point
	                    mx.draw_symbols(Mx,
	                        color,
	                        pixx.subarray(ie - 1, ib),
	                        pixy.subarray(ie - 1, ib),
	                        ib - ie - 1,
	                        symb,
	                        rad,
	                        n - ib + istart);
	                }
	            }
	
	            if (options.fillStyle) {
	                if ((ib > 1) || (wn !== 0)) {
	                    // if we have at least one point
	                    // or the entire plot area is in the fill zone
	                    mx.fill_trace(Mx, options.fillStyle, pixx, pixy, ib);
	                }
	            }
	        }
	
	        if (!options.noclip) {
	            mx.clip(Mx, 0, 0, 0, 0);
	        }
	    };
	
	    /**
	     * Set dashed or solid lines mode.
	     * @param Mx
	     * @param linewidth
	     * @param style
	     */
	    //
	    // ~= MX$DRAW_MODE
	    //
	    mx.draw_mode = function(Mx, linewidth, style) {
	        Mx.linewidth = (linewidth === undefined) ? 1 : linewidth;
	        Mx.style = style;
	    };
	
	    /**
	     * @param Mx
	     * @param color
	     * @param x1
	     * @param y1
	     * @param x2
	     * @param y2
	     * @param linewidth
	     * @param style
	     */
	    //
	    // ~= MX$DRAW_LINES
	    //
	    mx.draw_line = function(Mx, color, x1, y1, x2, y2, linewidth, style) {
	        var ctx = Mx.active_canvas.getContext("2d");
	        if (linewidth === undefined) {
	            linewidth = Mx.linewidth;
	        }
	        if (style === undefined) {
	            style = Mx.style;
	        }
	        // Look up the color in Mx.pixels
	        if (typeof color === "number") {
	            if (!Mx.pixel || Mx.pixel.length === 0) {
	                m.log.warn("COLORMAP not initialized, defaulting to foreground");
	                color = Mx.fg;
	            } else {
	                var cidx = Math.max(0, Math.min(Mx.pixel.length, color));
	                color = to_rgb(
	                    Mx.pixel[cidx].red,
	                    Mx.pixel[cidx].green,
	                    Mx.pixel[cidx].blue);
	            }
	        }
	        draw_line(ctx, x1, y1, x2, y2, style, color, linewidth);
	    };
	
	    /**
	     * @param Mx
	     * @param x1
	     * @param y1
	     * @param x2
	     * @param y2
	     */
	    //
	    // ~= MX$RUBBERLINE
	    //
	    mx.rubberline = function(Mx, x1, y1, x2, y2) {
	        var ctx = Mx.active_canvas.getContext("2d");
	        draw_line(ctx, x1, y1, x2, y2, {
	            mode: "xor"
	        }, "white", 1);
	    };
	
	    /**
	     * @param Mx
	     * @param fillStyle
	     * @param pixx
	     * @param pixy
	     * @param npts
	     * @private
	     */
	    mx.fill_trace = function(Mx, fillStyle, pixx, pixy, npts) {
	        var ctx = Mx.active_canvas.getContext("2d");
	        if (Array.isArray(fillStyle)) {
	            ctx.fillStyle = mx.linear_gradient(Mx, 0, 0, 0, Mx.b - Mx.t, fillStyle);
	        } else {
	            ctx.fillStyle = fillStyle;
	        }
	
	        if (npts < 1) {
	            ctx.fillRect(Mx.l, Mx.t, (Mx.r - Mx.l), (Mx.b - Mx.t));
	            return;
	        }
	
	        if (fillStyle) {
	            var x = pixx[0];
	            var y = pixy[0];
	
	            ctx.beginPath();
	            if (y === Mx.t) {
	                ctx.lineTo(Mx.l, Mx.t);
	            } else {
	                ctx.lineTo(Mx.l, Mx.b);
	            }
	
	
	            ctx.lineTo(x, y);
	
	
	
	            for (var i = 1; i < npts; i++) {
	                x = pixx[i];
	                y = pixy[i];
	                ctx.lineTo(x, y);
	            }
	
	            if (y === Mx.t) {
	                ctx.lineTo(Mx.r, Mx.t);
	            }
	            ctx.lineTo(Mx.r, Mx.b);
	            if (pixy[0] === Mx.t) {
	                ctx.lineTo(Mx.l, Mx.b);
	            }
	
	            ctx.closePath();
	            ctx.fill();
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param colors
	     * @param pixx
	     * @param pixy
	     * @param npts
	     * @param linewidth
	     * @param style
	     */
	    //
	    // ~= MX$DRAW_LINES
	    //
	    mx.draw_lines = function(Mx, colors, pixx, pixy, npts, linewidth, style) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        if (npts < 1) {
	            return;
	        }
	
	        var x = pixx[0];
	        var y = pixy[0];
	
	        if (linewidth === undefined) {
	            linewidth = Mx.linewidth;
	        }
	        if (style === undefined) {
	            style = Mx.style;
	        }
	
	        if ((style) && (style.mode === "dashed")) {
	            var dash_supported = common.dashOn(ctx, style.on, style.off);
	            if (!dash_supported) {
	                m.log.warn("WARNING: Dashed lines aren't supported on your browser");
	            }
	        }
	
	        ctx.lineWidth = linewidth;
	        var current_color = 0;
	
	        if (typeof colors === "string") {
	            colors = [{
	                start: 0,
	                color: colors
	            }];
	        } else if (!(colors instanceof Array)) {
	            if (colors.start === undefined) {
	                colors.start = 0;
	            }
	            colors = [colors];
	        }
	
	        // Find the first valid color (expects colors to be sorted)
	        for (var n = 0; n < colors.length; n++) {
	            if ((colors[n].end != null) && (colors[n].end < x)) {
	                colors.remove(n);
	            } else if (colors[n].start < x) {
	                current_color = n;
	            }
	        }
	
	        ctx.strokeStyle = colors[current_color].color;
	        ctx.beginPath();
	        ctx.moveTo(x, y);
	
	        for (var i = 0; i < npts; i++) {
	            if ((x === pixx[i]) && (y === pixy[i])) {
	                continue;
	            }
	            x = pixx[i];
	            y = pixy[i];
	
	            var newcolor = false;
	            if ((current_color > 0) && (colors[current_color].end != null) && (colors[current_color].end < x)) {
	                newcolor = true;
	                while ((colors[current_color].end != null) && (colors[current_color].end < x)) {
	                    colors.remove(current_color);
	                    current_color -= 1;
	                    if (current_color === 0) {
	                        break;
	                    }
	                }
	            }
	
	            if (((current_color + 1) < colors.length) && (colors[current_color + 1].start <= x)) {
	                newcolor = true;
	                while (((current_color + 1) < colors.length) && (colors[current_color + 1].start <= x)) {
	                    current_color++;
	                }
	            }
	
	            ctx.lineTo(x, y);
	            if (newcolor) {
	                ctx.stroke();
	                ctx.strokeStyle = colors[current_color].color;
	                ctx.beginPath();
	                ctx.lineTo(x, y);
	            }
	        }
	        ctx.stroke();
	        common.dashOff(ctx);
	        ctx.beginPath();
	    };
	
	    /**
	     * @param Mx
	     * @param left
	     * @param top
	     * @param width
	     * @param height
	     */
	    //
	    // ~= MX$CLIP
	    //
	    mx.clip = function(Mx, left, top, width, height) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        if ((left === 0) && (top === 0) && (width === 0) && (height === 0)) {
	            ctx.restore();
	            return;
	        }
	        ctx.save();
	        ctx.beginPath();
	        ctx.rect(left, top, width, height);
	        ctx.clip();
	    };
	
	    /**
	     * @param Mx
	     */
	    //
	    // ~= MX$CLEAR_WINDOW
	    //
	    mx.clear_window = function(Mx) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        ctx.fillStyle = Mx.bg;
	        ctx.fillRect(0, 0, Mx.width, Mx.height);
	    };
	
	    /**
	     * @param Mx
	     * @private
	     */
	    mx.erase_window = function(Mx) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        ctx.clearRect(0, 0, Mx.width, Mx.height);
	    };
	
	    /**
	     * @param Mx
	     * @param func
	     * @param mode
	     * @param def_style
	     * @param alt_style
	     */
	    //
	    // ~= MX$RUBBERBOX
	    // Unlike MX$RUBBERBOX, this is a non-blocking call.  As such the 'func' is a callback for then the rubberbox is finished.
	    //
	    // When CTRL is pressed, alt_style is used
	    //
	    mx.rubberbox = function(Mx, func, mode, def_style, alt_style) {
	        mx.warpbox(Mx, Mx.xpos, Mx.ypos, Mx.xpos, Mx.ypos, 0, Mx.width, 0, Mx.height, func, mode, def_style, alt_style);
	    };
	
	    /**
	     * @param Mx
	     * @param xo
	     * @param yo
	     * @param xl
	     * @param yl
	     * @param xmin
	     * @param xmax
	     * @param ymin
	     * @param ymax
	     * @param func
	     * @param mode
	     * @param def_style
	     * @param alt_style
	     */
	    //
	    // ~= MX$WARPBOX
	    // Unlike MX$WARPBOX, this is a non-blocking call.   As such the 'func' is a callback for then the rubberbox is finished.
	    //
	    mx.warpbox = function(Mx, xo, yo, xl, yl, xmin, xmax, ymin, ymax, func, mode, def_style, alt_style) {
	        if (!def_style) {
	            def_style = {};
	        }
	
	        Mx.warpbox = new WARPBOX();
	        Mx.warpbox.xo = xo;
	        Mx.warpbox.yo = yo;
	        Mx.warpbox.xl = xl;
	        Mx.warpbox.yl = yl;
	        Mx.warpbox.xmin = xmin;
	        Mx.warpbox.xmax = xmax;
	        Mx.warpbox.ymin = ymin;
	        Mx.warpbox.ymax = ymax;
	        Mx.warpbox.func = func;
	        Mx.warpbox.mode = mode;
	
	        Mx.warpbox.style = def_style;
	        Mx.warpbox.def_style = def_style;
	        Mx.warpbox.alt_style = alt_style;
	    };
	
	    /**
	     * @param inorigin
	     * @param outorigin
	     * @param instk
	     */
	    //
	    // ~= M$ORIGIN
	    //
	    mx.origin = function(inorigin, outorigin, instk) {
	        inorigin = Math.max(1, inorigin);
	        outorigin = Math.max(1, outorigin);
	
	        var outstk = new mx.STKSTRUCT();
	
	        outstk.xmin = instk.xmin;
	        outstk.xmax = instk.xmax;
	        outstk.ymin = instk.ymin;
	        outstk.ymax = instk.ymax;
	        outstk.xscl = instk.xscl;
	        outstk.yscl = instk.yscl;
	        outstk.x1 = instk.x1;
	        outstk.y1 = instk.y1;
	        outstk.x2 = instk.x2;
	        outstk.y2 = instk.y2;
	
	        if (inorigin !== outorigin) {
	            var diff = Math.abs(outorigin - inorigin); // used to simplify boolean logic
	            var sum = outorigin + inorigin;
	            if (diff === 2 || sum !== 5) { // (1<->3) (2<->4) (1<->2) (3<->4)
	                outstk.xmin = instk.xmax;
	                outstk.xmax = instk.xmin;
	                outstk.xscl = -instk.xscl;
	            }
	            if (diff === 2 || sum === 5) { // (1<->3) (2<->4) (1<->4) (2<->3)
	                outstk.ymin = instk.ymax;
	                outstk.ymax = instk.ymin;
	                outstk.yscl = -instk.yscl;
	            }
	        }
	        return outstk;
	    };
	
	    /**
	     * @param end1
	     * @param end2
	     */
	    //
	    // ~= MX$MULT
	    //
	    mx.mult = function(end1, end2) {
	        var absmax = Math.max(Math.abs(end1), Math.abs(end2));
	        if (absmax === 0) {
	            return 1.0;
	        }
	        var kengr = 0.1447648 * Math.log(absmax);
	        kengr = kengr | kengr; // Math.floor always rounds down, so -3.3 becomes -4 use this bitwise hack instead
	        if (absmax < 1.0) {
	            kengr = kengr - 1;
	        }
	        if (kengr < 0) {
	            return 1.0 / Math.pow(10, (-3 * kengr));
	        } else {
	            return Math.pow(10, (3 * kengr));
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param event
	     * @private
	     */
	    //
	    // event may be undefined or null
	    mx.widget_callback = function(Mx, event) {
	        if (Mx.prompt) {
	            if (event.which === 3) {
	                Mx.prompt.input.onsubmit();
	            }
	        }
	
	        if (Mx.widget) {
	            Mx.widget.callback(event);
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param promptText
	     * @param isValid
	     * @param onSuccess
	     * @param refresh
	     * @param inputValue
	     * @param xpos
	     * @param ypos
	     * @param errorTimeout
	     */
	    //
	    // ~= MX$DPROMPT - only higher-level
	    mx.prompt = function(Mx, promptText, isValid, onSuccess, refresh, inputValue, xpos, ypos, errorTimeout) {
	        if (inputValue !== undefined) {
	            var inputValid = isValid(inputValue);
	
	            if (!inputValid.valid) {
	                throw "Prompt default input value not valid due to '" + inputValid.reason + "'";
	            }
	        }
	
	        // TODO Validation - make sure promptText is not too long and isn't multi-line...
	        mx.onWidgetLayer(Mx, function() {
	            var ctx = Mx.active_canvas.getContext("2d");
	            var maxNumChars = 30;
	
	            // Construct the input box
	            var pxIndex = ctx.font.indexOf('px');
	            var fontIndex = pxIndex + 3;
	            var fontSize = ctx.font.substr(0, pxIndex);
	            var fontFamily = ctx.font.substr(fontIndex, ctx.font.length).toString();
	
	            /* TODO Note: There is a scrolling bug - you can scroll to the right, but not the left of the value
				And... when truncating the width of an input field - it shows the value as though truncated 
				from the right (say if its cut off by 1 and that one happened to be a negative sign, the value 
				would look like a positive) .
				 */
	            var canvasInput = new CanvasInput({
	                height: Mx.text_h,
	                fontFamily: fontFamily,
	                /* jshint -W053 */
	                fontSize: new Number(fontSize),
	                /* jshint +W053 */
	                backgroundColor: Mx.bg,
	                fontColor: Mx.fg,
	                borderWidth: 0,
	                borderRadius: 0,
	                padding: 0,
	                boxShadow: "none",
	                innerShadow: "none",
	                width: Mx.text_w * maxNumChars,
	                value: (inputValue !== undefined ? inputValue.toString() : ""),
	                disableBlur: true,
	                renderOnReturn: false,
	                tabToClear: true
	            });
	
	            var subHandlerCreator = function(messageX, messageY) {
	                return function() {
	                    var newValue = this.value();
	
	                    var inputValid = isValid(newValue);
	
	                    if (!inputValid.valid) {
	                        mx.message(Mx, "Value: '" + newValue + "' isn't valid due to '" + inputValid.reason + "' - RETRY", undefined, messageX, messageY);
	
	                        // Clear error message
	                        setTimeout(function() {
	                            mx.onWidgetLayer(Mx, function() {
	                                mx.erase_window(Mx);
	                            });
	                            Mx.widget = null;
	                            //refresh();
	                        }, errorTimeout != null ? errorTimeout : 4000);
	                    } else {
	                        Mx.prompt = undefined; // clear state variable
	
	                        // Kill CanvasInput
	                        this.cleanup();
	                        mx.onWidgetLayer(Mx, function() {
	                            mx.erase_window(Mx);
	                        });
	
	                        onSuccess(newValue);
	                    }
	                };
	            };
	
	            // Create redraw method
	            var redrawPromptCreator = function(Mx, input, promptText) {
	                return function(xpos, ypos) {
	                    mx.onWidgetLayer(Mx, function() {
	                        var GBorder = 3;
	
	                        // Calculate the position variables
	
	                        var xssPrompt = (promptText.length + 2) * Mx.text_w;
	                        var xss = xssPrompt + (maxNumChars + 1) * Mx.text_w;
	                        var yss = 2 * Mx.text_h;
	
	                        var xs = xss + 2 * GBorder;
	                        var ys = yss + 2 * GBorder;
	                        if (!xpos) {
	                            xpos = Mx.xpos;
	                        }
	                        if (!ypos) {
	                            ypos = Mx.ypos;
	                        }
	                        var xc = Math.max(0, Math.min(xpos, Mx.width - xs));
	                        var yc = Math.max(0, Math.min(ypos, Mx.height - ys));
	                        var xcc = xc + GBorder;
	                        var ycc = yc + GBorder;
	
	                        var yPos = ycc + Mx.text_h * 1.5;
	                        var inputXPos = xcc + Mx.text_w;
	
	                        // Draw the box and label text
	                        mx.widgetbox(Mx, xc, yc, xs, ys, xcc, ycc, 0, "");
	                        mx.text(Mx, inputXPos, yPos, promptText);
	
	                        var inputYPos = yPos - Mx.text_h * 1.15;
	
	                        // Redraw the input at the new location
	                        input.x(xcc + Mx.text_w + xssPrompt - Mx.text_w);
	                        input.y(inputYPos);
	
	                        input.onsubmit(subHandlerCreator(xc, inputYPos - 75)); // TODO Refactor positioning based on char length of reason code...
	                        if (!input.canvas()) {
	                            input.canvas(Mx.active_canvas);
	                        } else {
	                            input.render();
	                        }
	                    });
	                };
	            };
	
	            var redrawPrompt = redrawPromptCreator(Mx, canvasInput, promptText);
	
	            //refresh();
	            redrawPrompt(xpos, ypos);
	            canvasInput.focus();
	
	            // Set state variable
	            Mx.prompt = {
	                redraw: redrawPrompt,
	                input: canvasInput
	            };
	        });
	    };
	
	    /**
	     * Floating-point number validator. Verifies that value is a valid floating point
	     * number. Validation is loose by default - meaning empty strings are considered valid.
	     * @param value The value to validate.
	     * @param strict If strict is set to true - does not consider empty strings as valid floating point numbers.
	     * @private
	     */
	    mx.floatValidator = function(value, strict) {
	        if (!(((strict === undefined || strict === false) && value === "")) &&
	            isNaN(parseFloat(value)) || !isFinite(value)) {
	            return {
	                valid: false,
	                reason: "Failed float validation: not a valid floating point number"
	            };
	        }
	
	        return {
	            valid: true,
	            reason: ""
	        };
	    };
	
	    /**
	     * Integer number validator. Verifies that value is a valid integer.
	     * Validation is loose by default - meaning empty strings are considered valid.
	     * @param value The value to validate.
	     * @param strict If strict is set to true - does not consider empty strings as valid integers.
	     * @private
	     */
	    mx.intValidator = function(value, strict) {
	        if (((strict === undefined || strict === false) && value === "") ||
	            ((parseFloat(value) === parseInt(value, 10)) && !isNaN(value))) {
	            return {
	                valid: true,
	                reason: ""
	            };
	        } else {
	            return {
	                valid: false,
	                reason: "Failed integer validation: not a valid integer"
	            };
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param msg
	     * @param time - unused?
	     * @param xpos
	     * @param ypos
	     */
	    //
	    // ~= MX$MESSAGE
	    //
	    mx.message = function(Mx, msg, time, xpos, ypos, type) {
	        mx.onWidgetLayer(Mx, function() {
	
	            mx.render_message_box(Mx, msg, xpos, ypos);
	
	            Mx.widget = {
	                type: type || "ONESHOT",
	                callback: function(event) {
	                    if ((event.type === "mousedown") || (event.type === "keydown")) {
	                        Mx.widget = null;
	                        mx.onWidgetLayer(Mx, function() {
	                            mx.erase_window(Mx);
	                        });
	                    }
	                }
	            };
	        });
	    };
	
	    mx.render_message_box = function(Mx, msg, xpos, ypos, textColor) {
	        var GBorder = 3;
	
	        // Unlike MX$MESSAGE, this implementaion if the message
	        // already contains newlines, the text will placed in the
	        // box as-is.
	        var beg = msg.split(/\r\n|\r|\n/g);
	        var linel = 0;
	        var center;
	        if (beg.length === 1) {
	            beg = [];
	            var MESSWIDTH = 40;
	
	            linel = Math.min((((Mx.width - 2 * GBorder) / Mx.text_w) - 2), msg.length);
	            if (linel <= 0) {
	                return;
	            }
	            while ((linel > MESSWIDTH) && (2.5 * Mx.text_h * msg.length < Mx.height * linel)) {
	                linel -= 5;
	            }
	
	            var cur = 0;
	            var bg = 0;
	            var i = 0;
	            var j = 0;
	            var end = 0;
	            var brk = 0;
	            var beg = [];
	
	            center = true;
	            while (bg < msg.length) {
	                end = bg + linel - 1;
	                brk = end = Math.min(end, msg.length - 1);
	                var endinreturn = false;
	                for (cur = bg; cur <= end && !endinreturn; cur++) {
	                    switch (msg[cur]) {
	                        case ',':
	                        case ';':
	                        case ' ':
	                        case ':':
	                            brk = cur;
	                            break;
	                        case '-':
	                        case '/':
	                            if (brk !== cur - 1) {
	                                brk = cur;
	                            }
	                            break;
	                        case '@':
	                        case '\n':
	                        case '\r':
	                            center = false;
	                            endinreturn = true;
	                            brk = cur;
	                            break;
	                    }
	                }
	                if (cur === msg.length) {
	                    brk = end;
	                }
	                if (endinreturn) {
	                    beg.push(msg.substring(bg, brk));
	                } else {
	                    // trim leading space
	                    var s = msg.substring(bg, brk + 1).replace(/^\s+/, "");
	                    beg.push(s);
	                }
	                bg = brk + 1;
	                j = Math.max(j, beg[i].length);
	            }
	        } else {
	            for (var i = 0; i < beg.length; i++) {
	                linel = Math.min((((Mx.width - 2 * GBorder) / Mx.text_w) - 2), Math.max(linel, beg[i].length));
	            }
	        }
	
	        var lines = beg.length;
	        if (lines > 6) {
	            center = false;
	        }
	        var cur = 0;
	        var winlines = Math.max(1, Mx.height / Mx.text_h);
	        var lastline = Math.min(lines, cur + winlines - 1);
	
	        var xss = (linel + 2) * Mx.text_w;
	        var yss = (lastline - cur + 1) * Mx.text_h;
	
	        var xs = xss + 2 * GBorder;
	        var ys = yss + 2 * GBorder;
	        if (!xpos) {
	            xpos = Mx.xpos;
	        }
	        if (!ypos) {
	            ypos = Mx.ypos;
	        }
	        var xc = Math.max(Mx.l, Math.min(xpos, Mx.r - xs));
	        var yc = Math.max(Mx.t, Math.min(ypos, Mx.b - ys));
	        var xcc = xc + GBorder;
	        var ycc = yc + GBorder;
	
	        mx.widgetbox(Mx, xc, yc, xs, ys, xcc, ycc, 0, "");
	
	        var j = ycc + Mx.text_h / 3;
	        var i = xcc + Mx.text_w;
	        while (cur < lastline) {
	            j += Mx.text_h;
	            if (center) {
	                i = xc + xs / 2 - ((beg[cur].length * Mx.text_w) / 2);
	            }
	            mx.text(Mx, i, j, beg[cur], textColor);
	            cur++;
	        }
	    };
	
	    /**
	     * Based on http://js-bits.blogspot.co.uk/2010/07/canvas-rounded-corner-rectangles.html
	     *
	     * @param Mx
	     * @param color
	     * @param {Number} x
	     * @param {Number} y
	     * @param {Number} w
	     * @param {Number} h
	     * @param fill_opacity
	     * @param fill_color
	     * @param {Number} radius The corner radius. Defaults to 5;
	     */
	    mx.draw_round_box = function(Mx, color, x, y, w, h, fill_opacity, fill_color, radius) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        if (!radius) {
	            radius = 5;
	        }
	
	        ctx.beginPath();
	        ctx.moveTo(x + radius, y);
	        ctx.lineTo(x + w - radius, y);
	        ctx.quadraticCurveTo(x + w, y, x + w, y + radius);
	        ctx.lineTo(x + w, y + h - radius);
	        ctx.quadraticCurveTo(x + w, y + h, x + w - radius, y + h);
	        ctx.lineTo(x + radius, y + h);
	        ctx.quadraticCurveTo(x, y + h, x, y + h - radius);
	        ctx.lineTo(x, y + radius);
	        ctx.quadraticCurveTo(x, y, x + radius, y);
	        ctx.closePath();
	
	        ctx.lineWidth = 1;
	        ctx.strokeStyle = color;
	        ctx.stroke();
	
	        if ((fill_opacity !== undefined) && (fill_opacity > 0)) {
	            var oldAlpha = ctx.globalAlpha;
	            ctx.globalAlpha = fill_opacity;
	            if (fill_color) {
	                ctx.fillStyle = fill_color;
	            } else {
	                ctx.fillStyle = color;
	            }
	            ctx.fill();
	            ctx.globalAlpha = oldAlpha;
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param color
	     * @param x
	     * @param y
	     * @param w
	     * @param h
	     * @param fill_opacity
	     * @param fill_color
	     */
	    //
	    // ~= MX$DRAW_BOX
	    //
	    mx.draw_box = function(Mx, color, x, y, w, h, fill_opacity, fill_color) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        if (color !== "xor") {
	            ctx.lineWidth = 1;
	            ctx.strokeStyle = color;
	            ctx.strokeRect(x, y, w, h);
	        } else {
	            if (typeof Uint8ClampedArray === 'undefined') {
	                // we don't have typed arrays, so canvas getImageData operations
	                // will be very slow, so use Mx.fg instead
	                ctx.lineWidth = 1;
	                ctx.strokeStyle = Mx.fg;
	                ctx.strokeRect(x, y, w, h);
	            } else {
	                // TODO switch to using TypedArrays
	                x = Math.floor(x);
	                y = Math.floor(y);
	                w = Math.floor(w);
	                h = Math.floor(h);
	
	                // For now assume xor always uses the base canvas
	                // even if it draws on another canvas
	                var dctx = Mx.canvas.getContext("2d");
	
	                var imgd = dctx.getImageData(x, y, w, 1);
	                var pix = imgd.data;
	                for (var c = 0; c < imgd.data.length; c++) {
	                    pix[c * 4] = 255 - pix[c * 4]; // red
	                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green
	                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue
	                    pix[c * 4 + 3] = 255; // opacity
	                }
	                ctx.putImageData(imgd, x, y);
	
	                imgd = dctx.getImageData(x, y + h, w, 1);
	                pix = imgd.data;
	                for (var c = 0; c < imgd.data.length; c++) {
	                    pix[c * 4] = 255 - pix[c * 4]; // red
	                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green
	                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue
	                    pix[c * 4 + 3] = 255; // opacity
	                }
	                ctx.putImageData(imgd, x, y + h);
	
	                var imgd = dctx.getImageData(x, y, 1, h);
	                var pix = imgd.data;
	                for (var c = 0; c < h; c++) {
	                    pix[c * 4] = 255 - pix[c * 4]; // red
	                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green
	                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue
	                    pix[c * 4 + 3] = 255; // opacity
	                }
	                ctx.putImageData(imgd, x, y);
	
	                imgd = dctx.getImageData(x + w, y, 1, h);
	                pix = imgd.data;
	                for (var c = 0; c < h; c++) {
	                    pix[c * 4] = 255 - pix[c * 4]; // red
	                    pix[c * 4 + 1] = 255 - pix[c * 4 + 1]; // green
	                    pix[c * 4 + 2] = 255 - pix[c * 4 + 2]; // blue
	                    pix[c * 4 + 3] = 255; // opacity
	                }
	                ctx.putImageData(imgd, x + w, y);
	            }
	        }
	
	        if ((fill_opacity !== undefined) && (fill_opacity > 0)) {
	            var oldAlpha = ctx.globalAlpha;
	            ctx.globalAlpha = fill_opacity;
	            if (fill_color) {
	                ctx.fillStyle = fill_color;
	            } else {
	                ctx.fillStyle = color;
	            }
	            ctx.fillRect(x + 1, y + 1, w - 1, h - 1);
	            ctx.globalAlpha = oldAlpha;
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param width
	     */
	    // ~= MX$SETFONT
	    mx.set_font = function(Mx, width) {
	        var ctx = Mx.canvas.getContext("2d");
	        var ctx_wid = Mx.wid_canvas.getContext("2d");
	
	        if ((Mx.font) && (Mx.font.width === width)) {
	            // use the cached font
	            ctx.font = Mx.font.font;
	            ctx_wid.font = Mx.font.font;
	        } else {
	            // figure out the font
	            var text_h = 1;
	            do {
	                text_h = text_h + 1;
	                ctx.font = text_h + "px " + Mx.font_family;
	                ctx_wid.font = text_h + "px " + Mx.font_family;
	                var font_size = ctx.measureText('M'); // the capital M is typically the same height and width
	                Mx.text_w = font_size.width;
	                Mx.text_h = text_h;
	            } while (Mx.text_w < width);
	            Mx.font = {
	                font: text_h + "px " + Mx.font_family,
	                width: width
	            };
	        }
	    };
	
	
	    /**
	     * @param Mx
	     * @param xstart
	     * @param ystart
	     * @param xend
	     * @param yend
	     * @param style
	     */
	    // ~= MX$FTEXTLINE
	    mx.textline = function(Mx, xstart, ystart, xend, yend, style) {
	        var ctx = Mx.active_canvas.getContext("2d");
	        if (!style) {
	            style = {};
	        }
	        if (!style.color) {
	            style.color = Mx.fg;
	        }
	        if (!style.width) {
	            style.width = 1;
	        }
	        draw_line(ctx, xstart, ystart, xend, yend, style, style.color, style.width);
	    };
	
	    /**
	     * @param dmin
	     * @param dmax
	     * @param ndiv
	     */
	    // ~= MX$TICS
	    mx.tics = function(dmin, dmax, ndiv, timecode) {
	        var dtic = 1;
	        var dtic1 = dmin;
	
	        // handle degenerate case
	        if (dmax === dmin) {
	            return {
	                dtic: 1,
	                dtic1: dmin
	            };
	        }
	
	        // split up range into about ndiv 'nice' chunks
	        // zero is included only if   dmin < zero < dmax
	        var dran = Math.abs(dmax - dmin);
	        var df = dran / ndiv;
	        var sig = log10(Math.max(df, 1.0e-36));
	        var nsig;
	        if (sig < 0.0) {
	            nsig = Math.ceil(sig);
	            nsig = nsig - 1;
	        } else {
	            nsig = Math.floor(sig);
	        }
	
	        var ddf = df * Math.pow(10.0, (-nsig));
	        sig = Math.pow(10.0, nsig);
	        var dft = ddf * sig;
	        // If timecode has been requested and it looks like
	        // timecode
	        if (timecode && (dft >= 5.0 && dft <= 59.5 * 3600 * 24)) {
	            var dscl;
	            if (dft < 17.5) {
	                dscl = 5.0; // align to 5 sec tics
	            } else if (dft < 37.5) {
	                dscl = 15.0; // align to 15 sec tics
	            } else if (dft < 4.5 * 60) {
	                dscl = 60.0; // 1 minute tics
	            } else if (dft < 17.5 * 60) {
	                dscl = 5.0 * 60; // and so on
	            } else if (dft < 37.5 * 60) {
	                dscl = 15.0 * 60;
	            } else if (dft < 2.0 * 3600) {
	                dscl = 1.0 * 3600;
	            } else if (dft < 4.5 * 3600) {
	                dscl = 3.0 * 3600;
	            } else if (dft < 9.0 * 3600) {
	                dscl = 6.0 * 3600;
	            } else if (dft < 1.5 * 3600 * 24) {
	                dscl = 12.0 * 3600;
	            } else if (dft < 6.0 * 3600 * 24) {
	                dscl = 1.0 * 3600 * 24; // 1 day
	            } else {
	                dscl = 1.0 * 3600 * 24 * 7; // 1 week
	            }
	            dtic = Math.round(dft / dscl) * dscl;
	        } else {
	            if (ddf < 1.75) {
	                dtic = sig;
	            } else if (ddf < 2.25) {
	                dtic = 2.0 * sig;
	            } else if (ddf < 3.5) {
	                dtic = 2.50 * sig;
	            } else if (ddf < 7.0) {
	                dtic = 5.0 * sig;
	            } else {
	                dtic = 10.0 * sig;
	            }
	        }
	
	        // redefine dmin and dmax to line up on 'nice' boundaries
	        if (dtic === 0.0) {
	            dtic = 1.0;
	        }
	        var nseg;
	        if (dmax >= dmin) {
	            if (dmin >= 0.0) {
	                nseg = dmin / dtic + 0.995;
	            } else {
	                nseg = dmin / dtic - 0.005;
	            }
	            nseg = Math.floor(nseg); // floor
	            dtic1 = nseg * dtic;
	        } else {
	            if (dmin >= 0.0) {
	                nseg = dmin / dtic + 0.005;
	            } else {
	                nseg = dmin / dtic - 0.995;
	            }
	            nseg = Math.floor(nseg); // floor
	            dtic1 = nseg * dtic;
	            dtic = -1 * dtic;
	        }
	        if (dtic1 + dtic === dtic1) {
	            dtic = dmax - dmin;
	        }
	
	        return {
	            dtic: dtic,
	            dtic1: dtic1
	        };
	    };
	
	    /**
	     * @param Mx
	     * @param xdiv
	     * @param ydiv
	     * @param xlab
	     * @param ylab
	     * @param flags
	     */
	    // ~= MX$FDRAWAXIS
	    mx.drawaxis = function(Mx, xdiv, ydiv, xlab, ylab, flags) {
	        var stk1 = mx.origin(Mx.origin, 1, Mx.stk[Mx.level]);
	        var iscl = 0;
	        var isct = 0;
	        var iscr = 0;
	        var iscb = 0;
	        var width = 0;
	        var height = 0;
	
	        xlab = (xlab === undefined) ? 30 : xlab;
	        ylab = (ylab === undefined) ? 30 : ylab;
	
	
	        if (flags.exactbox) {
	            iscl = Math.floor(stk1.x1);
	            isct = Math.floor(stk1.y1);
	            iscr = Math.floor(stk1.x2);
	            iscb = Math.floor(stk1.y2);
	            width = iscr - iscl;
	            height = iscb - isct;
	        } else {
	            iscl = Math.max(Math.floor(stk1.x1) - 2, 0);
	            isct = Math.max(Math.floor(stk1.y1) - 2, 0);
	            iscr = Math.min(Math.floor(stk1.x2) + 2, Mx.width);
	            iscb = Math.min(Math.floor(stk1.y2) + 2, Mx.height);
	            width = iscr - iscl - 4;
	            height = iscb - isct - 4;
	        }
	
	        var ctx = Mx.active_canvas.getContext("2d");
	        if (flags.fillStyle) {
	            if (Array.isArray(flags.fillStyle)) {
	                ctx.fillStyle = mx.linear_gradient(Mx, 0, 0, 0, iscb - isct, flags.fillStyle);
	            } else {
	                ctx.fillStyle = flags.fillStyle;
	            }
	        } else {
	            ctx.fillStyle = Mx.bg;
	        }
	        ctx.fillRect(iscl, isct, iscr - iscl, iscb - isct);
	
	        if (!flags.noaxisbox) {
	            mx.textline(Mx, iscl, isct, iscr, isct);
	            mx.textline(Mx, iscr, isct, iscr, iscb);
	            mx.textline(Mx, iscr, iscb, iscl, iscb);
	            mx.textline(Mx, iscl, iscb, iscl, isct);
	        }
	
	        var xTIC = {
	            dtic: 0,
	            dtic1: 0
	        };
	        var yTIC = {
	            dtic: 0,
	            dtic1: 0
	        };
	
	        if (xdiv < 0) {
	            xTIC.dtic1 = stk1.xmin;
	            xTIC.dtic = (stk1.xmin - stk1.xmax) / xdiv;
	        } else {
	            xTIC = mx.tics(stk1.xmin, stk1.xmax, xdiv, flags.xtimecode);
	        }
	
	
	        var _xmult = 1.0;
	        if (flags.xmult) { // if xmult was provided
	            _xmult = flags.xmult;
	        } else if (!flags.xtimecode) {
	            _xmult = mx.mult(stk1.xmin, stk1.xmax);
	        }
	        if (ydiv < 0) {
	            yTIC.dtic1 = stk1.ymin;
	            yTIC.dtic = (stk1.ymin - stk1.ymax) / ydiv;
	        } else {
	            yTIC = mx.tics(stk1.ymin, stk1.ymax, ydiv, flags.ytimecode);
	        }
	        var _ymult = 1.0;
	        if (flags.ymult) { // if ymult was provided
	            _ymult = flags.ymult;
	        } else if (!flags.ytimecode) {
	            _ymult = mx.mult(stk1.ymin, stk1.ymax);
	        }
	
	        var xticlabels = !flags.noxtlab;
	        var yticlabels = !flags.noytlab;
	
	        // add labels
	        var ix = Math.max(0, iscl - 4 * Mx.text_w);
	        var iy = 0;
	        if (flags.ontop) {
	            iy = Math.min(Mx.height, Math.floor(iscb + 1.5 * Mx.text_h));
	        } else {
	            iy = Math.max(Mx.text_h, Math.floor(isct - 0.5 * Mx.text_h));
	        }
	
	        var xlabel;
	        var ylabel;
	
	        if (iy > 0) {
	            var ly = 0;
	            if (!flags.noyplab) {
	                if (flags.ylabel instanceof Function) {
	                    ylabel = flags.ylabel(ylab, _ymult);
	                } else if (flags.ylabel !== undefined) {
	                    ylabel = flags.ylabel;
	                } else {
	                    ylabel = m.label(ylab, _ymult);
	                }
	            }
	            if (!flags.noxplab) {
	                if (flags.xlabel instanceof Function) {
	                    xlabel = flags.ylabel(xlab, _xmult);
	                } else if (flags.xlabel !== undefined) {
	                    xlabel = flags.xlabel;
	                } else {
	                    xlabel = m.label(xlab, _xmult);
	                }
	            }
	        }
	
	        if (xlabel && ylabel) {
	            mx.text(Mx, ix, iy, ylabel + " vs " + xlabel);
	        } else if (xlabel) {
	            mx.text(Mx, ix, iy, xlabel);
	        } else if (ylabel) {
	            mx.text(Mx, ix, iy, ylabel);
	        }
	
	        var itext = 5.5 * Mx.text_w;
	        var jtext = 0;
	        if (flags.ontop) {
	            if (flags.inside) {
	                jtext = isct + 1.0 * Mx.text_h;
	            } else {
	                jtext = isct - 0.2 * Mx.text_h;
	            }
	        } else {
	            if (flags.inside) {
	                jtext = iscb - 0.5 * Mx.text_h;
	            } else {
	                jtext = iscb + 1.0 * Mx.text_h + 2;
	            }
	        }
	        var fact;
	        if (stk1.xmin !== stk1.xmax) {
	            fact = width / (stk1.xmax - stk1.xmin);
	        } else {
	            fact = width / 1.0;
	        }
	
	        var fmul;
	        if (_xmult !== 0) {
	            fmul = 1.0 / _xmult;
	        } else {
	            fmul = 1.0;
	        }
	
	        // Figure out how many characters can fit between tics
	        var xlbl_maxlen = Math.min(12, Math.round(fact * xTIC.dtic) / Mx.text_w);
	
	        // The sp flag decides if all tics should be labeled, or just the first tic.
	        // in LEGACY rendering when sp=0 you should get one tic at the start 
	        // that then displays like XPOS += tic-delta
	        //
	        // The original logic basically says, if the tic-delta (i.e. dtic) is very small
	        // relative to the first tic, only render the first tic.  Specifically:
	        //    sp = (Math.abs(xTIC.dtic) / Math.max(Math.abs(xTIC.dtic1), Math.abs(xTIC.dtic)) > 1.0e-6);
	        //
	        // However, it's probably more important to decide this based off the significant digits of the
	        // tic labels.  In other words, if the tics cannot be labeled uniquely then you need to make sp=0.
	        var sp = 1;
	        var x;
	        var xlbl = "";
	        if (xticlabels) {
	            if (flags.xtimecode) {
	                xlbl = m.sec2tod(xTIC.dtic1);
	                // If the label is no longer than half of the total width display multiple labels
	                sp = (xlbl.length * Mx.text_w < (iscr - iscl) / 2);
	            } else {
	                // Ensure that all of the tic labels will render uniquely
	                var last_xlbl;
	                for (x = xTIC.dtic1; x <= stk1.xmax; x = x + xTIC.dtic) {
	                    xlbl = mx.format_f(x * fmul, xlbl_maxlen, xlbl_maxlen / 2);
	                    if (xlbl === last_xlbl) {
	                        sp = 0;
	                        break;
	                    }
	                    last_xlbl = xlbl;
	                }
	            }
	        }
	        if (xTIC.dtic === 0) {
	            xTIC.dtic = stk1.xmax - xTIC.dtic1 + 1.0;
	        }
	
	        var i;
	        ix = 0;
	        xlbl = "";
	        for (x = xTIC.dtic1; x <= stk1.xmax; x = x + xTIC.dtic) {
	            i = iscl + Math.round(fact * (x - stk1.xmin)) + 2;
	            if (i < iscl) {
	                continue;
	            }
	            if (flags.grid && flags.grid !== "y") {
	                if (!flags.gridStyle) {
	                    if (mx.LEGACY_RENDER) {
	                        flags.gridStyle = {
	                            mode: "dashed",
	                            on: 1,
	                            off: 3
	                        };
	                    } else {
	                        flags.gridStyle = {
	                            "color": Mx.xwms,
	                            mode: "dashed",
	                            on: 1,
	                            off: 3
	                        };
	                    }
	                }
	                mx.textline(Mx, i, iscb, i, isct, flags.gridStyle);
	            } else {
	                mx.textline(Mx, i, iscb - 2, i, iscb + 2);
	                mx.textline(Mx, i, isct - 2, i, isct + 2);
	            }
	            if (xticlabels) {
	                if (sp) {
	                    xlbl = null;
	                    if (flags.xtimecode) {
	                        // If we have enough space to draw the next tic label
	                        if (i > ix) {
	                            xlbl = m.sec2tod(x, true);
	                            ix = i + (Mx.text_w * (xlbl.length + 1));
	                        }
	                    } else {
	                        xlbl = mx.format_f(x * fmul, xlbl_maxlen, xlbl_maxlen / 2);
	                        xlbl = trimlabel(xlbl, true);
	                    }
	                    if (xlbl) {
	                        var itexti = Math.round(xlbl.length / 2) * Mx.text_w;
	                        if (flags.inside) {
	                            i = Math.max(iscl + itexti, i);
	                            i = Math.min(iscr - itexti, i);
	                        }
	                        if (i - itexti >= 0) {
	                            mx.text(Mx, i - itexti, jtext, xlbl);
	                        }
	                    }
	                } else if (x === xTIC.dtic1) {
	                    if (flags.xtimecode) {
	                        xlbl = m.sec2tod(x, true);
	                        if (flags.inside) {
	                            i = Math.floor(Math.max(iscl + itext, i));
	                        }
	                        mx.text(Mx, i - itext, jtext, xlbl + " +\u0394 " + m.sec2tod(xTIC.dtic));
	                    } else {
	                        xlbl = (xTIC.dtic1 * fmul).toString();
	                        if (flags.inside) {
	                            i = Math.floor(Math.max(iscl + itext, i));
	                        }
	                        mx.text(Mx, i - itext, jtext, xlbl + " +\u0394 " + (xTIC.dtic * fmul));
	                    }
	                }
	            }
	        }
	
	        // Add y-tick marks
	        if (flags.yonright) { // TODO - yonright probably doesn't work
	            if (flags.inside) {
	                itext = Math.min(iscr - 6 * Mx.text_w, Mx.width - 5 * Mx.text_w);
	            } else {
	                itext = Math.min(iscr + Mx.text_w, Mx.width - 5 * Mx.text_w);
	            }
	        } else {
	            if (flags.inside) {
	                itext = Math.max(0, iscl + Mx.text_w);
	            } else {
	                itext = Math.max(0, Math.floor(iscl - (Mx.l - 0.5) * Mx.text_w));
	            }
	        }
	        jtext = 0.4 * Mx.text_h;
	        if (stk1.ymin !== stk1.ymax) {
	            fact = -height / (stk1.ymax - stk1.ymin);
	        } else {
	            fact = -height / 1.0;
	        }
	        if (_ymult !== 0) {
	            fmul = 1.0 / _ymult;
	        } else {
	            fmul = 1;
	        }
	        var ytic, ytic1, endtic;
	        if (yTIC.dtic === 0) {
	            ytic = stk1.ymax - ytic1 + 1.0;
	        }
	        if (stk1.ymax >= stk1.ymin) {
	            endtic = function(val) {
	                return (val <= stk1.ymax);
	            };
	        } else {
	            endtic = function(val) {
	                return (val >= stk1.ymax);
	            };
	        }
	        var ylbl;
	        for (var y = yTIC.dtic1; endtic(y); y = y + yTIC.dtic) {
	            i = iscb + Math.round(fact * (y - stk1.ymin)) - 2;
	            if (i > iscb) {
	                continue;
	            }
	            if (flags.grid && flags.grid !== "x") {
	                if (!flags.gridStyle) {
	                    flags.gridStyle = {
	                        mode: "dashed",
	                        on: 1,
	                        off: 3
	                    };
	                }
	                mx.textline(Mx, iscl, i, iscr, i, flags.gridStyle);
	            } else {
	                mx.textline(Mx, iscl - 2, i, iscl + 2, i);
	                mx.textline(Mx, iscr - 2, i, iscr + 2, i);
	            }
	            if (yticlabels) {
	                // TODO
	                if (flags.inside &&
	                    ((i < isct + Mx.text_h) || (i > iscb - Mx.text_h * 2))) {
	                    // out of range for inside labels
	                } else if (flags.ytimecode) {
	                    ylbl = m.sec2tod(y); // don't trim zeros because we use them later
	                    // y-axis timecodes
	                    // use three lines
	                    // YYYY:MM:DD
	                    // HH:MM
	                    // SS.factional
	                    var k = i + jtext - Mx.text_h;
	                    var sep = ylbl.indexOf("::");
	                    if (sep !== -1) {
	                        if (k > isct && k < iscb) {
	                            // it the label has space, draw it
	                            mx.text(Mx, itext, k, ylbl.substring(0, sep));
	                        }
	                        sep += 1; // adjust for the next stage
	                    }
	                    // The draw the primary portion
	                    mx.text(Mx, itext, Math.min(iscb, i + jtext), ylbl.substring(sep + 1, sep + 6));
	                    // Finally the sections portion if it fits on the screen
	                    // and is necessary
	                    k = i + jtext + Mx.text_h;
	                    if ((k > isct && k < iscb)) {
	                        if (ylbl.substring(sep + 7, sep + 9) !== "00") {
	                            // add the .00 which is safe to do unconditionally because
	                            // we truncate on the following line and we know that
	                            // sec2tod either returns no decimal places or 6 decimal places
	                            ylbl = ylbl + ".00";
	                            mx.text(Mx, itext, k, ylbl.substring(sep + 7, sep + 12));
	                        }
	                    }
	                } else {
	                    ylbl = mx.format_f(y * fmul, 12, 6);
	                    ylbl = trimlabel(ylbl, flags.inside);
	                    mx.text(Mx, itext, Math.min(iscb, i + jtext), ylbl);
	                }
	            }
	        }
	    };
	
	    /**
	     * @param x
	     * @param y
	     * @param rect_x
	     * @param rect_y
	     * @param rect_width
	     * @param rect_height
	     * @private
	     */
	    mx.inrect = function(x, y, rect_x, rect_y, rect_width, rect_height) {
	        return (x >= rect_x && x <= rect_x + rect_width &&
	            y >= rect_y && y <= rect_y + rect_height);
	    };
	    /**
	     * @private
	     */
	    var MENU_CONSTANTS = {
	        GBorder: 3,
	        sidelab: 0,
	        toplab: 1
	    };
	
	    /**
	     * @method _menu_redraw
	     * @param Mx
	     * @param menu
	     * @private
	     */
	    function _menu_redraw(Mx, menu) {
	        if (menu.animationFrameHandle) {
	            return;
	        }
	
	        menu.animationFrameHandle = requestAnimFrame(mx.withWidgetLayer(Mx, function() {
	            mx.erase_window(Mx);
	
	            menu.animationFrameHandle = undefined;
	            var yb = Mx.text_h * 1.5;
	
	            menu.x = Math.max(menu.x, 0);
	            menu.y = Math.max(menu.y, 0);
	            menu.x = Math.min(menu.x, Mx.width - menu.w);
	            menu.y = Math.min(menu.y, Mx.height - menu.h);
	
	            var xcc = menu.x + MENU_CONSTANTS.GBorder + Math.max(0, MENU_CONSTANTS.sidelab);
	            var ycc = menu.y + MENU_CONSTANTS.GBorder + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);
	
	            var xss = menu.w - 2 * MENU_CONSTANTS.GBorder - Math.abs(MENU_CONSTANTS.sidelab);
	            var yss = menu.h - 2 * MENU_CONSTANTS.GBorder - MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);
	
	            mx.widgetbox(Mx, menu.x, menu.y, menu.w, menu.h, xcc, ycc, xss, yss, menu.title);
	
	            //ctx.fillStyle = xwlo;
	            //ctx.fillRect(xcc, ycc, xss, yss);
	
	            var ctx = Mx.wid_canvas.getContext("2d");
	            ctx.lineWidth = 1;
	
	            ctx.strokeStyle = Mx.xwbs; // xwbs
	            ctx.beginPath();
	            ctx.moveTo(xcc, ycc - 4 + 0.5);
	            ctx.lineTo(xcc + xss - 1, ycc - 4 + 0.5);
	            ctx.stroke();
	
	            ctx.strokeStyle = Mx.xwts; // xwts
	            ctx.beginPath();
	            ctx.moveTo(xcc, ycc - 3 + 0.5);
	            ctx.lineTo(xcc + xss - 1, ycc - 3 + 0.5);
	            ctx.stroke();
	
	            for (var i = 0; i < menu.items.length; i++) {
	                var item = menu.items[i];
	                var y = ycc + yb * i;
	
	                if (item.style === "separator") {
	                    ctx.fillStyle = Mx.xwbs;
	                    ctx.fillRect(xcc, y, xss, yb);
	
	                    ctx.beginPath();
	                    ctx.moveTo(xcc, y + 0.5);
	                    ctx.lineTo(xcc + xss, y + 0.5);
	                    ctx.stroke();
	
	                    ctx.textBaseline = "middle";
	                    ctx.textAlign = "left";
	                    ctx.fillStyle = Mx.xwfg;
	                    ctx.fillText(" " + item.text + " ", xcc + Mx.text_w * 2, y + yb / 2);
	                } else {
	                    if (mx.LEGACY_RENDER) {
	                        ctx.fillStyle = Mx.xwlo;
	                        ctx.fillRect(xcc, y, xss, yb);
	                        ctx.beginPath();
	                        ctx.moveTo(xcc, y + 0.5);
	                        ctx.lineTo(xcc + xss, y + 0.5);
	                        ctx.stroke();
	                        if (item.selected) {
	                            mx.shadowbox(Mx, xcc - 1, y, xss + 2, yb, 1, 2, "", 0.75);
	                        }
	                    } else {
	                        ctx.save();
	                        ctx.globalAlpha = 0.75;
	                        if (item.selected) {
	                            ctx.fillStyle = Mx.xwts;
	                        } else {
	                            ctx.fillStyle = Mx.xwlo;
	                        }
	                        ctx.fillRect(xcc, y, xss, yb);
	                        ctx.restore();
	                        ctx.strokeStyle = Mx.bg;
	                        ctx.beginPath();
	                        ctx.moveTo(xcc, y + 0.5);
	                        ctx.lineTo(xcc + xss, y + 0.5);
	                        ctx.stroke();
	                    }
	
	                    ctx.textBaseline = "middle";
	                    ctx.textAlign = "left";
	                    ctx.fillStyle = Mx.xwfg;
	                    if (item.style === "checkbox") {
	                        ctx.fillText(" " + item.text + " ", xcc + Mx.text_w * 2, y + yb / 2);
	                        ctx.strokeStyle = Mx.xwfg;
	                        ctx.strokeRect(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2), Mx.text_w, Mx.text_w);
	                        if (item.checked) {
	                            ctx.beginPath();
	                            ctx.moveTo(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2));
	                            ctx.lineTo(xcc + 1 + Mx.text_w + Mx.text_w, y + ((yb - Mx.text_w) / 2) + Mx.text_w);
	                            ctx.stroke();
	                            ctx.beginPath();
	                            ctx.moveTo(xcc + 1 + Mx.text_w + Mx.text_w, y + ((yb - Mx.text_w) / 2));
	                            ctx.lineTo(xcc + 1 + Mx.text_w, y + ((yb - Mx.text_w) / 2) + Mx.text_w);
	                            ctx.stroke();
	                        }
	                    } else {
	                        ctx.fillText(" " + item.text + " ", xcc, y + yb / 2);
	
	                        // draw the triangle
	                        if (item.checked) {
	                            ctx.beginPath();
	                            ctx.moveTo(xcc + 1, y + Mx.text_h / 4);
	                            ctx.lineTo(xcc + 1 + Mx.text_w - 2, y + Mx.text_h / 4 + Mx.text_h / 2);
	                            ctx.lineTo(xcc + 1, y + Mx.text_h / 4 + Mx.text_h);
	                            ctx.lineTo(xcc + 1, y + Mx.text_h / 4);
	                            ctx.fill();
	                        }
	                    }
	                }
	            }
	        }));
	    }
	
	    /**
	     * @method _menu_takeaction
	     * @param Mx
	     * @param menu
	     * @private
	     */
	    function _menu_takeaction(Mx, menu) {
	        mx.onWidgetLayer(Mx, function() {
	            mx.erase_window(Mx);
	        });
	        Mx.menu = undefined;
	        Mx.widget = null;
	
	        for (var i = 0; i < menu.items.length; i++) {
	            var item = menu.items[i];
	            if (item.selected) {
	                if (item.handler) {
	                    item.handler();
	                } else if (item.menu) {
	                    var newmenu = item.menu;
	                    if (typeof item.menu === 'function') {
	                        newmenu = item.menu();
	                    }
	                    newmenu.finalize = menu.finalize;
	                    mx.menu(Mx, newmenu);
	                }
	                break;
	            }
	        }
	        if ((!Mx.menu) && (menu.finalize)) {
	            menu.finalize();
	        }
	    }
	
	    /**
	     * @method _menu_dismiss
	     * @param Mx
	     * @param menu
	     * @private
	     */
	    function _menu_dismiss(Mx, menu) {
	        mx.onWidgetLayer(Mx, function() {
	            mx.erase_window(Mx);
	        });
	        Mx.menu = undefined;
	        Mx.widget = null;
	
	        if ((!Mx.menu) && (menu.finalize)) {
	            menu.finalize();
	        }
	    }
	
	    /**
	     * @method _menu_callback
	     * @param Mx
	     * @param menu
	     * @param event
	     * @private
	     */
	    function _menu_callback(Mx, menu, event) {
	        if (event === undefined) {
	            // no event, just refresh the menu
	            _menu_redraw(Mx, menu);
	        } else if (event.type === "mousemove") {
	            // Update position
	            if (menu.drag_x !== undefined && menu.drag_y !== undefined && Math.abs(Mx.xpos - menu.drag_x) > 2 && Math.abs(Mx.ypos - menu.drag_y) > 2) {
	                menu.x += Mx.xpos - menu.drag_x;
	                menu.y += Mx.ypos - menu.drag_y;
	                menu.drag_x = Mx.xpos;
	                menu.drag_y = Mx.ypos;
	            }
	
	            // All of these variables suck and are common in other places...refactoring is necessary
	            var xcc = menu.x + MENU_CONSTANTS.GBorder + Math.max(0, MENU_CONSTANTS.sidelab);
	            var xss = menu.w - 2 * MENU_CONSTANTS.GBorder - Math.abs(MENU_CONSTANTS.sidelab);
	            var yb = Mx.text_h * 1.5;
	            var ycc = menu.y + MENU_CONSTANTS.GBorder + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder);
	
	            for (var i = 0; i < menu.items.length; i++) {
	                var y = ycc + yb * i;
	                var item = menu.items[i];
	                item.selected = false;
	                if (mx.inrect(Mx.xpos, Mx.ypos, xcc, y, xss, yb)) {
	                    item.selected = true;
	                }
	            }
	            _menu_redraw(Mx, menu);
	        } else if (event.type === "mouseup") {
	            // No longer dragging menu
	            if (event.which === 1) {
	                if ((menu.drag_x !== undefined) && (menu.drag_y !== undefined)) {
	                    menu.drag_x = undefined;
	                    menu.drag_y = undefined;
	                } else {
	                    _menu_takeaction(Mx, menu);
	                }
	            } else if (event.which === 3) {
	                _menu_dismiss(Mx, menu);
	            }
	        } else if (event.type === "mousedown") {
	            event.preventDefault();
	            if (event.which === 1) {
	                if (Mx.xpos > menu.x && Mx.xpos < (menu.x + menu.w) && Mx.ypos > menu.y && Mx.ypos < (menu.y + Mx.text_h * 1.5)) {
	                    menu.drag_x = Mx.xpos;
	                    menu.drag_y = Mx.ypos;
	                }
	            }
	        } else if (event.type === "keydown") {
	            // Remember that keydown triggers periodically while a key is held
	            if (Mx.menu) {
	                var menu = Mx.menu;
	                event.preventDefault();
	                var keyCode = common.getKeyCode(event);
	                if (keyCode === 13) { // enter
	                    _menu_takeaction(Mx, menu);
	                } else if (keyCode === 38) { // up arrow
	                    for (var i = 0; i < menu.items.length; i++) {
	                        var item = menu.items[i];
	                        if (item.selected) {
	                            item.selected = false;
	                            if (menu.items[i - 1] !== undefined) {
	                                menu.items[i - 1].selected = true;
	                            }
	                            break;
	                        } else if (i === (menu.items.length - 1)) {
	                            // we are at the end of the list and nothing was selected so pick the last element
	                            item.selected = true;
	                        }
	                    }
	                    _menu_redraw(Mx, menu);
	                } else if (keyCode === 40) { // down arrow
	                    for (var i = 0; i < menu.items.length; i++) {
	                        var item = menu.items[i];
	                        if (item.selected) {
	                            item.selected = false;
	                            if (menu.items[i + 1] !== undefined) {
	                                menu.items[i + 1].selected = true;
	                            }
	                            break;
	                        } else if (i === (menu.items.length - 1)) {
	                            // nothing was selected so select the top
	                            menu.items[0].selected = true;
	                        }
	                    }
	                    _menu_redraw(Mx, menu);
	                } else if ((keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 90)) {
	                    var inp = String.fromCharCode(keyCode).toUpperCase();
	
	                    if (menu.keypresses === undefined) {
	                        menu.keypresses = inp;
	                    } else {
	                        menu.keypresses = menu.keypresses + inp;
	                    }
	
	                    var matches = 0;
	                    for (var i = 0; i < menu.items.length; i++) {
	                        var item = menu.items[i];
	                        item.selected = false;
	                        if (!item.text) {
	                            continue;
	                        }
	
	                        if (item.text.toUpperCase().indexOf(menu.keypresses) === 0) {
	                            if (matches === 0) {
	                                item.selected = true;
	                            }
	                            matches++;
	                        }
	                    }
	
	                    if (matches === 0) {
	                        menu.keypresses = undefined;
	                        _menu_redraw(Mx, menu);
	                    } else if (matches === 1) {
	                        _menu_takeaction(Mx, menu);
	                    } else {
	                        _menu_redraw(Mx, menu);
	                    }
	                }
	            }
	        }
	    }
	
	    /**
	     * @param Mx
	     * @param menu
	     * @private
	     */
	    mx.menu = function(Mx, menu) {
	        var yb = Mx.text_h * 1.5;
	        if (menu) {
	            if (!Mx.widget) {
	                menu.x = Mx.xpos;
	                menu.y = Mx.ypos;
	                menu.val = 0;
	
	                menu.h = MENU_CONSTANTS.GBorder * 2 + yb * menu.items.length + MENU_CONSTANTS.toplab * (yb + MENU_CONSTANTS.GBorder) - 1;
	                menu.y = menu.y - ((MENU_CONSTANTS.toplab + (Math.max(1, menu.val)) - 0.5) * yb + (1 + MENU_CONSTANTS.toplab) * MENU_CONSTANTS.GBorder) + 1;
	
	                var xb = menu.title.length;
	                var yadj = 0;
	                for (var i = 0; i < menu.items.length; i++) {
	                    var item = menu.items[i];
	                    xb = Math.max(xb, item.text.length);
	                    if (item.style === "checkbox") {
	                        xb += 2;
	                    }
	                    if (item.style === "separator") {
	                        xb += 2;
	                    }
	                    if (item.checked && item.style !== "checkbox") {
	                        yadj = yb * i;
	                    }
	                }
	                menu.y = menu.y - yadj;
	                xb += 2;
	                xb = xb * Mx.text_w;
	
	                menu.w = MENU_CONSTANTS.GBorder * 2 + Math.abs(MENU_CONSTANTS.sidelab) + xb - 1;
	                menu.x = menu.x - menu.w / 2;
	
	                Mx.menu = menu;
	
	                Mx.widget = {
	                    type: "MENU",
	                    callback: function(event) {
	                        _menu_callback(Mx, menu, event);
	                    }
	                };
	            }
	            _menu_redraw(Mx, menu);
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param x
	     * @param y
	     * @param w
	     * @param h
	     * @param inx
	     * @param iny
	     * @param inw
	     * @param inh
	     * @param name
	     * @private
	     */
	    mx.widgetbox = function(Mx, x, y, w, h, inx, iny, inw, inh, name) {
	        var GBorder = 3;
	        mx.shadowbox(Mx, x, y, w, h, 1, 2, "", 0.75);
	        if (name) {
	            var length = name.length;
	            length = Math.min(length, w / Mx.text_w);
	            length = Math.max(length, 1);
	            var xt = x + (w - length * Mx.text_w) / 2;
	            y += GBorder;
	            var yt = y + (iny - y + 0.7 * Mx.text_h) / 2;
	
	            mx.text(Mx, xt, yt, name, Mx.xwfg);
	        }
	        if (inw > 0 && inh > 0) {
	            var ctx = Mx.active_canvas.getContext("2d");
	            if (mx.LEGACY_RENDER) {
	                ctx.fillStyle = Mx.bg;
	                ctx.fillRect(inx, iny, inw, inh);
	            } else {
	                ctx.save();
	                ctx.globalAlpha = 0.1;
	                ctx.fillStyle = Mx.bg;
	                ctx.fillRect(inx, iny, inw, inh);
	                ctx.restore();
	            }
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param x
	     * @param y
	     * @param lbl
	     * @param color
	     * @private
	     */
	    //
	    // ~= MX$TEXT
	    //
	    mx.text = function(Mx, x, y, lbl, color) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        x = Math.max(0, x);
	        y = Math.max(0, y);
	        if ((x < 0) || (y < 0)) {
	            throw "On No!";
	        }
	        ctx.textBaseline = "bottom";
	        ctx.textAlign = "left";
	        ctx.font = Mx.font.font;
	        if (color === undefined) {
	            ctx.fillStyle = Mx.fg;
	        } else {
	            ctx.fillStyle = color;
	        }
	
	        ctx.fillText(lbl, x, y);
	    };
	
	    /**
	     * @method clipt
	     * @param denom
	     * @param num
	     * @param o
	     * @private
	     */
	    // ~= glibf1.for CLIPT
	    function clipt(denom, num, o) {
	        var accept = true;
	        var t;
	
	        t = num / denom;
	        if (denom > 0) {
	            if (t > o.tL) {
	                accept = false;
	            } else if (t > o.tE) {
	                o.tE = t;
	            }
	        } else if (denom < 0) {
	            if (t < o.tE) {
	                accept = false;
	            } else if (t < o.tL) {
	                o.tL = t;
	            }
	        } else {
	            if (num > 0) {
	                accept = false;
	            }
	        }
	
	        return accept;
	    }
	
	    /**
	     * Method which draws a line in a graphics context.
	     * In the graphics context provided, draws a line.
	     * Mimics XLib's XDrawLines method in at least the basic functionality.
	     * @method draw_line
	     * @param ctx
	     * @param x1
	     * @param y1
	     * @param x2
	     * @param y2
	     * @param style
	     * @param color
	     * @param width
	     * @private
	     */
	    function draw_line(ctx, x1, y1, x2, y2, style, color, width) {
	        // For odd width lines (i.e. 1,3,5...) if you draw right
	        // on the pixel boundry the canvas will actually draw a slightly
	        // grey line 2 px wide.  You have to add .5 to get what you want.
	
	        // Handle boundary cases - instead of throwing an exception, just bound
	        // the value to 0
	        if (x1 < 0) {
	            x1 = 0;
	        }
	        if (y1 < 0) {
	            y1 = 0;
	        }
	        if (x2 < 0) {
	            x2 = 0;
	        }
	        if (y2 < 0) {
	            y2 = 0;
	        }
	
	        if (width) {
	            ctx.lineWidth = width;
	        }
	        if (color) {
	            ctx.strokeStyle = color;
	        }
	
	        if (ctx.lineWidth % 2 === 1) {
	            if (x1 === x2) {
	                x1 = Math.floor(x1) + 0.5;
	                x2 = x1;
	            }
	            if (y1 === y2) {
	                y1 = Math.floor(y1) + 0.5;
	                y2 = y1;
	            }
	        }
	
	        if (!style || !style.mode) {
	            ctx.beginPath();
	            ctx.moveTo(x1, y1);
	            ctx.lineTo(x2, y2);
	            ctx.stroke();
	            ctx.beginPath();
	        } else if (style.mode === "dashed") {
	            var dash_supported = common.dashOn(ctx, style.on, style.off);
	            if (dash_supported) {
	                ctx.beginPath();
	                ctx.moveTo(x1, y1);
	                ctx.lineTo(x2, y2);
	                ctx.stroke();
	                common.dashOff(ctx);
	                ctx.beginPath();
	            } else {
	                // Fallback that only supports vertical/horizontal
	                ctx.beginPath();
	                if (y1 === y2) {
	                    var x = Math.min(x1, x2);
	                    x2 = Math.max(x1, x2);
	                    while (x < x2) {
	                        ctx.moveTo(x, y1);
	                        ctx.lineTo(x + style.on, y1);
	                        ctx.stroke();
	                        x += (style.on + style.off);
	                    }
	                } else if (x1 === x2) {
	                    // vertical line
	                    var y = Math.min(y1, y2);
	                    y2 = Math.max(y1, y2);
	                    while (y < y2) {
	                        ctx.moveTo(x1, y);
	                        ctx.lineTo(x1, y + style.on);
	                        ctx.stroke();
	                        y += (style.on + style.off);
	                    }
	                } else {
	                    throw "Only horizontal or vertical dashed lines are supported";
	                }
	                ctx.beginPath();
	            }
	        } else if (style.mode === "xor") {
	            if (typeof Uint8ClampedArray === 'undefined') {
	                // we don't have typed arrays, so canvas getImageData operations
	                // will be very slow, so use color instead
	                ctx.beginPath();
	                ctx.moveTo(x1, y1);
	                ctx.lineTo(x2, y2);
	                ctx.stroke();
	                ctx.beginPath();
	            } else {
	                // currently xor-style is only supported for horizontal or vertical lines
	                var w = 0;
	                var h = 0;
	                if (y1 === y2) {
	                    w = Math.abs(x2 - x1);
	                    h = width;
	                    x1 = Math.min(x1, x2);
	                } else if (x1 === x2) {
	                    w = width;
	                    h = Math.abs(y2 - y1);
	                    y1 = Math.min(y1, y2);
	                } else {
	                    throw "Only horizontal and vertical lines can be drawn with XOR";
	                }
	
	                if ((w === 0) || (h === 0)) {
	                    return;
	                }
	
	                x1 = Math.floor(x1);
	                y1 = Math.floor(y1);
	                var imgd = ctx.getImageData(x1, y1, w, h);
	                var pix = imgd.data;
	                // Loop over each pixel and invert the color.
	                for (var i = 0, n = pix.length; i < n; i += 4) {
	                    pix[i] = 255 - pix[i]; // red
	                    pix[i + 1] = 255 - pix[i + 1]; // green
	                    pix[i + 2] = 255 - pix[i + 2]; // blue
	                    pix[i + 3] = 255; // opacity
	                }
	                ctx.putImageData(imgd, x1, y1);
	                ctx.clearRect(0, 0, 1, 1);
	            }
	        }
	    }
	
	    /**
	     * Method which draws a polygon in a graphics context.
	     * In the graphics context provided, draws a polygon.
	     * Mimics XLib's XDrawLines method in at least the basic functionality.
	     * @method draw_poly
	     * @param ctx - The graphics context to draw in
	     * @param pix - Defined as [\{"x": xval, y: "y": yval\}, \{"x": xval, "y":yval\}...].
	     *              xval and yval represent their respective coordinate values in the tuples
	     *				number of points in the structure can be retrieved via pix.length.
	     * @param color - The color of the rectangle
	     * @param width - The line width to set.
	     * @private
	     */
	    function draw_poly(ctx, pix, color, width) { // TODO Should this be a public method?
	        start_poly(ctx, pix, width);
	
	        if (color) {
	            ctx.strokeStyle = color;
	        }
	
	        ctx.stroke(); // draw the shape outlined in the path
	        ctx.closePath();
	    }
	
	    /**
	     * Method which draws a filled polygon in a graphics context.
	     * In the graphics context provided draws a polygon, then fills it.
	     * Mimics XLib's XFillPolygon method in at least the basic functionality.
	     * Some differences between this and Xlib's method are:
	     *  -no way to specify convex/non-convex
	     *  -no way to specify CoordModeOrigin
	     *  -no need to specify the number of points to draw (plots all points in pix)
	     * @method fill_poly
	     * @param ctx - The graphics context to draw in
	     * @param pix - Defined as [\{"x": xval, y: "y": yval\}, \{"x": xval, "y":yval\}...].
	     *              xval and yval represent their respective coordinate values in the tuples
	     *				number of points in the structure can be retrieved via pix.length.
	     * @param lineColor - The line color of the polygon
	     * @param fillColor - The fill color of the polygon
	     * @param lineWidth - The line width to set
	     * @private
	     */
	    function fill_poly(ctx, pix, lineColor, fillColor, width) { // TODO Should this be a public method?
	        start_poly(ctx, pix, width);
	
	        if (lineColor) {
	            ctx.strokeStyle = lineColor;
	        }
	        if (fillColor) {
	            ctx.fillStyle = fillColor;
	        }
	
	        ctx.fill(); // fill in the shape only, no outline drawn
	        ctx.closePath();
	    }
	
	    /**
	     * Helper method which starts drawing a polygon in a graphics context.
	     * In the graphics context provided, begins a path at the first point in pix,
	     * then draws lines from each point in pix to the next. It also sets the width
	     * of the line.
	     * @method start_poly
	     * @param ctx - The graphics context to draw in
	     * @param pix - Defined as [\{"x": xval, y: "y": yval\}, \{"x": xval, "y":yval\}...].
	     *              xval and yval represent their respective coordinate values in the tuples
	     *				number of points in the structure can be retrieved via pix.length.
	     * @param width - The line width to set.
	     * @private
	     */
	    function start_poly(ctx, pix, width) {
	        if (pix.length < 1) {
	            return;
	        }
	
	        var x = pix[0].x;
	        var y = pix[0].y;
	
	        if (width) {
	            ctx.lineWidth = width;
	        } else {
	            ctx.lineWidth = 1; // Default
	        }
	
	        ctx.beginPath();
	        ctx.moveTo(x, y);
	
	        for (var i = 0; i < pix.length; i++) {
	            x = pix[i].x;
	            y = pix[i].y;
	            ctx.lineTo(x, y);
	        }
	    }
	
	    /**
	     * Method which draws a rectangle (hollowed) in a graphics context.
	     * In the graphics context provided, draws a hollow rectangle.
	     * Mimics XLib's XDrawRectangle method in at least the basic functionality.
	     * @method draw_rectangle
	     * @param ctx - The graphics context to draw in
	     * @param x - The x coordinate
	     * @param y - The y coordinate
	     * @param width - The width of the rectangle
	     * @param height - The height of the rectangle
	     * @param color - The color of the rectangle
	     * @param lineWidth - The line width to set.
	     * @private
	     */
	    function draw_rectangle(ctx, x, y, width, height, color, lineWidth) { // TODO Should this be a public method?
	        if (lineWidth) {
	            ctx.lineWidth = lineWidth;
	        }
	        if (color) {
	            ctx.strokeStyle = color;
	        }
	
	        ctx.strokeRect(x, y, width, height);
	    }
	
	    /**
	     * Method which draws a rectangle (filled) in a graphics context.
	     * In the graphics context provided, draws a filled rectangle.
	     * Mimics XLib's XFillRectangle method in at least the basic functionality.
	     * @method fill_rectangle
	     * @param ctx - The graphics context to draw in
	     * @param x - The x coordinate
	     * @param y - The y coordinate
	     * @param width - The width of the rectangle
	     * @param height - The height of the rectangle
	     * @param fillColor - The fill color of the rectangle
	     * @param strokeColor - The line color of the rectangle
	     * @param lineWidth - The line width to set.
	     * @private
	     */
	    function fill_rectangle(ctx, x, y, width, height, fillColor, strokeColor, lineWidth) { // TODO Should this be a public method?
	        if (lineWidth) {
	            ctx.lineWidth = lineWidth;
	        }
	        if (strokeColor) {
	            ctx.strokeStyle = strokeColor;
	        }
	        if (fillColor) {
	            ctx.fillStyle = fillColor;
	        }
	
	        ctx.fillRect(x, y, width, height);
	    }
	
	    /**
	     * @method pc2px
	     * @param perc
	     * @private
	     */
	    function pc2px(perc) {
	        return Math.floor(Math.round(255 * (perc / 100)));
	    }
	
	    /**
	     * @method to_rgb
	     * @param red
	     * @param green
	     * @param blue
	     * @private
	     */
	    function to_rgb(red, green, blue) {
	        return "rgb(" + Math.round(red) + ", " + Math.round(green) + ", " + Math.round(blue) + ")";
	    }
	
	    /**
	     *
	     * Instead of dealing with color tables and stuff, all we really need
	     * is the ability to on-the-fly generate a color from the map
	     * @param Mx
	     * @param map
	     * @param z
	     * @private
	     */
	    mx.getcolor = function(Mx, map, z) {
	        var iz = 0;
	        for (; iz < 6 && map[iz + 1].pos === 0; iz++) {}
	
	        while (z > map[iz].pos && iz < 6) {
	            iz++;
	        }
	        if ((iz === 0) || (z >= map[iz].pos)) {
	            // above, below, or directly on boundry
	            return to_rgb(
	                pc2px(map[iz].red),
	                pc2px(map[iz].green),
	                pc2px(map[iz].blue));
	        } else {
	            // interpolation my dear watson
	            var pf = (z - map[iz - 1].pos) / (map[iz].pos - map[iz - 1].pos);
	            var zf = pc2px(pf * 100);
	            var zf1 = 255 - zf;
	            return to_rgb(
	                (zf * (map[iz].red / 100) + zf1 * (map[iz - 1].red / 100)), (zf * (map[iz].green / 100) + zf1 * (map[iz - 1].green / 100)), (zf * (map[iz].blue / 100) + zf1 * (map[iz - 1].blue / 100)));
	        }
	    };
	
	    /**
	     * @method trimlabel
	     * @param lbl
	     * @param inside
	     * @private
	     */
	    // ~= glibf1.for TRIMLABEL
	    function trimlabel(lbl, inside) {
	        var k;
	        var j;
	        if (lbl.substring(5, 8) === ".000000") { // this line seems to always evaluate to false
	            k = 4;
	        } else {
	            k = lbl.length - 1;
	            while (lbl[k] === "0") {
	                k = k - 1;
	            }
	        }
	        j = 0;
	        while ((lbl[j] === " ") && ((k - j + 1 > 5) || inside)) {
	            j = j + 1;
	        }
	        var res = lbl.substring(j, k + 1);
	        if (res.indexOf(".") === -1) {
	            res += ".";
	        }
	        return res;
	    }
	
	    /**
	     * @param Mx
	     * @private
	     */
	    mx.redraw_warpbox = function(Mx) {
	        if (Mx.warpbox) {
	            if (Mx._animationFrameHandle) {
	                cancelAnimFrame(Mx._animationFrameHandle);
	            }
	            Mx._animationFrameHandle = requestAnimFrame(function() {
	                display_warpbox(Mx);
	            });
	        }
	    };
	
	    /**
	     * @method display_warpbox
	     * @param Mx
	     * @private
	     */
	    function display_warpbox(Mx) {
	        Mx._animationFrameHandle = undefined;
	        var warpbox = Mx.warpbox;
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        if (!warpbox) {
	            return;
	        }
	
	        if (((Mx.xpos >= warpbox.xmin) && (Mx.xpos <= warpbox.xmax)) &&
	            ((Mx.ypos >= warpbox.ymin) && (Mx.ypos <= warpbox.ymax))) {
	
	            // Update the position
	            warpbox.xl = Mx.xpos;
	            warpbox.yl = Mx.ypos;
	
	            // Draw the current box
	            var x = Math.min(warpbox.xo, warpbox.xl);
	            var y = Math.min(warpbox.yo, warpbox.yl);
	            var w = Math.abs(warpbox.xl - warpbox.xo);
	            var h = Math.abs(warpbox.yl - warpbox.yo);
	
	            if ((w === 0) || (h === 0)) {
	                // Nothing to draw
	                return;
	            }
	
	            if (warpbox.mode === "vertical") {
	                x = Mx.l;
	                w = Mx.r - Mx.l;
	            } else if (warpbox.mode === "horizontal") {
	                y = Mx.t;
	                h = Mx.b - Mx.t;
	            } // else box
	
	            mx.onWidgetLayer(Mx, function() {
	                mx.erase_window(Mx);
	                mx.draw_box(Mx, "xor", x, y, w, h, warpbox.style.opacity, warpbox.style.fill_color);
	            });
	        }
	
	    }
	
	    /**
	     * @method log10
	     * @param val
	     * @private
	     */
	    function log10(val) {
	        return Math.log(val) / Math.log(10);
	    }
	
	
	    /**
	     * Attempts to format a number in the same manner
	     * as the FORTRAN format code 1p1g16.9
	     * 1p1g16.9
	     * 16 character fields
	     * 9 for decimals
	     * 3 for exponent (E)
	     * 1 for sign
	     * 1 for starting 0
	     * 1 for decimal point
	     * 1 for blank space
	     *
	     * The E format code is used for scientific (exponential) notation.
	     * The value is rounded to d decimal positions and right-justified
	     * into an external field that is w characters wide. The value of w
	     * must be large enough to include a minus sign when necessary, at least
	     * one digit to the left of the decimal point, the decimal point,
	     * d digits to the right of the decimal point, a plus or minus sign for
	     * the exponent, the character "e" or "E", and at least two characters for the exponent.
	     *
	     * The G format code uses the F output style when reasonable and
	     * E for other values, but displays exactly d significant digits
	     * rather than d digits following the decimal point.
	     *
	     * @param num
	     * @param w
	     * @param d
	     * @param leading_nonzer
	     * @private
	     */
	    mx.format_g = function(num, w, d, leading_nonzero) {
	        var w = Math.min(w, d + 7);
	        var f = Math.abs(num).toString();
	
	        var decloc = f.indexOf(".");
	        // If there is no decimal point, add one at the end.
	        if (decloc === -1) {
	            f = f + ".";
	            decloc = f.length;
	        }
	
	        var exp = 0;
	        var eloc = f.indexOf("e");
	        // If there is already an 'e' in the string parse it out
	        if (eloc !== -1) {
	            exp = parseInt(f.slice(eloc + 1, f.length), 10);
	            f = f.slice(0, eloc);
	        }
	
	        // Add zero's to the end if necessary
	        var dz = Math.min(d - (f.length - decloc) + 1, d);
	        for (var i = 0; i < dz; i++) {
	            f = f + "0";
	        }
	
	        if (num !== 0) {
	            if (Math.abs(num) < 1.0) {
	                if (f.slice(0, 2) === "0.") {
	                    // Shift to the left until the first number is non-zero
	                    for (var i = 2; i < f.length; i++) {
	                        if (f[i] === "0") {
	                            exp -= 1;
	                        } else {
	                            f = "0." + f.slice(i, i + d);
	                            break;
	                        }
	                    }
	                } else {
	                    f = f.slice(0, d + 2);
	                }
	            } else if (decloc > d) {
	                var exp = Math.max(0, decloc - 1);
	                f = f[0] + "." + f.slice(1, d + 1);
	            } else {
	                f = f.slice(0, d + 2);
	            }
	        }
	
	        if (exp === 0) {
	            f = f + "    ";
	        } else {
	            var e = mx.pad(Math.abs(exp).toString(), 2, "0");
	            if (exp < 0) {
	                f = f + "E-" + e;
	            } else {
	                f = f + "E+" + e;
	            }
	        }
	
	        if (num < 0) {
	            f = "-" + f;
	        } else {
	            f = " " + f;
	        }
	        return f;
	    };
	
	    /**
	     *
	     * Behave like fortran format code
	     * fs.d
	     * @param num the number to format
	     * @param s the width of digits
	     * @param d number of digits after the decimal
	     * @private
	     */
	    mx.format_f = function(num, s, d) {
	        d = Math.max(Math.min(d, 20), 0);
	        var f = num.toFixed(d).toString();
	        f = mx.pad(f, (s + d), " ");
	        return f;
	    };
	
	    /**
	     * @param s
	     * @param size
	     * @param c
	     * @private
	     */
	    mx.pad = function(s, size, c) {
	        while (s.length < size) {
	            s = c + s;
	        }
	        return s;
	    };
	
	    /**
	     * @param Mx
	     * @param x
	     * @param y
	     * @param w
	     * @param h
	     * @param shape
	     * @param func
	     * @param label
	     * @private
	     */
	    // ~= MX$SHADOWBOX
	    mx.legacy_shadowbox = function(Mx, x, y, w, h, shape, func, label) {
	        var length = label.length; // Original method declaration includes a length - but it only represents the length of the label
	
	        var xt = 0; // Originally an int
	        var yt = 0; // Originally an int
	        var bw = 0; // Originally an int
	
	        var pix = []; // Originally declared as a size 11 XPoint array
	        for (var cnt = 0; cnt < 11; cnt++) { // initializing 11 points in the array
	            pix[cnt] = {
	                x: 0,
	                y: 0
	            };
	        }
	
	        var fill = !(func === 1 || func === -1); // Originally a bool
	
	        // Removed the G.BW section - since we don't need to support black & white displays
	
	        var j = (shape === mx.L_ArrowLeft || shape === mx.L_ArrowUp) ? 1 : 2;
	
	        if (func !== 0 && mx.GBorder > 0) {
	            bw = m.trunc(Math.min(w, h) / 3);
	            bw = Math.max(1, Math.min(bw, mx.GBorder));
	        }
	
	        if (bw > 0) {
	            /* outer shape */
	            pix[0].x = pix[1].x = x;
	            pix[8].x = pix[9].x = x + w;
	            pix[1].y = pix[8].y = y;
	            pix[0].y = pix[9].y = y + h;
	
	            switch (shape) {
	                case mx.L_ArrowLeft:
	                    pix[0].y = pix[1].y = y + m.trunc(h / 2);
	                    x += 2;
	                    --w;
	                    break;
	                case mx.L_ArrowRight:
	                    pix[8].y = pix[9].y = y + m.trunc(h / 2);
	                    --x;
	                    --w;
	                    break;
	                case mx.L_ArrowUp:
	                    pix[1].x = pix[8].x = x + m.trunc(w / 2);
	                    y += 2;
	                    --h;
	                    break;
	                case mx.L_ArrowDown:
	                    pix[0].x = pix[9].x = x + m.trunc(w / 2);
	                    --y;
	                    --h;
	                    break;
	            }
	            pix[2] = pix[8];
	            pix[10] = pix[0];
	
	            x += bw;
	            y += bw;
	            w -= 2 * bw;
	            h -= 2 * bw;
	        }
	
	        /* inner shape */
	        pix[4].x = pix[5].x = x;
	        pix[3].x = pix[6].x = x + w;
	        pix[3].y = pix[4].y = y;
	        pix[5].y = pix[6].y = y + h;
	        switch (shape) {
	            case mx.L_ArrowLeft:
	                pix[4].y = pix[5].y = y + m.trunc(h / 2);
	                break;
	            case mx.L_ArrowRight:
	                pix[3].y = pix[6].y = y + m.trunc(h / 2);
	                break;
	            case mx.L_ArrowUp:
	                pix[3].x = pix[4].x = x + m.trunc(w / 2);
	                break;
	            case mx.L_ArrowDown:
	                pix[5].x = pix[6].x = x + m.trunc(w / 2);
	                break;
	        }
	        pix[7] = pix[3];
	
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        if (bw > 0) {
	            ctx.fillStyle = (func > 0) ? Mx.xwts : Mx.xwbs; // Set foreground color
	            fill_poly(ctx, pix.slice(0, 7));
	            //	if (shape !== 1) { draw_poly(ctx, pix.slice(0,7)); } // TODO what shape is this neccessary with - causes an issue with arrows
	
	            ctx.fillStyle = (func < 0) ? Mx.xwts : Mx.xwbs; // Set foreground color
	            fill_poly(ctx, pix.slice(5, 11));
	            //if (shape !== 1) { draw_poly(ctx, pix.slice(5, 11)); } // TODO what shape is this neccessary with - causes an issue with arrows
	        }
	
	        if (fill) {
	            ctx.fillStyle = Mx.xwbg; // Set foreground color
	            fill_poly(ctx, pix.slice(3, 8));
	            //if (shape !== 1) { draw_poly(ctx, pix.slice(3, 8)); } // TODO what shape is this neccessary with - causes an issue with arrows
	        }
	
	        ctx.fillStyle = Mx.xwfg; // Set foreground color
	        ctx.textBaseline = "alphabetic"; // Reset vertical text alignment
	
	        if (fill && length > 0) {
	            length = Math.min(length, m.trunc(w / Mx.text_w));
	            length = Math.max(length, 1);
	            xt = x + m.trunc((w - length * Mx.text_w) / 2);
	            yt = y + m.trunc((h + 0.7 * Mx.text_h) / 2);
	            ctx.fillText(label, xt, yt); // Draw a string
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param x
	     * @param y
	     * @param w
	     * @param h
	     * @param shape
	     * @param func
	     * @param label
	     * @private
	     */
	    // ~= MX$SHADOWBOX
	    mx.sigplot_shadowbox = function(Mx, x, y, w, h, shape, func, label, alpha) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        var length = label.length; // Original method declaration includes a length - but it only represents the length of the label
	
	        var color = (func < 0) ? Mx.xwts : Mx.xwbs;
	
	        alpha = alpha || 1.0;
	
	        var pix = []; // Originally declared as a size 11 XPoint array
	        for (var cnt = 0; cnt < 11; cnt++) { // initializing 11 points in the array
	            pix[cnt] = {
	                x: 0,
	                y: 0
	            };
	        }
	
	
	        switch (shape) {
	            case mx.L_ArrowLeft:
	            case mx.L_ArrowRight:
	            case mx.L_ArrowUp:
	            case mx.L_ArrowDown:
	                var pix = mx.chevron(shape, x, y, w, h);
	                ctx.fillStyle = (func > 0) ? Mx.xwts : Mx.xwbs;
	                fill_poly(ctx, pix.slice(0, 6));
	                break;
	            default:
	                mx.draw_round_box(Mx, color, x, y, w, h, alpha, Mx.xwbg, 5, Mx.xwbs);
	                break;
	        }
	
	        ctx.fillStyle = Mx.xwfg; // Set foreground color
	        ctx.textBaseline = "alphabetic"; // Reset vertical text alignment
	
	        var fill = !(func === 1 || func === -1); // Originally a bool
	        if (fill && length > 0) {
	            length = Math.min(length, m.trunc(w / Mx.text_w));
	            length = Math.max(length, 1);
	            var xt = x + m.trunc((w - length * Mx.text_w) / 2);
	            var yt = y + m.trunc((h + 0.7 * Mx.text_h) / 2);
	            ctx.fillText(label, xt, yt); // Draw a string
	        }
	    };
	
	    if (mx.LEGACY_RENDER) { // TODO new-style conditional
	        mx.shadowbox = mx.legacy_shadowbox;
	    } else {
	        mx.shadowbox = mx.sigplot_shadowbox;
	    }
	
	    mx.chevron = function(shape, x, y, w, h, e) {
	        // Figure out the largest square dimension
	        var q = Math.min(w, h);
	
	        // if the edge width isn't provided use a decent one
	        if (!e) {
	            e = q * 0.25;
	        }
	
	
	
	        // Initialize the pixel array
	        var pix = [];
	        for (var cnt = 0; cnt < 6; cnt++) { // initializing 11 points in the array
	            pix[cnt] = {
	                x: 0,
	                y: 0
	            };
	        }
	
	
	        var x_offset = m.trunc(((w - q) / 2) + (q / 4) - (e / (2 * 1.414)));
	        var y_offset = m.trunc(((h - q) / 2) + (q / 4) - (e / (2 * 1.414)));
	        switch (shape) {
	            case mx.L_ArrowLeft:
	                // Chevron points from the tip around the edge clockwise
	                pix[0].x = x + x_offset;
	                pix[0].y = y + m.trunc(q / 2);
	                pix[1].x = x + x_offset + m.trunc(q / 2);
	                pix[1].y = y;
	                pix[2].x = x + x_offset + m.trunc((q / 2) + (e / 1.414));
	                pix[2].y = y + m.trunc(e / 1.414);
	                pix[3].x = x + x_offset + m.trunc((2 * e) / 1.414);
	                pix[3].y = y + m.trunc(q / 2);
	                pix[4].x = x + x_offset + m.trunc((q / 2) + (e / 1.414));
	                pix[4].y = y + h - m.trunc(e / 1.414);
	                pix[5].x = x + x_offset + m.trunc(q / 2);
	                pix[5].y = y + q;
	                break;
	            case mx.L_ArrowRight:
	                // Chevron points from the tip around the edge clockwise
	                pix[0].x = x + w - x_offset;
	                pix[0].y = y + m.trunc(q / 2);
	                pix[1].x = x + w - x_offset - m.trunc(q / 2);
	                pix[1].y = y;
	                pix[2].x = x + w - x_offset - m.trunc((q / 2) + (e / 1.414));
	                pix[2].y = y + m.trunc(e / 1.414);
	                pix[3].x = x + w - x_offset - m.trunc((2 * e) / 1.414);
	                pix[3].y = y + m.trunc(q / 2);
	                pix[4].x = x + w - x_offset - m.trunc((q / 2) + (e / 1.414));
	                pix[4].y = y + h - m.trunc(e / 1.414);
	                pix[5].x = x + w - x_offset - m.trunc(q / 2);
	                pix[5].y = y + q;
	                break;
	            case mx.L_ArrowUp:
	                // Chevron points from the tip around the edge counter-clockwise
	                pix[0].x = x + m.trunc(q / 2);
	                pix[0].y = y + y_offset;
	                pix[1].x = x;
	                pix[1].y = y + y_offset + m.trunc(q / 2);
	                pix[2].x = x + m.trunc(e / 1.414);
	                pix[2].y = y + y_offset + m.trunc((q / 2) + (e / 1.414));
	                pix[3].x = x + m.trunc(q / 2);
	                pix[3].y = y + y_offset + m.trunc((2 * e) / 1.414);
	                pix[4].x = x + w - m.trunc(e / 1.414);
	                pix[4].y = y + y_offset + m.trunc((q / 2) + (e / 1.414));
	                pix[5].x = x + q;
	                pix[5].y = y + y_offset + m.trunc(q / 2);
	                break;
	            case mx.L_ArrowDown:
	                // Chevron points from the tip around the edge counter-clockwise
	                pix[0].x = x + m.trunc(q / 2);
	                pix[0].y = y + h - y_offset;
	                pix[1].x = x;
	                pix[1].y = y + h - y_offset - m.trunc(q / 2);
	                pix[2].x = x + m.trunc(e / 1.414);
	                pix[2].y = y + h - y_offset - m.trunc((q / 2) + (e / 1.414));
	                pix[3].x = x + m.trunc(q / 2);
	                pix[3].y = y + h - y_offset - m.trunc((2 * e) / 1.414);
	                pix[4].x = x + w - m.trunc(e / 1.414);
	                pix[4].y = y + h - y_offset - m.trunc((q / 2) + (e / 1.414));
	                pix[5].x = x + q;
	                pix[5].y = y + h - y_offset - m.trunc(q / 2);
	                break;
	        }
	
	        return pix;
	    };
	
	    /**
	     * @param Mx
	     * @param mouseEvent
	     * @private
	     */
	    // ~= mx_ifevent
	    mx.ifevent = function(Mx, mouseEvent) {
	        Mx.button_press = 0;
	        Mx.button_release = 0;
	        Mx.state_mask = 0;
	
	        var rect = mouseEvent.target.getBoundingClientRect();
	        var eventXPos = (mouseEvent.offsetX === undefined) ? (mouseEvent.pageX - rect.left - window.scrollX) : mouseEvent.offsetX;
	        var eventYPos = (mouseEvent.offsetX === undefined) ? (mouseEvent.pageY - rect.top - window.scrollY) : mouseEvent.offsetY;
	
	        //		var eventXPos = (mouseEvent.offsetX === undefined) ? mouseEvent.layerX : mouseEvent.offsetX;
	        //		var eventYPos = (mouseEvent.offsetY === undefined) ? mouseEvent.layerY : mouseEvent.offsetY;
	
	        switch (mouseEvent.type) {
	            case "mousedown":
	                Mx.xpos = bound(eventXPos, 0, Mx.width);
	                Mx.ypos = bound(eventYPos, 0, Mx.height);
	                switch (mouseEvent.which) {
	                    case 1:
	                        Mx.button_press = 1;
	                        break;
	                    case 2:
	                        Mx.button_press = 2;
	                        break;
	                    case 3:
	                        Mx.button_press = 3;
	                        break;
	                    case 4:
	                        Mx.button_press = 4;
	                        break;
	                    case 5:
	                        Mx.button_press = 5;
	                }
	                //Mx.state_mask = TODO
	                break;
	            case "mouseup":
	                Mx.xpos = bound(eventXPos, 0, Mx.width);
	                Mx.ypos = bound(eventYPos, 0, Mx.height);
	                switch (mouseEvent.which) {
	                    case 1:
	                        Mx.button_release = 1;
	                        break;
	                    case 2:
	                        Mx.button_release = 2;
	                        break;
	                    case 3:
	                        Mx.button_release = 3;
	                        break;
	                    case 4:
	                        Mx.button_release = 4;
	                        break;
	                    case 5:
	                        Mx.button_release = 5;
	                }
	                //Mx.state_mask = TODO
	                break;
	        }
	    };
	
	    /**
	     * @param sv
	     * @private
	     */
	    //
	    // ~= scroll_real2pix
	    //
	    // TODO Refactor real2pix to return an object instead of sending in reference vars?
	    mx.scroll_real2pix = function(sv) {
	        // Param types:
	        // sv - mx.SCROLLBAR
	
	        if (sv.range === 0.0) {
	            return {
	                s1: sv.a1,
	                sw: sv.a2 - sv.a1
	            };
	            //			out.s1 = sv.a1;
	            //			out.sw = sv.a2 - sv.a1;
	        } else {
	            var dv; // real_8
	            var ts1; // int_2
	            var ts2; // int_2
	
	            dv = (sv.a2 - sv.a1) / sv.trange;
	
	            ts1 = sv.a1 + Math.floor(0.5 + (sv.smin - sv.tmin) * dv);
	            ts2 = ts1 + Math.floor(0.5 + sv.srange * dv);
	
	            if (ts1 > sv.a2 - sv.swmin) {
	                ts1 = sv.a2 - sv.swmin;
	            } else {
	                ts1 = Math.max(ts1, sv.a1);
	            }
	
	            if (ts2 < sv.a1 + sv.swmin) {
	                ts2 = sv.a1 + sv.swmin;
	            } else {
	                ts2 = Math.min(ts2, sv.a2);
	            }
	
	            return {
	                s1: ts1,
	                sw: Math.max(ts2 - ts1, sv.swmin)
	            };
	            //			out.s1 = ts1;
	            //			out.sw = Math.max(ts2 - ts1, sv.swmin);
	        }
	    };
	
	    /**
	     * Method to re-draw a scrollbar after update. Logic taken from mx.scroll's UPDATE section.
	     * @param sv The scrollbar to work with.
	     * @param Mx The Mx context to work with.
	     * @param op Optional op-code for XW_DRAW
	     * @private
	     */
	    mx.redrawScrollbar = function(sv, Mx, op) {
	        var x;
	        var y;
	        var xcc;
	        var ycc;
	        var xss;
	        var yss;
	        var p1;
	        var op1; // int
	        var s1;
	        var sw; // int_2
	
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        var scrollReal2PixOut = mx.scroll_real2pix(sv);
	        s1 = scrollReal2PixOut.s1;
	        sw = scrollReal2PixOut.sw;
	
	        p1 = s1;
	        op1 = sv.s1;
	
	        xcc = sv.x;
	        ycc = sv.y;
	        xss = sv.w;
	        yss = sv.h;
	
	        // horizontal scroll bar
	        if (sv.origin & 1) {
	            y = ycc + yss / 2;
	            if (sv.origin & 2) {
	                op1 = xss - op1 - sv.sw;
	                p1 = xss - p1 - sw;
	            }
	            if (op === mx.XW_DRAW) {
	                var arrow = sv.arrow; // int
	
	                mx.shadowbox(Mx, xcc, ycc, arrow, yss - 1, mx.L_ArrowLeft, 2, "", 0);
	                mx.shadowbox(Mx, xcc + xss - arrow, ycc, arrow - 1, yss, mx.L_ArrowRight, 2, "", 0);
	            }
	
	
	            if (mx.LEGACY_RENDER) {
	                mx.draw_line(Mx, Mx.fg, xcc + sv.a1, y, xcc + sv.a2, y);
	                mx.shadowbox(Mx, xcc + p1, ycc, sw + 1, yss, 1, 2, "", 0);
	            } else {
	                // Veritical gradiant
	                var lingrad = ctx.createLinearGradient(xcc + sv.a1, 0, xcc + sv.a2, 0);
	                lingrad.addColorStop(0, Mx.xwbs);
	                lingrad.addColorStop(0.5, Mx.xwts);
	                lingrad.addColorStop(1, Mx.xwbs);
	                mx.draw_line(Mx, lingrad, xcc + sv.a1, y, xcc + sv.a2, y, 1);
	
	                var lingrad = ctx.createLinearGradient(0, ycc, 0, ycc + yss);
	                lingrad.addColorStop(0.1, Mx.xwts);
	                lingrad.addColorStop(0.75, Mx.xwbs);
	                mx.draw_round_box(Mx, Mx.xwbg, xcc + p1, ycc, sw + 1, yss, 1, lingrad, 8, Mx.xwbs);
	            }
	
	            // else vertical scroll bar
	        } else {
	            x = xcc + m.trunc(xss / 2);
	            if (sv.origin <= 2) {
	                op1 = yss - op1 - sv.sw;
	                p1 = yss - p1 - sw;
	            }
	            if (op === mx.XW_DRAW) {
	                var arrow = sv.arrow; // int
	                mx.shadowbox(Mx, xcc, ycc, xss - 1, arrow, mx.L_ArrowUp, 2, "", 0);
	                mx.shadowbox(Mx, xcc, ycc + yss - arrow, xss - 1, arrow, mx.L_ArrowDown, 2, "", 0);
	            }
	
	            if (mx.LEGACY_RENDER) {
	                mx.draw_line(Mx, Mx.fg, x, ycc + sv.a1, x, ycc + sv.a2);
	                mx.shadowbox(Mx, xcc, ycc + p1, xss, sw + 1, 1, 2, "", 0);
	            } else {
	                // Horizontal gradiant
	                var lingrad = ctx.createLinearGradient(0, ycc + sv.a1, 0, ycc + sv.a2);
	                lingrad.addColorStop(0, Mx.xwbs);
	                lingrad.addColorStop(0.5, Mx.xwts);
	                lingrad.addColorStop(1, Mx.xwbs);
	                mx.draw_line(Mx, lingrad, x, ycc + sv.a1, x, ycc + sv.a2, 1);
	
	                var lingrad = ctx.createLinearGradient(xcc, 0, xcc + xss, 0);
	                lingrad.addColorStop(0.1, Mx.xwts);
	                lingrad.addColorStop(0.75, Mx.xwbs);
	                mx.draw_round_box(Mx, Mx.xwbg, xcc - 1, ycc + p1, xss, sw + 1, 1, lingrad, 8, Mx.xwbs);
	            }
	
	        }
	
	        sv.s1 = s1;
	        sv.sw = sw;
	    };
	
	    /**
	     * @method bound
	     * @param a
	     * @param b
	     * @param c
	     * @private
	     */
	    function bound(a, b, c) {
	        return a < b ? b : (a > c ? c : a);
	    }
	
	    /**
	     * @param {Object} Mx - the Mx object
	     * @param {number} x - the real-world x coordinate
	     * @param {number} y - the real-world y coordinate
	     * @param {boolean} [clip=false] set to clip the returned value to the plot area
	     * @returns {Object} pixel - the x,y coordinates in pixel coordinate space
	     * @returns {number} pixel.clipped - true if the point would have or has been clipped
	     * @private
	     */
	    mx.real_to_pixel = function(Mx, x, y, clip) {
	        var stk4 = mx.origin(Mx.origin, 4, Mx.stk[Mx.level]);
	        if ((stk4.xscl === 0.0) || (stk4.yscl === 0.0)) {
	            return {
	                x: 0,
	                y: 0
	            };
	        }
	
	        var left = stk4.x1;
	        var top = stk4.y1;
	
	        var xxmin = stk4.xmin;
	        var xscl = 1.0 / stk4.xscl;
	
	        var yymin = stk4.ymin;
	        var yscl = 1.0 / stk4.yscl;
	
	        var clipped_x = false;
	        var clipped_y = false;
	
	        if (x !== null) {
	            clipped_x = ((x > stk4.xmax) || (x < stk4.xmin));
	            if (clip) {
	                x = Math.min(x, stk4.xmax);
	                x = Math.max(x, stk4.xmin);
	            }
	            x = Math.round((x - xxmin) * xscl) + left;
	        }
	        if (y !== null) {
	            clipped_y = ((y > stk4.ymin) || (y < stk4.ymax));
	            if (clip) {
	                y = Math.min(y, stk4.ymin);
	                y = Math.max(y, stk4.ymax);
	            }
	            y = Math.round((y - yymin) * yscl) + top;
	        }
	
	        x = Math.round(x);
	        y = Math.round(y);
	
	        return {
	            x: x,
	            y: y,
	            clipped_x: clipped_x,
	            clipped_y: clipped_y,
	            clipped: (clipped_x || clipped_y)
	        };
	    };
	
	    /**
	     * @param Mx
	     * @param xpos
	     * @param ypos
	     * @private
	     */
	    mx.pixel_to_real = function(Mx, xpos, ypos) {
	        var iretx = Math.min(Mx.r, Math.max(Mx.l, xpos));
	        var irety = Math.min(Mx.b, Math.max(Mx.t, ypos));
	        var retx;
	        var rety;
	
	        var k = Mx.level;
	        if ((Mx.origin !== 2) && (Mx.origin !== 3)) {
	            retx = Mx.stk[k].xmin + (iretx - Mx.stk[k].x1) * Mx.stk[k].xscl;
	        } else {
	            retx = Mx.stk[k].xmin + (Mx.stk[k].x2 - iretx) * Mx.stk[k].xscl;
	        }
	        if (Mx.origin > 2) {
	            rety = Mx.stk[k].ymin + (irety - Mx.stk[k].y1) * Mx.stk[k].yscl;
	        } else {
	            rety = Mx.stk[k].ymin + (Mx.stk[k].y2 - irety) * Mx.stk[k].yscl;
	        }
	
	        return {
	            x: retx,
	            y: rety
	        };
	    };
	
	    /**
	     * @param Mx
	     * @param map
	     * @param ncolors
	     * @private
	     */
	    mx.colormap = function(Mx, map, ncolors) {
	        Mx.pixel = new Array(ncolors);
	        var colorp = new Array(ncolors);
	
	        var cf = 100.0 / (Math.max(2, ncolors) - 1);
	        for (var n = 0; n < ncolors; n++) {
	            colorp[n] = (cf * n) + 0.5;
	        }
	
	        var iz;
	        for (iz = 0;
	            (iz < 6) && (map[iz + 1].pos === 0); iz++) {}
	
	        for (var n = 0; n < ncolors; n++) {
	            Mx.pixel[n] = 0;
	            var z = colorp[n];
	            while ((iz < 6) && (Math.floor(z) > map[iz].pos)) {
	                iz++;
	            }
	            if ((iz === 0) || (z >= map[iz].pos)) {
	                // above, below, or directly on boundry
	                Mx.pixel[n] = {
	                    red: pc2px(map[iz].red),
	                    green: pc2px(map[iz].green),
	                    blue: pc2px(map[iz].blue)
	                };
	            } else {
	                // interpolation my dear watson
	                var pf = (z - map[iz - 1].pos) / (map[iz].pos - map[iz - 1].pos);
	                var zf = pc2px(pf * 100);
	                var zf1 = 255 - zf;
	                Mx.pixel[n] = {
	                    red: (zf * (map[iz].red / 100) + zf1 * (map[iz - 1].red / 100)),
	                    green: (zf * (map[iz].green / 100) + zf1 * (map[iz - 1].green / 100)),
	                    blue: (zf * (map[iz].blue / 100) + zf1 * (map[iz - 1].blue / 100))
	                };
	            }
	        }
	    };
	
	    /**
	     * @param Mx
	     * @param x
	     * @param y
	     * @param w
	     * @param h
	     * @private
	     */
	    mx.colorbar = function(Mx, x, y, w, h) {
	        for (var j = 1; j < h; j++) {
	            var cidx = Math.floor(Mx.pixel.length * (j - 1) / h);
	            mx.draw_line(Mx, cidx, x, y + h - j, x + w, y + h - j);
	        }
	        mx.draw_box(Mx, Mx.fg, x + 0.5, y, w, h);
	    };
	
	    /**
	     * Render image buffer to canvas.
	     *
	     * If we don't have access to Uint8ClampedArray (i.e. Firefox 3.6)
	     * use a slower approach that only supports rasters up to the size
	     * limit of the canvas
	     * @private
	     *
	     * @param ctx
	     *   {context} a canvas 2d context
	     * @param buf
	     *   {ArrayBuffer} a buffer of 32-bit image data
	     * @param opacity
	     *   the opacity to render the image with
	     * @param smoothing
	     *   if image smoothing should be enabled
	     * @param sx
	     *   source x position
	     * @param sy
	     *   source y position
	     * @param sw
	     *   source width
	     * @param sh
	     *   source height
	     * @param x
	     *   optional x canvas dest
	     * @param y
	     *   optional y canvas dest
	     * @param w
	     *   optional width
	     * @param h
	     *   optional height
	     */
	    function renderImageNoTypedArrays(Mx, ctx, buf, opacity, smoothing, x, y, w, h, sx, sy, sw, sh) {
	        if (sx === undefined) {
	            sx = 0;
	        }
	        if (sy === undefined) {
	            sy = 0;
	        }
	        if (sw === undefined) {
	            sw = buf.width - sx;
	        }
	        if (sh === undefined) {
	            sh = buf.height - sy;
	        }
	
	        // If the source buffer is small enough to be directly rendered, do that
	        Mx._renderCanvas.width = buf.width;
	        Mx._renderCanvas.height = buf.height;
	
	        var imgctx = Mx._renderCanvas.getContext("2d");
	        var imgd = imgctx.createImageData(Mx._renderCanvas.width, Mx._renderCanvas.height);
	        var buf8 = new Uint8Array(buf);
	        for (var yy = 0; yy < buf.height; ++yy) {
	            for (var xx = 0; xx < buf.width; ++xx) {
	                var index = ((yy * buf.width) + xx) * 4;
	                imgd.data[index] = buf8[index]; // red
	                imgd.data[index + 1] = buf8[index + 1]; // green
	                imgd.data[index + 2] = buf8[index + 2]; // blue
	                imgd.data[index + 3] = 255; // alpha
	            }
	        }
	        imgctx.putImageData(imgd, 0, 0);
	
	        // Render the image to the destination
	        ctx.save();
	        ctx.globalAlpha = opacity;
	        if (!smoothing) {
	            ctx.imageSmoothingEnabled = false;
	            ctx.mozImageSmoothingEnabled = false;
	            ctx.webkitImageSmoothingEnabled = false;
	        }
	        ctx.drawImage(Mx._renderCanvas, sx, sy, sw, sh, x, y, w, h);
	        ctx.restore();
	    }
	
	    /**
	     * @private
	     *
	     * @param ctx
	     *   {context} a canvas 2d context
	     * @param buf
	     *   {ArrayBuffer} a buffer of 32-bit image data
	     * @param opacity
	     *   the opacity to render the image with
	     * @param smoothing
	     *   if image smoothing should be enabled
	     * @param sx
	     *   source x position
	     * @param sy
	     *   source y position
	     * @param sw
	     *   source width
	     * @param sh
	     *   source height
	     * @param x
	     *   optional x canvas dest
	     * @param y
	     *   optional y canvas dest
	     * @param w
	     *   optional width
	     * @param h
	     *   optional height
	     */
	    function renderImageTypedArrays(Mx, ctx, buf, opacity, smoothing, x, y, w, h, sx, sy, sw, sh) {
	        if (sx === undefined) {
	            sx = 0;
	        }
	        if (sy === undefined) {
	            sy = 0;
	        }
	        if (sw === undefined) {
	            sw = buf.width - sx;
	        }
	        if (sh === undefined) {
	            sh = buf.height - sy;
	        }
	
	        if ((buf.width < 32768) && (buf.height < 32768)) {
	            // If the source buffer is small enough to be directly rendered, do that
	            Mx._renderCanvas.width = buf.width;
	            Mx._renderCanvas.height = buf.height;
	
	            var imgctx = Mx._renderCanvas.getContext("2d");
	            var imgd = imgctx.createImageData(Mx._renderCanvas.width, Mx._renderCanvas.height);
	
	            // TODO - This may not be portable to all browsers, if not
	            // we need to choose between this approach and the traditional
	            // for-loop based approach
	            var buf8 = new Uint8ClampedArray(buf);
	            imgd.data.set(buf8);
	            imgctx.putImageData(imgd, 0, 0);
	        } else {
	            if ((sw < 32768) && (sh < 32768)) {
	                // The clipped image is small enough to directly render
	                Mx._renderCanvas.width = sw;
	                Mx._renderCanvas.height = sh;
	                scaleImage(Mx._renderCanvas, buf, sx, sy, sw, sh);
	            } else {
	                // Downscale to twice the destination size
	                Mx._renderCanvas.width = Math.min(w * 2, buf.width);
	                Mx._renderCanvas.height = Math.min(h * 2, buf.height);
	                scaleImage(Mx._renderCanvas, buf, sx, sy, sw, sh);
	                sw = Mx._renderCanvas.width;
	                sh = Mx._renderCanvas.height;
	            }
	            sx = 0;
	            sy = 0;
	        }
	
	        // Render the image to the destination
	        ctx.save();
	        ctx.globalAlpha = opacity;
	        if (!smoothing) {
	            ctx.imageSmoothingEnabled = false;
	            ctx.mozImageSmoothingEnabled = false;
	            ctx.webkitImageSmoothingEnabled = false;
	        }
	        ctx.drawImage(Mx._renderCanvas, sx, sy, sw, sh, x, y, w, h);
	        ctx.restore();
	    }
	
	    /**
	     * Scale the image data (represented by buf) into the destination canvas
	     * using nearest neighbor.  In genearl, you should just use the scaling
	     * provided by drawImage...but if the buf is greater than 32767 pixels in
	     * either dimension that won't work and you have to use this.
	     *
	     * @param img
	     *   A canvas object
	     * @param buf
	     *   An ArrayBuf with .width and .height elements
	     *
	     * @private
	     */
	    function scaleImage(img, buf, sx, sy, sw, sh) {
	        // Source buffer, expected to have .width and .height elements
	        var src = new Uint32Array(buf);
	
	        if (!sw) {
	            sw = buf.width;
	        }
	        if (!sh) {
	            sh = buf.height;
	        }
	        if (!sx) {
	            sx = 0;
	        }
	        if (!sy) {
	            sy = 0;
	        }
	
	        // Cache to avoid get width calls in tight loop
	        var w = img.width;
	        var h = img.height;
	
	        // Destination element
	        var imgctx = img.getContext("2d");
	        var imgd = imgctx.createImageData(w, h);
	        var ibuf = new ArrayBuffer(imgd.data.length);
	        var buf8 = new Uint8ClampedArray(ibuf);
	        var dest = new Uint32Array(ibuf);
	
	        // Scaling factor
	        var width_scaling = sw / w;
	        var height_scaling = sh / h;
	
	        // Perform the scaling	
	        var xx = 0;
	        var yy = 0;
	        var jj = 0;
	        for (var i = 0; i < dest.length; i++) {
	            xx = Math.round(Math.floor(i % w) * width_scaling) + sx;
	            yy = Math.round(Math.floor(i / w) * height_scaling) + sy;
	            jj = Math.floor((yy * buf.width) + xx);
	            dest[i] = src[jj];
	        }
	
	        // Set the data
	        imgd.data.set(buf8);
	        imgctx.putImageData(imgd, 0, 0);
	    }
	
	    var renderImage = (typeof Uint8ClampedArray === 'undefined') ? renderImageNoTypedArrays : renderImageTypedArrays;
	
	    /**
	     * @param Mx
	     * @param img
	     * @param shift
	     * @private
	     */
	    mx.shift_image_rows = function(Mx, buf, shift) {
	        var imgd = new Uint32Array(buf);
	        if (shift > 0) { // shift down
	            shift = shift * buf.width;
	            imgd.set(imgd.subarray(0, imgd.length - shift), shift);
	        } else if (shift < 0) { // shift up
	            shift = Math.abs(shift) * buf.width;
	            imgd.set(imgd.subarray(shift));
	        }
	
	        return buf;
	    };
	
	    /**
	     * @param Mx
	     * @param img
	     * @param data
	     * @param row
	     * @param zmin
	     * @param zmax
	     * @private
	     */
	    mx.update_image_row = function(Mx, buf, data, row, zmin, zmax, xcompression) {
	        var imgd = new Uint32Array(buf, row * buf.width * 4, buf.width);
	
	        var fscale = 1;
	        if (zmax !== zmin) {
	            fscale = Mx.pixel.length / Math.abs(zmax - zmin); // number of colors spread across the zrange
	        }
	
	        var xc = Math.max(1, data.length / buf.width);
	        for (var i = 0; i < buf.width; i++) {
	            var didx = Math.floor(i * xc);
	            var value = data[didx];
	            if (xc > 1) {
	                if (xcompression === 1) { // average
	                    for (var j = 1; j < xc; j++) {
	                        value += data[didx + j];
	                    }
	                    value = (value / xc);
	                } else if (xcompression === 2) { // min 
	                    for (var j = 1; j < xc; j++) {
	                        value = Math.min(value, data[didx + j]);
	                    }
	                } else if (xcompression === 3) { // max
	                    for (var j = 1; j < xc; j++) {
	                        value = Math.max(value, data[didx + j]);
	                    }
	                } else if (xcompression === 4) { // first 
	                    value = data[i];
	                } else if (xcompression === 5) { // max abs
	                    for (var j = 1; j < xc; j++) {
	                        value = Math.max(Math.abs(value), Math.abs(data[didx + j]));
	                    }
	                }
	            }
	            var cidx = Math.floor((value - zmin) * fscale);
	            cidx = Math.max(0, Math.min(Mx.pixel.length - 1, cidx));
	
	            var color = Mx.pixel[cidx];
	            if (color) {
	                /*jshint bitwise: false */
	                imgd[i] = (255 << 24) | // alpha
	                    (color.blue << 16) | // blue
	                    (color.green << 8) | // green
	                    (color.red); // red
	                /*jshint bitwise: true */
	            }
	        }
	
	        return imgd;
	    };
	
	    /**
	     * @param Mx
	     * @param data
	     * @param w
	     * @param h
	     * @param Mx
	     * @param zmin
	     * @param zmax
	     * @private
	     */
	    mx.create_image = function(Mx, data, subsize, w, h, zmin, zmax, xcompression) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        if (!Mx.pixel || Mx.pixel.length === 0) {
	            m.log.warn("COLORMAP not initialized, defaulting to foreground");
	            mx.colormap(Mx, m.Mc.colormap[1].colors, 16);
	        }
	
	        var fscale = 1;
	        if (zmax !== zmin) {
	            fscale = Mx.pixel.length / Math.abs(zmax - zmin); // number of colors spread across the zrange
	        }
	
	        w = Math.ceil(w);
	        h = Math.ceil(h);
	        var buf = new ArrayBuffer(w * h * 4);
	        buf.width = w;
	        buf.height = h;
	
	        var nxc = Math.max(1, subsize / w);
	
	        var imgd = new Uint32Array(buf);
	        if (data) {
	            for (var i = 0; i < imgd.length; i++) {
	                var ix;
	                var iy;
	                if ((Mx.origin === 1) || (Mx.origin === 4)) {
	                    ix = Math.floor(i % w);
	                } else {
	                    ix = w - Math.floor(i % w) - 1;
	                }
	                if ((Mx.origin === 3) || (Mx.origin === 4)) {
	                    iy = Math.floor(i / w);
	                } else {
	                    iy = h - Math.floor(i / w) - 1;
	                }
	                if (iy === 1) {
	                    var test = 1;
	                }
	                var didx = (iy * subsize) + Math.floor(ix * nxc);
	                var value = data[didx];
	                if (nxc > 1) {
	                    if (xcompression === 1) { // average
	                        for (var j = 1; j < nxc; j++) {
	                            value += data[didx + j];
	                        }
	                        value = value / nxc;
	                    } else if (xcompression === 2) { // min 
	                        for (var j = 1; j < nxc; j++) {
	                            value = Math.min(value, data[didx + j]);
	                        }
	                    } else if (xcompression === 3) { // max
	                        for (var j = 1; j < nxc; j++) {
	                            value = Math.max(value, data[didx + j]);
	                        }
	                    } else if (xcompression === 4) { // first 
	                        value = data[didx];
	                    } else if (xcompression === 5) { // max abs
	                        for (var j = 1; j < nxc; j++) {
	                            value = Math.max(Math.abs(value), Math.abs(data[didx + j]));
	                        }
	                    }
	                }
	
	                var cidx = Math.floor((value - zmin) * fscale);
	                cidx = Math.max(0, Math.min(Mx.pixel.length - 1, cidx));
	
	                var color = Mx.pixel[cidx];
	                if (color) {
	                    /*jshint bitwise: false */
	                    imgd[i] = (255 << 24) | // alpha
	                        (color.blue << 16) | // blue
	                        (color.green << 8) | // green
	                        (color.red); // red
	                    /*jshint bitwise: true */
	                }
	            }
	        }
	
	        // Return the image in case the caller wishes to cache it
	        return buf;
	    };
	
	    /**
	     * @param Mx
	     * @param data
	     * @param nx
	     * @param ny
	     * @param nex
	     * @param ney
	     * @param xd
	     * @param yd
	     * @param level
	     * @param opacity
	     * @param smoothing
	     * @private
	     */
	    mx.put_image = function(Mx, data, nx, ny, nex, ney, xd, yd, level, opacity, smoothing) {
	        var ctx = Mx.active_canvas.getContext("2d");
	
	        if (!Mx.pixel || Mx.pixel.length === 0) {
	            m.log.warn("COLORMAP not initialized, defaulting to foreground");
	            mx.colormap(Mx, m.Mc.colormap[1].colors, 16);
	        }
	
	        var w;
	        var h;
	
	        if (nex > 0) {
	            w = nx * nex;
	        } else {
	            w = -nex;
	        }
	        w = Math.floor(w);
	        h = Math.floor(ny * ney);
	
	        var buf = new ArrayBuffer(w * h * 4);
	        buf.width = w;
	        buf.height = h;
	
	        var imgd = new Uint32Array(buf);
	        for (var i = 0; i < imgd.length; i++) {
	            var cidx = Math.max(0, data[i]);
	            cidx = Math.min(Mx.pixel.length - 1, cidx);
	
	            var color = Mx.pixel[cidx];
	            if (color) {
	                /*jshint bitwise: false */
	                imgd[i] = (255 << 24) | // alpha
	                    (color.blue << 16) | // blue
	                    (color.green << 8) | // green
	                    (color.red); // red
	                /*jshint bitwise: true */
	            }
	        }
	
	        //render the buffered canvas onto the original canvas element
	        renderImage(Mx, ctx, buf, opacity, smoothing, xd, yd, w, h);
	
	        // Return the image in case the caller wishes to cache it
	        return buf;
	    };
	
	    /**
	     * @param Mx
	     * @param buf
	     * @param xmin
	     * @param ymin
	     * @param xmax
	     * @param ymax
	     * @param opacity
	     * @param smoothing
	     * @private
	     */
	    mx.draw_image = function(Mx, buf, xmin, ymin, xmax, ymax, opacity, smoothing) {
	        var view_xmin = Math.max(xmin, Mx.stk[Mx.level].xmin);
	        var view_xmax = Math.min(xmax, Mx.stk[Mx.level].xmax);
	        var view_ymin = Math.max(ymin, Mx.stk[Mx.level].ymin);
	        var view_ymax = Math.min(ymax, Mx.stk[Mx.level].ymax);
	
	
	        if ((buf.width <= 1) || Math.abs(xmax - xmin) === 0) {
	            return;
	        }
	        if ((buf.height <= 1) || Math.abs(ymax - ymin) === 0) {
	            return;
	        }
	        var rx = buf.width / (xmax - xmin);
	        var ry = buf.height / (ymax - ymin);
	
	        // Ensure we are on buffer pixel boundaries, later we use clipping
	        // to constrain to the proper area
	        view_xmin = Math.floor(view_xmin * rx) / rx;
	        view_xmax = Math.ceil(view_xmax * rx) / rx;
	        view_ymin = Math.floor(view_ymin * ry) / ry;
	        view_ymax = Math.ceil(view_ymax * ry) / ry;
	
	        var ul, lr;
	        var sy, sx, sw, sh;
	        if (Mx.origin === 1) {
	            // regular x, regular y
	            sy = Math.max(0, Math.floor((ymax - view_ymax) * ry));
	            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));
	            sx = Math.max(0, Math.floor((view_xmin - xmin) * rx));
	            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));
	
	            ul = mx.real_to_pixel(Mx, view_xmin, view_ymax);
	            lr = mx.real_to_pixel(Mx, view_xmax, view_ymin);
	        } else if (Mx.origin === 2) {
	            // inverted x, regular y
	            sy = Math.max(0, Math.floor((ymax - view_ymax) * ry));
	            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));
	            sx = Math.max(0, Math.ceil((view_xmin - xmin) * rx));
	            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));
	
	            ul = mx.real_to_pixel(Mx, view_xmax, view_ymax);
	            lr = mx.real_to_pixel(Mx, view_xmin, view_ymin);
	        } else if (Mx.origin === 3) {
	            // inverted x, inverted y
	            sy = Math.max(0, Math.ceil((view_ymin - ymin) * ry));
	            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));
	            sx = Math.max(0, Math.ceil((view_xmin - xmin) * rx));
	            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));
	
	            ul = mx.real_to_pixel(Mx, view_xmax, view_ymin);
	            lr = mx.real_to_pixel(Mx, view_xmin, view_ymax);
	        } else if (Mx.origin === 4) {
	            // regular x, inverted y
	            sy = Math.max(0, Math.ceil((view_ymin - ymin) * ry));
	            sh = Math.min(buf.height - sy, Math.floor((view_ymax - view_ymin) * ry));
	            sx = Math.max(0, Math.floor((view_xmin - xmin) * rx));
	            sw = Math.min(buf.width - sx, Math.floor((view_xmax - view_xmin) * rx));
	
	            ul = mx.real_to_pixel(Mx, view_xmin, view_ymin);
	            lr = mx.real_to_pixel(Mx, view_xmax, view_ymax);
	        }
	
	        var iw = lr.x - ul.x;
	        var ih = lr.y - ul.y;
	
	        // Always include at least one pixel from the source
	        sw = Math.max(1, sw);
	        sh = Math.max(1, sh);
	
	        // See if smart smoothing is requested
	        if (typeof smoothing === "number") {
	            // calculate the ratio of displayed pixels over
	            // displayed data-points
	            var ratio = (Mx.r - Mx.l) / sw;
	            // if the ratio is greater than the smoothing value
	            // turn on smoothing
	            smoothing = (ratio <= smoothing);
	        }
	
	        //render the buffered canvas onto the original canvas element
	        var ctx = Mx.active_canvas.getContext("2d");
	        ctx.save();
	        ctx.beginPath();
	        ctx.rect(Mx.l, Mx.t, Mx.r - Mx.l, Mx.b - Mx.t);
	        ctx.clip();
	        renderImage(Mx, ctx, buf, opacity, smoothing, ul.x, ul.y, iw, ih, sx, sy, sw, sh);
	        ctx.restore();
	    };
	
	    // Node: Export function
	    module.exports = mx;
	
	}());
	
	///////////////////////////////////////////////////////////////////////////////


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1
	// https://github.com/bgrins/TinyColor
	// Brian Grinstead, MIT License
	
	(function(Math) {
	
	var trimLeft = /^\s+/,
	    trimRight = /\s+$/,
	    tinyCounter = 0,
	    mathRound = Math.round,
	    mathMin = Math.min,
	    mathMax = Math.max,
	    mathRandom = Math.random;
	
	function tinycolor (color, opts) {
	
	    color = (color) ? color : '';
	    opts = opts || { };
	
	    // If input is already a tinycolor, return itself
	    if (color instanceof tinycolor) {
	       return color;
	    }
	    // If we are called as a function, call using new instead
	    if (!(this instanceof tinycolor)) {
	        return new tinycolor(color, opts);
	    }
	
	    var rgb = inputToRGB(color);
	    this._originalInput = color,
	    this._r = rgb.r,
	    this._g = rgb.g,
	    this._b = rgb.b,
	    this._a = rgb.a,
	    this._roundA = mathRound(100*this._a) / 100,
	    this._format = opts.format || rgb.format;
	    this._gradientType = opts.gradientType;
	
	    // Don't let the range of [0,255] come back in [0,1].
	    // Potentially lose a little bit of precision here, but will fix issues where
	    // .5 gets interpreted as half of the total, instead of half of 1
	    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
	    if (this._r < 1) { this._r = mathRound(this._r); }
	    if (this._g < 1) { this._g = mathRound(this._g); }
	    if (this._b < 1) { this._b = mathRound(this._b); }
	
	    this._ok = rgb.ok;
	    this._tc_id = tinyCounter++;
	}
	
	tinycolor.prototype = {
	    isDark: function() {
	        return this.getBrightness() < 128;
	    },
	    isLight: function() {
	        return !this.isDark();
	    },
	    isValid: function() {
	        return this._ok;
	    },
	    getOriginalInput: function() {
	      return this._originalInput;
	    },
	    getFormat: function() {
	        return this._format;
	    },
	    getAlpha: function() {
	        return this._a;
	    },
	    getBrightness: function() {
	        //http://www.w3.org/TR/AERT#color-contrast
	        var rgb = this.toRgb();
	        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
	    },
	    getLuminance: function() {
	        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
	        var rgb = this.toRgb();
	        var RsRGB, GsRGB, BsRGB, R, G, B;
	        RsRGB = rgb.r/255;
	        GsRGB = rgb.g/255;
	        BsRGB = rgb.b/255;
	
	        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
	        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
	        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
	        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
	    },
	    setAlpha: function(value) {
	        this._a = boundAlpha(value);
	        this._roundA = mathRound(100*this._a) / 100;
	        return this;
	    },
	    toHsv: function() {
	        var hsv = rgbToHsv(this._r, this._g, this._b);
	        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
	    },
	    toHsvString: function() {
	        var hsv = rgbToHsv(this._r, this._g, this._b);
	        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
	        return (this._a == 1) ?
	          "hsv("  + h + ", " + s + "%, " + v + "%)" :
	          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
	    },
	    toHsl: function() {
	        var hsl = rgbToHsl(this._r, this._g, this._b);
	        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
	    },
	    toHslString: function() {
	        var hsl = rgbToHsl(this._r, this._g, this._b);
	        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
	        return (this._a == 1) ?
	          "hsl("  + h + ", " + s + "%, " + l + "%)" :
	          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
	    },
	    toHex: function(allow3Char) {
	        return rgbToHex(this._r, this._g, this._b, allow3Char);
	    },
	    toHexString: function(allow3Char) {
	        return '#' + this.toHex(allow3Char);
	    },
	    toHex8: function(allow4Char) {
	        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
	    },
	    toHex8String: function(allow4Char) {
	        return '#' + this.toHex8(allow4Char);
	    },
	    toRgb: function() {
	        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
	    },
	    toRgbString: function() {
	        return (this._a == 1) ?
	          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
	          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
	    },
	    toPercentageRgb: function() {
	        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
	    },
	    toPercentageRgbString: function() {
	        return (this._a == 1) ?
	          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
	          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
	    },
	    toName: function() {
	        if (this._a === 0) {
	            return "transparent";
	        }
	
	        if (this._a < 1) {
	            return false;
	        }
	
	        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
	    },
	    toFilter: function(secondColor) {
	        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
	        var secondHex8String = hex8String;
	        var gradientType = this._gradientType ? "GradientType = 1, " : "";
	
	        if (secondColor) {
	            var s = tinycolor(secondColor);
	            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
	        }
	
	        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
	    },
	    toString: function(format) {
	        var formatSet = !!format;
	        format = format || this._format;
	
	        var formattedString = false;
	        var hasAlpha = this._a < 1 && this._a >= 0;
	        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
	
	        if (needsAlphaFormat) {
	            // Special case for "transparent", all other non-alpha formats
	            // will return rgba when there is transparency.
	            if (format === "name" && this._a === 0) {
	                return this.toName();
	            }
	            return this.toRgbString();
	        }
	        if (format === "rgb") {
	            formattedString = this.toRgbString();
	        }
	        if (format === "prgb") {
	            formattedString = this.toPercentageRgbString();
	        }
	        if (format === "hex" || format === "hex6") {
	            formattedString = this.toHexString();
	        }
	        if (format === "hex3") {
	            formattedString = this.toHexString(true);
	        }
	        if (format === "hex4") {
	            formattedString = this.toHex8String(true);
	        }
	        if (format === "hex8") {
	            formattedString = this.toHex8String();
	        }
	        if (format === "name") {
	            formattedString = this.toName();
	        }
	        if (format === "hsl") {
	            formattedString = this.toHslString();
	        }
	        if (format === "hsv") {
	            formattedString = this.toHsvString();
	        }
	
	        return formattedString || this.toHexString();
	    },
	    clone: function() {
	        return tinycolor(this.toString());
	    },
	
	    _applyModification: function(fn, args) {
	        var color = fn.apply(null, [this].concat([].slice.call(args)));
	        this._r = color._r;
	        this._g = color._g;
	        this._b = color._b;
	        this.setAlpha(color._a);
	        return this;
	    },
	    lighten: function() {
	        return this._applyModification(lighten, arguments);
	    },
	    brighten: function() {
	        return this._applyModification(brighten, arguments);
	    },
	    darken: function() {
	        return this._applyModification(darken, arguments);
	    },
	    desaturate: function() {
	        return this._applyModification(desaturate, arguments);
	    },
	    saturate: function() {
	        return this._applyModification(saturate, arguments);
	    },
	    greyscale: function() {
	        return this._applyModification(greyscale, arguments);
	    },
	    spin: function() {
	        return this._applyModification(spin, arguments);
	    },
	
	    _applyCombination: function(fn, args) {
	        return fn.apply(null, [this].concat([].slice.call(args)));
	    },
	    analogous: function() {
	        return this._applyCombination(analogous, arguments);
	    },
	    complement: function() {
	        return this._applyCombination(complement, arguments);
	    },
	    monochromatic: function() {
	        return this._applyCombination(monochromatic, arguments);
	    },
	    splitcomplement: function() {
	        return this._applyCombination(splitcomplement, arguments);
	    },
	    triad: function() {
	        return this._applyCombination(triad, arguments);
	    },
	    tetrad: function() {
	        return this._applyCombination(tetrad, arguments);
	    }
	};
	
	// If input is an object, force 1 into "1.0" to handle ratios properly
	// String input requires "1.0" as input, so 1 will be treated as 1
	tinycolor.fromRatio = function(color, opts) {
	    if (typeof color == "object") {
	        var newColor = {};
	        for (var i in color) {
	            if (color.hasOwnProperty(i)) {
	                if (i === "a") {
	                    newColor[i] = color[i];
	                }
	                else {
	                    newColor[i] = convertToPercentage(color[i]);
	                }
	            }
	        }
	        color = newColor;
	    }
	
	    return tinycolor(color, opts);
	};
	
	// Given a string or object, convert that input to RGB
	// Possible string inputs:
	//
	//     "red"
	//     "#f00" or "f00"
	//     "#ff0000" or "ff0000"
	//     "#ff000000" or "ff000000"
	//     "rgb 255 0 0" or "rgb (255, 0, 0)"
	//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
	//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
	//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
	//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
	//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
	//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
	//
	function inputToRGB(color) {
	
	    var rgb = { r: 0, g: 0, b: 0 };
	    var a = 1;
	    var s = null;
	    var v = null;
	    var l = null;
	    var ok = false;
	    var format = false;
	
	    if (typeof color == "string") {
	        color = stringInputToObject(color);
	    }
	
	    if (typeof color == "object") {
	        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
	            rgb = rgbToRgb(color.r, color.g, color.b);
	            ok = true;
	            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
	        }
	        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
	            s = convertToPercentage(color.s);
	            v = convertToPercentage(color.v);
	            rgb = hsvToRgb(color.h, s, v);
	            ok = true;
	            format = "hsv";
	        }
	        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
	            s = convertToPercentage(color.s);
	            l = convertToPercentage(color.l);
	            rgb = hslToRgb(color.h, s, l);
	            ok = true;
	            format = "hsl";
	        }
	
	        if (color.hasOwnProperty("a")) {
	            a = color.a;
	        }
	    }
	
	    a = boundAlpha(a);
	
	    return {
	        ok: ok,
	        format: color.format || format,
	        r: mathMin(255, mathMax(rgb.r, 0)),
	        g: mathMin(255, mathMax(rgb.g, 0)),
	        b: mathMin(255, mathMax(rgb.b, 0)),
	        a: a
	    };
	}
	
	
	// Conversion Functions
	// --------------------
	
	// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
	// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
	
	// `rgbToRgb`
	// Handle bounds / percentage checking to conform to CSS color spec
	// <http://www.w3.org/TR/css3-color/>
	// *Assumes:* r, g, b in [0, 255] or [0, 1]
	// *Returns:* { r, g, b } in [0, 255]
	function rgbToRgb(r, g, b){
	    return {
	        r: bound01(r, 255) * 255,
	        g: bound01(g, 255) * 255,
	        b: bound01(b, 255) * 255
	    };
	}
	
	// `rgbToHsl`
	// Converts an RGB color value to HSL.
	// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
	// *Returns:* { h, s, l } in [0,1]
	function rgbToHsl(r, g, b) {
	
	    r = bound01(r, 255);
	    g = bound01(g, 255);
	    b = bound01(b, 255);
	
	    var max = mathMax(r, g, b), min = mathMin(r, g, b);
	    var h, s, l = (max + min) / 2;
	
	    if(max == min) {
	        h = s = 0; // achromatic
	    }
	    else {
	        var d = max - min;
	        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	        switch(max) {
	            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	            case g: h = (b - r) / d + 2; break;
	            case b: h = (r - g) / d + 4; break;
	        }
	
	        h /= 6;
	    }
	
	    return { h: h, s: s, l: l };
	}
	
	// `hslToRgb`
	// Converts an HSL color value to RGB.
	// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
	// *Returns:* { r, g, b } in the set [0, 255]
	function hslToRgb(h, s, l) {
	    var r, g, b;
	
	    h = bound01(h, 360);
	    s = bound01(s, 100);
	    l = bound01(l, 100);
	
	    function hue2rgb(p, q, t) {
	        if(t < 0) t += 1;
	        if(t > 1) t -= 1;
	        if(t < 1/6) return p + (q - p) * 6 * t;
	        if(t < 1/2) return q;
	        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
	        return p;
	    }
	
	    if(s === 0) {
	        r = g = b = l; // achromatic
	    }
	    else {
	        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	        var p = 2 * l - q;
	        r = hue2rgb(p, q, h + 1/3);
	        g = hue2rgb(p, q, h);
	        b = hue2rgb(p, q, h - 1/3);
	    }
	
	    return { r: r * 255, g: g * 255, b: b * 255 };
	}
	
	// `rgbToHsv`
	// Converts an RGB color value to HSV
	// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
	// *Returns:* { h, s, v } in [0,1]
	function rgbToHsv(r, g, b) {
	
	    r = bound01(r, 255);
	    g = bound01(g, 255);
	    b = bound01(b, 255);
	
	    var max = mathMax(r, g, b), min = mathMin(r, g, b);
	    var h, s, v = max;
	
	    var d = max - min;
	    s = max === 0 ? 0 : d / max;
	
	    if(max == min) {
	        h = 0; // achromatic
	    }
	    else {
	        switch(max) {
	            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	            case g: h = (b - r) / d + 2; break;
	            case b: h = (r - g) / d + 4; break;
	        }
	        h /= 6;
	    }
	    return { h: h, s: s, v: v };
	}
	
	// `hsvToRgb`
	// Converts an HSV color value to RGB.
	// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
	// *Returns:* { r, g, b } in the set [0, 255]
	 function hsvToRgb(h, s, v) {
	
	    h = bound01(h, 360) * 6;
	    s = bound01(s, 100);
	    v = bound01(v, 100);
	
	    var i = Math.floor(h),
	        f = h - i,
	        p = v * (1 - s),
	        q = v * (1 - f * s),
	        t = v * (1 - (1 - f) * s),
	        mod = i % 6,
	        r = [v, q, p, p, t, v][mod],
	        g = [t, v, v, q, p, p][mod],
	        b = [p, p, t, v, v, q][mod];
	
	    return { r: r * 255, g: g * 255, b: b * 255 };
	}
	
	// `rgbToHex`
	// Converts an RGB color to hex
	// Assumes r, g, and b are contained in the set [0, 255]
	// Returns a 3 or 6 character hex
	function rgbToHex(r, g, b, allow3Char) {
	
	    var hex = [
	        pad2(mathRound(r).toString(16)),
	        pad2(mathRound(g).toString(16)),
	        pad2(mathRound(b).toString(16))
	    ];
	
	    // Return a 3 character hex if possible
	    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
	        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
	    }
	
	    return hex.join("");
	}
	
	// `rgbaToHex`
	// Converts an RGBA color plus alpha transparency to hex
	// Assumes r, g, b are contained in the set [0, 255] and
	// a in [0, 1]. Returns a 4 or 8 character rgba hex
	function rgbaToHex(r, g, b, a, allow4Char) {
	
	    var hex = [
	        pad2(mathRound(r).toString(16)),
	        pad2(mathRound(g).toString(16)),
	        pad2(mathRound(b).toString(16)),
	        pad2(convertDecimalToHex(a))
	    ];
	
	    // Return a 4 character hex if possible
	    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
	        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
	    }
	
	    return hex.join("");
	}
	
	// `rgbaToArgbHex`
	// Converts an RGBA color to an ARGB Hex8 string
	// Rarely used, but required for "toFilter()"
	function rgbaToArgbHex(r, g, b, a) {
	
	    var hex = [
	        pad2(convertDecimalToHex(a)),
	        pad2(mathRound(r).toString(16)),
	        pad2(mathRound(g).toString(16)),
	        pad2(mathRound(b).toString(16))
	    ];
	
	    return hex.join("");
	}
	
	// `equals`
	// Can be called with any tinycolor input
	tinycolor.equals = function (color1, color2) {
	    if (!color1 || !color2) { return false; }
	    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
	};
	
	tinycolor.random = function() {
	    return tinycolor.fromRatio({
	        r: mathRandom(),
	        g: mathRandom(),
	        b: mathRandom()
	    });
	};
	
	
	// Modification Functions
	// ----------------------
	// Thanks to less.js for some of the basics here
	// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>
	
	function desaturate(color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.s -= amount / 100;
	    hsl.s = clamp01(hsl.s);
	    return tinycolor(hsl);
	}
	
	function saturate(color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.s += amount / 100;
	    hsl.s = clamp01(hsl.s);
	    return tinycolor(hsl);
	}
	
	function greyscale(color) {
	    return tinycolor(color).desaturate(100);
	}
	
	function lighten (color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.l += amount / 100;
	    hsl.l = clamp01(hsl.l);
	    return tinycolor(hsl);
	}
	
	function brighten(color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var rgb = tinycolor(color).toRgb();
	    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
	    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
	    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
	    return tinycolor(rgb);
	}
	
	function darken (color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.l -= amount / 100;
	    hsl.l = clamp01(hsl.l);
	    return tinycolor(hsl);
	}
	
	// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
	// Values outside of this range will be wrapped into this range.
	function spin(color, amount) {
	    var hsl = tinycolor(color).toHsl();
	    var hue = (hsl.h + amount) % 360;
	    hsl.h = hue < 0 ? 360 + hue : hue;
	    return tinycolor(hsl);
	}
	
	// Combination Functions
	// ---------------------
	// Thanks to jQuery xColor for some of the ideas behind these
	// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>
	
	function complement(color) {
	    var hsl = tinycolor(color).toHsl();
	    hsl.h = (hsl.h + 180) % 360;
	    return tinycolor(hsl);
	}
	
	function triad(color) {
	    var hsl = tinycolor(color).toHsl();
	    var h = hsl.h;
	    return [
	        tinycolor(color),
	        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
	        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
	    ];
	}
	
	function tetrad(color) {
	    var hsl = tinycolor(color).toHsl();
	    var h = hsl.h;
	    return [
	        tinycolor(color),
	        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
	        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
	        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
	    ];
	}
	
	function splitcomplement(color) {
	    var hsl = tinycolor(color).toHsl();
	    var h = hsl.h;
	    return [
	        tinycolor(color),
	        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
	        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
	    ];
	}
	
	function analogous(color, results, slices) {
	    results = results || 6;
	    slices = slices || 30;
	
	    var hsl = tinycolor(color).toHsl();
	    var part = 360 / slices;
	    var ret = [tinycolor(color)];
	
	    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
	        hsl.h = (hsl.h + part) % 360;
	        ret.push(tinycolor(hsl));
	    }
	    return ret;
	}
	
	function monochromatic(color, results) {
	    results = results || 6;
	    var hsv = tinycolor(color).toHsv();
	    var h = hsv.h, s = hsv.s, v = hsv.v;
	    var ret = [];
	    var modification = 1 / results;
	
	    while (results--) {
	        ret.push(tinycolor({ h: h, s: s, v: v}));
	        v = (v + modification) % 1;
	    }
	
	    return ret;
	}
	
	// Utility Functions
	// ---------------------
	
	tinycolor.mix = function(color1, color2, amount) {
	    amount = (amount === 0) ? 0 : (amount || 50);
	
	    var rgb1 = tinycolor(color1).toRgb();
	    var rgb2 = tinycolor(color2).toRgb();
	
	    var p = amount / 100;
	
	    var rgba = {
	        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
	        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
	        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
	        a: ((rgb2.a - rgb1.a) * p) + rgb1.a
	    };
	
	    return tinycolor(rgba);
	};
	
	
	// Readability Functions
	// ---------------------
	// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
	
	// `contrast`
	// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
	tinycolor.readability = function(color1, color2) {
	    var c1 = tinycolor(color1);
	    var c2 = tinycolor(color2);
	    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
	};
	
	// `isReadable`
	// Ensure that foreground and background color combinations meet WCAG2 guidelines.
	// The third argument is an optional Object.
	//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
	//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
	// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
	
	// *Example*
	//    tinycolor.isReadable("#000", "#111") => false
	//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
	tinycolor.isReadable = function(color1, color2, wcag2) {
	    var readability = tinycolor.readability(color1, color2);
	    var wcag2Parms, out;
	
	    out = false;
	
	    wcag2Parms = validateWCAG2Parms(wcag2);
	    switch (wcag2Parms.level + wcag2Parms.size) {
	        case "AAsmall":
	        case "AAAlarge":
	            out = readability >= 4.5;
	            break;
	        case "AAlarge":
	            out = readability >= 3;
	            break;
	        case "AAAsmall":
	            out = readability >= 7;
	            break;
	    }
	    return out;
	
	};
	
	// `mostReadable`
	// Given a base color and a list of possible foreground or background
	// colors for that base, returns the most readable color.
	// Optionally returns Black or White if the most readable color is unreadable.
	// *Example*
	//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
	//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
	//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
	//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
	tinycolor.mostReadable = function(baseColor, colorList, args) {
	    var bestColor = null;
	    var bestScore = 0;
	    var readability;
	    var includeFallbackColors, level, size ;
	    args = args || {};
	    includeFallbackColors = args.includeFallbackColors ;
	    level = args.level;
	    size = args.size;
	
	    for (var i= 0; i < colorList.length ; i++) {
	        readability = tinycolor.readability(baseColor, colorList[i]);
	        if (readability > bestScore) {
	            bestScore = readability;
	            bestColor = tinycolor(colorList[i]);
	        }
	    }
	
	    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
	        return bestColor;
	    }
	    else {
	        args.includeFallbackColors=false;
	        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
	    }
	};
	
	
	// Big List of Colors
	// ------------------
	// <http://www.w3.org/TR/css3-color/#svg-color>
	var names = tinycolor.names = {
	    aliceblue: "f0f8ff",
	    antiquewhite: "faebd7",
	    aqua: "0ff",
	    aquamarine: "7fffd4",
	    azure: "f0ffff",
	    beige: "f5f5dc",
	    bisque: "ffe4c4",
	    black: "000",
	    blanchedalmond: "ffebcd",
	    blue: "00f",
	    blueviolet: "8a2be2",
	    brown: "a52a2a",
	    burlywood: "deb887",
	    burntsienna: "ea7e5d",
	    cadetblue: "5f9ea0",
	    chartreuse: "7fff00",
	    chocolate: "d2691e",
	    coral: "ff7f50",
	    cornflowerblue: "6495ed",
	    cornsilk: "fff8dc",
	    crimson: "dc143c",
	    cyan: "0ff",
	    darkblue: "00008b",
	    darkcyan: "008b8b",
	    darkgoldenrod: "b8860b",
	    darkgray: "a9a9a9",
	    darkgreen: "006400",
	    darkgrey: "a9a9a9",
	    darkkhaki: "bdb76b",
	    darkmagenta: "8b008b",
	    darkolivegreen: "556b2f",
	    darkorange: "ff8c00",
	    darkorchid: "9932cc",
	    darkred: "8b0000",
	    darksalmon: "e9967a",
	    darkseagreen: "8fbc8f",
	    darkslateblue: "483d8b",
	    darkslategray: "2f4f4f",
	    darkslategrey: "2f4f4f",
	    darkturquoise: "00ced1",
	    darkviolet: "9400d3",
	    deeppink: "ff1493",
	    deepskyblue: "00bfff",
	    dimgray: "696969",
	    dimgrey: "696969",
	    dodgerblue: "1e90ff",
	    firebrick: "b22222",
	    floralwhite: "fffaf0",
	    forestgreen: "228b22",
	    fuchsia: "f0f",
	    gainsboro: "dcdcdc",
	    ghostwhite: "f8f8ff",
	    gold: "ffd700",
	    goldenrod: "daa520",
	    gray: "808080",
	    green: "008000",
	    greenyellow: "adff2f",
	    grey: "808080",
	    honeydew: "f0fff0",
	    hotpink: "ff69b4",
	    indianred: "cd5c5c",
	    indigo: "4b0082",
	    ivory: "fffff0",
	    khaki: "f0e68c",
	    lavender: "e6e6fa",
	    lavenderblush: "fff0f5",
	    lawngreen: "7cfc00",
	    lemonchiffon: "fffacd",
	    lightblue: "add8e6",
	    lightcoral: "f08080",
	    lightcyan: "e0ffff",
	    lightgoldenrodyellow: "fafad2",
	    lightgray: "d3d3d3",
	    lightgreen: "90ee90",
	    lightgrey: "d3d3d3",
	    lightpink: "ffb6c1",
	    lightsalmon: "ffa07a",
	    lightseagreen: "20b2aa",
	    lightskyblue: "87cefa",
	    lightslategray: "789",
	    lightslategrey: "789",
	    lightsteelblue: "b0c4de",
	    lightyellow: "ffffe0",
	    lime: "0f0",
	    limegreen: "32cd32",
	    linen: "faf0e6",
	    magenta: "f0f",
	    maroon: "800000",
	    mediumaquamarine: "66cdaa",
	    mediumblue: "0000cd",
	    mediumorchid: "ba55d3",
	    mediumpurple: "9370db",
	    mediumseagreen: "3cb371",
	    mediumslateblue: "7b68ee",
	    mediumspringgreen: "00fa9a",
	    mediumturquoise: "48d1cc",
	    mediumvioletred: "c71585",
	    midnightblue: "191970",
	    mintcream: "f5fffa",
	    mistyrose: "ffe4e1",
	    moccasin: "ffe4b5",
	    navajowhite: "ffdead",
	    navy: "000080",
	    oldlace: "fdf5e6",
	    olive: "808000",
	    olivedrab: "6b8e23",
	    orange: "ffa500",
	    orangered: "ff4500",
	    orchid: "da70d6",
	    palegoldenrod: "eee8aa",
	    palegreen: "98fb98",
	    paleturquoise: "afeeee",
	    palevioletred: "db7093",
	    papayawhip: "ffefd5",
	    peachpuff: "ffdab9",
	    peru: "cd853f",
	    pink: "ffc0cb",
	    plum: "dda0dd",
	    powderblue: "b0e0e6",
	    purple: "800080",
	    rebeccapurple: "663399",
	    red: "f00",
	    rosybrown: "bc8f8f",
	    royalblue: "4169e1",
	    saddlebrown: "8b4513",
	    salmon: "fa8072",
	    sandybrown: "f4a460",
	    seagreen: "2e8b57",
	    seashell: "fff5ee",
	    sienna: "a0522d",
	    silver: "c0c0c0",
	    skyblue: "87ceeb",
	    slateblue: "6a5acd",
	    slategray: "708090",
	    slategrey: "708090",
	    snow: "fffafa",
	    springgreen: "00ff7f",
	    steelblue: "4682b4",
	    tan: "d2b48c",
	    teal: "008080",
	    thistle: "d8bfd8",
	    tomato: "ff6347",
	    turquoise: "40e0d0",
	    violet: "ee82ee",
	    wheat: "f5deb3",
	    white: "fff",
	    whitesmoke: "f5f5f5",
	    yellow: "ff0",
	    yellowgreen: "9acd32"
	};
	
	// Make it easy to access colors via `hexNames[hex]`
	var hexNames = tinycolor.hexNames = flip(names);
	
	
	// Utilities
	// ---------
	
	// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
	function flip(o) {
	    var flipped = { };
	    for (var i in o) {
	        if (o.hasOwnProperty(i)) {
	            flipped[o[i]] = i;
	        }
	    }
	    return flipped;
	}
	
	// Return a valid alpha value [0,1] with all invalid values being set to 1
	function boundAlpha(a) {
	    a = parseFloat(a);
	
	    if (isNaN(a) || a < 0 || a > 1) {
	        a = 1;
	    }
	
	    return a;
	}
	
	// Take input from [0, n] and return it as [0, 1]
	function bound01(n, max) {
	    if (isOnePointZero(n)) { n = "100%"; }
	
	    var processPercent = isPercentage(n);
	    n = mathMin(max, mathMax(0, parseFloat(n)));
	
	    // Automatically convert percentage into number
	    if (processPercent) {
	        n = parseInt(n * max, 10) / 100;
	    }
	
	    // Handle floating point rounding errors
	    if ((Math.abs(n - max) < 0.000001)) {
	        return 1;
	    }
	
	    // Convert into [0, 1] range if it isn't already
	    return (n % max) / parseFloat(max);
	}
	
	// Force a number between 0 and 1
	function clamp01(val) {
	    return mathMin(1, mathMax(0, val));
	}
	
	// Parse a base-16 hex value into a base-10 integer
	function parseIntFromHex(val) {
	    return parseInt(val, 16);
	}
	
	// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
	// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
	function isOnePointZero(n) {
	    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
	}
	
	// Check to see if string passed in is a percentage
	function isPercentage(n) {
	    return typeof n === "string" && n.indexOf('%') != -1;
	}
	
	// Force a hex value to have 2 characters
	function pad2(c) {
	    return c.length == 1 ? '0' + c : '' + c;
	}
	
	// Replace a decimal with it's percentage value
	function convertToPercentage(n) {
	    if (n <= 1) {
	        n = (n * 100) + "%";
	    }
	
	    return n;
	}
	
	// Converts a decimal to a hex value
	function convertDecimalToHex(d) {
	    return Math.round(parseFloat(d) * 255).toString(16);
	}
	// Converts a hex value to a decimal
	function convertHexToDecimal(h) {
	    return (parseIntFromHex(h) / 255);
	}
	
	var matchers = (function() {
	
	    // <http://www.w3.org/TR/css3-values/#integers>
	    var CSS_INTEGER = "[-\\+]?\\d+%?";
	
	    // <http://www.w3.org/TR/css3-values/#number-value>
	    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
	
	    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
	    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
	
	    // Actual matching.
	    // Parentheses and commas are optional, but not required.
	    // Whitespace can take the place of commas or opening paren
	    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
	    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
	
	    return {
	        CSS_UNIT: new RegExp(CSS_UNIT),
	        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
	        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
	        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
	        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
	        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
	        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
	        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
	        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
	        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
	        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
	    };
	})();
	
	// `isValidCSSUnit`
	// Take in a single string / number and check to see if it looks like a CSS unit
	// (see `matchers` above for definition).
	function isValidCSSUnit(color) {
	    return !!matchers.CSS_UNIT.exec(color);
	}
	
	// `stringInputToObject`
	// Permissive string parsing.  Take in a number of formats, and output an object
	// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
	function stringInputToObject(color) {
	
	    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
	    var named = false;
	    if (names[color]) {
	        color = names[color];
	        named = true;
	    }
	    else if (color == 'transparent') {
	        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
	    }
	
	    // Try to match string input using regular expressions.
	    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
	    // Just return an object and let the conversion functions handle that.
	    // This way the result will be the same whether the tinycolor is initialized with string or object.
	    var match;
	    if ((match = matchers.rgb.exec(color))) {
	        return { r: match[1], g: match[2], b: match[3] };
	    }
	    if ((match = matchers.rgba.exec(color))) {
	        return { r: match[1], g: match[2], b: match[3], a: match[4] };
	    }
	    if ((match = matchers.hsl.exec(color))) {
	        return { h: match[1], s: match[2], l: match[3] };
	    }
	    if ((match = matchers.hsla.exec(color))) {
	        return { h: match[1], s: match[2], l: match[3], a: match[4] };
	    }
	    if ((match = matchers.hsv.exec(color))) {
	        return { h: match[1], s: match[2], v: match[3] };
	    }
	    if ((match = matchers.hsva.exec(color))) {
	        return { h: match[1], s: match[2], v: match[3], a: match[4] };
	    }
	    if ((match = matchers.hex8.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1]),
	            g: parseIntFromHex(match[2]),
	            b: parseIntFromHex(match[3]),
	            a: convertHexToDecimal(match[4]),
	            format: named ? "name" : "hex8"
	        };
	    }
	    if ((match = matchers.hex6.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1]),
	            g: parseIntFromHex(match[2]),
	            b: parseIntFromHex(match[3]),
	            format: named ? "name" : "hex"
	        };
	    }
	    if ((match = matchers.hex4.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1] + '' + match[1]),
	            g: parseIntFromHex(match[2] + '' + match[2]),
	            b: parseIntFromHex(match[3] + '' + match[3]),
	            a: convertHexToDecimal(match[4] + '' + match[4]),
	            format: named ? "name" : "hex8"
	        };
	    }
	    if ((match = matchers.hex3.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1] + '' + match[1]),
	            g: parseIntFromHex(match[2] + '' + match[2]),
	            b: parseIntFromHex(match[3] + '' + match[3]),
	            format: named ? "name" : "hex"
	        };
	    }
	
	    return false;
	}
	
	function validateWCAG2Parms(parms) {
	    // return valid WCAG2 parms for isReadable.
	    // If input parms are invalid, return {"level":"AA", "size":"small"}
	    var level, size;
	    parms = parms || {"level":"AA", "size":"small"};
	    level = (parms.level || "AA").toUpperCase();
	    size = (parms.size || "small").toLowerCase();
	    if (level !== "AA" && level !== "AAA") {
	        level = "AA";
	    }
	    if (size !== "small" && size !== "large") {
	        size = "small";
	    }
	    return {"level":level, "size":size};
	}
	
	// Node: Export function
	if (typeof module !== "undefined" && module.exports) {
	    module.exports = tinycolor;
	}
	// AMD/requirejs: Define the module
	else if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {return tinycolor;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	// Browser: Expose to window
	else {
	    window.tinycolor = tinycolor;
	}
	
	})(Math);


/***/ },
/* 43 */
/***/ function(module, exports) {

	/**
	 * @license
	 * File: CanvasInput.js
	 *  CanvasInput v1.0.10
	 *  http://goldfirestudios.com/blog/108/CanvasInput-HTML5-Canvas-Text-Input
	 *
	 *  (c) 2013, James Simpson of GoldFire Studios
	 *  goldfirestudios.com
	 *
	 *  (c) 2013, Axios, Inc.
	 *  Modifications made by Axios, Inc.
	 *  axiosengineering.com
	 *
	 *  MIT License
	 */
	
	/* global module */
	/* global require */
	
	(function() {
	    // create a buffer that stores all inputs so that tabbing
	    // between them is made possible.
	    var inputs = [];
	
	    // initialize the Canvas Input
	    var CanvasInput = window.CanvasInput = function(o) {
	        var self = this;
	
	        o = o ? o : {};
	
	        // setup the defaults
	        self._canvas = o.canvas || null;
	        self._ctx = self._canvas ? self._canvas.getContext('2d') : null;
	        self._x = o.x || 0;
	        self._y = o.y || 0;
	        self._extraX = o.extraX || 0;
	        self._extraY = o.extraY || 0;
	        self._fontSize = o.fontSize || 14;
	        self._fontFamily = o.fontFamily || 'Arial';
	        self._fontColor = o.fontColor || '#000';
	        self._placeHolderColor = o.placeHolderColor || '#bfbebd';
	        self._fontWeight = o.fontWeight || 'normal';
	        self._fontStyle = o.fontStyle || 'normal';
	        self._readonly = o.readonly || false;
	        self._maxlength = o.maxlength || null;
	        self._width = o.width || 150;
	        self._height = o.height || self._fontSize;
	        self._padding = o.padding >= 0 ? o.padding : 5;
	        self._borderWidth = o.borderWidth >= 0 ? o.borderWidth : 1;
	        self._borderColor = o.borderColor || '#959595';
	        self._borderRadius = o.borderRadius >= 0 ? o.borderRadius : 3;
	        self._backgroundImage = o.backgroundImage || '';
	        self._boxShadow = o.boxShadow || '1px 1px 0px rgba(255, 255, 255, 1)';
	        self._innerShadow = o.innerShadow || '0px 0px 4px rgba(0, 0, 0, 0.4)';
	        self._selectionColor = o.selectionColor || 'rgba(179, 212, 253, 0.8)';
	        self._placeHolder = o.placeHolder || '';
	        self._value = o.value || self._placeHolder;
	        self._onsubmit = o.onsubmit || function() {};
	        self._onkeydown = o.onkeydown || function() {};
	        self._onkeyup = o.onkeyup || function() {};
	        self._onfocus = o.onfocus || function() {};
	        self._onblur = o.onblur || function() {};
	        self._cursor = false;
	        self._cursorPos = 0;
	        self._hasFocus = false;
	        self._selection = [0, 0];
	        self._wasOver = false;
	        self._renderOnReturn = (o.renderOnReturn !== undefined ? o.renderOnReturn : true);
	        self._disableBlur = o.disableBlur || false;
	        self._tabToClear = o.tabToClear || false;
	
	        // parse box shadow
	        self.boxShadow(self._boxShadow, true);
	
	        // calculate the full width and height with padding, borders and shadows
	        self._calcWH();
	
	        // setup the off-DOM canvas
	        self._renderCanvas = document.createElement('canvas');
	        self._renderCanvas.setAttribute('width', self.outerW);
	        self._renderCanvas.setAttribute('height', self.outerH);
	        self._renderCtx = self._renderCanvas.getContext('2d');
	
	        // setup another off-DOM canvas for inner-shadows
	        self._shadowCanvas = document.createElement('canvas');
	        self._shadowCanvas.setAttribute('width', self._width + self._padding * 2);
	        self._shadowCanvas.setAttribute('height', self._height + self._padding * 2);
	        self._shadowCtx = self._shadowCanvas.getContext('2d');
	
	        // setup the background color
	        if (typeof o.backgroundGradient !== 'undefined') {
	            self._backgroundColor = self._renderCtx.createLinearGradient(
	                0,
	                0,
	                0,
	                self.outerH
	            );
	            self._backgroundColor.addColorStop(0, o.backgroundGradient[0]);
	            self._backgroundColor.addColorStop(1, o.backgroundGradient[1]);
	        } else {
	            self._backgroundColor = o.backgroundColor || '#fff';
	        }
	
	        // setup main canvas events
	        if (self._canvas) {
	            self.mousemoveCanvasListener = function(e) {
	                e = e || window.event;
	                self.mousemove(e, self);
	            };
	            self._canvas.addEventListener('mousemove', self.mousemoveCanvasListener, false);
	
	            self.mousedownCanvasListener = function(e) {
	                e = e || window.event;
	                self.mousedown(e, self);
	            };
	            self._canvas.addEventListener('mousedown', self.mousedownCanvasListener, false);
	
	            self.mouseupCanvasListener = function(e) {
	                e = e || window.event;
	                self.mouseup(e, self);
	            };
	            self._canvas.addEventListener('mouseup', self.mouseupCanvasListener, false);
	        }
	
	        // setup a global mouseup to blur the input outside of the canvas
	        self.mouseupWindowListener = function(e) {
	            e = e || window.event;
	            if (self._hasFocus && !self._mouseDown) {
	                self.blur();
	            }
	        };
	        window.addEventListener('mouseup', self.mouseupWindowListener, true);
	
	        // setup the keydown listener
	        self.keydownWindowListener = function(e) {
	            e = e || window.event;
	            if (self._hasFocus) {
	                self.keydown(e, self);
	            }
	        };
	        window.addEventListener('keydown', self.keydownWindowListener, false);
	
	        // setup the keyup listener
	        self.keyupWindowListener = function(e) {
	            e = e || window.event;
	            if (self._hasFocus) {
	                self._onkeyup(e, self);
	            }
	        };
	        window.addEventListener('keyup', self.keyupWindowListener, false);
	
	        // setup the 'paste' listener
	        self.pasteWindowListener = function(e) {
	            e = e || window.event;
	            if (self._hasFocus) {
	                var text = e.clipboardData.getData('text/plain'),
	                    startText = self._value.substr(0, self._cursorPos),
	                    endText = self._value.substr(self._cursorPos);
	                self._value = startText + text + endText;
	                self._cursorPos += text.length;
	
	                self.render();
	            }
	        };
	        window.addEventListener('paste', self.pasteWindowListener, false);
	
	        // add this to the buffer
	        inputs.push(self);
	        self._inputsIndex = inputs.length - 1;
	
	        // draw the text box
	        self.render();
	    };
	
	    // setup the prototype
	    CanvasInput.prototype = {
	        /**
	         * Get/set the main canvas.
	         * @param  {Object} data Canvas reference.
	         * @return {Mixed}      CanvasInput or current canvas.
	         */
	        canvas: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._canvas = data;
	                self._ctx = self._canvas.getContext('2d');
	
	                return self.render();
	            } else {
	                return self._canvas;
	            }
	        },
	
	        /**
	         * Get/set the x-position.
	         * @param  {Number} data The pixel position along the x-coordinate.
	         * @return {Mixed}      CanvasInput or current x-value.
	         */
	        x: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._x = data;
	
	                return self.render();
	            } else {
	                return self._x;
	            }
	        },
	
	        /**
	         * Get/set the y-position.
	         * @param  {Number} data The pixel position along the y-coordinate.
	         * @return {Mixed}      CanvasInput or current y-value.
	         */
	        y: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._y = data;
	
	                return self.render();
	            } else {
	                return self._y;
	            }
	        },
	
	        /**
	         * Get/set the extra x-position (generally used when no canvas is specified).
	         * @param  {Number} data The pixel position along the x-coordinate.
	         * @return {Mixed}      CanvasInput or current x-value.
	         */
	        extraX: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._extraX = data;
	
	                return self.render();
	            } else {
	                return self._extraX;
	            }
	        },
	
	        /**
	         * Get/set the extra y-position (generally used when no canvas is specified).
	         * @param  {Number} data The pixel position along the y-coordinate.
	         * @return {Mixed}      CanvasInput or current y-value.
	         */
	        extraY: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._extraY = data;
	
	                return self.render();
	            } else {
	                return self._extraY;
	            }
	        },
	
	        /**
	         * Get/set the font size.
	         * @param  {Number} data Font size.
	         * @return {Mixed}      CanvasInput or current font size.
	         */
	        fontSize: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._fontSize = data;
	
	                return self.render();
	            } else {
	                return self._fontSize;
	            }
	        },
	
	        /**
	         * Get/set the font family.
	         * @param  {String} data Font family.
	         * @return {Mixed}      CanvasInput or current font family.
	         */
	        fontFamily: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._fontFamily = data;
	
	                return self.render();
	            } else {
	                return self._fontFamily;
	            }
	        },
	
	        /**
	         * Get/set the font color.
	         * @param  {String} data Font color.
	         * @return {Mixed}      CanvasInput or current font color.
	         */
	        fontColor: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._fontColor = data;
	
	                return self.render();
	            } else {
	                return self._fontColor;
	            }
	        },
	
	        /**
	         * Get/set the place holder font color.
	         * @param  {String} data Font color.
	         * @return {Mixed}      CanvasInput or current place holder font color.
	         */
	        placeHolderColor: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._placeHolderColor = data;
	
	                return self.render();
	            } else {
	                return self._placeHolderColor;
	            }
	        },
	
	        /**
	         * Get/set the font weight.
	         * @param  {String} data Font weight.
	         * @return {Mixed}      CanvasInput or current font weight.
	         */
	        fontWeight: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._fontWeight = data;
	
	                return self.render();
	            } else {
	                return self._fontWeight;
	            }
	        },
	
	        /**
	         * Get/set the font style.
	         * @param  {String} data Font style.
	         * @return {Mixed}      CanvasInput or current font style.
	         */
	        fontStyle: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._fontStyle = data;
	
	                return self.render();
	            } else {
	                return self._fontStyle;
	            }
	        },
	
	        /**
	         * Get/set the width of the text box.
	         * @param  {Number} data Width in pixels.
	         * @return {Mixed}      CanvasInput or current width.
	         */
	        width: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._width = data;
	                self._calcWH();
	                self._updateCanvasWH();
	
	                return self.render();
	            } else {
	                return self._width;
	            }
	        },
	
	        /**
	         * Get/set the height of the text box.
	         * @param  {Number} data Height in pixels.
	         * @return {Mixed}      CanvasInput or current height.
	         */
	        height: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._height = data;
	                self._calcWH();
	                self._updateCanvasWH();
	
	                return self.render();
	            } else {
	                return self._height;
	            }
	        },
	
	        /**
	         * Get/set the padding of the text box.
	         * @param  {Number} data Padding in pixels.
	         * @return {Mixed}      CanvasInput or current padding.
	         */
	        padding: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._padding = data;
	                self._calcWH();
	                self._updateCanvasWH();
	
	                return self.render();
	            } else {
	                return self._padding;
	            }
	        },
	
	        /**
	         * Get/set the border width.
	         * @param  {Number} data Border width.
	         * @return {Mixed}      CanvasInput or current border width.
	         */
	        borderWidth: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._borderWidth = data;
	                self._calcWH();
	                self._updateCanvasWH();
	
	                return self.render();
	            } else {
	                return self._borderWidth;
	            }
	        },
	
	        /**
	         * Get/set the border color.
	         * @param  {String} data Border color.
	         * @return {Mixed}      CanvasInput or current border color.
	         */
	        borderColor: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._borderColor = data;
	
	                return self.render();
	            } else {
	                return self._borderColor;
	            }
	        },
	
	        /**
	         * Get/set the border radius.
	         * @param  {Number} data Border radius.
	         * @return {Mixed}      CanvasInput or current border radius.
	         */
	        borderRadius: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._borderRadius = data;
	
	                return self.render();
	            } else {
	                return self._borderRadius;
	            }
	        },
	
	        /**
	         * Get/set the background color.
	         * @param  {Number} data Background color.
	         * @return {Mixed}      CanvasInput or current background color.
	         */
	        backgroundColor: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._backgroundColor = data;
	
	                return self.render();
	            } else {
	                return self._backgroundColor;
	            }
	        },
	
	        /**
	         * Get/set the background gradient.
	         * @param  {Number} data Background gradient.
	         * @return {Mixed}      CanvasInput or current background gradient.
	         */
	        backgroundGradient: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._backgroundColor = self._renderCtx.createLinearGradient(
	                    0,
	                    0,
	                    0,
	                    self.outerH
	                );
	                self._backgroundColor.addColorStop(0, data[0]);
	                self._backgroundColor.addColorStop(1, data[1]);
	
	                return self.render();
	            } else {
	                return self._backgroundColor;
	            }
	        },
	
	        /**
	         * Get/set the box shadow.
	         * @param  {String} data     Box shadow in CSS format (1px 1px 1px rgba(0, 0, 0.5)).
	         * @param  {Boolean} doReturn (optional) True to prevent a premature render.
	         * @return {Mixed}          CanvasInput or current box shadow.
	         */
	        boxShadow: function(data, doReturn) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                // parse box shadow
	                var boxShadow = data.split('px ');
	                self._boxShadow = {
	                    x: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[0], 10),
	                    y: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[1], 10),
	                    blur: self._boxShadow === 'none' ? 0 : parseInt(boxShadow[2], 10),
	                    color: self._boxShadow === 'none' ? '' : boxShadow[3]
	                };
	
	                // take into account the shadow and its direction
	                if (self._boxShadow.x < 0) {
	                    self.shadowL = Math.abs(self._boxShadow.x) + self._boxShadow.blur;
	                    self.shadowR = self._boxShadow.blur + self._boxShadow.x;
	                } else {
	                    self.shadowL = Math.abs(self._boxShadow.blur - self._boxShadow.x);
	                    self.shadowR = self._boxShadow.blur + self._boxShadow.x;
	                }
	                if (self._boxShadow.y < 0) {
	                    self.shadowT = Math.abs(self._boxShadow.y) + self._boxShadow.blur;
	                    self.shadowB = self._boxShadow.blur + self._boxShadow.y;
	                } else {
	                    self.shadowT = Math.abs(self._boxShadow.blur - self._boxShadow.y);
	                    self.shadowB = self._boxShadow.blur + self._boxShadow.y;
	                }
	
	                self.shadowW = self.shadowL + self.shadowR;
	                self.shadowH = self.shadowT + self.shadowB;
	
	                self._calcWH();
	
	                if (!doReturn) {
	                    self._updateCanvasWH();
	
	                    return self.render();
	                }
	            } else {
	                return self._boxShadow;
	            }
	        },
	
	        /**
	         * Get/set the inner shadow.
	         * @param  {String} data In the format of a CSS box shadow (1px 1px 1px rgba(0, 0, 0.5)).
	         * @return {Mixed}          CanvasInput or current inner shadow.
	         */
	        innerShadow: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._innerShadow = data;
	
	                return self.render();
	            } else {
	                return self._innerShadow;
	            }
	        },
	
	        /**
	         * Get/set the text selection color.
	         * @param  {String} data Color.
	         * @return {Mixed}      CanvasInput or current selection color.
	         */
	        selectionColor: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._selectionColor = data;
	
	                return self.render();
	            } else {
	                return self._selectionColor;
	            }
	        },
	
	        /**
	         * Get/set the place holder text.
	         * @param  {String} data Place holder text.
	         * @return {Mixed}      CanvasInput or current place holder text.
	         */
	        placeHolder: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._placeHolder = data;
	
	                return self.render();
	            } else {
	                return self._placeHolder;
	            }
	        },
	
	        /**
	         * Get/set the current text box value.
	         * @param  {String} data Text value.
	         * @return {Mixed}      CanvasInput or current text value.
	         */
	        value: function(data) {
	            var self = this;
	
	            if (typeof data !== 'undefined') {
	                self._value = data;
	
	                return self.focus();
	            } else {
	                return self._value;
	            }
	        },
	
	        /**
	         * Set or fire the onsubmit event.
	         * @param  {Function} fn Custom callback.
	         */
	        onsubmit: function(fn) {
	            var self = this;
	
	            if (typeof fn !== 'undefined') {
	                self._onsubmit = fn;
	
	                return self;
	            } else {
	                self._onsubmit();
	            }
	        },
	
	        /**
	         * Set or fire the onkeydown event.
	         * @param  {Function} fn Custom callback.
	         */
	        onkeydown: function(fn) {
	            var self = this;
	
	            if (typeof fn !== 'undefined') {
	                self._onkeydown = fn;
	
	                return self;
	            } else {
	                self._onkeydown();
	            }
	        },
	
	        /**
	         * Set or fire the onkeyup event.
	         * @param  {Function} fn Custom callback.
	         */
	        onkeyup: function(fn) {
	            var self = this;
	
	            if (typeof fn !== 'undefined') {
	                self._onkeyup = fn;
	
	                return self;
	            } else {
	                self._onkeyup();
	            }
	        },
	
	        /**
	         * Place focus on the CanvasInput box, placing the cursor
	         * either at the end of the text or where the user clicked.
	         * @param  {Number} pos (optional) The position to place the cursor.
	         * @return {CanvasInput}
	         */
	        focus: function(pos) {
	            var self = this,
	                input;
	
	            // if this is readonly, don't allow it to get focus
	            if (self._readonly) {
	                return;
	            }
	
	            // only fire the focus event when going from unfocussed
	            if (!self._hasFocus) {
	                self._onfocus(self);
	            }
	
	            // remove selection
	            if (!self._selectionUpdated) {
	                self._selection = [0, 0];
	            } else {
	                delete self._selectionUpdated;
	            }
	
	            // update the cursor position
	            self._cursorPos = (typeof pos === 'number') ? pos : self._clipText().length;
	
	            // clear the place holder
	            if (self._placeHolder === self._value) {
	                self._value = '';
	            }
	
	            self._hasFocus = true;
	            self._cursor = true;
	
	            // setup cursor interval
	            if (self._cursorInterval) {
	                clearInterval(self._cursorInterval);
	            }
	            self._cursorInterval = setInterval(function() {
	                self._cursor = !self._cursor;
	                self.render();
	            }, 500);
	
	            // check if this is Chrome for Android (there is a bug with returning incorrect character key codes)
	            var nav = navigator.userAgent.toLowerCase(),
	                isChromeMobile = (nav.indexOf('chrome') >= 0 && nav.indexOf('mobile') >= 0 && nav.indexOf('android') >= 0);
	
	            // add support for mobile
	            var isMobile = (typeof window.orientation !== 'undefined');
	            if (isMobile && !isChromeMobile && document && document.createElement && (input = document.createElement('input'))) {
	                input.type = 'text';
	                input.style.opacity = 0;
	                input.style.position = 'absolute';
	                input.style.left = (self._x + self._extraX + (self._canvas ? self._canvas.offsetLeft : 0)) + 'px';
	                input.style.top = (self._y + self._extraY + (self._canvas ? self._canvas.offsetTop : 0)) + 'px';
	                input.style.width = self._width;
	                input.style.height = 0;
	                document.body.appendChild(input);
	                input.focus();
	                input.addEventListener('blur', function() {
	                    self.blur(self);
	                }, false);
	            } else if (isMobile) {
	                self.value(prompt(self._placeHolder) || '');
	            }
	
	            return self.render();
	        },
	
	        /**
	         * Removes focus from the CanvasInput box.
	         * @param  {Object} _this Reference to this.
	         * @return {CanvasInput}
	         */
	        blur: function(_this) {
	            var self = _this || this;
	
	            if (!self._disableBlur) {
	                self._onblur(self);
	
	                if (self._cursorInterval) {
	                    clearInterval(self._cursorInterval);
	                }
	                self._hasFocus = false;
	                self._cursor = false;
	                self._selection = [0, 0];
	
	                // fill the place holder
	                if (self._value === '') {
	                    self._value = self._placeHolder;
	                }
	            }
	
	            return self.render();
	        },
	
	        /**
	         * Maintains continual focus on the CanvasInput by disabling blur.
	         * @param {Object} _this Reference to this.
	         */
	        disableBlur: function(_this) {
	            var self = _this || this;
	            self._disableBlur = true;
	        },
	
	        /**
	         * Allows the CanvasInput to blur or focus by re-enabling blur.
	         * @param {Object} _this Reference to this.
	         */
	        enableBlur: function(_this) {
	            var self = _this || this;
	            self._disableBlur = false;
	        },
	
	        /**
	         * Fired with the keydown event to draw the typed characters.
	         * @param  {Event}       e    The keydown event.
	         * @param  {CanvasInput} self
	         * @return {CanvasInput}
	         */
	        keydown: function(e, self) {
	            var keyCode = e.which,
	                isShift = e.shiftKey,
	                key = null,
	                startText, endText;
	
	            // make sure the correct text field is being updated
	            if (!self._hasFocus) {
	                return;
	            }
	
	            // fire custom user event
	            self._onkeydown(e, self);
	
	            // add support for Ctrl/Cmd+A selection
	            if (keyCode === 65 && (e.ctrlKey || e.metaKey)) {
	                self._selection = [0, self._value.length];
	                e.preventDefault();
	                return self.render();
	            }
	
	            // block keys that shouldn't be processed
	            if (keyCode === 17 || e.metaKey || e.ctrlKey) {
	                return self;
	            }
	
	            // prevent the default action
	            e.preventDefault();
	
	            if (keyCode === 8) { // backspace
	                if (!self._clearSelection()) {
	                    if (self._cursorPos > 0) {
	                        startText = self._value.substr(0, self._cursorPos - 1);
	                        endText = self._value.substr(self._cursorPos, self._value.length);
	                        self._value = startText + endText;
	                        self._cursorPos--;
	                    }
	                }
	            } else if (keyCode === 37) { // left arrow key
	                if (self._cursorPos > 0) {
	                    self._cursorPos--;
	                    self._cursor = true;
	                    self._selection = [0, 0];
	                }
	            } else if (keyCode === 39) { // right arrow key
	                if (self._cursorPos < self._value.length) {
	                    self._cursorPos++;
	                    self._cursor = true;
	                    self._selection = [0, 0];
	                }
	            } else if (keyCode === 13) { // enter key
	                self._onsubmit(e, self);
	            } else if (keyCode === 9) { // tab key
	                if (self._tabToClear) {
	                    self._value = "";
	                    self._cursorPos = 0;
	                } else {
	                    var next = (inputs[self._inputsIndex + 1]) ? self._inputsIndex + 1 : 0;
	                    if (next !== self._inputsIndex) {
	                        self.blur();
	                        setTimeout(function() {
	                            inputs[next].focus();
	                        }, 10);
	                    }
	                }
	            } else if (key = self._mapCodeToKey(isShift, keyCode)) {
	                self._clearSelection();
	
	                // enforce the max length
	                if (self._maxlength && self._maxlength <= self._value.length) {
	                    return;
	                }
	
	                startText = (self._value) ? self._value.substr(0, self._cursorPos) : '';
	                endText = (self._value) ? self._value.substr(self._cursorPos) : '';
	                self._value = startText + key + endText;
	                self._cursorPos++;
	            }
	
	            if ((keyCode == 13 && self._renderOnReturn) || keyCode !== 13) {
	                return self.render();
	            } else {
	                return function() {};
	            }
	        },
	
	        /**
	         * Fired with the click event on the canvas, and puts focus on/off
	         * based on where the user clicks.
	         * @param  {Event}       e    The click event.
	         * @param  {CanvasInput} self
	         * @return {CanvasInput}
	         */
	        click: function(e, self) {
	            var mouse = self._mousePos(e),
	                x = mouse.x,
	                y = mouse.y;
	
	            if (self._endSelection) {
	                delete self._endSelection;
	                delete self._selectionUpdated;
	                return;
	            }
	
	            if (self._canvas && self._overInput(x, y) || !self._canvas) {
	                if (self._mouseDown) {
	                    self._mouseDown = false;
	                    self.click(e, self);
	                    return self.focus(self._clickPos(x, y));
	                }
	            } else {
	                return self.blur();
	            }
	        },
	
	        /**
	         * Fired with the mousemove event to update the default cursor.
	         * @param  {Event}       e    The mousemove event.
	         * @param  {CanvasInput} self
	         * @return {CanvasInput}
	         */
	        mousemove: function(e, self) {
	            var mouse = self._mousePos(e),
	                x = mouse.x,
	                y = mouse.y,
	                isOver = self._overInput(x, y);
	
	            if (isOver && self._canvas) {
	                self._canvas.style.cursor = 'text';
	                self._wasOver = true;
	            } else if (self._wasOver && self._canvas) {
	                self._canvas.style.cursor = 'default';
	                self._wasOver = false;
	            }
	
	            if (self._hasFocus && self._selectionStart >= 0) {
	                var curPos = self._clickPos(x, y),
	                    start = Math.min(self._selectionStart, curPos),
	                    end = Math.max(self._selectionStart, curPos);
	
	                if (!isOver) {
	                    self._selectionUpdated = true;
	                    self._endSelection = true;
	                    delete self._selectionStart;
	                    self.render();
	                    return;
	                }
	
	                if (self._selection[0] !== start || self._selection[1] !== end) {
	                    self._selection = [start, end];
	                    self.render();
	                }
	            }
	        },
	
	        /**
	         * Fired with the mousedown event to start a selection drag.
	         * @param  {Event} e    The mousedown event.
	         * @param  {CanvasInput} self
	         */
	        mousedown: function(e, self) {
	            var mouse = self._mousePos(e),
	                x = mouse.x,
	                y = mouse.y,
	                isOver = self._overInput(x, y);
	
	            // setup the 'click' event
	            self._mouseDown = isOver;
	
	            // start the selection drag if inside the input
	            if (self._hasFocus && isOver) {
	                self._selectionStart = self._clickPos(x, y);
	            }
	        },
	
	        /**
	         * Fired with the mouseup event to end a selection drag.
	         * @param  {Event} e    The mouseup event.
	         * @param  {CanvasInput} self
	         */
	        mouseup: function(e, self) {
	            var mouse = self._mousePos(e),
	                x = mouse.x,
	                y = mouse.y;
	
	            // update selection if a drag has happened
	            var isSelection = self._clickPos(x, y) !== self._selectionStart;
	            if (self._hasFocus && self._selectionStart >= 0 && self._overInput(x, y) && isSelection) {
	                self._selectionUpdated = true;
	                delete self._selectionStart;
	                self.render();
	            } else {
	                delete self._selectionStart;
	            }
	
	            self.click(e, self);
	        },
	
	        /**
	         * Helper method to get the off-DOM canvas.
	         * @return {Object} Reference to the canvas.
	         */
	        renderCanvas: function() {
	            return this._renderCanvas;
	        },
	
	        /**
	         * Helper method to remove all event listeners, stop the blinking cursor and
	         * reset the cursor style.
	         */
	        cleanup: function() {
	            this._canvas.removeEventListener("mouseup", this.mouseupCanvasListener, false);
	            this._canvas.removeEventListener("mousedown", this.mousedownCanvasListener, false);
	            this._canvas.removeEventListener("mousemove", this.mousemoveCanvasListener, false);
	            window.removeEventListener("keydown", this.keydownWindowListener, false);
	            window.removeEventListener("keyup", this.keyupWindowListener, false);
	            window.removeEventListener("mouseup", this.mouseupWindowListener, true);
	            window.removeEventListener("paste", this.pasteWindowListener, false);
	            clearInterval(this._cursorInterval);
	
	            this._canvas.style.cursor = 'default';
	            for (var i = 0; i < inputs.length; i++) {
	                if (inputs[i] === this) {
	                    inputs.remove(i);
	                }
	            }
	        },
	
	        /**
	         * Clears and redraws the CanvasInput on an off-DOM canvas,
	         * and if a main canvas is provided, draws it all onto that.
	         * @return {CanvasInput}
	         */
	        render: function() {
	            var self = this,
	                ctx = self._renderCtx,
	                w = self.outerW,
	                h = self.outerH,
	                br = self._borderRadius,
	                bw = self._borderWidth,
	                sw = self.shadowW,
	                sh = self.shadowH;
	
	            // clear the canvas
	            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
	
	            // setup the box shadow
	            ctx.shadowOffsetX = self._boxShadow.x;
	            ctx.shadowOffsetY = self._boxShadow.y;
	            ctx.shadowBlur = self._boxShadow.blur;
	            ctx.shadowColor = self._boxShadow.color;
	
	            // draw the border
	            if (self._borderWidth > 0) {
	                ctx.fillStyle = self._borderColor;
	                self._roundedRect(ctx, self.shadowL, self.shadowT, w - sw, h - sh, br);
	                ctx.fill();
	
	                ctx.shadowOffsetX = 0;
	                ctx.shadowOffsetY = 0;
	                ctx.shadowBlur = 0;
	            }
	
	            // draw the text box background
	            self._drawTextBox(function() {
	                // make sure all shadows are reset
	                ctx.shadowOffsetX = 0;
	                ctx.shadowOffsetY = 0;
	                ctx.shadowBlur = 0;
	
	                // clip the text so that it fits within the box
	                var text = self._clipText();
	
	                // draw the selection
	                var paddingBorder = self._padding + self._borderWidth + self.shadowT;
	                if (self._selection[1] > 0) {
	                    var selectOffset = self._textWidth(text.substring(0, self._selection[0])),
	                        selectWidth = self._textWidth(text.substring(self._selection[0], self._selection[1]));
	
	                    ctx.fillStyle = self._selectionColor;
	                    ctx.fillRect(paddingBorder + selectOffset, paddingBorder, selectWidth, self._height);
	                }
	
	                // draw the cursor
	                ctx.fillStyle = (self._placeHolder === self._value && self._value !== '') ? self._placeHolderColor : self._fontColor;
	                if (self._cursor) {
	                    var cursorOffset = self._textWidth(text.substring(0, self._cursorPos));
	
	                    ctx.fillRect(paddingBorder + cursorOffset, paddingBorder, 1, self._height);
	                }
	
	                // draw the text
	                var textX = self._padding + self._borderWidth + self.shadowL,
	                    textY = Math.round(paddingBorder + self._height / 2);
	
	                ctx.font = self._fontStyle + ' ' + self._fontWeight + ' ' + self._fontSize + 'px ' + self._fontFamily;
	                ctx.textAlign = 'left';
	                ctx.textBaseline = 'middle';
	                ctx.fillText(text, textX, textY);
	
	                // parse inner shadow
	                var innerShadow = self._innerShadow.split('px '),
	                    isOffsetX = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[0], 10),
	                    isOffsetY = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[1], 10),
	                    isBlur = self._innerShadow === 'none' ? 0 : parseInt(innerShadow[2], 10),
	                    isColor = self._innerShadow === 'none' ? '' : innerShadow[3];
	
	                // draw the inner-shadow (damn you canvas, this should be easier than this...)
	                if (isBlur > 0) {
	                    var shadowCtx = self._shadowCtx,
	                        scw = shadowCtx.canvas.width,
	                        sch = shadowCtx.canvas.height;
	
	                    shadowCtx.clearRect(0, 0, scw, sch);
	                    shadowCtx.shadowBlur = isBlur;
	                    shadowCtx.shadowColor = isColor;
	
	                    // top shadow
	                    shadowCtx.shadowOffsetX = 0;
	                    shadowCtx.shadowOffsetY = isOffsetY;
	                    shadowCtx.fillRect(-1 * w, -100, 3 * w, 100);
	
	                    // right shadow
	                    shadowCtx.shadowOffsetX = isOffsetX;
	                    shadowCtx.shadowOffsetY = 0;
	                    shadowCtx.fillRect(scw, -1 * h, 100, 3 * h);
	
	                    // bottom shadow
	                    shadowCtx.shadowOffsetX = 0;
	                    shadowCtx.shadowOffsetY = isOffsetY;
	                    shadowCtx.fillRect(-1 * w, sch, 3 * w, 100);
	
	                    // left shadow
	                    shadowCtx.shadowOffsetX = isOffsetX;
	                    shadowCtx.shadowOffsetY = 0;
	                    shadowCtx.fillRect(-100, -1 * h, 100, 3 * h);
	
	                    // create a clipping mask on the main canvas
	                    self._roundedRect(ctx, bw + self.shadowL, bw + self.shadowT, w - bw * 2 - sw, h - bw * 2 - sh, br);
	                    ctx.clip();
	
	                    // draw the inner-shadow from the off-DOM canvas
	                    ctx.drawImage(self._shadowCanvas, 0, 0, scw, sch, bw + self.shadowL, bw + self.shadowT, scw, sch);
	                }
	
	                // draw to the visible canvas
	                if (self._ctx) {
	                    self._ctx.clearRect(self._x, self._y, ctx.canvas.width, ctx.canvas.height);
	                    self._ctx.drawImage(self._renderCanvas, self._x, self._y);
	                }
	
	                return self;
	
	            });
	        },
	
	        /**
	         * Draw the text box area with either an image or background color.
	         * @param  {Function} fn Callback.
	         */
	        _drawTextBox: function(fn) {
	            var self = this,
	                ctx = self._renderCtx,
	                w = self.outerW,
	                h = self.outerH,
	                br = self._borderRadius,
	                bw = self._borderWidth,
	                sw = self.shadowW,
	                sh = self.shadowH;
	
	            // only draw the background shape if no image is being used
	            if (self._backgroundImage === '') {
	                ctx.fillStyle = self._backgroundColor;
	                self._roundedRect(ctx, bw + self.shadowL, bw + self.shadowT, w - bw * 2 - sw, h - bw * 2 - sh, br);
	                ctx.fill();
	
	                fn();
	            } else {
	                var img = new Image();
	                img.src = self._backgroundImage;
	                img.onload = function() {
	                    ctx.drawImage(img, 0, 0, img.width, img.height, bw + self.shadowL, bw + self.shadowT, w, h);
	
	                    fn();
	                };
	            }
	        },
	
	        /**
	         * Deletes selected text in selection range and repositions cursor.
	         * @return {Boolean} true if text removed.
	         */
	        _clearSelection: function() {
	            var self = this;
	
	            if (self._selection[1] > 0) {
	                // clear the selected contents
	                var start = self._selection[0],
	                    end = self._selection[1];
	
	                self._value = self._value.substr(0, start) + self._value.substr(end);
	                self._cursorPos = start;
	                self._cursorPos = (self._cursorPos < 0) ? 0 : self._cursorPos;
	                self._selection = [0, 0];
	
	                return true;
	            }
	
	            return false;
	        },
	
	        /**
	         * Clip the text string to only return what fits in the visible text box.
	         * @param  {String} value The text to clip.
	         * @return {String} The clipped text.
	         */
	        _clipText: function(value) {
	            var self = this;
	            value = (typeof value === 'undefined') ? self._value : value;
	
	            var textWidth = self._textWidth(value),
	                fillPer = textWidth / (self._width - self._padding),
	                text = fillPer > 1 ? value.substr(-1 * Math.floor(value.length / fillPer)) : value;
	
	            return text + '';
	        },
	
	        /**
	         * Gets the pixel with of passed text.
	         * @param  {String} text The text to measure.
	         * @return {Number}      The measured width.
	         */
	        _textWidth: function(text) {
	            var self = this,
	                ctx = self._renderCtx;
	
	            ctx.font = self._fontStyle + ' ' + self._fontWeight + ' ' + self._fontSize + 'px ' + self._fontFamily;
	            ctx.textAlign = 'left';
	
	            return ctx.measureText(text).width;
	        },
	
	        /**
	         * Recalculate the outer with and height of the text box.
	         */
	        _calcWH: function() {
	            var self = this;
	
	            // calculate the full width and height with padding, borders and shadows
	            self.outerW = self._width + self._padding * 2 + self._borderWidth * 2 + self.shadowW;
	            self.outerH = self._height + self._padding * 2 + self._borderWidth * 2 + self.shadowH;
	        },
	
	        /**
	         * Update the width and height of the off-DOM canvas when attributes are changed.
	         */
	        _updateCanvasWH: function() {
	            var self = this,
	                oldW = self._renderCanvas.width,
	                oldH = self._renderCanvas.height;
	
	            // update off-DOM canvas
	            self._renderCanvas.setAttribute('width', self.outerW);
	            self._renderCanvas.setAttribute('height', self.outerH);
	            self._shadowCanvas.setAttribute('width', self._width + self._padding * 2);
	            self._shadowCanvas.setAttribute('height', self._height + self._padding * 2);
	
	            // clear the main canvas
	            if (self._ctx) {
	                self._ctx.clearRect(self._x, self._y, oldW, oldH);
	            }
	        },
	
	        /**
	         * Creates the path for a rectangle with rounded corners.
	         * Must call ctx.fill() after calling this to draw the rectangle.
	         * @param  {Object} ctx Canvas context.
	         * @param  {Number} x   x-coordinate to draw from.
	         * @param  {Number} y   y-coordinate to draw from.
	         * @param  {Number} w   Width of rectangle.
	         * @param  {Number} h   Height of rectangle.
	         * @param  {Number} r   Border radius.
	         */
	        _roundedRect: function(ctx, x, y, w, h, r) {
	            if (w < 2 * r) r = w / 2;
	            if (h < 2 * r) r = h / 2;
	
	            ctx.beginPath();
	
	            ctx.moveTo(x + r, y);
	            ctx.lineTo(x + w - r, y);
	            ctx.quadraticCurveTo(x + w, y, x + w, y + r);
	            ctx.lineTo(x + w, y + h - r);
	            ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);
	            ctx.lineTo(x + r, y + h);
	            ctx.quadraticCurveTo(x, y + h, x, y + h - r);
	            ctx.lineTo(x, y + r);
	            ctx.quadraticCurveTo(x, y, x + r, y);
	
	            ctx.closePath();
	        },
	
	        /**
	         * Checks if a coordinate point is over the input box.
	         * @param  {Number} x x-coordinate position.
	         * @param  {Number} y y-coordinate position.
	         * @return {Boolean}   True if it is over the input box.
	         */
	        _overInput: function(x, y) {
	            var self = this,
	                xLeft = x >= self._x + self._extraX,
	                xRight = x <= self._x + self._extraX + self._width + self._padding * 2,
	                yTop = y >= self._y + self._extraY,
	                yBottom = y <= self._y + self._extraY + self._height + self._padding * 2;
	
	            return xLeft && xRight && yTop && yBottom;
	        },
	
	        /**
	         * Use the mouse's x & y coordinates to determine
	         * the position clicked in the text.
	         * @param  {Number} x X-coordinate.
	         * @param  {Number} y Y-coordinate.
	         * @return {Number}   Cursor position.
	         */
	        _clickPos: function(x, y) {
	            var self = this,
	                value = self._value;
	
	            // don't count placeholder text in this
	            if (self._value === self._placeHolder) {
	                value = '';
	            }
	
	            // determine where the click was made along the string
	            var text = self._clipText(value),
	                totalW = 0,
	                pos = text.length;
	
	            if (x - (self._x + self._extraX) < self._textWidth(text)) {
	                // loop through each character to identify the position
	                for (var i = 0; i < text.length; i++) {
	                    totalW += self._textWidth(text[i]);
	                    if (totalW >= x - (self._x + self._extraX)) {
	                        pos = i;
	                        break;
	                    }
	                }
	            }
	
	            return pos;
	        },
	
	        /**
	         * Calculate the mouse position based on the event callback and the elements on the page.
	         * @param  {Event} e
	         * @return {Object}   x & y values
	         */
	        _mousePos: function(e) {
	            var elm = e.target,
	                style = document.defaultView.getComputedStyle(elm, undefined),
	                paddingLeft = parseInt(style['paddingLeft'], 10) || 0,
	                paddingTop = parseInt(style['paddingLeft'], 10) || 0,
	                borderLeft = parseInt(style['borderLeftWidth'], 10) || 0,
	                borderTop = parseInt(style['borderLeftWidth'], 10) || 0,
	                htmlTop = document.body.parentNode.offsetTop || 0,
	                htmlLeft = document.body.parentNode.offsetLeft || 0,
	                offsetX = 0,
	                offsetY = 0,
	                x, y;
	
	            // calculate the total offset
	            if (typeof elm.offsetParent !== 'unefined') {
	                do {
	                    offsetX += elm.offsetLeft;
	                    offsetY += elm.offsetTop;
	                } while ((elm = elm.offsetParent));
	            }
	
	            // take into account borders and padding
	            offsetX += paddingLeft + borderLeft + htmlLeft;
	            offsetY += paddingTop + borderTop + htmlTop;
	
	            return {
	                x: e.pageX - offsetX,
	                y: e.pageY - offsetY
	            };
	        },
	
	        /**
	         * Translate a keycode into the correct keyboard character.
	         * @param  {Boolean} isShift True if the shift key is being pressed.
	         * @param  {Number}  keyCode The character code.
	         * @return {String}          The translated character.
	         */
	        _mapCodeToKey: function(isShift, keyCode) {
	            var self = this,
	                blockedKeys = [8, 9, 13, 16, 17, 18, 20, 27, 91, 92],
	                key = '';
	
	            // block keys that we don't want to type
	            for (var i = 0; i < blockedKeys.length; i++) {
	                if (keyCode === blockedKeys[i]) {
	                    return;
	                }
	            }
	
	            // make sure we are getting the correct input
	            if (typeof isShift !== 'boolean' || typeof keyCode !== 'number') {
	                return;
	            }
	
	            var charMap = {
	                32: ' ',
	                48: ')',
	                49: '!',
	                50: '@',
	                51: '#',
	                52: '$',
	                53: '%',
	                54: '^',
	                55: '&',
	                56: '*',
	                57: '(',
	                59: ':',
	                107: '+',
	                173: '_', // firefox uses 173 instead of 189
	                189: '_',
	                186: ':',
	                187: '+',
	                188: '<',
	                190: '>',
	                191: '?',
	                192: '~',
	                219: '{',
	                220: '|',
	                221: '}',
	                222: '"'
	            };
	
	            // convert the code to a character
	            if (isShift) {
	                key = (keyCode >= 65 && keyCode <= 90) ? String.fromCharCode(keyCode) : charMap[keyCode];
	            } else {
	                if (keyCode >= 65 && keyCode <= 90) {
	                    key = String.fromCharCode(keyCode).toLowerCase();
	                } else {
	                    if (keyCode === 96) {
	                        key = '0';
	                    } else if (keyCode === 97) {
	                        key = '1';
	                    } else if (keyCode === 98) {
	                        key = '2';
	                    } else if (keyCode === 99) {
	                        key = '3';
	                    } else if (keyCode === 100) {
	                        key = '4';
	                    } else if (keyCode === 101) {
	                        key = '5';
	                    } else if (keyCode === 102) {
	                        key = '6';
	                    } else if (keyCode === 103) {
	                        key = '7';
	                    } else if (keyCode === 104) {
	                        key = '8';
	                    } else if (keyCode === 105) {
	                        key = '9';
	                    } else if (keyCode === 188) {
	                        key = ',';
	                    } else if (keyCode === 190) {
	                        key = '.';
	                    } else if (keyCode === 191) {
	                        key = '/';
	                    } else if (keyCode === 192) {
	                        key = '`';
	                    } else if (keyCode === 220) {
	                        key = '\\';
	                    } else if (keyCode === 187) {
	                        key = '=';
	                    } else if ((keyCode === 189)  || (keyCode === 173)) {
	                        // firefox maps the minus key to 173, rather
	                        // then trying to use browser detection we
	                        // simply accept 173 as well...which means that
	                        // for Chrome using the mute button would
	                        // cause minus sign to appear
	                        key = '-';
	                    } else if (keyCode === 222) {
	                        key = '\'';
	                    } else if (keyCode === 186) {
	                        key = ';';
	                    } else if (keyCode === 219) {
	                        key = '[';
	                    } else if (keyCode === 221) {
	                        key = ']';
	                    } else {
	                        key = String.fromCharCode(keyCode);
	                    }
	                }
	            }
	
	            return key;
	        }
	    };
	
	    module.exports = CanvasInput;
	})();


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license
	 * File: sigplot.layer1d.js
	 * Copyright (c) 2012-2014, Michael Ihde, All rights reserved.
	 * Copyright (c) 2012-2014, Axios Inc., All rights reserved.
	 *
	 * This file is part of SigPlot.
	 *
	 * SigPlot is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
	 * General Public License as published by the Free Software Foundation; either version 3.0 of the License, or
	 * (at your option) any later version. This library is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	 * PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the
	 * GNU Lesser General Public License along with SigPlot.
	 */
	
	/* global module */
	/* global require */
	
	(function() {
	
	    var m = __webpack_require__(39);
	    var mx = __webpack_require__(41);
	
	    /**
	     * @constructor
	     * @param plot
	     */
	
	    var Layer1D = function(plot) {
	        this.plot = plot;
	
	        this.xbuf = undefined; // raw (ArrayBuffer) of ABSC data
	        this.ybuf = undefined; // raw (ArrayBuffer) of ORD data
	
	        this.offset = 0.0;
	        this.xstart = 0.0;
	        this.xdelta = 0.0;
	        this.imin = 0;
	        this.xmin = 0.0;
	        this.xmax = 0.0;
	        this.name = "";
	        this.cx = false;
	        this.hcb = undefined; // index in Gx.HCB
	        // xbufn = xbuf.byteLength
	        // ybufn = ybuf.byteLength
	        this.size = 0;
	
	        this.display = true;
	        this.color = 0;
	        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting
	        this.thick = 1; // negative for dashed
	        this.symbol = 0;
	        this.radius = 3;
	
	        this.skip = 0; // number of elements between ord values
	        this.xsub = 0;
	        this.ysub = 0;
	        this.xdata = false; // true if X data is data from file
	        this.modified = false;
	        this.opacity = 1.0;
	        this.preferred_origin = 1;
	
	        this.pointbufsize = 0;
	        this.xptr = null;
	        this.yptr = null;
	        this.xpoint = null; // PointArray backed by memory in xptr
	        this.ypoint = null; // PointArray backed by memory in yptr
	
	        this.options = {};
	    };
	
	    Layer1D.prototype = {
	
	        /**
	         * Initializes the layer to display the provided data.
	         *
	         * @param hcb
	         *            {BlueHeader} an opened BlueHeader file
	         * @param lyrn
	         *          the index of the added layer
	         *
	         * @memberOf Layer1D
	         * @private
	         */
	        init: function(hcb, options) {
	            var Gx = this.plot._Gx;
	
	            this.hcb = hcb;
	            this.hcb.buf_type = "D";
	
	            this.offset = 0;
	            this.size = 0;
	            this.xbufn = 0;
	            this.ybufn = 0;
	
	            if (!this.hcb.pipe) {
	                if (hcb["class"] === 2) {
	                    m.force1000(hcb);
	                    this.size = hcb.subsize;
	                } else {
	                    this.size = hcb.size;
	                }
	            } else {
	                if (hcb["class"] === 2) {
	                    m.force1000(hcb);
	                    this.size = hcb.subsize;
	                }
	            }
	
	            if (options.framesize) {
	                this.size = options.framesize;
	            }
	
	            // pipe data requires a valid size on overlay, but
	            // other data can work without a valid size because
	            // the reload() function will correctly update the size
	            if (this.hcb.pipe && !this.size) {
	                throw "1D layer could not determine appropriate size for pipe, use framesize option";
	            }
	
	            if (hcb["class"] <= 2) {
	                this.xsub = -1;
	                this.ysub = 1;
	                this.cx = (hcb.format[0] === 'C');
	            } else {
	                // TODO
	            }
	
	            this.skip = 1;
	            if (this.cx) {
	                this.skip = 2;
	            }
	
	            this.xstart = hcb.xstart;
	            this.xdelta = hcb.xdelta;
	            var d = hcb.xstart + hcb.xdelta * (this.size - 1.0);
	            this.xmin = Math.min(hcb.xstart, d);
	            this.xmax = Math.max(hcb.xstart, d);
	
	            this.xlab = hcb.xunits;
	            this.ylab = hcb.yunits; // might be undefined
	
	            if (this.hcb.pipe) {
	                this.drawmode = "scrolling";
	                this.position = 0;
	                this.tle = options.tl;
	
	                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);
	                this.ybuf = new ArrayBuffer(this.ybufn);
	
	                var self = this;
	                m.addPipeWriteListener(this.hcb, function() {
	                    self._onpipewrite();
	                });
	            }
	        },
	
	        _onpipewrite: function() {
	            var ybuf = new m.PointArray(this.ybuf);
	
	            var tle = this.tle; // in scalars
	            if (tle === undefined) {
	                tle = Math.floor(m.pavail(this.hcb)) / this.hcb.spa;
	            } else if (m.pavail(this.hcb) < (tle * this.hcb.spa)) {
	                return;
	            }
	
	            var tl = tle * this.hcb.spa;
	
	            if (this.drawmode === "lefttoright") {
	                this.position = 0;
	                ybuf.set(ybuf.subarray(0, this.size - tl), tl);
	            } else if (this.drawmode === "righttoleft") {
	                this.position = this.size - tle;
	                ybuf.set(ybuf.subarray(tl), 0);
	            } else if (this.drawmode === "scrolling") {
	                // Nothing to do
	            } else {
	                throw "Invalid draw mode";
	            }
	
	            tle = Math.min(tle, this.size - this.position);
	            var ngot = m.grabx(this.hcb, ybuf, tle * this.hcb.spa, this.position * this.hcb.spa);
	            if (ngot === 0) {
	                return;
	            }
	
	            this.position = (this.position + tle) % this.size;
	
	            if (this.plot._Gx.autol !== 0) {
	                this.plot.rescale();
	            }
	        },
	
	        get_data: function(xmin, xmax) {
	            var Gx = this.plot._Gx;
	            var HCB = this.hcb;
	
	            var skip = this.skip;
	
	            var size;
	            if (HCB["class"] === 2) {
	                size = HCB.subsize;
	            } else {
	                size = HCB.size;
	            }
	
	            var imin = 0;
	            var imax = 0;
	            if (Gx.index) {
	                imin = Math.floor(xmin);
	                imax = Math.floor(xmax + 0.5);
	            } else if (HCB.xdelta >= 0.0) {
	                imin = Math.floor((xmin - HCB.xstart) / HCB.xdelta) - 1;
	                imax = Math.floor((xmax - HCB.xstart) / HCB.xdelta + 0.5);
	            } else {
	
	                imin = Math.floor((xmax - HCB.xstart) / HCB.xdelta) - 1;
	                imax = Math.floor((xmin - HCB.xstart) / HCB.xdelta + 0.5);
	            }
	            imin = Math.max(0.0, imin);
	            imax = Math.min(size, imax);
	
	            var npts = Math.max(0.0, Math.min(imax - imin + 1, Gx.bufmax));
	            if (HCB.xdelta < 0) {
	                imin = imax - npts + 1;
	            }
	
	            if ((imin >= this.imin) && (imin + npts <= this.imin + this.size) && (this.ybuf !== undefined)) {
	                // data already in buffers
	            } else if (this.modified) {
	                // modified data not yet saved off
	
	            } else if (HCB["class"] <= 2) {
	                // load new data
	                var start = this.offset + imin;
	                var skip = this.skip;
	                this.ybufn = npts * Math.max(skip * m.PointArray.BYTES_PER_ELEMENT,
	                    m.PointArray.BYTES_PER_ELEMENT);
	                if ((this.ybuf === undefined) || (this.ybuf.byteLength < this.ybufn)) {
	                    this.ybuf = new ArrayBuffer(this.ybufn);
	                }
	                var ybuf = new m.PointArray(this.ybuf);
	                var ngot = m.grab(HCB, ybuf, start, npts);
	                this.imin = imin;
	                this.xstart = HCB.xstart + (imin) * this.xdelta;
	                this.size = ngot;
	            } else {
	                // type 3000, 4000, 5000
	                // TODO yeah right
	            }
	
	        },
	
	        change_settings: function(settings) {
	            if (settings.index !== undefined) {
	                if (settings.index) {
	                    this.xstart = 1.0;
	                    this.xdelta = 1.0;
	                    this.xmin = 1.0;
	                    this.xmax = this.size;
	                } else {
	                    this.xstart = this.hcb.xstart + (this.imin) * this.xdelta;
	                    this.xdelta = this.hcb.xdelta;
	                    var d = this.hcb.xstart + this.hcb.xdelta * (this.size - 1.0);
	                    this.xmin = Math.min(this.hcb.xstart, d);
	                    this.xmax = Math.max(this.hcb.xstart, d);
	                }
	            }
	
	            if (settings.drawmode !== undefined) {
	                this.drawmode = settings.drawmode;
	                // Reset the buffer
	                this.position = 0;
	                this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);
	                this.ybuf = new ArrayBuffer(this.ybufn);
	            }
	        },
	
	        reload: function(data, hdrmod) {
	            if (this.hcb.pipe) {
	                throw "reload cannot be used with pipe, use push instead";
	            }
	            var axis_change = (this.hcb.dview.length !== data.length) || hdrmod;
	            if (hdrmod) {
	                for (var k in hdrmod) {
	                    this.hcb[k] = hdrmod[k];
	                    if (k === "xstart" || k === "xdelta") {
	                        axis_change = true;
	                    }
	                }
	            }
	            this.hcb.setData(data);
	
	            // Setting these causes refresh() to refetch 
	            this.imin = 0;
	            this.xstart = undefined;
	            this.size = 0;
	
	            var xmin = this.xmin;
	            var xmax = this.xmax;
	
	            if (axis_change) {
	                if (this.hcb["class"] === 2) {
	                    m.force1000(this.hcb);
	                }
	                var d = this.hcb.xstart + this.hcb.xdelta * (this.hcb.size - 1.0);
	                this.xmin = Math.min(this.hcb.xstart, d);
	                this.xmax = Math.max(this.hcb.xstart, d);
	                this.xdelta = this.hcb.xdelta;
	                this.xstart = this.hcb.xstart;
	                xmin = undefined;
	                xmax = undefined;
	            }
	
	            return {
	                xmin: xmin,
	                xmax: xmax
	            };
	        },
	
	        push: function(data, hdrmod, sync) {
	            if (hdrmod) {
	                for (var k in hdrmod) {
	                    this.hcb[k] = hdrmod[k];
	                    if (k === "type") {
	                        this.hcb["class"] = hdrmod[k] / 1000;
	                    }
	                }
	
	                if (hdrmod.subsize) {
	                    if (this.hcb["class"] === 2) {
	                        m.force1000(this.hcb);
	                        this.size = this.hcb.subsize;
	                        // Reset the buffer
	                        this.position = null;
	                        this.ybufn = this.size * Math.max(this.skip * m.PointArray.BYTES_PER_ELEMENT, m.PointArray.BYTES_PER_ELEMENT);
	                        this.ybuf = new ArrayBuffer(this.ybufn);
	                    }
	                }
	
	                var d = this.hcb.xstart + this.hcb.xdelta * (this.hcb.size - 1.0);
	                this.xmin = Math.min(this.hcb.xstart, d);
	                this.xmax = Math.max(this.hcb.xstart, d);
	                this.xdelta = this.hcb.xdelta;
	                this.xstart = this.hcb.xstart;
	            }
	
	            m.filad(this.hcb, data, sync);
	
	            return hdrmod ? true : false;
	
	        },
	
	        prep: function(xmin, xmax) {
	            var Gx = this.plot._Gx;
	            var Mx = this.plot._Mx;
	
	            var npts = Math.ceil(this.size);
	
	            var skip = this.skip;
	
	            if (npts === 0) {
	                return {
	                    num: 0,
	                    start: 0,
	                    end: 0
	                };
	            }
	
	            if (npts * m.PointArray.BYTES_PER_ELEMENT > this.pointbufsize) {
	                this.pointbufsize = npts * m.PointArray.BYTES_PER_ELEMENT;
	                this.xptr = new ArrayBuffer(this.pointbufsize);
	                this.yptr = new ArrayBuffer(this.pointbufsize);
	                this.xpoint = new m.PointArray(this.xptr);
	                this.ypoint = new m.PointArray(this.yptr);
	            }
	
	            var dbuf = new m.PointArray(this.ybuf);
	            var qmin = this.xmin;
	            var qmax = this.xmax;
	            var n1, n2;
	            var mxmn;
	            // xsub isn't really used yet, so it can largely be ignored
	            if ((Gx.cmode === 5) || (this.xsub > 0)) {
	                if (npts <= 0) {
	                    // This is a degenerate case when there are no points
	                    qmin = Gx.panxmin;
	                    qmax = Gx.panxmax;
	                } else if (Gx.cmode !== 5) {
	                    // Largely unused code since xsub isn't used
	                    this.xpoint = new m.PointArray(this.xbuf);
	                } else if (this.cx) {
	                    // This is the pre-dominate condition
	                    m.vmov(dbuf, skip, this.xpoint, 1, npts);
	                } else if (this.line !== 0) {
	                    // If we have been asked to plot Real vs. Imaginary
	                    // for real data and there is a line being drawn
	                    // we take the min x and max x and then plot it
	                    // later on against the first two ypoints...it's
	                    // not clear if this is correct or not, but since
	                    // it's a degenerate case it is tolerated
	                    mxmn = m.vmxmn(dbuf, npts);
	                    this.xpoint[0] = mxmn.smax;
	                    this.xpoint[1] = mxmn.smin;
	                    n1 = 0;
	                    n2 = 2;
	                    npts = 2;
	                } else {
	                    // Otherwise we just plot the y-values
	                    this.xpoint = dbuf;
	                }
	                if (npts > 0) {
	                    mxmn = m.vmxmn(this.xpoint, npts);
	                    qmax = mxmn.smax;
	                    qmin = mxmn.smin;
	                    n1 = 0;
	                    n2 = npts;
	                }
	            } else if (npts > 0) {
	                var xstart = this.xstart;
	                var xdelta = this.xdelta;
	                var d = npts;
	                if (Gx.index) {
	                    n1 = 0;
	                    n2 = npts - 1;
	                } else if (xdelta >= 0.0) {
	                    n1 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta))) - 1.0;
	                    n2 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) + 2.0)) - 1.0;
	                } else {
	                    n1 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) - 1.0)) - 1.0;
	                    n2 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta) + 2.0)) - 1.0;
	                }
	
	                npts = n2 - n1 + 1;
	                if (npts < 0) {
	                    m.log.debug("Nothing to plot");
	                    npts = 0;
	                }
	                dbuf = new m.PointArray(this.ybuf).subarray(n1 * skip);
	                xstart = xstart + xdelta * (n1);
	                for (var i = 0; i < npts; i++) {
	                    if (Gx.index) {
	                        this.xpoint[i] = this.imin + i + 1;
	                    } else {
	                        this.xpoint[i] = xstart + i * xdelta;
	                    }
	                }
	            }
	
	            if (Gx.panxmin > Gx.panxmax) {
	                Gx.panxmin = qmin;
	                Gx.panxmax = qmax;
	            } else {
	                Gx.panxmin = Math.min(Gx.panxmin, qmin);
	                Gx.panxmax = Math.max(Gx.panxmax, qmax);
	            }
	
	            if (npts <= 0) {
	                m.log.debug("Nothing to plot");
	                return {
	                    num: npts,
	                    start: n1,
	                    end: n2
	                };
	            }
	            if (this.cx) {
	                if (Gx.cmode === 1) {
	                    m.cvmag(dbuf, this.ypoint, npts);
	                } else if (Gx.cmode === 2) {
	                    if (Gx.plab === 25) {
	                        m.cvpha(dbuf, this.ypoint, npts);
	                        m.vsmul(this.ypoint, 1.0 / (2 * Math.PI), this.ypoint, npts);
	                    } else if (Gx.plab !== 24) {
	                        m.cvpha(dbuf, this.ypoint, npts);
	                    } else {
	                        m.cvphad(dbuf, this.ypoint, npts);
	                    }
	                } else if (Gx.cmode === 3) {
	                    m.vmov(dbuf, skip, this.ypoint, 1, npts);
	                } else if (Gx.cmode >= 6) {
	                    m.cvmag2(dbuf, this.ypoint, npts);
	                } else if (Gx.cmode >= 4) {
	                    m.vmov(dbuf.subarray(1), skip, this.ypoint, 1, npts);
	                }
	            } else {
	                if (Gx.cmode === 5) { // I vs. R
	                    m.vfill(this.ypoint, 0, npts);
	                } else if ((Gx.cmode === 1) || (Gx.cmode >= 6)) { // Mag, log
	                    for (var i = 0; i < npts; i++) {
	                        this.ypoint[i] = Math.abs(dbuf[i]);
	                    }
	                } else {
	                    for (var i = 0; i < npts; i++) {
	                        this.ypoint[i] = dbuf[i];
	                    }
	                }
	            }
	
	            if (Gx.cmode >= 6) {
	                m.vlog10(this.ypoint, Gx.dbmin, this.ypoint);
	                var dbscale = 10.0;
	                if (Gx.cmode === 7) {
	                    dbscale = 20.0;
	                }
	                if ((Gx.lyr.length > 0) && (Gx.lyr[0].cx)) {
	                    dbscale = dbscale / 2.0;
	                }
	                m.vsmul(this.ypoint, dbscale, this.ypoint);
	            }
	            mxmn = m.vmxmn(this.ypoint, npts);
	
	            qmax = mxmn.smax;
	            qmin = mxmn.smin;
	
	            var yran = qmax - qmin;
	            if (yran < 0.0) {
	                qmax = qmin;
	                qmin = qmax + yran;
	                yran = -yran;
	            }
	            if (yran <= 1.0e-20) {
	                qmin = qmin - 1.0;
	                qmax = qmax + 1.0;
	            } else {
	                qmin = qmin - 0.02 * yran;
	                qmax = qmax + 0.02 * yran;
	            }
	
	            if (Mx.level === 0) {
	                if (Gx.panymin > Gx.panymax) {
	                    Gx.panymin = qmin;
	                    Gx.panymax = qmax;
	                } else {
	                    Gx.panymin = Math.min(Gx.panymin, qmin);
	                    Gx.panymax = Math.max(Gx.panymax, qmax);
	                }
	
	                if (Gx.autol > 1) {
	                    var fac = 1.0 / (Math.max(Gx.autol, 1));
	                    Gx.panymin = Gx.panymin * fac + Mx.stk[0].ymin * (1.0 - fac);
	                    Gx.panymax = Gx.panymax * fac + Mx.stk[0].ymax * (1.0 - fac);
	                }
	            }
	
	            return {
	                num: npts,
	                start: n1,
	                end: n2
	            };
	        },
	
	        draw: function() {
	            var Mx = this.plot._Mx;
	            var Gx = this.plot._Gx;
	
	            var ic = this.color;
	            var symbol = this.symbol;
	            var rad = this.radius;
	            var mask = 0;
	            var line = 0;
	            var traceoptions = {};
	
	            traceoptions.fillStyle = Gx.fillStyle;
	            if (this.options) {
	                traceoptions.highlight = this.options.highlight;
	                traceoptions.noclip = this.options.noclip;
	            }
	
	            if (this.line === 0) {
	                line = 0;
	            } else {
	                line = 1;
	                if (this.thick > 0) {
	                    line = this.thick;
	                } else if (this.thick < 0) {
	                    line = Math.abs(this.thick);
	                    traceoptions.dashed = true;
	                }
	                if (this.line === 1) {
	                    traceoptions.vertsym = true;
	                }
	                if (this.line === 2) {
	                    traceoptions.horzsym = true;
	                }
	            }
	
	            var segment = (Gx.segment) && (Gx.cmode !== 5) && (this.xsub > 0) && (mask === 0);
	            var xdelta = this.xdelta;
	
	            var xmin;
	            var xmax;
	            if (this.xdata) {
	                xmin = this.xmin;
	                xmax = this.xmax;
	            } else {
	                xmin = Math.max(this.xmin, Mx.stk[Mx.level].xmin);
	                xmax = Math.min(this.xmax, Mx.stk[Mx.level].xmax);
	                if (xmin >= xmax) { // no data but do scaling
	                    Gx.panxmin = Math.min(Gx.panxmin, this.xmin);
	                    Gx.panxmax = Math.max(Gx.panxmax, this.xmax);
	                }
	            }
	
	            if (!Gx.all) {
	                var xran = (Gx.bufmax - 1.0) * xdelta;
	                if (xran >= -0.0) {
	                    xmax = Math.min(xmax, xmin + xran);
	                } else {
	                    xmin = Math.max(xmin, xmax + xran);
	                }
	            }
	
	            if ((line === 0) && (symbol === 0)) {
	                // Nothing to draw
	                return;
	            }
	            while (xmin < xmax) {
	                //if (Gx.all) {
	                // TODO allow interrupt of all by mouse clicks
	                //}
	
	                if (!this.hcb.pipe) {
	                    // get_data fills in the layer xbuf/ybuf with data
	                    this.get_data(xmin, xmax);
	                }
	
	                // sigplot_prep fills in this.xptr and this.yptr (both m.PointArray)
	                // with the data to be plotted
	
	                var pts = this.prep(xmin, xmax);
	                if (pts.num > 0) {
	                    if (segment) {
	                        // TODO
	                    } else {
	                        mx.trace(Mx,
	                            ic,
	                            new m.PointArray(this.xptr),
	                            new m.PointArray(this.yptr),
	                            pts.num,
	                            pts.start,
	                            1,
	                            line,
	                            symbol,
	                            rad,
	                            traceoptions);
	                    }
	                }
	
	                if (Gx.all) {
	                    if (this.size === 0) {
	                        xmin = xmax;
	                    } else {
	                        if (Gx.index) {
	                            xmin = xmin + pts.num;
	                        } else {
	                            if (xdelta >= 0) {
	                                xmin = xmin + (this.size * xdelta);
	                            } else {
	                                xmax = xmax + (this.size * xdelta);
	                            }
	                        }
	                    }
	                } else {
	                    xmin = xmax;
	                }
	            }
	
	            if ((this.position) && (this.drawmode === "scrolling")) {
	                var pnt = mx.real_to_pixel(Mx, this.position * this.xdelta, 0);
	                if ((pnt.x > Mx.l) && (pnt.x < Mx.r)) {
	                    mx.draw_line(Mx, "white", pnt.x, Mx.t, pnt.x, Mx.b);
	                }
	            }
	        },
	
	        /**
	         * Add a highlight to a specific layer.
	         *
	         * @param {Number}
	         *            n the layer to add the highlight to
	         * @param highlight
	         *            the highlight to add
	         * @param {Number}
	         *            highlight.xmin the minimum x value to start the highlight
	         *            at
	         * @param {Number}
	         *            highlight.xmax the maximum x value to start the highlight
	         *            at
	         * @param {String}
	         *            hightlight.color the color to use for the highlight
	         *
	         * @param {String}
	         *            hightlight.id the id for the highlight
	         */
	        add_highlight: function(highlight) {
	            if (!this.options.highlight) {
	                this.options.highlight = [];
	            }
	
	            if (highlight instanceof Array) {
	                this.options.highlight.push.apply(
	                    this.options.highlight, highlight);
	            } else {
	                this.options.highlight.push(highlight);
	            }
	            this.plot.refresh();
	        },
	
	        /**
	         * Remove a highlight from the layer.
	         *
	         * @param {String} {Object}
	         *             the id of the highlight to remove
	         *             or the highlight object itself
	         */
	        remove_highlight: function(highlight) {
	            if (this.options.highlight) {
	                var i = this.options.highlight.length;
	                while (i--) {
	                    if ((highlight === this.options.highlight[i]) || (highlight === this.options.highlight[i].id)) {
	                        this.options.highlight.splice(i, 1);
	                    }
	                }
	                this.plot.refresh();
	            }
	        },
	
	        get_highlights: function() {
	            if (this.options.highlight) {
	                return this.options.highlight.slice(0);
	            } else {
	                return [];
	            }
	        },
	
	        /**
	         * Clear all highlights from the layer.
	         */
	        clear_highlights: function() {
	            if (this.options.highlight) {
	                this.options.highlight = undefined;
	                this.plot.refresh();
	            }
	        }
	    };
	
	    /**
	     * Color positions for the various layers
	     *
	     * These magic numbers were conjured up by a wizard somewhere.
	     *
	     * @memberOf sigplot
	     * @private
	     */
	    var mixc = [0, 53, 27, 80, 13, 40, 67, 93, 7, 60, 33, 87, 20, 47, 73, 100];
	
	    /**
	     * Factory to overlay the given file onto the given plot.
	     *
	     * @private
	     */
	    Layer1D.overlay = function(plot, hcb, layerOptions) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        if (hcb["class"] === 2) {
	            m.force1000(hcb);
	        }
	        hcb.buf_type = "D";
	
	        // If the input is type 2000, each row becomes
	        // it's own layer
	        var n1 = 0;
	        var n2 = 1;
	        if ((hcb["class"] === 2) && (hcb.size > 0)) {
	            var num_rows = hcb.size / hcb.subsize;
	            n2 = Math.min(num_rows, 16 - Gx.lyr.length);
	        }
	
	        // Extract the layer_name before enter the loop
	        var layer_name_override = layerOptions["name"];
	        delete layerOptions["name"];
	
	        for (var i = n1; i < n2; i++) {
	            // This is logic from within sigplot.for LOAD_FILES
	            var layer = new Layer1D(plot);
	            layer.init(hcb, layerOptions);
	
	            // Provide a default color for the layer
	            var n = (Gx.lyr.length) % mixc.length;
	            layer.color = mx.getcolor(Mx, m.Mc.colormap[3].colors, mixc[n]);
	
	            // Provide the layer name
	            if (hcb["class"] === 2) {
	                if (layer_name_override !== undefined) {
	                    // If you get an array of names, pull the name
	                    // from this list...if we run out of names before
	                    // we run out of layers fall back
	                    if (Array.isArray(layer_name_override)) {
	                        layer.name = layer_name_override[i];
	                    } else {
	                        layer.name = layer_name_override;
	                        layer.name = layer.name + "." + mx.pad((i + 1).toString(), 3, "0");
	                    }
	                }
	                // If a name hasn't been assigned yet
	                if (!layer.name) {
	                    if (hcb.file_name) {
	                        layer.name = m.trim_name(hcb.file_name);
	                    } else {
	                        layer.name = "layer_" + Gx.lyr.length;
	                    }
	                    layer.name = layer.name + "." + mx.pad((i + 1).toString(), 3, "0");
	                }
	                layer.offset = i * hcb.subsize;
	            } else {
	                if (layer_name_override !== undefined) {
	                    layer.name = layer_name_override;
	                } else if (hcb.file_name) {
	                    layer.name = m.trim_name(hcb.file_name);
	                } else {
	                    layer.name = "layer_" + Gx.lyr.length;
	                }
	                layer.offset = 0;
	            }
	
	            for (var layerOption in layerOptions) {
	                if (layer[layerOption] !== undefined) {
	                    layer[layerOption] = layerOptions[layerOption];
	                }
	            }
	            plot.add_layer(layer);
	        }
	    };
	
	    module.exports = Layer1D;
	
	}());


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license
	 * File: sigplot.layer2d.js
	 * Copyright (c) 2012-2014, Michael Ihde, All rights reserved.
	 * Copyright (c) 2012-2014, Axios Inc., All rights reserved.
	 *
	 * This file is part of SigPlot.
	 *
	 * SigPlot is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
	 * General Public License as published by the Free Software Foundation; either version 3.0 of the License, or
	 * (at your option) any later version. This library is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	 * PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the
	 * GNU Lesser General Public License along with SigPlot.
	 */
	
	/* global module */
	/* global require */
	
	(function() {
	
	    var m = __webpack_require__(39);
	    var mx = __webpack_require__(41);
	
	    /**
	     * @constructor
	     * @param plot
	     */
	    var Layer2D = function(plot) {
	        this.plot = plot;
	
	        this.offset = 0.0;
	        this.xstart = 0.0;
	        this.xdelta = 0.0;
	        this.ystart = 0.0;
	        this.ydelta = 0.0;
	        this.imin = 0;
	        this.xmin = 0.0;
	        this.xmax = 0.0;
	        this.name = "";
	        this.cx = false;
	        this.hcb = undefined; // index in Gx.HCB
	
	        this.display = true;
	        this.color = 0;
	        this.line = 3; // 0=none, 1-vertical, 2-horizontal, 3-connecting
	        this.thick = 1; // negative for dashed
	        this.symbol = 0;
	        this.radius = 3;
	
	        this.skip = 0; // number of elements between ord values
	        this.xsub = 0;
	        this.ysub = 0;
	        this.xdata = false; // true if X data is data from file
	        this.modified = false;
	
	        this.preferred_origin = 4;
	        this.opacity = 1;
	
	        // LPB is kinda odd right now, since we read the entire file into memory anyways...
	        // given that often we are loading from an HREF so there is no downside to this...
	        // however, we keep LPB around (for now) so that the scaling behaves identical to
	        // the original code
	        this.lpb = undefined;
	
	        this.yc = 1; // y-compression factor...not yet used 
	
	        this.options = {};
	    };
	
	    Layer2D.prototype = {
	
	        /**
	         * Initializes the layer to display the provided data.
	         *
	         * @param hcb
	         *            {BlueHeader} an opened BlueHeader file
	         * @param lyrn
	         *          the index of the added layer
	         *
	         * @memberOf Layer2D
	         * @private
	         */
	        init: function(hcb) {
	            var Gx = this.plot._Gx;
	            var Mx = this.plot._Mx;
	
	            this.hcb = hcb;
	            this.hcb.buf_type = "D";
	
	            if (this.hcb.pipe) {
	                var self = this;
	                this.position = 0;
	                this.frame = 0;
	
	
	                this.lps = this.hcb.lps || Math.ceil(Math.max(1, (Mx.b - Mx.t)));
	                m.addPipeWriteListener(this.hcb, function() {
	                    self._onpipewrite();
	                });
	            } else {
	                this.lps = this.hcb.lps || Math.ceil(hcb.size);
	            }
	
	            this.offset = 0;
	            this.xbufn = 0;
	            this.ybufn = 0;
	            this.drawmode = "scrolling"; // "falling", "rising"
	
	
	            if (hcb["class"] <= 2) {
	                this.xsub = -1;
	                this.ysub = 1;
	                this.cx = (hcb.format[0] === 'C');
	            } else {
	                // TODO
	            }
	
	            this.skip = 1;
	            if (this.cx) {
	                this.skip = 2;
	            }
	
	            if (Gx.index) {
	                this.xstart = 1.0;
	                this.xdelta = 1.0;
	                this.xmin = 1.0;
	                this.xmax = hcb.subsize;
	                this.ystart = 1.0;
	                this.ydelta = 1.0;
	                this.ymin = 1.0;
	                this.ymax = this.size;
	            } else {
	                this.xstart = hcb.xstart;
	                this.xdelta = hcb.xdelta;
	                var d = hcb.xstart + hcb.xdelta * (hcb.subsize - 1.0);
	                this.xmin = Math.min(hcb.xstart, d);
	                this.xmax = Math.max(hcb.xstart, d);
	                this.ystart = hcb.ystart;
	                this.ydelta = hcb.ydelta;
	                var d = hcb.ystart + hcb.ydelta * (this.lps - 1.0);
	                this.ymin = Math.min(hcb.ystart, d);
	                this.ymax = Math.max(hcb.ystart, d);
	            }
	
	            // TODO make this work with force 1000 applied
	            this.xframe = this.hcb.subsize;
	            this.yframe = (this.lps * this.hcb.subsize) / this.xframe;
	
	            if (this.lpb === 0) {
	                this.lpb = this.yframe;
	            }
	            if (!this.lpb || (this.lpb <= 0)) {
	                this.lpb = 16;
	            }
	            this.lpb = Math.max(1, this.lpb / this.yc) * this.yc;
	
	            this.xlab = hcb.xunits;
	            this.ylab = hcb.yunits; // might be undefined
	
	        },
	
	        _onpipewrite: function() {
	            var Gx = this.plot._Gx;
	            var Mx = this.plot._Mx;
	
	            if (m.pavail(this.hcb) < (this.hcb.subsize * this.hcb.spa)) {
	                return;
	            }
	
	            // if we aren't scrolling, than update the values
	            // so that the axis scrolls with the data.  The below
	            // code might seem counter intuitive, but given the
	            // the behavior of other rendering code it is configured
	            // to have ymin always be the history (i.e prior to ystart)
	            // and ystart is always the relative "now" which is equivalent
	            // to ymax
	            if (this.drawmode !== "scrolling") {
	                this.hcb.ystart += this.hcb.ydelta;
	                this.ystart = this.hcb.ystart;
	                this.ymin = this.hcb.ystart - (this.hcb.ydelta * (this.lps));
	                this.ymax = this.hcb.ystart;
	            }
	
	            if (this.drawmode === "falling") {
	                this.position = 0;
	                if (this.img) {
	                    mx.shift_image_rows(Mx, this.img, 1);
	                }
	            } else if (this.drawmode === "rising") {
	                this.position = this.lps - 1;
	                if (this.img) {
	                    mx.shift_image_rows(Mx, this.img, -1);
	                }
	            } else if (this.drawmode === "scrolling") {
	                if (this.position >= this.lps) { // if lps got resized make sure we don't go out of bounds
	                    this.position = 0;
	                }
	            } else {
	                throw "Invalid draw mode";
	            }
	
	            if (!this.buf) {
	                // the layer isn't setup correctly yet
	                return;
	            }
	
	            // grab one row worth of data
	            var ngot = m.grabx(this.hcb, this.buf, this.hcb.subsize * this.hcb.spa);
	            if (ngot === 0) { // shouldn't happen because of the pavail check
	                m.log.error("Internal error");
	                return;
	            }
	
	            var zpoint = new m.PointArray(this.hcb.subsize);
	            if (this.cx) {
	                if (Gx.cmode === 1) {
	                    m.cvmag(this.buf, zpoint, zpoint.length);
	                } else if (Gx.cmode === 2) {
	                    if (Gx.plab === 25) {
	                        m.cvpha(this.buf, zpoint, zpoint.length);
	                        m.vsmul(zpoint, 1.0 / (2 * Math.PI), zpoint, zpoint.length);
	                    } else if (Gx.plab !== 24) {
	                        m.cvpha(this.buf, zpoint, zpoint.length);
	                    } else {
	                        m.cvphad(this.buf, zpoint, zpoint.length);
	                    }
	                } else if (Gx.cmode === 3) {
	                    m.vmov(this.buf, this.skip, zpoint, 1, zpoint.length);
	                } else if (Gx.cmode === 4) {
	                    m.vmov(this.buf.subarray(1), this.skip, zpoint, 1, zpoint.length);
	                } else if (Gx.cmode === 5) { // IR
	                    m.vfill(zpoint, 0, zpoint.length);
	                } else if (Gx.cmode === 6) { // 10log
	                    m.cvmag2logscale(this.buf, Gx.dbmin, 10.0, zpoint);
	                } else if (Gx.cmode === 7) { // 20log
	                    m.cvmag2logscale(this.buf, Gx.dbmin, 20.0, zpoint);
	                }
	            } else {
	                if (Gx.cmode === 1) { // mag
	                    m.vabs(this.buf, zpoint);
	                } else if (Gx.cmode === 2) { // phase
	                    m.vfill(zpoint, 0, zpoint.length);
	                } else if (Gx.cmode === 3) { // real
	                    m.vmov(this.buf, this.skip, zpoint, 1, zpoint.length);
	                } else if (Gx.cmode === 4) { // imag
	                    m.vfill(zpoint, 0, zpoint.length);
	                } else if (Gx.cmode === 5) { // IR
	                    m.vfill(zpoint, 0, zpoint.length);
	                } else if (Gx.cmode === 6) { // 10log
	                    m.vlogscale(this.buf, Gx.dbmin, 10.0, zpoint);
	                } else if (Gx.cmode === 7) { // 20log
	                    m.vlogscale(this.buf, Gx.dbmin, 20.0, zpoint);
	                }
	            }
	
	            var min = zpoint[0];
	            var max = zpoint[0];
	            for (var i = 0; i < zpoint.length; i++) {
	                if (zpoint[i] < min) {
	                    min = zpoint[i];
	                }
	                if (zpoint[i] > max) {
	                    max = zpoint[i];
	                }
	            }
	
	            var zmin, zmax;
	            if (Gx.autol === 1) {
	                zmin = min;
	                zmax = max;
	            } else if (Gx.autol > 1) {
	                var fac = 1.0 / (Math.max(Gx.autol, 1));
	                zmin = Gx.zmin * fac + min * (1.0 - fac);
	                zmax = Gx.zmax * fac + max * (1.0 - fac);
	            } else if (Gx.autol < 0) {
	                // -1 means autol wasn't set so default to
	                // 5 like the original XRTRASTER; however,
	                // don't actually override Gx.autol since
	                // other layers may behave differently
	                var fac = 1.0 / (Math.max(5, 1));
	                zmin = Gx.zmin * fac + min * (1.0 - fac);
	                zmax = Gx.zmax * fac + max * (1.0 - fac);
	            }
	
	            if (((Gx.autoz & 1) !== 0)) {
	                Gx.zmin = zmin;
	            }
	            if (((Gx.autoz & 2) !== 0)) {
	                Gx.zmax = zmax;
	            }
	
	            if (this.img) {
	                mx.update_image_row(Mx, this.img, zpoint, this.position, Gx.zmin, Gx.zmax, Gx.xcompression);
	            }
	            this.frame += 1;
	            if (this.drawmode === "scrolling") {
	                this.position = (this.position + 1) % this.lps;
	            }
	
	            if (Mx.level === 0) {
	                Gx.panymin = this.ymin;
	                Gx.panymax = this.ymax;
	                Mx.stk[0].ymin = this.ymin;
	                Mx.stk[0].ymax = this.ymax;
	            }
	        },
	
	        get_data: function() {
	            var HCB = this.hcb;
	
	            if (!this.buf) {
	                if (this.hcb.pipe) {
	                    // For pipes, we allocate buf and zbuf to only hold one line of
	                    // data
	                    this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);
	                    this.zbuf = new m.PointArray(this.hcb.subsize);
	                } else {
	                    // Otherwise, we allocate for the entire image
	                    this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);
	                    this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);
	                }
	            }
	
	            if (!this.hcb.pipe) {
	                m.grab(HCB, this.buf, 0, HCB.subsize);
	            }
	        },
	
	        /**
	         * Provisional API
	         *
	         * @private
	         * @param x
	         * @param y
	         */
	        get_z: function(x, y) {
	            var ix = Math.floor(x / this.hcb.xdelta);
	            var iy = Math.floor(y / this.hcb.ydelta);
	            var zidx = (iy * this.hcb.subsize) + ix;
	            return this.zbuf[zidx];
	        },
	
	        change_settings: function(settings) {
	            var Gx = this.plot._Gx;
	
	            if (settings.cmode !== undefined) {
	                this.img = undefined;
	                if (((Gx.autoz & 1) !== 0)) {
	                    Gx.zmin = undefined;
	                }
	                if (((Gx.autoz & 2) !== 0)) {
	                    Gx.zmax = undefined;
	                }
	            }
	            if ((settings.zmin !== undefined) ||
	                (settings.zmax !== undefined) ||
	                (settings.autoz !== undefined)) {
	                this.img = undefined;
	            }
	            if (settings.cmap !== undefined) {
	                this.img = undefined;
	            }
	            if (settings.drawmode !== undefined) {
	                this.drawmode = settings.drawmode;
	                // Reset the buffer
	                this.position = 0;
	                this.frame = 0;
	                if (this.hcb.pipe) {
	                    this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);
	                    this.zbuf = new m.PointArray(this.hcb.subsize);
	                } else {
	                    this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);
	                    this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);
	                }
	                this.img = undefined;
	
	                if (this.drawmode === "falling") {
	                    this.plot._Mx.origin = 1;
	                    this.preferred_origin = 1;
	                } else {
	                    this.plot._Mx.origin = 4;
	                    this.preferred_origin = 4;
	                }
	            }
	            if (settings.opacity !== undefined) {
	                this.opacity = settings.opacity;
	            }
	        },
	
	        push: function(data, hdrmod, sync) {
	            var rescale = false;
	            var timestamp = null;
	            if (hdrmod) {
	                // handle timestamps in a unique manner
	                if (hdrmod.timestamp) {
	                    timestamp = hdrmod.timestamp;
	                    delete hdrmod["timestamp"];
	                }
	
	                // If the subsize changes, we need to invalidate the buffer
	                if ((hdrmod.subsize) && (hdrmod.subsize !== this.hcb.subsize)) {
	                    this.hcb.subsize = hdrmod.subsize;
	                    if (this.hcb.pipe) {
	                        this.buf = this.hcb.createArray(null, 0, this.hcb.subsize * this.hcb.spa);
	                        this.zbuf = new m.PointArray(this.hcb.subsize);
	                    } else {
	                        this.buf = this.hcb.createArray(null, 0, this.lps * this.hcb.subsize * this.hcb.spa);
	                        this.zbuf = new m.PointArray(this.lps * this.hcb.subsize);
	                    }
	                    rescale = true;
	                }
	
	                for (var k in hdrmod) {
	                    if (this.hcb[k] !== hdrmod[k]) {
	                        this.hcb[k] = hdrmod[k];
	                        if (k === "type") {
	                            this.hcb["class"] = hdrmod[k] / 1000;
	                        }
	                        rescale = true;
	                    }
	                }
	
	                if (hdrmod.lps) {
	                    this.lps = hdrmod.lps;
	                }
	
	                if (rescale) {
	                    var d = this.hcb.xstart + this.hcb.xdelta * (this.hcb.subsize - 1.0);
	                    this.xmin = Math.min(this.hcb.xstart, d);
	                    this.xmax = Math.max(this.hcb.xstart, d);
	                    this.xdelta = this.hcb.xdelta;
	                    this.xstart = this.hcb.xstart;
	
	                    this.ystart = this.hcb.ystart;
	                    this.ydelta = this.hcb.ydelta;
	                    var d = this.hcb.ystart + this.hcb.ydelta * (this.lps - 1.0);
	                    this.ymin = Math.min(this.hcb.ystart, d);
	                    this.ymax = Math.max(this.hcb.ystart, d);
	                }
	
	            }
	
	            if ((this.hcb.yunits === 1) || (this.hcb.yunits === 4)) {
	                if ((!this.hcb["timecode"]) && (timestamp)) {
	                    // if we don't have a timecode set, we can use
	                    // the timestamp and reset ystart
	                    this.hcb.timecode = m.j1970toj1950(timestamp);
	                    this.hcb.ystart = 0;
	                    rescale = true;
	                } else {
	                    // otherwise, we need to look at timecode, ystart,
	                    // and ydelta to see if the timestamp indicates
	                    // any data drops...and then zero-fill accordingly
	                    // TODO
	                }
	            }
	
	            m.filad(this.hcb, data, sync);
	
	            return rescale;
	
	        },
	
	        prep: function(xmin, xmax) {
	            var Gx = this.plot._Gx;
	            var Mx = this.plot._Mx;
	
	            var npts = this.lps;
	
	            var skip = this.skip;
	
	            var qmin = this.xmin;
	            var qmax = this.xmax;
	            var n1, n2;
	
	            var xsize = this.hcb.subsize;
	            if (Gx.xcompression > 0) {
	                xsize = Math.ceil(Mx.r - Mx.l);
	            }
	
	            this.get_data(xmin, xmax);
	
	            if (!this.hcb.pipe) {
	                // if we aren't a pipe we do a full prep
	
	                if ((Gx.cmode === 5) || (this.xsub > 0)) {
	                    // TODO - is this mode supported in rasters?
	                } else if (npts > 0) {
	                    var xstart = this.xstart;
	                    var xdelta = this.xdelta;
	                    var d = npts;
	                    if (Gx.index) {
	                        n1 = 0;
	                        n2 = npts - 1;
	                    } else if (xdelta >= 0.0) {
	                        n1 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta))) - 1.0;
	                        n2 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) + 2.0)) - 1.0;
	                    } else {
	                        n1 = Math.max(1.0, Math.min(d, Math.round((xmax - xstart) / xdelta) - 1.0)) - 1.0;
	                        n2 = Math.max(1.0, Math.min(d, Math.round((xmin - xstart) / xdelta) + 2.0)) - 1.0;
	                    }
	
	                    npts = n2 - n1 + 1;
	                    if (npts < 0) {
	                        m.log.debug("Nothing to plot");
	                        npts = 0;
	                    }
	                }
	
	                if (Gx.panxmin > Gx.panxmax) {
	                    Gx.panxmin = qmin;
	                    Gx.panxmax = qmax;
	                } else {
	                    Gx.panxmin = Math.min(Gx.panxmin, qmin);
	                    Gx.panxmax = Math.max(Gx.panxmax, qmax);
	                }
	
	                if (npts <= 0) {
	                    m.log.debug("Nothing to plot");
	                    return;
	                }
	
	                if ((Gx.cmode === 5) || (this.ysub > 0)) {
	                    // TODO - is this mode supported in rasters?
	                } else if (npts > 0) {
	                    var ystart = this.ystart;
	                    var ydelta = this.ydelta;
	                    var d = npts;
	                    if (Gx.index) {
	                        n1 = 0;
	                        n2 = npts - 1;
	                    } else if (ydelta >= 0.0) {
	                        n1 = Math.max(1.0, Math.min(d, Math.round((xmin - ystart) / ydelta))) - 1.0;
	                        n2 = Math.max(1.0, Math.min(d, Math.round((xmax - ystart) / ydelta) + 2.0)) - 1.0;
	                    } else {
	                        n1 = Math.max(1.0, Math.min(d, Math.round((xmax - ystart) / ydelta) - 1.0)) - 1.0;
	                        n2 = Math.max(1.0, Math.min(d, Math.round((xmin - ystart) / ydelta) + 2.0)) - 1.0;
	                    }
	
	                    npts = n2 - n1 + 1;
	                    if (npts < 0) {
	                        m.log.debug("Nothing to plot");
	                        npts = 0;
	                    }
	                }
	
	                if (Gx.panymin > Gx.panxmax) {
	                    Gx.panymin = this.ymin;
	                    Gx.panymax = this.ymax;
	                } else {
	                    Gx.panymin = Math.min(Gx.panymin, this.ymin);
	                    Gx.panymax = Math.max(Gx.panymax, this.ymax);
	                }
	
	                if (this.cx) {
	                    if (Gx.cmode === 1) { // mag
	                        m.cvmag(this.buf, this.zbuf, this.zbuf.length);
	                    } else if (Gx.cmode === 2) { // phase
	                        if (Gx.plab === 25) {
	                            m.cvpha(this.buf, this.zbuf, this.zbuf.length);
	                            m.vsmul(this.zbuf, 1.0 / (2 * Math.PI), this.zbuf, this.zbuf.length);
	                        } else if (Gx.plab !== 24) {
	                            m.cvpha(this.buf, this.zbuf, this.zbuf.length);
	                        } else {
	                            m.cvphad(this.buf, this.zbuf, this.zbuf.length);
	                        }
	                    } else if (Gx.cmode === 3) { // real
	                        m.vmov(this.buf, this.skip, this.zbuf, 1, this.zbuf.length);
	                    } else if (Gx.cmode === 4) { // imag
	                        m.vmov(this.buf.subarray(1), this.skip, this.zbuf, 1, this.zbuf.length);
	                    } else if (Gx.cmode === 5) { // IR - what does this mean for a raster?
	                        m.vfill(this.zbuf, 0, this.zbuf.length);
	                    } else if (Gx.cmode === 6) { // 10log
	                        m.cvmag2logscale(this.buf, Gx.dbmin, 10.0, this.zbuf);
	                    } else if (Gx.cmode === 7) { // 20log
	                        m.cvmag2logscale(this.buf, Gx.dbmin, 20.0, this.zbuf);
	                    }
	                } else {
	                    if (Gx.cmode === 1) { // mag
	                        m.vabs(this.buf, this.zbuf);
	                    } else if (Gx.cmode === 2) { // phase
	                        m.vfill(this.zbuf, 0, this.zbuf.length);
	                    } else if (Gx.cmode === 3) { // real
	                        m.vmov(this.buf, this.skip, this.zbuf, 1, this.zbuf.length);
	                    } else if (Gx.cmode === 4) { // imag
	                        m.vfill(this.zbuf, 0, this.zbuf.length);
	                    } else if (Gx.cmode === 5) { // IR
	                        m.vfill(this.zbuf, 0, this.zbuf.length);
	                    } else if (Gx.cmode === 6) { // 10log
	                        m.vlogscale(this.buf, Gx.dbmin, 10.0, this.zbuf);
	                    } else if (Gx.cmode === 7) { // 20log
	                        m.vlogscale(this.buf, Gx.dbmin, 20.0, this.zbuf);
	                    }
	                }
	
	                // find z-min/z-max
	                // this is equivalent to setting XRASTER /LPB=0
	                var zpoint = this.zbuf;
	
	                var min = 0;
	                var max = 0;
	
	                if ((Gx.autol <= 0) || this.hcb.pipe) {
	                    // If autol is not used or the layer is rendering
	                    // a pipe, then use the basic z-scaling method
	                    if (zpoint.length > 0) {
	                        min = zpoint[0];
	                        max = zpoint[0];
	                        for (var i = 0; i < zpoint.length; i++) {
	                            if ((i / this.xframe) >= this.lpb) {
	                                break;
	                            }
	                            if (zpoint[i] < min) {
	                                min = zpoint[i];
	                            }
	                            if (zpoint[i] > max) {
	                                max = zpoint[i];
	                            }
	                        }
	                    }
	
	                    if (((Gx.autoz & 1) !== 0)) {
	                        if (Gx.zmin !== undefined) {
	                            Gx.zmin = Math.min(Gx.zmin, min);
	                        } else {
	                            Gx.zmin = min;
	                        }
	                    }
	                    if (((Gx.autoz & 2) !== 0)) {
	                        if (Gx.zmax !== undefined) {
	                            Gx.zmax = Math.min(Gx.zmax, max);
	                        } else {
	                            Gx.zmax = max;
	                        }
	                    }
	
	                    this.img = mx.create_image(Mx,
	                        this.zbuf,
	                        this.hcb.subsize,
	                        xsize,
	                        this.lps,
	                        Gx.zmin,
	                        Gx.zmax,
	                        Gx.xcompression);
	                } else {
	                    // otherwise autol > 1
	                    var nny = this.hcb.size;
	                    var fac = 1.0 / (Math.max(Gx.autol, 1));
	
	                    // If the image isn't yet created, make one now
	                    if (!this.img) {
	                        this.img = mx.create_image(Mx,
	                            this.zbuf,
	                            this.hcb.subsize,
	                            xsize,
	                            this.lps,
	                            Gx.zmin,
	                            Gx.zmax);
	                    }
	
	                    Gx.zmin = 0;
	                    Gx.zmax = 0;
	                    if (zpoint.length > 0) {
	                        for (var yy = 0; yy < nny; yy++) {
	                            var noff = yy * this.xframe;
	                            var min = zpoint[noff];
	                            var max = zpoint[noff];
	                            for (var i = 0; i < this.xframe; i++) {
	                                min = Math.min(zpoint[noff + i], min);
	                                max = Math.max(zpoint[noff + i], max);
	                            }
	
	                            // Auto-scale this raster line
	                            if ((Gx.autoz !== 2) && (min !== undefined)) {
	                                Gx.zmin = (min * fac) + (Gx.zmin * (1.0 - fac));
	                            }
	                            if ((Gx.autoz !== 1) && (max !== undefined)) {
	                                Gx.zmax = (max * fac) + (Gx.zmax * (1.0 - fac));
	                            }
	
	                            // Render the row
	                            mx.update_image_row(Mx,
	                                this.img,
	                                zpoint.subarray(noff, noff + this.xframe),
	                                yy,
	                                Gx.zmin,
	                                Gx.zmax);
	
	                        }
	                    }
	                }
	            } else {
	                // Setup image for pipe-mode
	                if (Gx.panxmin > Gx.panxmax) {
	                    Gx.panxmin = qmin;
	                    Gx.panxmax = qmax;
	                } else {
	                    Gx.panxmin = Math.min(Gx.panxmin, qmin);
	                    Gx.panxmax = Math.max(Gx.panxmax, qmax);
	                }
	                if (Gx.panymin > Gx.panxmax) {
	                    Gx.panymin = this.ymin;
	                    Gx.panymax = this.ymax;
	                } else {
	                    Gx.panymin = Math.min(Gx.panymin, this.ymin);
	                    Gx.panymax = Math.max(Gx.panymax, this.ymax);
	                }
	
	                if (!this.img) {
	                    if (Gx.zmin === undefined) {
	                        Gx.zmin = 0;
	                    }
	                    if (Gx.zmax === undefined) {
	                        Gx.zmax = 0;
	                    }
	                    this.img = mx.create_image(Mx,
	                        null,
	                        this.hcb.subsize,
	                        xsize,
	                        this.lps,
	                        Gx.zmin,
	                        Gx.zmax,
	                        Gx.xcompression);
	                }
	            }
	
	            this.img.cmode = Gx.cmode;
	            this.img.cmap = Gx.cmap;
	            this.img.origin = Mx.origin;
	
	            // Make the parts without data transparent 
	            if (this.hcb.pipe && (this.frame < this.lps)) {
	                var imgd = new Uint32Array(this.img);
	                if (this.drawmode === "rising") {
	                    for (var i = 0; i < imgd.length - (this.frame * xsize); i++) {
	                        imgd[i] = 0;
	                    }
	                } else {
	                    for (var i = this.frame * xsize; i < imgd.length; i++) {
	                        imgd[i] = 0;
	                    }
	                }
	            }
	
	            return npts;
	        },
	
	        draw: function() {
	            var Mx = this.plot._Mx;
	            var Gx = this.plot._Gx;
	            var HCB = this.hcb;
	
	            if (this.hcb.pipe) {
	                var lps = this.hcb.lps || Math.ceil(Math.max(1, (Mx.b - Mx.t)));
	                if ((lps !== this.lps) && this.buf) {
	                    this.lps = lps;
	                    if (this.position >= this.lps) { // if lps got resized make sure we don't go out of bounds
	                        this.position = 0;
	                    }
	                    var d = HCB.ystart + HCB.ydelta * (this.lps - 1.0);
	                    this.ymin = Math.min(HCB.ystart, d);
	                    this.ymax = Math.max(HCB.ystart, d);
	                    // reset the image since we now have more lines to render
	                    // TODO - can we preserve the image data rather than resetting?
	                    this.img = null;
	                    this.plot.rescale();
	                }
	            }
	
	            var xmin = Math.max(this.xmin, Mx.stk[Mx.level].xmin);
	            var xmax = Math.min(this.xmax, Mx.stk[Mx.level].xmax);
	            if (xmin >= xmax) { // no data but do scaling
	                Gx.panxmin = Math.min(Gx.panxmin, this.xmin);
	                Gx.panxmax = Math.max(Gx.panxmax, this.xmax);
	                return;
	            }
	            var ymin = Math.max(this.ymin, Mx.stk[Mx.level].ymin);
	            var ymax = Math.min(this.ymax, Mx.stk[Mx.level].ymax);
	
	            var w = Math.abs(xmax - xmin) + 1;
	            var h = Math.abs(ymax - ymin) + 1;
	
	            w = Math.floor(w / HCB.xdelta);
	            h = Math.floor(h / HCB.ydelta);
	
	            w = Math.min(w, HCB.subsize);
	            h = Math.min(h, HCB.size);
	
	            var ul = mx.real_to_pixel(Mx, xmin, ymin);
	            var lr = mx.real_to_pixel(Mx, xmax, ymax);
	
	            var iw = lr.x - ul.x;
	            var ih = lr.y - ul.y;
	
	            var rx = iw / w;
	            var ry = ih / h;
	
	            Gx.xe = Math.max(1, Math.round(rx));
	            Gx.ye = Math.max(1, Math.round(ry));
	
	            // we might need to prep in certian situations
	            if ((!this.img) || (!this.buf) || (Gx.cmode !== this.img.cmode) || (Gx.cmap !== this.img.cmap) || (Mx.origin !== this.img.origin)) {
	                this.prep(xmin, xmax);
	            }
	
	            // if there is an image, render it
	            if (this.img) {
	                mx.draw_image(Mx, this.img, this.xmin, this.ymin, this.xmax, this.ymax, this.opacity, Gx.rasterSmoothing);
	            }
	
	            // render the scrolling pipe line
	            if (this.position !== null && this.drawmode === "scrolling") {
	                var pnt = mx.real_to_pixel(Mx, 0, this.position * this.ydelta);
	                if ((pnt.y > Mx.t) && (pnt.y < Mx.b)) {
	                    mx.draw_line(Mx, "white", Mx.l, pnt.y, Mx.r, pnt.y);
	                }
	            }
	        }
	    };
	
	    /**
	     * Factory to overlay the given file onto the given plot.
	     *
	     * @private
	     */
	    Layer2D.overlay = function(plot, hcb, layerOptions) {
	        var Gx = plot._Gx;
	        var Mx = plot._Mx;
	
	        hcb.buf_type = "D";
	
	        var layer = new Layer2D(plot);
	        layer.init(hcb);
	
	        if (hcb.file_name) {
	            layer.name = m.trim_name(hcb.file_name);
	        } else {
	            layer.name = "layer_" + Gx.lyr.length;
	        }
	
	        layer.change_settings(layerOptions);
	
	        plot.add_layer(layer);
	    };
	
	    module.exports = Layer2D;
	
	}());


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _sigplot = __webpack_require__(35);
	
	var _layer = __webpack_require__(47);
	
	var _layer2 = _interopRequireDefault(_layer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ArrayLayer = function (_Layer) {
	  _inherits(ArrayLayer, _Layer);
	
	  function ArrayLayer() {
	    _classCallCheck(this, ArrayLayer);
	
	    return _possibleConstructorReturn(this, (ArrayLayer.__proto__ || Object.getPrototypeOf(ArrayLayer)).apply(this, arguments));
	  }
	
	  _createClass(ArrayLayer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.layer = this.plot.overlay_array(this.props.data, this.props.options);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.data !== this.props.data) {
	        this.plot.reload(this.layer, nextProps.data);
	      }
	    }
	  }]);
	
	  return ArrayLayer;
	}(_layer2.default);
	
	exports.default = ArrayLayer;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _sigplot = __webpack_require__(35);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Abstract base class for all Layers
	 */
	var Layer = function (_Component) {
	  _inherits(Layer, _Component);
	
	  function Layer() {
	    _classCallCheck(this, Layer);
	
	    return _possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).apply(this, arguments));
	  }
	
	  _createClass(Layer, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.plot.remove_layer(this.layer);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return false;
	    }
	  }, {
	    key: 'plot',
	    get: function get() {
	      return this.context.plot;
	    }
	  }]);
	
	  return Layer;
	}(_react.Component);
	
	exports.default = Layer;
	
	
	Layer.contextTypes = {
	  plot: _react.PropTypes.instanceOf(_sigplot.Plot)
	};
	
	Layer.propTypes = {
	  data: _react.PropTypes.arrayOf(_react.PropTypes.number),
	  options: _react.PropTypes.object
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _sigplot = __webpack_require__(35);
	
	var _layer = __webpack_require__(47);
	
	var _layer2 = _interopRequireDefault(_layer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var PipeLayer = function (_Layer) {
	  _inherits(PipeLayer, _Layer);
	
	  function PipeLayer() {
	    _classCallCheck(this, PipeLayer);
	
	    return _possibleConstructorReturn(this, (PipeLayer.__proto__ || Object.getPrototypeOf(PipeLayer)).apply(this, arguments));
	  }
	
	  _createClass(PipeLayer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.layer = this.plot.overlay_pipe(this.props.options);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.data && nextProps.data !== this.props.data) {
	        this.plot.push(this.layer, nextProps.data);
	      }
	    }
	  }]);
	
	  return PipeLayer;
	}(_layer2.default);
	
	exports.default = PipeLayer;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(50);


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactDefaultInjection = __webpack_require__(55);
	var ReactMount = __webpack_require__(183);
	var ReactReconciler = __webpack_require__(76);
	var ReactUpdates = __webpack_require__(73);
	var ReactVersion = __webpack_require__(188);
	
	var findDOMNode = __webpack_require__(189);
	var getHostComponentFromComposite = __webpack_require__(190);
	var renderSubtreeIntoContainer = __webpack_require__(191);
	var warning = __webpack_require__(12);
	
	ReactDefaultInjection.inject();
	
	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(65);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(79);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(192);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(193);
	  var ReactDOMInvalidARIAHook = __webpack_require__(194);
	
	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}
	
	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var DOMProperty = __webpack_require__(53);
	var ReactDOMComponentFlags = __webpack_require__(54);
	
	var invariant = __webpack_require__(9);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}
	
	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  if (inst._hostNode) {
	    return inst._hostNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }
	
	  return inst._hostNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var invariant = __webpack_require__(9);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 54 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = __webpack_require__(56);
	var BeforeInputEventPlugin = __webpack_require__(57);
	var ChangeEventPlugin = __webpack_require__(72);
	var DefaultEventPluginOrder = __webpack_require__(89);
	var EnterLeaveEventPlugin = __webpack_require__(90);
	var HTMLDOMPropertyConfig = __webpack_require__(95);
	var ReactComponentBrowserEnvironment = __webpack_require__(96);
	var ReactDOMComponent = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactDOMEmptyComponent = __webpack_require__(154);
	var ReactDOMTreeTraversal = __webpack_require__(155);
	var ReactDOMTextComponent = __webpack_require__(156);
	var ReactDefaultBatchingStrategy = __webpack_require__(157);
	var ReactEventListener = __webpack_require__(158);
	var ReactInjection = __webpack_require__(161);
	var ReactReconcileTransaction = __webpack_require__(162);
	var SVGDOMPropertyConfig = __webpack_require__(170);
	var SelectEventPlugin = __webpack_require__(171);
	var SimpleEventPlugin = __webpack_require__(172);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}
	
	module.exports = {
	  inject: inject
	};

/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};
	
	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(58);
	var ExecutionEnvironment = __webpack_require__(65);
	var FallbackCompositionState = __webpack_require__(66);
	var SyntheticCompositionEvent = __webpack_require__(69);
	var SyntheticInputEvent = __webpack_require__(71);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(59);
	var EventPluginUtils = __webpack_require__(61);
	
	var accumulateInto = __webpack_require__(63);
	var forEachAccumulated = __webpack_require__(64);
	var warning = __webpack_require__(12);
	
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var EventPluginRegistry = __webpack_require__(60);
	var EventPluginUtils = __webpack_require__(61);
	var ReactErrorUtils = __webpack_require__(62);
	
	var accumulateInto = __webpack_require__(63);
	var forEachAccumulated = __webpack_require__(64);
	var invariant = __webpack_require__(9);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;
	
	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }
	
	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][key];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var invariant = __webpack_require__(9);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
	
	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	
	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	
	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var ReactErrorUtils = __webpack_require__(62);
	
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var invariant = __webpack_require__(9);
	
	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
	
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }
	
	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 64 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}
	
	module.exports = forEachAccumulated;

/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var PooledClass = __webpack_require__(67);
	
	var getTextContentAccessor = __webpack_require__(68);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var invariant = __webpack_require__(9);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(65);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(70);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var PooledClass = __webpack_require__(67);
	
	var emptyFunction = __webpack_require__(13);
	var warning = __webpack_require__(12);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	
	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	_assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }
	
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(70);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(59);
	var EventPropagators = __webpack_require__(58);
	var ExecutionEnvironment = __webpack_require__(65);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(73);
	var SyntheticEvent = __webpack_require__(70);
	
	var getEventTarget = __webpack_require__(86);
	var isEventSupported = __webpack_require__(87);
	var isTextInputElement = __webpack_require__(88);
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}
	
	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}
	
	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}
	
	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	
	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }
	
	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}
	
	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }
	
	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52),
	    _assign = __webpack_require__(5);
	
	var CallbackQueue = __webpack_require__(74);
	var PooledClass = __webpack_require__(67);
	var ReactFeatureFlags = __webpack_require__(75);
	var ReactReconciler = __webpack_require__(76);
	var Transaction = __webpack_require__(85);
	
	var invariant = __webpack_require__(9);
	
	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PooledClass = __webpack_require__(67);
	
	var invariant = __webpack_require__(9);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	
	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);
	
	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };
	
	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };
	
	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };
	
	  /**
	   * `PooledClass` looks for this.
	   */
	
	
	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };
	
	  return CallbackQueue;
	}();
	
	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 75 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(77);
	var ReactInstrumentation = __webpack_require__(79);
	
	var warning = __webpack_require__(12);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(78);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }
	
	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }
	
	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var invariant = __webpack_require__(9);
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// Trust the developer to only use ReactInstrumentation with a __DEV__ check
	
	var debugTool = null;
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(80);
	  debugTool = ReactDebugTool;
	}
	
	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactInvalidSetStateWarningHook = __webpack_require__(81);
	var ReactHostOperationHistoryHook = __webpack_require__(82);
	var ReactComponentTreeHook = __webpack_require__(27);
	var ExecutionEnvironment = __webpack_require__(65);
	
	var performanceNow = __webpack_require__(83);
	var warning = __webpack_require__(12);
	
	var hooks = [];
	var didHookThrowForEvent = {};
	
	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}
	
	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}
	
	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;
	
	var lifeCycleTimerHasWarned = false;
	
	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}
	
	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}
	
	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();
	
	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }
	
	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }
	
	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}
	
	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}
	
	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;
	
	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
	
	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}
	
	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}
	
	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
	
	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }
	
	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}
	
	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }
	
	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }
	
	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};
	
	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;
	
	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}
	
	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var warning = __webpack_require__(12);
	
	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;
	
	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}
	
	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};
	
	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var history = [];
	
	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }
	
	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};
	
	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(84);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(65);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var invariant = __webpack_require__(9);
	
	var OBSERVED_ERROR = {};
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	
	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }
	
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(65);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	
	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }
	
	  if (nodeName === 'textarea') {
	    return true;
	  }
	
	  return false;
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 89 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	
	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(58);
	var ReactDOMComponentTree = __webpack_require__(51);
	var SyntheticMouseEvent = __webpack_require__(91);
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);
	
	    return [leave, enter];
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(92);
	var ViewportMetrics = __webpack_require__(93);
	
	var getEventModifierState = __webpack_require__(94);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(70);
	
	var getEventTarget = __webpack_require__(86);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 93 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(53);
	
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,
	
	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(97);
	var ReactDOMIDOperations = __webpack_require__(108);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(98);
	var Danger = __webpack_require__(104);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactInstrumentation = __webpack_require__(79);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(101);
	var setInnerHTML = __webpack_require__(100);
	var setTextContent = __webpack_require__(102);
	
	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});
	
	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}
	
	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}
	
	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}
	
	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}
	
	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}
	
	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}
	
	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
	
	  replaceDelimitedText: replaceDelimitedText,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = __webpack_require__(99);
	var setInnerHTML = __webpack_require__(100);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(101);
	var setTextContent = __webpack_require__(102);
	
	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function toString() {
	  return this.node.nodeName;
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(65);
	var DOMNamespaces = __webpack_require__(99);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(101);
	
	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 101 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(65);
	var escapeTextContentForBrowser = __webpack_require__(103);
	var setInnerHTML = __webpack_require__(100);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	
	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */
	
	'use strict';
	
	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html
	
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var DOMLazyTree = __webpack_require__(98);
	var ExecutionEnvironment = __webpack_require__(65);
	
	var createNodesFromMarkup = __webpack_require__(105);
	var emptyFunction = __webpack_require__(13);
	var invariant = __webpack_require__(9);
	
	var Danger = {
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;
	
	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(65);
	
	var createArrayFromMixed = __webpack_require__(106);
	var getMarkupWrap = __webpack_require__(107);
	var invariant = __webpack_require__(9);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(9);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(65);
	
	var invariant = __webpack_require__(9);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(97);
	var ReactDOMComponentTree = __webpack_require__(51);
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};
	
	module.exports = ReactDOMIDOperations;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52),
	    _assign = __webpack_require__(5);
	
	var AutoFocusUtils = __webpack_require__(110);
	var CSSPropertyOperations = __webpack_require__(112);
	var DOMLazyTree = __webpack_require__(98);
	var DOMNamespaces = __webpack_require__(99);
	var DOMProperty = __webpack_require__(53);
	var DOMPropertyOperations = __webpack_require__(120);
	var EventPluginHub = __webpack_require__(59);
	var EventPluginRegistry = __webpack_require__(60);
	var ReactBrowserEventEmitter = __webpack_require__(122);
	var ReactDOMComponentFlags = __webpack_require__(54);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactDOMInput = __webpack_require__(125);
	var ReactDOMOption = __webpack_require__(128);
	var ReactDOMSelect = __webpack_require__(129);
	var ReactDOMTextarea = __webpack_require__(130);
	var ReactInstrumentation = __webpack_require__(79);
	var ReactMultiChild = __webpack_require__(131);
	var ReactServerRenderingTransaction = __webpack_require__(150);
	
	var emptyFunction = __webpack_require__(13);
	var escapeTextContentForBrowser = __webpack_require__(103);
	var invariant = __webpack_require__(9);
	var isEventSupported = __webpack_require__(87);
	var shallowEqual = __webpack_require__(140);
	var validateDOMNesting = __webpack_require__(153);
	var warning = __webpack_require__(12);
	
	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};
	
	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}
	
	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}
	
	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}
	
	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}
	
	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;
	
	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }
	
	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;
	
	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	var globalIdCounter = 1;
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }
	
	    assertValidProps(this, props);
	
	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }
	
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  getHostNode: function () {
	    return getNode(this);
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }
	
	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;
	
	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },
	
	  getPublicInstance: function () {
	    return getNode(this);
	  }
	
	};
	
	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(51);
	
	var focusNode = __webpack_require__(111);
	
	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 111 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(113);
	var ExecutionEnvironment = __webpack_require__(65);
	var ReactInstrumentation = __webpack_require__(79);
	
	var camelizeStyleName = __webpack_require__(114);
	var dangerousStyleValue = __webpack_require__(116);
	var hyphenateStyleName = __webpack_require__(117);
	var memoizeStringOnly = __webpack_require__(119);
	var warning = __webpack_require__(12);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	
	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };
	
	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }
	
	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };
	
	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }
	
	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }
	
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 113 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(115);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 115 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(113);
	var warning = __webpack_require__(12);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(118);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 118 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 119 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(53);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactInstrumentation = __webpack_require__(79);
	
	var quoteAttributeValueForBrowser = __webpack_require__(121);
	var warning = __webpack_require__(12);
	
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },
	
	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(103);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var EventPluginRegistry = __webpack_require__(60);
	var ReactEventEmitterMixin = __webpack_require__(123);
	var ViewportMetrics = __webpack_require__(93);
	
	var getVendorPrefixedEventName = __webpack_require__(124);
	var isEventSupported = __webpack_require__(87);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(59);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(65);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52),
	    _assign = __webpack_require__(5);
	
	var DOMPropertyOperations = __webpack_require__(120);
	var LinkedValueUtils = __webpack_require__(126);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(73);
	
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	
	      var owner = inst._currentElement._owner;
	
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	
	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;
	
	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        node.defaultValue = '' + props.defaultValue;
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.
	
	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }
	
	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var React = __webpack_require__(3);
	var ReactPropTypesSecret = __webpack_require__(127);
	
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 127 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var React = __webpack_require__(3);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactDOMSelect = __webpack_require__(129);
	
	var warning = __webpack_require__(12);
	var didWarnInvalidOptionChildren = false;
	
	function flattenChildren(children) {
	  var content = '';
	
	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });
	
	  return content;
	}
	
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }
	
	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;
	
	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }
	
	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }
	
	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },
	
	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = flattenChildren(props.children);
	
	    if (content) {
	      hostProps.children = content;
	    }
	
	    return hostProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var LinkedValueUtils = __webpack_require__(126);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(73);
	
	var warning = __webpack_require__(12);
	
	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },
	
	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52),
	    _assign = __webpack_require__(5);
	
	var LinkedValueUtils = __webpack_require__(126);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(73);
	
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;
	
	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }
	
	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }
	
	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.
	    node.value = node.textContent; // Detach value from defaultValue
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var ReactComponentEnvironment = __webpack_require__(132);
	var ReactInstanceMap = __webpack_require__(133);
	var ReactInstrumentation = __webpack_require__(79);
	
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactReconciler = __webpack_require__(76);
	var ReactChildReconciler = __webpack_require__(134);
	
	var emptyFunction = __webpack_require__(13);
	var flattenChildren = __webpack_require__(149);
	var invariant = __webpack_require__(9);
	
	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}
	
	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }
	
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },
	
	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var invariant = __webpack_require__(9);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(76);
	
	var instantiateReactComponent = __webpack_require__(135);
	var KeyEscapeUtils = __webpack_require__(145);
	var shouldUpdateReactComponent = __webpack_require__(141);
	var traverseAllChildren = __webpack_require__(146);
	var warning = __webpack_require__(12);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(27);
	}
	
	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(27);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	
	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52),
	    _assign = __webpack_require__(5);
	
	var ReactCompositeComponent = __webpack_require__(136);
	var ReactEmptyComponent = __webpack_require__(142);
	var ReactHostComponent = __webpack_require__(143);
	
	var getNextDebugID = __webpack_require__(144);
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	
	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52),
	    _assign = __webpack_require__(5);
	
	var React = __webpack_require__(3);
	var ReactComponentEnvironment = __webpack_require__(132);
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactErrorUtils = __webpack_require__(62);
	var ReactInstanceMap = __webpack_require__(133);
	var ReactInstrumentation = __webpack_require__(79);
	var ReactNodeTypes = __webpack_require__(137);
	var ReactReconciler = __webpack_require__(76);
	
	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(138);
	}
	
	var emptyObject = __webpack_require__(21);
	var invariant = __webpack_require__(9);
	var shallowEqual = __webpack_require__(140);
	var shouldUpdateReactComponent = __webpack_require__(141);
	var warning = __webpack_require__(12);
	
	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}
	
	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}
	
	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }
	
	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;
	
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    var updateQueue = transaction.getUpdateQueue();
	
	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;
	
	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },
	
	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	
	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }
	
	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }
	
	    return markup;
	  },
	
	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;
	
	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }
	
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    var willReceive = false;
	    var nextContext;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;
	
	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;
	
	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;
	
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }
	
	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;
	
	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }
	
	    return renderedElement;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    return renderedElement;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var React = __webpack_require__(3);
	
	var invariant = __webpack_require__(9);
	
	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var ReactPropTypeLocationNames = __webpack_require__(139);
	var ReactPropTypesSecret = __webpack_require__(127);
	
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(27);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(27);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 140 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 141 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 142 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52),
	    _assign = __webpack_require__(5);
	
	var invariant = __webpack_require__(9);
	
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around host tags.
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};
	
	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 144 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var nextDebugID = 1;
	
	function getNextDebugID() {
	  return nextDebugID++;
	}
	
	module.exports = getNextDebugID;

/***/ },
/* 145 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var ReactCurrentOwner = __webpack_require__(11);
	var REACT_ELEMENT_TYPE = __webpack_require__(147);
	
	var getIteratorFn = __webpack_require__(148);
	var invariant = __webpack_require__(9);
	var KeyEscapeUtils = __webpack_require__(145);
	var warning = __webpack_require__(12);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 147 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var KeyEscapeUtils = __webpack_require__(145);
	var traverseAllChildren = __webpack_require__(146);
	var warning = __webpack_require__(12);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(27);
	}
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(27);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	
	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var PooledClass = __webpack_require__(67);
	var Transaction = __webpack_require__(85);
	var ReactInstrumentation = __webpack_require__(79);
	var ReactServerUpdateQueue = __webpack_require__(151);
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	var noopCallbackQueue = {
	  enqueue: function () {}
	};
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},
	
	  checkpoint: function () {},
	
	  rollback: function () {}
	};
	
	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ReactUpdateQueue = __webpack_require__(152);
	
	var warning = __webpack_require__(12);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */
	
	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);
	
	    this.transaction = transaction;
	  }
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	
	
	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };
	
	  return ReactServerUpdateQueue;
	}();
	
	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(133);
	var ReactInstrumentation = __webpack_require__(79);
	var ReactUpdates = __webpack_require__(73);
	
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }
	
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var emptyFunction = __webpack_require__(13);
	var warning = __webpack_require__(12);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var DOMLazyTree = __webpack_require__(98);
	var ReactDOMComponentTree = __webpack_require__(51);
	
	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var invariant = __webpack_require__(9);
	
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }
	
	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }
	
	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }
	
	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}
	
	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	
	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}
	
	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;
	
	  return inst._hostParent;
	}
	
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}
	
	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52),
	    _assign = __webpack_require__(5);
	
	var DOMChildrenOperations = __webpack_require__(97);
	var DOMLazyTree = __webpack_require__(98);
	var ReactDOMComponentTree = __webpack_require__(51);
	
	var escapeTextContentForBrowser = __webpack_require__(103);
	var invariant = __webpack_require__(9);
	var validateDOMNesting = __webpack_require__(153);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	
	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};
	
	_assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }
	
	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },
	
	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },
	
	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var ReactUpdates = __webpack_require__(73);
	var Transaction = __webpack_require__(85);
	
	var emptyFunction = __webpack_require__(13);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var EventListener = __webpack_require__(159);
	var ExecutionEnvironment = __webpack_require__(65);
	var PooledClass = __webpack_require__(67);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(73);
	
	var getEventTarget = __webpack_require__(86);
	var getUnboundedScrollPosition = __webpack_require__(160);
	
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(13);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 160 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(53);
	var EventPluginHub = __webpack_require__(59);
	var EventPluginUtils = __webpack_require__(61);
	var ReactComponentEnvironment = __webpack_require__(132);
	var ReactEmptyComponent = __webpack_require__(142);
	var ReactBrowserEventEmitter = __webpack_require__(122);
	var ReactHostComponent = __webpack_require__(143);
	var ReactUpdates = __webpack_require__(73);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var CallbackQueue = __webpack_require__(74);
	var PooledClass = __webpack_require__(67);
	var ReactBrowserEventEmitter = __webpack_require__(122);
	var ReactInputSelection = __webpack_require__(163);
	var ReactInstrumentation = __webpack_require__(79);
	var Transaction = __webpack_require__(85);
	var ReactUpdateQueue = __webpack_require__(152);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },
	
	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },
	
	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(164);
	
	var containsNode = __webpack_require__(166);
	var focusNode = __webpack_require__(111);
	var getActiveElement = __webpack_require__(169);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(65);
	
	var getNodeForCharacterOffset = __webpack_require__(165);
	var getTextContentAccessor = __webpack_require__(68);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var isTextNode = __webpack_require__(167);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(168);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 168 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 169 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};
	
	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(58);
	var ExecutionEnvironment = __webpack_require__(65);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactInputSelection = __webpack_require__(163);
	var SyntheticEvent = __webpack_require__(70);
	
	var getActiveElement = __webpack_require__(169);
	var isTextInputElement = __webpack_require__(88);
	var shallowEqual = __webpack_require__(140);
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};
	
	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var EventListener = __webpack_require__(159);
	var EventPropagators = __webpack_require__(58);
	var ReactDOMComponentTree = __webpack_require__(51);
	var SyntheticAnimationEvent = __webpack_require__(173);
	var SyntheticClipboardEvent = __webpack_require__(174);
	var SyntheticEvent = __webpack_require__(70);
	var SyntheticFocusEvent = __webpack_require__(175);
	var SyntheticKeyboardEvent = __webpack_require__(176);
	var SyntheticMouseEvent = __webpack_require__(91);
	var SyntheticDragEvent = __webpack_require__(179);
	var SyntheticTouchEvent = __webpack_require__(180);
	var SyntheticTransitionEvent = __webpack_require__(181);
	var SyntheticUIEvent = __webpack_require__(92);
	var SyntheticWheelEvent = __webpack_require__(182);
	
	var emptyFunction = __webpack_require__(13);
	var getEventCharCode = __webpack_require__(177);
	var invariant = __webpack_require__(9);
	
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;
	
	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});
	
	var onClickListeners = {};
	
	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(70);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
	
	module.exports = SyntheticAnimationEvent;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(70);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(92);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(92);
	
	var getEventCharCode = __webpack_require__(177);
	var getEventKey = __webpack_require__(178);
	var getEventModifierState = __webpack_require__(94);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 177 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(177);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(91);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(92);
	
	var getEventModifierState = __webpack_require__(94);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(70);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
	
	module.exports = SyntheticTransitionEvent;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(91);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var DOMLazyTree = __webpack_require__(98);
	var DOMProperty = __webpack_require__(53);
	var React = __webpack_require__(3);
	var ReactBrowserEventEmitter = __webpack_require__(122);
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactDOMContainerInfo = __webpack_require__(184);
	var ReactDOMFeatureFlags = __webpack_require__(185);
	var ReactFeatureFlags = __webpack_require__(75);
	var ReactInstanceMap = __webpack_require__(133);
	var ReactInstrumentation = __webpack_require__(79);
	var ReactMarkupChecksum = __webpack_require__(186);
	var ReactReconciler = __webpack_require__(76);
	var ReactUpdateQueue = __webpack_require__(152);
	var ReactUpdates = __webpack_require__(73);
	
	var emptyObject = __webpack_require__(21);
	var instantiateReactComponent = __webpack_require__(135);
	var invariant = __webpack_require__(9);
	var setInnerHTML = __webpack_require__(100);
	var shouldUpdateReactComponent = __webpack_require__(141);
	var warning = __webpack_require__(12);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}
	
	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}
	
	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}
	
	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}
	
	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });
	
	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(153);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 185 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(187);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 187 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 188 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.4.1';

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(52);
	
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactDOMComponentTree = __webpack_require__(51);
	var ReactInstanceMap = __webpack_require__(133);
	
	var getHostComponentFromComposite = __webpack_require__(190);
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	
	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }
	
	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactNodeTypes = __webpack_require__(137);
	
	function getHostComponentFromComposite(inst) {
	  var type;
	
	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }
	
	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}
	
	module.exports = getHostComponentFromComposite;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(183);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(53);
	var EventPluginRegistry = __webpack_require__(60);
	var ReactComponentTreeHook = __webpack_require__(27);
	
	var warning = __webpack_require__(12);
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,
	
	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};
	
	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;
	
	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}
	
	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }
	
	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}
	
	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactComponentTreeHook = __webpack_require__(27);
	
	var warning = __webpack_require__(12);
	
	var didWarnValueNull = false;
	
	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(53);
	var ReactComponentTreeHook = __webpack_require__(27);
	
	var warning = __webpack_require__(12);
	
	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	
	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }
	
	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }
	
	  return true;
	}
	
	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];
	
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }
	
	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	
	  warnInvalidARIAProps(debugID, element);
	}
	
	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};
	
	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "demo.html";

/***/ }
/******/ ])
});
;
//# sourceMappingURL=example.js.map